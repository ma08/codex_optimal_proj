["import re\n\ndef asterisc_it(s):\n    if   isinstance(s,int):  s=str(s)\n    elif isinstance(s,list): s=''.join(map(str,s))\n    return re.sub(r'(?<=[02468])(?=[02468])', '*', s)", "def asterisc_it(n): \n    if type(n) == list: n = \"\".join(str(i) for i in n)\n    if type(n) == int : n = str(n)\n    return \"\".join([a+\"*\" if int(a)%2==0 and int(b)%2 == 0 else a for a,b in zip(n,n[1:])]) + n[-1]", "import re\ndef asterisc_it(n): \n    s = ''.join(map(str, n)) if isinstance(n, list) else str(n)\n    return re.sub('([02468])(?=[02468])', r'\\1*', s)", "def asterisc_it(n):     \n    raw = [i for i in list(str(n)) if i.isalnum()]\n    txt = '{}'.format(raw[0])\n    for i in range(len(raw))[1:]:\n        if int(raw[i])%2 == 0:\n            if int(raw[i-1]) % 2 == 0:\n                txt += '*'+raw[i]\n            else: txt += raw[i]        \n        else: txt += raw[i]            \n    return txt", "def asterisc_it(n): \n    n = x(n)\n    h = n[1:]\n    return n[0] + ''.join([[e,'*'+e][all((not int(e)%2,not int(n[i-1])%2))] for i,e in enumerate(h,1)])\n    \nx = lambda c: str(c) if not type(c) is list else ''.join(map(str,c))", "def asterisc_it(n): \n    return \"\".join([\"*\" + str(char) if i > 0 and (int(\"\".join(map(str, n))[i-1] if isinstance(n, list) else str(n)[i-1])%2==0) and (int(\"\".join(map(str, n))[i] if isinstance(n, list) else str(n)[i])%2==0) else str(char) for i,char in enumerate(\"\".join(map(str, n)) if isinstance(n, list) else str(n))])", "def asterisc_it(n):\n    asterisk_str = \"\"\n    if type(n) == int:\n        n = str(n)\n    elif type(n) == list:\n        n = ''.join(map(str,n))\n    \n    for i,j in enumerate(range(1,len(n))):\n        asterisk_str += n[i]\n        print(i,j)\n        if int(n[i]) % 2 == 0 and int(n[j]) % 2 == 0:\n            asterisk_str += \"*\"\n    \n    return asterisk_str+n[-1]", "def asterisc_it(n_sequence: str) -> str:\n    \"\"\" Insert an asterisk (*) between every pair of even digits. \"\"\"\n    _result = \"\"\n\n    if type(n_sequence) is int:\n        n_sequence = str(n_sequence)\n    else:\n        n_sequence = \"\".join(str(_) for _ in n_sequence)\n\n    for ix, num in enumerate(n_sequence):\n        if ix < len(n_sequence) - 1:\n            if not int(num) % 2 and not int(n_sequence[ix+1]) % 2:\n                _result += f\"{num}*\"\n            else:\n                _result += str(num)\n        else:\n            _result += str(num)\n\n    return _result\n", "def asterisc_it(n): \n    s, out = '', []\n    if type(n) is int: s = str(n)\n    elif type(n) is list: s = ''.join([str(n[x]) for x in range(len(n))])\n    else: s = str(n)\n    return s if len(s) <= 1 else (''.join([(s[x] + '*' if int(s[x]) % 2 == 0 and int(s[x+1]) % 2 == 0 else s[x]) for x in range(len(s)-1)])) + s[-1] ", "def asterisc_it(n): \n    if isinstance(n, list):\n        for i in range(len(n)):\n            n[i] = str(n[i])\n        n_str = ''.join(n)\n    else:\n        n_str = str(n)\n        \n    prev = False\n    result = \"\"\n    \n    for s in n_str:\n        if int(s) % 2 == 0:\n            if prev == True:\n               result = result + '*' \n            prev = True\n        else:\n            prev = False\n        result = result + s\n        \n    return result"]