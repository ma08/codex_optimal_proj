["def triple_trouble(one, two, three):\n    return ''.join(''.join(a) for a in zip(one, two, three))\n", "def triple_trouble(one, two, three):\n    return \"\".join(a+b+c for a,b,c in zip(one,two,three))", "def triple_trouble(*args):\n        return \"\".join(\"\".join(a) for a in zip(*args))", "def triple_trouble(one, two, three):\n    ans = ''\n    for i in range(len(one)):\n        ans+=one[i]\n        ans+=two[i]\n        ans+=three[i]\n    return ans", "def triple_trouble(*args):\n    return ''.join(sum(zip(*args), ()))", "def triple_trouble(one, two, three):\n    return ''.join([one[i] + two[i] + three[i] for i in range(len(one))])", "def triple_trouble(one, two, three):\n    a = one.split(\" \")\n    a = map(lambda x, y, z: x + y + z, one, two, three)\n    return \"\".join(a)", "def triple_trouble(*args):\n    return \"\".join(map(\"\".join, zip(*args)))", "def triple_trouble(one, two, three):\n    ans = ''\n    for x in range(len(one)):\n        ans += one[x] + two[x] + three[x]\n    return ans", "def triple_trouble(one, two, three):\n    return ''.join(''.join(v) for v in zip(one,two,three))", "def triple_trouble(one, two, three):\n    count = 0\n    length = len(one)\n    string = \"\"\n    while count < length:\n        string += one[count] + two[count] + three[count]\n        count += 1\n    return string\n    \n    #your code here\n", "def triple_trouble(one, two, three):\n    return ''.join(''.join(s) for s in zip(one, two, three))", "def triple_trouble(one, two, three):\n    return ''.join(''.join(i) for i in zip(one, two, three))", "def triple_trouble(one, two, three):\n    a = \"\"\n    for i in range(len(one)):\n        a += one[i] + two[i] + three[i]\n    return a", "def triple_trouble(one, two, three):\n    i = 0 \n    t = ''\n    while i < len(three):\n        t = t + one[i] + two[i] +three [i]         \n        i +=1\n    return(t)", "triple_trouble = lambda *args: ''.join(''.join(z) for z in zip(*args)) ", "triple_trouble = lambda r, s, t: ''.join([c + s[i] + t[i] for i, c in enumerate(list(r))])", "def triple_trouble(*l):\n    return ''.join([''.join(s) for s in zip(*l)])", "def triple_trouble(*args):\n    return ''.join(''.join(tupl) for tupl in zip(*args))", "def triple_trouble(one, two, three):\n    return \"\".join(map(\"\".join, zip(list(one), list(two), list(three))))", "def triple_trouble(one, two, three):\n    from functools import reduce\n    return ''.join(reduce(lambda x, y: x + y, zip(one, two, three)))", "def triple_trouble(one, two, three):\n    return ''.join([j for i in zip(*[one, two, three]) for j in i])", "from typing import Tuple\n\ndef triple_trouble(*args: Tuple[str]) -> str:\n    \"\"\" Get a string that combines all of the letters of the three inputed strings in groups. \"\"\"\n    return \"\".join(list(map(\"\".join, zip(*args))))", "from itertools import chain\ndef triple_trouble(one, two, three):\n    return ''.join(c for c in chain.from_iterable(zip(one,two,three)))", "def triple_trouble(one, two, three):\n    return ''.join(['{}{}{}'.format(one[x],two[x],three[x]) for x in range(len(one))])", "def triple_trouble(one, two, three):\n    #your code here\n    four = \"\"\n    for x in range(len(one)):\n        four += one[x]+two[x]+three[x]\n    return four", "def triple_trouble(one, two, three):\n    ret = \"\"\n    for i in range(len(one)):\n        ret = ret + one[i] + two[i] + three[i]\n    return ret", "def triple_trouble(one, two, three):\n    return ''.join([''.join([one[i],two[i],three[i]]) for i in range(len(one))])\n    #your code here\n", "def triple_trouble(one, two, three):\n    return ''.join(one[i] + two[i] + three[i] for i in range(len(one)))", "triple_trouble=lambda o, t, h: \"\".join(\"\".join([a,t[i],h[i]]) for i,a in enumerate(o))", "def triple_trouble(one, two, three):\n    #your code here\n    res=len(one) \n    l=''\n    for i in range(res):\n        result=one[i] + two[i] + three[i]\n        l=l+result\n    return l", "def triple_trouble(one, two, three):\n    x = list(zip(one, two, three))\n    result = []\n    for item in x:\n        result.append(\"\".join(item))\n    return \"\".join(result)\n             \n    \n    \n\n\n", "def triple_trouble(one, two, three):\n    result = \"\"\n    n = 0\n    while n < len(one):\n        result += one[n] + two[n] + three[n]\n        n+=1\n        \n            \n                \n    return result\n", "def triple_trouble(one, two, three):\n    output = ''\n    for first, second, third in zip(one, two, three):\n        output = ''.join([output, first, second, third])\n    return output\n    #your code here\n", "def triple_trouble(one, two, three):\n    new_string = ''\n    for letter in range(len(one)):\n        new_string += one[letter]\n        new_string += two[letter] \n        new_string += three[letter]\n    return new_string", "def triple_trouble(one, two, three):\n    str1 = ''\n    for i in range(len(one)):\n        str1 += one[i]\n        str1 += two[i]\n        str1 += three[i]\n    return str1\n\n", "def triple_trouble(one, two, three):\n    x= list(zip(one,two,three))\n    l1= [''.join(y) for y in x]\n    return ''.join(l1)", "def triple_trouble(one, two, three):\n    result = \"\"\n    for i, c in enumerate(one):\n        result += c + two[i] + three[i]\n    return result", "def triple_trouble(one, two, three):\n    return ''.join(''.join(set) for set in list(zip(one, two, three)))", "def triple_trouble(one, two, three):\n    list = []\n    for x in range(len(one)):\n        list.extend((one[x],two[x],three[x]))\n    return ''.join(list)\n\n", "def triple_trouble(one, two, three):\n    x = [one, two, three]\n    y = max(x, key=len)\n    z = len(y)\n    a = ''\n    for k in range(0,z):\n        a += x[0][k] + x[1][k] + x[2][k]\n    return a\n    #your code here\n", "def triple_trouble(one, two, three):\n    result = ''\n    for i in range(len(one)):\n        segm = one[i] + two[i] + three[i]\n        result += segm\n    return result", "def triple_trouble(one, two, three):\n    word=\"\"\n    for i in range(0,len(one)):\n        word+= one[i]+two[i]+three[i]\n    return word\n", "def triple_trouble(one, two, three):\n    i = 0\n    list123 = []\n    while i < len(one):\n        list123.append(one[i])\n        list123.append(two[i])\n        list123.append(three[i])\n        i += 1\n    return ''.join(list123)\n", "def triple_trouble(one, two, three):\n    L = len(one)\n    result = []\n    for x in range(L):\n        result.append(one[x])\n        result.append(two[x])\n        result.append(three[x])\n    return \"\".join(result)", "def triple_trouble(one, two, three):\n    s = ''\n    a = 0\n    b = [one, two, three]\n    for j in one:\n        for i in b:\n            s += i[a]\n        a += 1\n    return s\n", "def triple_trouble(one, two, three):\n    result = ''\n    for i in range(len(one)):\n        result = result + one[i] + two[i] + three[i]\n        print(result)\n    return result", "def triple_trouble(one, two, three):\n    collector = \"\"\n    size = 0\n    \n    while size < len(one):\n        collector += one[size]+two[size]+three[size]\n        size += 1\n    \n    return collector", "def triple_trouble(one, two, three):\n    return \"\".join(lttr1 + lttr2 + lttr3 for lttr1, lttr2, lttr3 in zip(one, two, three))", "def triple_trouble(one, two, three):\n    list_word = []\n    for i in range(len(one)):\n        list_word.append(one[i])\n        list_word.append(two[i])\n        list_word.append(three[i])\n    return \"\".join(list_word)", "def triple_trouble(one, two, three):\n    result = ''\n    x = 0\n    for i in one:\n        result =result+i+two[x]+three[x]\n        x = x+1\n        \n    return result\n", "def triple_trouble(one, two, three):\n    return ''.join([f'{one[x]}{two[x]}{three[x]}' for x in range(len(one))])", "def triple_trouble(one, two, three):\n    return ''.join(''.join(el) for el in zip(one, two, three))", "def triple_trouble(one, two, three):\n    strin = ''\n    \n    for el in range(len(one)):\n        strin += one[el] + two[el] + three[el]\n    \n    return strin", "def triple_trouble(one, two, three):\n    res = ''\n    a = one, two, three\n    for i in range(len(one)):\n        res += one[i]\n        res += two[i]\n        res += three[i]\n    return res", "def triple_trouble(one, two, three):\n    car=''\n    for i in range(len(one)):\n        car+=one[i]+two[i]+three[i]\n    return car", "triple_trouble = lambda *a:''.join(''.join(x) for x in zip(*a))", "def triple_trouble(one, two, three):\n    result_str = \"\"\n    for o, tw, th in zip(one, two, three):\n        result_str += o + tw + th\n    return result_str\n    #your code here\n", "def triple_trouble(one, two, three):\n    list = map(lambda a,b,c: a+b+c, one,two, three)\n    return \"\".join(list)", "def triple_trouble(one, two, three):\n    newStr = ''\n    for i in range(len(one)):\n        newStr += one[i] + two[i] + three[i]\n    return newStr", "def triple_trouble(a, b, c):\n    r = \"\"\n    for i in range(len(a)): r += a[i]+b[i]+c[i]\n    return r", "def triple_trouble(one, two, three):\n    tot = ''\n    for x in range(len(one)):\n        tot += one[x] + two[x] + three[x]\n    return tot", "def triple_trouble(a, b, c):\n    s = \"\"\n    for i in range(len(a)):\n        s+=a[i]+b[i]+c[i]\n    return s    ", "def triple_trouble(one,\n                   two,\n                   three):\n\n    result = \"\"\n    for i in range(len(one)):\n        result += one[i] + two[i] + three[i]\n\n    return result\n", "def triple_trouble(one, two, three):\n\n    my_list = []\n    for i in range(len(one)):\n        my_list.append((one[i] + two[i] + three[i]))\n\n    final = ''.join(my_list)\n    \n    return final", "def triple_trouble(one, two, three):\n    return ''.join(''.join(tuple) for tuple in list(zip(one,two,three)))", "def triple_trouble(one, two, three):\n    output = ''\n    for x in range(len(one)):\n        output += one[x]\n        output += two[x]\n        output += three[x]\n    return output", "triple_trouble = lambda one,two,three : ''.join([f'{one[i]}{two[i]}{three[i]}' for i in range(len(one))])\n", "def triple_trouble(one, two, three):\n    tup = list(zip(one, two, three))\n    out = list(sum(tup, ()))\n    return ''.join(out)", "def triple_trouble(one, two, three):\n    Liste=list()\n    indices=list(range(len(one)))\n    #print(indices)\n    for index in indices:\n        Kombi= one[index]+two[index]+three[index]\n        #print(Kombi)\n        Liste.append(Kombi)\n\n    Liste=\"\".join(Liste)\n    return Liste\n", "def triple_trouble(one, two, three):\n    Trible=''\n    for x in range(len(one)):\n        Trible += one[x]+two[x]+three[x]\n    return Trible\n    #your code here\n", "triple_trouble = lambda a,b,c : \"\".join([a[i]+b[i]+c[i] for i in range(0,len(a))])", "def triple_trouble(one, two, three):\n    result = ''\n    counter = 0\n    while counter < len(one):\n        result += one[counter] + two[counter] + three[counter]\n        counter += 1\n    return result", "def triple_trouble(one, two, three):\n    x = ''\n    a = list(one)\n    b = list(two)\n    c = list(three)\n    for i in range(0, max(len(a), len(b), len(c))):\n        x = x + a[i] + b[i] + c[i]\n    return x", "def triple_trouble(one, two, three):\n    soln = ''\n    for i in range(len(one)):\n        soln += one[i] + two[i] + three[i]\n    return soln", "def triple_trouble(one, two, three):\n    x = []\n    for i in range(len(one)):\n        x.append(one[i])\n        x.append(two[i])\n        x.append(three[i])\n    return ''.join(x)", "def triple_trouble(one, two, three):\n        return \"\".join(one[n]+two[n]+three[n] for n in range(len(one)))", "def triple_trouble(one, two, three):\n    new_line = \"\"\n    for i in range(0, len(one)):\n        new_line += one[i] + two[i] + three[i]\n    return new_line", "def triple_trouble(one, two, three):\n    combined = \"\"\n    i = 0\n    \n    for letter in range(len(one)):\n        combined += one[i] + two[i] + three[i]\n        i += 1\n        \n    return combined", "def triple_trouble(one, two, three):\n\n    counter = 0\n    res = ''\n    for i in one:\n        res += i\n        res += two[counter]\n        res += three[counter]\n        counter += 1\n    return res\n        \n        \n", "def triple_trouble(one, two, three):return \"\".join([\"\".join([x[i] for x in (one,two,three)]) for i in range(len(one))])", "def triple_trouble(one, two, three):\n    res = \"\"\n    for x in range(len(one)):\n        res += one[x]\n        res += two[x]\n        res += three[x]\n        \n    return res", "def triple_trouble(one, two, three):\n############################################################# \n###################################################   ####### \n###############################################   /~\\   #####\n############################################   _- `~~~', ####\n##########################################  _-~       )  ####\n#######################################  _-~          |  ####\n####################################  _-~            ;  #####\n##########################  __---___-~              |   #####\n#######################   _~   ,,                  ;  `,,  ##\n#####################  _-~    ;'                  |  ,'  ; ##\n###################  _~      '                    `~'   ; ###\n############   __---;                                 ,' ####\n########   __~~  ___                                ,' ######\n#####  _-~~   -~~ _                               ,' ########\n##### `-_         _                              ; ##########\n#######  ~~----~~~   ;                          ; ###########\n#########  /          ;                        ; ############\n#######  /             ;                      ; #############\n#####  /                `                    ; ##############\n###  /                                      ; ###############\n#                                            ################\n    str=\"\"\n    for n in range(len(one)):\n        str+=one[n]+two[n]+three[n]\n    return str", "def triple_trouble(one, two, three):\n    s = one + two + three\n    A = len(s)\n    B = len(one)\n    answ = \"\"\n    start = 0\n    for j in range(B):\n        for i in range(start,A,B):\n            answ += s[i]\n        start+=1\n    return answ\n", "def triple_trouble(one, two, three):\n    zipped = list(zip(one, two, three))\n    return ''.join('%s%s%s' % z for z in zipped)", "def triple_trouble(one, two, three):\n  \n    news = \"\"\n    for i in range (0,len(one)):\n        news =  news + one[i]+two[i]+three[i]\n    return news\n", "def triple_trouble(one, two, three):\n    arr = [one, two, three]\n    result = ''\n    \n    for i in range(len(arr[0])):\n        for j in range(3):\n            result += arr[j][i]\n    print(result)\n    return result", "def triple_trouble(one, two, three):\n    l=[]\n    for i in range(0,len(one)):\n        l.append(one[i]+two[i]+three[i])\n    return ''.join(l)", "def triple_trouble(one, two, three):\n    one = [item for item in one]\n    two = [item for item in two]\n    three = [item for item in three]\n    new =[]\n    for i in range(0,len(one)):\n        new.append(one[i]+two[i]+three[i])\n    return \"\".join(new)\n", "def triple_trouble(one, two, three):\n    \n    char = \"\"\n    for i, j, k in zip(one, two, three):\n        char += (str(i) + str(j) + str(k))\n    return char", "def triple_trouble(one, two, three):\n    new = \"\"\n    for j in range(0, len(one)):\n        name = one[j] + two[j] + three[j]\n        new += one[j] + two[j] + three[j]\n    return new\n\nziel = triple_trouble(\"burn\", \"reds\", \"roll\")\nprint(ziel)\n", "def triple_trouble(one: str, two: str, three: str) -> str:\n    return \"\".join([\"\".join(x) for x in zip(one, two, three)])", "def triple_trouble(one, two, three):\n    oneL = list(one) ; twoL = list(two) ; threeL = list(three)\n    returnArr = []\n    for i in range(len(oneL)):\n        returnArr.append(oneL[i]) ; returnArr.append(twoL[i]) ; returnArr.append(threeL[i])\n    return \"\".join(returnArr)", "def triple_trouble(one, two, three):\n    return ''.join(f'{one[i]}{two[i]}{three[i]}' for i in range(0,len(one)))", "def triple_trouble(one, two, three):\n    res = []\n    for i in range(len(one)):\n        res.append(one[i] + two[i] + three[i])\n    return ''.join(res)", "def triple_trouble(one, two, three):\n    result = \"\"\n    e = 0\n    while e < len(one):\n        result += one[e] + two[e] + three[e]\n        e += 1\n    return result", "def triple_trouble(one, two, three):\n    result = []\n    for pt1, pt2, pt3 in zip(one, two, three):\n        for i, j, k in zip(pt1, pt2, pt3):\n            result.append(i)\n            result.append(j)\n            result.append(k)\n    return \"\".join(result)"]