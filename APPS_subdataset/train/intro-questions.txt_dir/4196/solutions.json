["from bisect import bisect\n\ndef sieve(n):\n    sieve, primes = [0]*(n+1), []\n    for i in range(2, n+1):\n        if not sieve[i]:\n            primes.append(i) \n            for j in range(i**2, n+1, i): sieve[j] = 1\n    return primes\n\nPRIMES = sieve(1000000)\n\ndef summationOfPrimes(n):\n    return sum(PRIMES[:bisect(PRIMES, n)])", "def summationOfPrimes(primes):\n  return sum(i for i in range(2,primes+1) if all(i%j for j in range(2,int(i**.5)+1)))\n", "def summationOfPrimes(primes: int):\n    q = [2, ]\n    for i in range(3, primes + 1, 2):\n        for j in range(3, int(i ** 0.5) + 1, 2):\n            if i % j == 0:\n                break\n        else:\n            q.append(i)\n    return sum(q)", "from itertools import compress \ndef sieve(n):\n    r = [False,True] * (n//2) + [True] \n    r[1],r[2] = False,True \n    for i in range(3,int(n**.5)+1,2): \n        if r[i]:\n            r[i*i::2*i] = [False] * ((n+2*i-1-i*i)//(2*i))\n    r = list(compress(range(len(r)),r))\n    if r[-1] %2 == 0:\n        return r[:-1]\n    return r \n\nprimes = sieve(25000) \n\ndef summationOfPrimes(n): \n    l = 0\n    r = len(primes)-1 \n    res = 0 \n    while l<=r:\n        mid = l+(r-l)//2 \n        if primes[mid] == n:\n            return sum(primes[:mid+1])\n        elif primes[mid] < n:\n            res = max(mid+1,res)\n            l = mid+1\n        else:\n            r = mid-1 \n    return sum(primes[:res])", "import numpy as np\nfrom bisect import bisect\n\ns = np.ones(10000000)\ns[:2] = s[4::2] = 0\nfor i in range(3, int(len(s)**0.5) + 1, 2):\n    if s[i]:\n        s[i*i::i] = 0\np = [i for i, x in enumerate(s) if x]\n\ndef summationOfPrimes(n):\n      return sum(p[:bisect(p, n)])", "import math\ndef summationOfPrimes(primes):\n    s = 0\n    j = 0\n    while j<=primes:\n        if isprime(j):\n            s+=j\n        j+=1\n    return s-1\n  \n  \ndef isprime(n):\n    if n <=3:\n        return True\n    i = 2\n    while i <= math.sqrt(n):    \n        if n%i == 0:\n            return False\n        i += 1\n    return True", "def summationOfPrimes(p):\n    return sum([2]+[n for n in range(3,p+1,2) if all(n%i!=0 for i in range(2,n))])", "import math\ndef summationOfPrimes(primes):\n    ans = 0\n    for num in range(2,primes + 1):\n        if all(num%i!=0 for i in range(2, int(math.sqrt(num))+1)):\n            ans += num\n    return ans\n"]