["def is_anagram(test, original):\n    return sorted(original.lower()) == sorted(test.lower()) ", "def is_anagram(test, original):\n    return sorted(test.lower()) == sorted(original.lower())", "from collections import Counter\n# write the function is_anagram\ndef is_anagram(test, original):\n    return Counter(test.lower()) == Counter(original.lower())", "# In one line then \ndef is_anagram(test, original):\n    return sorted(original.lower()) == sorted(test.lower()) # Compare, returns either true or false", "# write the function is_anagram\ndef is_anagram(test, original):\n    return sorted(test.upper()) == sorted(original.upper())", "def is_anagram(test, original):\n    test_dict, original_dict = {}, {}\n    for i in test.lower():\n        test_dict[i] = test_dict.get(i, 0) + 1\n    for i in original.lower():\n        original_dict[i] = original_dict.get(i, 0) + 1\n        \n    return test_dict == original_dict", "def is_anagram(test, original):\n    if len(test) != len(original):\n        return False\n    \n    count = [0] * 26\n    \n    for i in range(len(test)):\n        count[(ord(test[i]) & 31) - 1] += 1\n        count[(ord(original[i]) & 31) - 1] -= 1\n\n    return not any(count)", "# write the function is_anagram\ndef is_anagram(test, original):\n    if len(test) != len(original):\n        return False\n    \n    alphabet = [0] * 26\n    \n    for i in range(len(test)):\n        alphabet[(ord(test[i]) & 31) - 1] += 1\n        alphabet[(ord(original[i]) & 31) - 1] -= 1\n\n    return not any(alphabet)", "# write the function is_anagram\ndef is_anagram(test, original):\n    a = sorted(test.lower())\n    b = sorted(original.lower())\n    c = ''.join(a)\n    d = ''.join(b)\n    if c == d:\n        return True\n    else:\n        return False\n", "# write the function is_anagram\ndef is_anagram(test, original):\n  #index = 0\n\n    go = len(test) == len(original)\n\n    arr = []\n\n    if go:\n    #print(True)\n        for i in test:\n            arr.append(i.lower() in original.lower()) # [True, True, False, ...]\n    \n        return False not in arr # Condition passed => True.  \n    else:\n        return False", "def is_anagram(test, original):\n    if len(test) != len(original):\n        return False\n    for l in test.lower():\n        if l not in original.lower():\n            return False\n    return True", "from operator import eq\nfrom collections import Counter\n\ndef is_anagram(test, original):\n    return eq(*map(Counter, map(str.lower, (test, original))))", "# write the function is_anagram\ndef is_anagram(test, original):\n    if len(test) != len(original): return False\n    return sorted(test.lower()) == sorted(original.lower())", "# write the function is_anagram\ndef is_anagram(test, original):\n    if sorted(test.lower()) == sorted(original.lower()):\n        return True\n    else:\n        return False", "is_anagram = lambda t, o: sorted(t.lower()) == sorted(o.lower())", "# write the function is_anagram\ndef is_anagram(test, original):\n    return sorted(list(test.lower())) == sorted(list(original.lower()))", "from operator import eq\nfrom collections import Counter\n\ndef is_anagram(test: str, original: str) -> bool:\n    \"\"\" Check if the two given parameters create an anagram. \"\"\"\n    return eq(*map(Counter, [test.lower(), original.lower()]))", "aprime = {'a': 2, 'c': 5, 'b': 3, 'e': 11, 'd': 7, 'g': 17, 'f': 13, 'i': 23, 'h': 19, 'k': 31, \n'j': 29, 'm': 41, 'l': 37, 'o': 47, 'n': 43, 'q': 59, 'p': 53, 's': 67, 'r': 61, 'u': 73, 't': 71, \n'w': 83, 'v': 79, 'y': 97, 'x': 89, 'z': 101}\n\ndef aprime_sum(str):\n    strChList = list(str.lower())\n    return sum([aprime[x] for x in strChList])\n\n# write the function is_anagram\ndef is_anagram(test, original):\n    if aprime_sum(test) == aprime_sum(original) : \n        return True\n    else: return False", "def is_anagram(test, original):\n    return set(original.lower()) == set(test.lower()) if len(test) == len(original) else False", "def is_anagram(test, original):\n    a = list(test.lower())\n    s = list(original.lower())\n    if len(a) != len(s):\n        return False\n    else:\n        for i in a:\n            cond = False\n            k = 0\n            while k != len(s) and cond == False:\n                if i == s[k]:\n                    a.remove(i)\n                    s.remove(i)\n                    cond = True\n                k += 1\n            if cond == False:\n                return False\n        if len(a) != len(s):\n            return False\n        else:\n            return True", "# write the function is_anagram\ndef is_anagram(test, original):\n    flag = 0\n    if len(test) != len(original):\n        return False\n    else:\n        for i in test.lower():\n            if i not in original.lower():\n                flag = 1\n            else:\n                continue\n        if flag ==1:\n            return False\n        else:\n            return True", "# write the function is_anagram\ndef is_anagram(test, original):\n    def to_dict(word):\n        dictionary = {}\n        \n        for w in word.lower():\n            if w not in dictionary:\n                dictionary[w] = 0\n            else:\n                dictionary[w] += 1\n    \n        return dictionary\n        \n    return to_dict(test) == to_dict(original)", "is_anagram=lambda a,b,s=sorted:s(a.lower())==s(b.lower())", "def is_anagram(s, l):\n    n = len(s)\n    if len(l) != n:\n        return False\n    s = s.lower()\n    l = l.lower()\n    h = [0 for x in range(26)]\n    for i in range(n):\n        h[ord(s[i]) - 97] += 1\n        h[ord(l[i]) - 97] -= 1\n    return h.count(0) == 26", "# write the function is_anagram\ndef is_anagram(test, original):\n\n    return ''.join(sorted(test.lower())) == ''.join(sorted(original.lower()))", "def is_anagram(test: str, original: str) -> bool:\n    \"\"\" Check if the two given parameters create an anagram. \"\"\"\n    return all([all([_ in original.lower() for _ in test.lower()]), len(test) == len(original)])", "def is_anagram(test, original):\n    test = list(test.lower())\n    original = list(original.lower())\n    if (sorted(test) == sorted(original)):\n        return True\n    else:\n        return False", "# write the function is_anagram\ndef is_anagram(test, original):\n    \n    test = test.lower()\n    original = original.lower()\n    \n    testcount = 0\n    for i in test:\n        if i in original:\n            testcount += 1\n            \n    originalcount = 0\n    for i in original:\n        if i in test:\n            originalcount += 1\n            \n    if testcount == originalcount and testcount == len(test) and originalcount == len(original):\n        return True\n    else:\n        return False\n", "# write the function is_anagram\ndef is_anagram(test, original):\n    if len(test) == len(original):\n        test = test.lower()\n        original = original.lower()\n        count = 0\n        \n        for char in test:\n            if char in original:\n                count += 1\n            \n        if count == len(test):\n            return True\n        else:\n            return False\n    else:\n        return False", "def is_anagram(test, original):\n    test_list = []\n    original_list = []\n    for i in test.lower():\n        test_list.append(i)\n    for i in original.lower():\n        original_list.append(i)\n    test_list.sort()\n    original_list.sort()\n    print(test_list)\n    print(original_list)\n    if test_list == original_list:\n        return True\n    else:\n        return False", "def is_anagram(test, original):\n    if len(test) != len(original):\n        return False\n    letters = {}\n    for i in test.lower():\n        if i in letters:\n            letters[i] += 1\n        else:\n            letters[i] = 1\n    for i in original.lower():\n        if i not in letters:\n            return False\n        if original.lower().count(i) != letters[i]:\n            return False\n    return True", "def is_anagram(t, o):\n    return sorted([*t.lower()])==sorted([*o.lower()])", "def is_anagram(test, original):\n    x = list(test.lower())\n    y = list(original.lower())\n    x = sorted(x)\n    y = sorted(y)\n    if x == y:\n        return True\n    else:\n        return False", "def is_anagram(test, original): \n    \n    if len(test) != len(original):\n        return False\n    \n    a = sorted(test.lower())\n    b = sorted(original.lower())\n    \n    if a == b:\n        return True\n    else:\n        return False\n", "# write the function is_anagram\ndef is_anagram(test, original):\n    \n    sorted_test = sorted(list(test.lower()))\n    sorted_original = sorted(list(original.lower()))\n    \n    return sorted_test == sorted_original", "def is_anagram(test, original):\n    test = test.lower()\n    original = original.lower()\n    for char in test:\n        if char in original:\n            original = original.replace(char, '', 1)\n        else: return False\n    if len(original) == 0: return True\n    else: return False", "def is_anagram(test, original):\n    letters = [c for c in test.lower()]\n    for char in original.lower():\n        if char in letters:\n            del letters[letters.index(char)]\n        else:\n            return False\n    return not bool(len(letters))", "import collections\ndef is_anagram(test, original):\n    return collections.Counter([i.lower() for i in sorted(test)]) ==  collections.Counter([i.lower() for i in sorted(original)])", "# write the function is_anagram\ndef is_anagram(test, original):\n    \n    test_set = sorted(test.lower())\n    original_set = sorted(original.lower())\n    \n    if test_set == original_set:\n        return True\n    else:\n        return False", "# write the function is_anagram\ndef is_anagram(test, original):\n    t=sorted(test.lower())\n    o=sorted(original.lower())\n    if t==o:\n        return True\n    else:\n        return False", "def is_anagram(test, original):\n    test = sorted(test.lower())\n    original = sorted(original.lower())\n    if original == test:\n        return True\n    return False", "# write the function is_anagram\ndef is_anagram(test, original):\n    new_test = test.lower()\n    new_original = original.lower()\n    \n    sortedTest = sorted(new_test)\n    sortedOriginal = sorted(new_original)\n    \n    for letters in new_test:\n        if letters in new_original and len(new_test) == len(new_original) and sortedOriginal == sortedTest:\n            return True\n        else:\n            return False", "# write the function is_anagram\ndef is_anagram(test, original):\n    test_word_freq = {}\n    original_word_freq = {}\n    \n    test = test.lower()\n    original = original.lower()\n\n    if len(test) == len(original):\n        for idx, letter in enumerate(test):\n            if letter not in test_word_freq:\n                test_word_freq[letter] = 1\n            else:\n                test_word_freq[letter] += 1\n                \n        for idx, lett in enumerate(original):\n            if lett not in original_word_freq:\n                original_word_freq[lett] = 1\n            else:\n                original_word_freq[lett] += 1\n        print(original_word_freq)\n        print(test_word_freq)\n        for k, v in list(test_word_freq.items()):\n            if k not in original_word_freq:\n                return False\n            if v != original_word_freq[k]:\n                return False\n        return True\n    else:\n        return False\n    \n   \n", "# write the function is_anagram\ndef is_anagram(test, original):\n    first = [i.lower() for i in test]\n    second = [i.lower() for i in original]\n    return sorted(first) == sorted(second)", "def is_anagram(test, original):\n    list_test = []\n    list_original = []\n    for i in test.lower():\n        list_test += i\n    for i in original.lower():\n        list_original += i\n    if  len(list_test) == len(list_original):\n        list_test.sort()\n        list_original.sort()\n        if list_test == list_original:\n            return True\n        else:\n            return False\n    else:\n        return False", "# write the function is_anagram\ndef is_anagram(test, original):\n    return True if sorted([letter for letter in test.lower()]) == sorted([letter for letter in original.lower()]) else False\n    \n", "# write the function is_anagram\ndef is_anagram(test, original):\n    t = list(test.lower())\n    to = ''.join(sorted(t))\n    o = list(original.lower())\n    oo = ''.join(sorted(o))\n    if to == oo:\n        return True\n    else:\n        return False", "def is_anagram(test, original):\n    letterCount = dict.fromkeys('abcdefghijklmnopqrstuvwxyz', 0)\n\n    for c in test.lower():\n        letterCount[c] += 1\n\n    for c in original.lower():\n        letterCount[c] -= 1\n\n    for value in list(letterCount.values()):\n        if value != 0:\n            return False\n\n    return True\n", "def is_anagram(a_str, b_str):\n    \n    # Check same number of letters\n    if len(a_str) == len(b_str):\n        \n        # Check letters used same number of times\n        a_list = list(a_str.lower())\n        b_list = list(b_str.lower())\n        \n        for char in a_list:\n            if char in b_list:\n                b_list.remove(char)\n                \n        if not b_list:\n            return True\n        else:\n            return False\n    \n    else:\n        return False\n    \n    \n", "def is_anagram(test, original):\n    if len(test) != len(original):\n        return False\n    else:\n        test = test.lower()\n        original = original.lower()\n        counter_original = [0] * 26\n        counter_test = [0] * 26\n        \n        for i in test:\n            counter_test[ord(i) - 97] += 1\n            \n        for i in original:\n            counter_original[ord(i) - 97] += 1\n            \n    return counter_test == counter_original", "# write the function is_anagram\ndef is_anagram(test, original):\n    test=test.lower()\n    original=original.lower()\n    newList=[ord(c)for c in test]\n    newList.sort()\n    newList2=[ord(b)for b in original]\n    newList2.sort()\n    if newList == newList2:\n        return True\n    else:\n        return False", "# write the function is_anagram\ndef is_anagram(test, original):\n    \n    counterTest=[0]*255\n    counterOri=[0]*255\n    \n    for i in range(len(test)):\n        counterTest[ord(test[i].lower())]+=1\n        \n    for i in range(len(original)):\n        counterOri[ord(original[i].lower())]+=1\n        \n    if counterOri == counterTest:\n        return True\n    else:\n        return False", "# write the function is_anagram\ndef is_anagram(test, original):\n    test = test.upper()\n    original = original.upper()\n    if sorted(test) == sorted(original):\n        return True\n    else:\n        return False", "def is_anagram(test, original):\n    if len(test) == len(original):\n        \n        test = test.lower()\n        original = original.lower()\n        \n        for i in test:\n            if original.find(i) == -1:\n                return False\n            else:\n                test.replace(i, \"\")\n                original.replace(i, \"\")\n    else:\n        return False\n    \n    return True", "# write the function is_anagram\ndef is_anagram(test, original):\n    \n    counter1=[0]*255\n    counter2=[0]*255\n    \n    for i in range(len(test)):\n        counter1[ord(test[i].lower())]+=1\n    for i in range(len(original)):\n        counter2[ord(original[i].lower())]+=1\n        \n    return (counter1==counter2)\n    \n    \n    \n", "def is_anagram(test, original):\n    test = test.lower()\n    original = original.lower()\n    for x in range(len(test)):\n        if test.count(test[x]) != original.count(test[x]):\n            return False\n    for x in range(len(original)):\n        if test.count(original[x]) != original.count(original[x]):\n            return False\n    return True", "# write the function is_anagram\ndef is_anagram(test, original):\n    \n    test = test.lower()\n    original = original.lower()\n    \n    nT = len(test)\n    nO = len(original)\n    \n    if nO == nT:\n        counterT = [0] * (255 + 1)\n        counterO = [0] * (255 + 1)\n        \n        for x in range(nT):\n            counterT[ord(test[x])] += 1\n            counterO[ord(original[x])] += 1\n\n        if counterT == counterO:\n            return True\n        else:\n            return False\n        \n    else:\n        return False  ", "# write the function is_anagram\ndef is_anagram(test, original):\n    n = len(original)\n    if n != len(test):\n        return False\n    \n    counterTest = [0] * 255\n    counterOrig = [0] * 255\n    \n    for i in range(n):\n        counterTest[ord(test[i].lower())] += 1\n        counterOrig[ord(original[i].lower())] += 1\n        \n    return True if \"\".join(map(str, counterTest)) == \"\".join(map(str, counterOrig)) else False", "def is_anagram(test, original):\n    return sorted([n.lower() for n in test]) == sorted([n.lower() for n in original])", "def is_anagram(word_o, test_o):\n  is_anagram = True\n\n  word = word_o.lower()\n  test = test_o.lower()\n\n  if (len(word) != len(test)):\n    is_anagram = False\n\n  alist = list(test.lower())\n  pos1 = 0\n\n  while pos1 < len(word) and is_anagram:\n    pos2 = 0\n    found = False\n    while pos2 < len(alist) and not found:\n      if word[pos1] == alist[pos2]:\n        found = True\n      else:\n        pos2 = pos2 + 1\n\n    if found:\n      alist[pos2] = None\n    else: \n      is_anagram = False\n    \n    pos1 = pos1 + 1\n\n  return is_anagram", "def is_anagram(test, original):\n    l1 = list(test.lower())\n    l2 = list(original.lower())\n    if len(l1) == len(l2):\n        for i in l1:\n            if i in l2:\n                l2.remove(i)\n            else:\n                return False\n    else:\n        return False\n    return True", "def is_anagram(test, original):\n    for i in test.lower():\n        if i in original.lower() and len(test) == len(original):\n            continue\n        else:\n            return False\n    return True", "# write the function is_anagram\ndef is_anagram(test, original):\n    test_list = [letter1 for letter1 in test.lower()]\n    orig_list = [letter2 for letter2 in original.lower()]\n    \n    if sorted(test_list) == sorted(orig_list):\n        return True    \n    else:\n        return False\n        \n    \n        \n\n", "# write the function is_anagram\ndef is_anagram(test, original):\n    #\n    \n    t = sorted(test.lower())\n    o = sorted(original.lower())\n    \n    if t == o:\n        print('true')\n        return True\n    else:\n        print('false')\n        return False", "# write the function is_anagram\ndef is_anagram(test, original):\n    for i in test:\n        if i.lower() in original.lower() and len(test) == len(original):\n            continue\n        return False\n    return True", "# write the function is_anagram\ndef is_anagram(test, original):\n    test = [i.lower() for i in test]\n    original = [j.lower() for j in original]\n    test.sort()\n    original.sort()\n    return test == original", "def is_anagram(test, original):\n    test = test.lower()\n    original=original.lower()\n    if len(test)!=len(original): return False\n    for x in test:\n        if test.count(x)==original.count(x):continue\n        else: return False\n    return True", "# write the function is_anagram\ndef is_anagram(test, original):\n    test = test.lower()\n    original = original.lower()\n    #transform string to list in order to sort by alphabet\n    new_test = list(test)\n    new_original = list(original) \n    #sort \n    new_test.sort()\n    new_original.sort()\n    \n    if(new_test == new_original):\n        return True\n    return False\n    pass", "# write the function is_anagram\ndef is_anagram(test, original):\n    return set(test.upper()) == set(original.upper()) and len(test) == len(original)", "is_anagram = lambda test, original: True if sorted(original.lower()) == sorted(test.lower()) else False;", "# write the function is_anagram\ndef is_anagram(test, original):\n    originalLower =[val for val in original.lower()]\n    arr = test.lower();\n    if(len(arr) != len(originalLower)):\n        return False\n    for element in arr:\n        if (element not in originalLower):\n            return False\n        else:\n            originalLower.remove(element)\n    return True\n", "# write the function is_anagram\ndef is_anagram(test, original):\n    # Get lengths of both strings\n    n1 = len(test)\n    n2 = len(original)\n\n    # If lenght of both strings is not same, then\n    # they cannot be anagram\n    if n1 != n2:\n        return False\n\n    # Sort both strings\n    str1 = sorted(test.lower())\n    str2 = sorted(original.lower())\n\n    # Compare sorted strings\n    for i in range(0, n1):\n        if str1[i] != str2[i]:\n            return False\n    return True", "# write the function is_anagram\ndef is_anagram(test, original):\n    test_l=list(test.lower())\n    original_l=list(original.lower())\n    test_l.sort()\n    original_l.sort()\n    if test_l==original_l:\n        return(True)\n    else:\n        return(False)", "# write the function is_anagram\ndef is_anagram(test, original):\n    test = list(test.lower())\n    original = list(original.lower())\n    if len(test)!=len(original): return False\n    for word in test:\n        for word2 in original:\n            if word == word2:\n                original.remove(word2)\n                break\n    if len(original)==0: return True\n    else: return False", "# write the function is_anagram\ndef is_anagram(test, original):\n    a = sorted(list(test.lower()))\n    b = sorted(list(original.lower()))\n\n    if a == b:\n        print(f'The word {test} is an anagram of {original}')\n        return True\n    else:\n        print(f'Characters do not match for test case {test}, {original}')\n        return False\n", "# write the function is_anagram\ndef is_anagram(test, original):\n    \n    def to_list(string):\n        listed = []\n        for i in range(len(string)):\n            listed.append(string[i])\n        return listed\n    \n    return str(sorted(to_list(test.lower()))) == str(sorted(to_list(original.lower())))", "def is_anagram(test, original):\n    test = list(test.lower())\n    test.sort()\n    original = list(original.lower())\n    original.sort()\n    if original != test or len(test) != len(original):\n        return False\n    else:\n        return True\n\n\n", "def is_anagram(test, original):\n    if len(test) != len(original):\n        return False\n    test = sorted(test.lower())\n    original = sorted(original.lower())\n    for i in range(len(test)):\n        if test[i] != original[i]:\n            return False\n    return True ", "# write the function is_anagram\ndef is_anagram(test, original):\n    result = True if (len(test) == len(original)) else False\n    for letter in test.upper():\n        result = False if (letter not in original.upper()) else result\n    return result", "def is_anagram(test, original):\n    if len(original) != len(test):\n        return False\n    \n    test = test.lower()\n    original = original.lower()\n    \n        \n    for letter in original:\n        if original.count(letter) != test.count(letter):\n            return False\n    return True\n    \n", "# write the function is_anagram\ndef is_anagram(test, original):\n    test = test.lower()\n    original=original.lower()\n    if(len(test)!=len(original)):\n        return False\n    for x in test:\n        if(test.count(x)!=original.count(x)):\n            return False\n    return True\n    pass", "def is_anagram(test, original):\n    if sorted(test.lower())== sorted(original.lower()):\n        return True\n    elif test != original:\n        return False", "# write the function is_anagram\ndef is_anagram(test, original):\n    test_list = sorted(list(test.lower()))\n    original_list = sorted(list(original.lower()))\n    if test_list == original_list:\n        return True\n    if test_list != original_list:\n        return False", "# write the function is_anagram\ndef is_anagram(test, original):\n    test = test.lower()\n    original = original.lower()\n    t = list(test)\n    o = list(original)\n    t.sort()\n    o.sort()\n    return t == o", "# write the function is_anagram\ndef is_anagram(test, original):\n    t=test.lower()\n    o=[*original.lower()]\n    if len(t)!= len(o):\n        return False\n    for c in t:\n        if c in o:\n            o.remove(c)\n        else:\n            return False\n    return True", "# write the function is_anagram\ndef is_anagram(test, original):\n    if len(test) > len(original) or len(test) < len(original):\n        return False\n\n    res = ''\n    counter = 0    \n    sortedTest = sorted(test.lower())\n    sortedOriginal = sorted(original.lower())\n\n    for i in range(0, len(sortedTest)):\n        if sortedTest[i] != sortedOriginal[i]:\n            res = False\n            break\n        else:\n            res = True\n    return res\n        \n", "from collections import Counter as C\ndef is_anagram(test, original):\n    return C(test.lower()) == C(original.lower())", "# write the function is_anagram\ndef is_anagram(test, original):\n    sort1 = sorted(test.lower())\n    sort2 = sorted(original.lower())\n    if ''.join(sort2) == ''.join(sort1):\n        return True\n    else:\n        return False", "# write the function is_anagram\ndef is_anagram(test, original):\n    theTest = test.lower()\n    theOriginal= original.lower()\n    if len(theTest) != len(theOriginal):\n        return False\n    else:\n        index = 0\n        lengthCheck = 0\n        array = [None] * len(theTest)\n        for i in theOriginal:\n            array[index] = i\n            index += 1\n        for j in theTest:\n            testLength = len(theTest)\n            if j in array:\n                lengthCheck += 1\n            else:\n                return False\n        if lengthCheck == testLength:\n            return True\n", "# write the function is_anagram\ndef is_anagram(tst, org):\n    tst=tst.lower()\n    org=org.lower()\n    if len(tst)!=len(org):\n        return False\n    for i in org:\n        if tst.count(i)!=org.count(i):\n            return False\n    return True", "# write the function is_anagram\ndef is_anagram(test, original):\n    if len(test) != len(original):\n        return False\n    elif sorted(test.casefold()) == sorted(original.casefold()):\n        return True\n    else:\n        return False", "def is_anagram(test, original):\n\n    letters_original=sorted(list(original.upper()))\n    letters_test=sorted(list(test.upper()))\n\n    return letters_original==letters_test", "# write the function is_anagram\ndef is_anagram(test, original):\n    return len(test) == len(original) and all([i in original.lower() for i in test.lower()])", "# write the function is_anagram\ndef is_anagram(test, original):\n    return sorted(test.lower()) == sorted(original.lower())\n\n# this was challenging for me\n", "# write the function is_anagram\ndef is_anagram(test, original):\n    if sorted(test.lower()) == sorted(original.lower()):\n        return True\n    else:\n        return False\n    \n# had to look up new function for me: sorted, had to work the turkey through with .lower\n", "# write the function is_anagram\ndef is_anagram(test, original):\n    print(test, original)\n    \n    test = test.lower()\n    original = original.lower()\n    test = sorted(test)\n    original = sorted(original)\n    if test == original:\n        return True\n    else:\n        return False", "# write the function is_anagram\ndef is_anagram(test, original):\n    org1 = [x.lower() for x in original]\n    org2 = [y.lower() for y in test]\n    org1.sort()\n    org2.sort()\n    if org1 == org2:\n        return True\n    return False\n        \n            \n", "# write the function is_anagram\ndef is_anagram(test,original):\n    a = sorted(test.lower())\n    b = sorted(original.lower())\n    if a == b:\n        c = True\n    else:\n        c = False\n    return c\n", "# write the function is_anagram\ndef is_anagram(test, original):\n    original_list = list(original.lower())\n    test_list = list(test.lower())\n    original_list.sort()\n    test_list.sort()\n    a = \"\".join(test_list)\n    b = \"\".join(original_list)\n    return a == b", "def is_anagram(test, original):\n    test = test.lower().replace(\" \", '')\n    original = original.lower().replace(\" \", '')\n    if len(test) != len(original):\n        return False\n    for letter in test:\n        if letter not in original:\n            return False\n    for letter in original:\n        if letter not in test:\n            return False\n\n    return True"]