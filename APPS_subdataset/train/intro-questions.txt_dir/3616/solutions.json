["from bisect import bisect_left\n\ndef sieve(n):\n    sieve, primes = [0]*(n+1), []\n    for i in range(2, n+1):\n        if not sieve[i]:\n            primes.append(i)\n            for j in range(i**2, n+1, i): sieve[j] = 1\n    return primes\n\nPRIMES = sieve(100000)\n\ndef prime_primes(n):\n    lst = PRIMES[:bisect_left(PRIMES, n)]\n    divs = [p/q for i,p in enumerate(lst) for q in lst[i+1:]]\n    return len(divs), int(sum(divs))", "primes = [2] + [ n for n in range(3, 1000, 2) if all(n % r for r in range(3, int(n**0.5)+1, 2) ) ]\n\nimport itertools\n\ndef prime_primes(N):\n    pairs = list(itertools.combinations((p for p in primes if p < N), 2))\n    return len(pairs), int( sum( a/b for a, b in pairs ) )", "from itertools import combinations\n\ndef prime_primes(N):\n    primes = [2] + [n for n in range(3, N, 2) if all(n % d for d in range(3, int(n**0.5) + 1, 2))]\n    \n    pp = [n / float(d) for n, d in combinations(primes, 2)]\n    return len(pp), int(sum(pp))", "from bisect import bisect_left as bisect\nfrom itertools import combinations\n\nimport numpy as np\n\nN = 100001\nxs = np.ones(N)\nxs[:2] = 0\nxs[2 * 2 :: 2] = 0\nfor i in range(3, int(N ** 0.5) + 1):\n    if xs[i]:\n        xs[i * i :: i] = 0\nprimes = [i for i, x in enumerate(xs) if x]\n\n\ndef prime_primes(N):\n    i = bisect(primes, N)\n    xs = [a / b for a, b in combinations(primes[:i], 2)]\n    return len(xs), int(sum(xs))\n", "def prime_primes(n):\n    sieve = [0, 0] + [1] * (n - 2)\n    for k in range(2, int(n ** .5) + 1):\n        if sieve[k]: sieve[k*k::k] = ((n-k*k-1) // k + 1) * [0]\n    primes = [p for p, b in enumerate(sieve) if b]\n    ratios = [b / a for i, a in enumerate(primes) for b in primes[:i]]\n    return len(ratios), int(sum(ratios))", "p=[2]\nfor i in range(3,1000,2):\n    if all(i%j for j in p): p.append(i)\n\ndef prime_primes(N):\n    cnt=0\n    sm=0\n    for i in range(len(p)):\n        for j in range(i+1,len(p)):\n            if p[j]>=N: \n                break\n            cnt+=1\n            sm+=p[i]/p[j]\n        if p[i]>=N:\n            break\n    return cnt,int(sm)", "import math\n\n\ndef prime_primes(N):\n    primes = [i for i in range(N) if is_prime(i)]\n    prime_prms = []\n\n    for i in range(len(primes) - 1):\n        for j in range(primes.index(primes[i]) + 1, len(primes)):\n            prime_prms.append(primes[i] / primes[j])\n\n    count_of_prime_primes = len(prime_prms)\n\n    return count_of_prime_primes, math.floor(sum(prime_prms))\n        \n        \ndef is_prime(nr):\n    if nr > 1:\n        for i in range(2, nr):\n            if (nr % i) == 0:\n                return False\n        return True\n    return False", "def prime_primes(N):\n    prime = []\n    for iter in range(2,N):\n        for i in range(2,iter):\n             if (iter%i)==0:\n               break\n        else:\n               prime.append(iter)\n    \n    l = [j/i for i in prime for j in prime if (j/i)<1]\n    return (len(l),int(sum(l)))", "import math\n\ndef is_prime(n):\n    return n == 2 or n > 2 and n % 2 and all(n % i for i in range(3, int(n ** 0.5) + 1, 2))\n\ndef prime_primes(N):\n    a = [i for i in range(2, N) if is_prime(i)]\n    total, count = 0, 0\n    for elem1 in a:\n        for elem2 in a:\n            if(elem1 < elem2):\n                count += 1\n                total += elem1 / elem2\n    return (count, math.floor(total))\n"]