["def sort_by_area(seq): \n    def func(x):\n        if isinstance(x, tuple):\n            return x[0] * x[1]\n        else:\n            return 3.14 * x * x\n    return sorted(seq, key=func)", "from math import pi as PI\n\ndef circle(r):         return r*r*PI\ndef rect(a,b):         return a*b\ndef getArea(r):        return rect(*r) if isinstance(r,tuple) else circle(r)\ndef sort_by_area(seq): return sorted(seq, key=getArea)", "def sort_by_area(seq): \n    \n    valueList = []\n    for i in seq:\n        if isinstance(i,tuple):\n            l1 = i[0]\n            l2 = i[1]\n            area = l1 * l2\n        else:\n            area = 3.14*i**2\n        \n        valueList.append(area)\n        \n    a = sorted(range(len(valueList)),key=valueList.__getitem__)    # Get index of sorted list\n    sort_by_area =  [seq[i] for i in a]\n\n    return sort_by_area", "from math import pi\n\ndef sort_by_area(a):\n    return sorted(a, key=lambda x: x**2 * pi if isinstance(x, (int, float)) else x[0] * x[1])", "from math import pi\nfrom operator import mul\n\ndef area(args):\n    try:\n        return mul(*args)\n    except TypeError:\n        return pi * args**2\n\ndef sort_by_area(seq): \n    return sorted(seq, key=area)", "def sort_by_area(seq):\n    lista = list()\n    for x in seq:\n        if type(x) == tuple:\n            area = x[0]*x[1]\n        else:\n            area = 3.14*x**2\n        lista.append((area, x))\n    return [x[1] for x in sorted(lista)]", "def sort_by_area(arr): \n    return sorted(arr, key=lambda x: (x[0]*x[1] if isinstance(x,tuple) else x*x*3.14))", "def area(x):\n    if type(x) == float or type(x) == int: return 3.141592653589*x*x\n    else: return x[0]*x[1]\n\ndef sort_by_area(seq): \n    return sorted(seq, key=area)", "from math import pi as PI\n\ndef sort_by_area(lst):\n    return sorted(lst, key=lambda d: d[0] * d[1] if isinstance(d, tuple) else PI * d * d)   ", "from math import pi\n\ndef sort_by_area(seq): \n    return sorted(seq, key = lambda arg: arg[0]*arg[1] if isinstance(arg, tuple) else pi*arg**2)"]