["def multi_table(number):\n    return '\\n'.join(f'{i} * {number} = {i * number}' for i in range(1, 11))", "def multi_table(number):\n    table = [\"{0} * {1} = {2}\".format(i, number, i * number) for i in range(1, 11)]\n    return '\\n'.join(table)", "def multi_table(number):\n    return \"\\n\".join([\"{1} * {0} = {2}\".format(number, i,  i * number) for i in range(1, 11)])", "def multi_table(n):\n    return '\\n'.join(f'{i} * {n} = {i*n}' for i in range(1, 11))", "def multi_table(number):    \n    st = str()\n    for x in range(1,11):\n        z = number * x\n        st += '{} * {} = {}\\n'.format(x,number,z)\n    sti = st.strip('\\n')\n    return sti", "def multi_table(n):\n    return \"\\n\".join([f\"{i} * {n} = {i * n}\" for i in range(1, 11)])", "def multi_table(number):\n    return \"\\n\".join(f\"{n} * {number} = {n*number}\" for n in range(1,11))", "def multi_table(number):\n    st = str()\n    for x in range(1,11):\n        z = x * number\n        st += '{} * {} = {}\\n'.format(x,number,z)\n    sti = st.strip('\\n')\n    return sti", "def multi_table(number):\n    return \"\\n\".join([\"{0} * {1} = {2}\".format(str(i),str(number),str(i*number)) for i in range(1,11)])", "def multi_table(n): return \"\\n\".join([\"%d * %d = %d\" % (i, n, n*i) for i in range(1, 11)])", "def multi_table(number):\n    return '\\n'.join(f'{n} * {number} = {number*n}' for n in range(1,11))\n\n", "multi_table=lambda number:'\\n'.join(f\"{r} * {number} = {r*number}\" for r in range(1,11))", "multi_table = lambda n: \"\\n\".join([f\"{i} * {n} = {i * n}\" for i in range(1, 11)])", "multi_table = lambda number: '\\n'.join('{} * {} = {}'.format(x, number, x * number) for x in range(1, 11))", "def multi_table(number):\n    return '\\n'.join('{} * {} = {}'.format(i, number, i*number) for i in range(1,11))", "def multi_table(number: int) -> str:\n    \"\"\" Get multiplication table for number that is always an integer from 1 to 10. \"\"\"\n    return \"\\n\".join([f\"{_it} * {number} = {_it * number}\" for _it in range(1, 11)])", "def multi_table(number):\n    table = \"\"\n    for each in range(1, 11):\n        table += \"%d * %d = %d\\n\" % (each, number, each * number)\n        \n    return table[:-1]", "def multi_table(number):\n    return \"\".join([str(x) +\" * \" + str(number) + \" = \" +str(x * number) + \"\\n\" for x  in range(1,11)])[:-1]", "multi_table = lambda n: '\\n'.join(str(i) + ' * ' + str(n) + ' = ' + str(i * n) for i in range(1, 11))", "def multi_table(number):\n    table = \"\"\n    for i in range(1, 11):\n        table += \"{} * {} = {}\\n\".format(i, number, i * number)\n    table = table.rstrip(\"\\n\")\n    return table", "def multi_table(number):\n    s = ''\n    for i in range(1, 10):\n        s = s + str(i) + ' * ' + str(number) + ' = ' + str(i*number) + '\\n'\n    return s + '10' + ' * ' + str(number) + ' = ' + str(10*number)", "def multi_table(number):\n    table = \"\"\n    for i in range(1, 11):\n        table += f\"{i} * {number} = {i * number}\" + \"\\n\" * (i < 10)\n    \n    return table", "def multi_table(number):\n    return '\\n'.join(f'{num} * {number} = {num * number}' for num in range(1, 11))", "def multi_table(number):\n    res = \"\"\n    for i in range(1, 11):\n        res += (\"{} * {} = {}\\n\".format(i, number, i * number))\n    return res[:-1:]", "def multi_table(number):\n    return '\\n'.join(f\"{i} * {number} = {number*i}\" for i in range(1,11))", "def multi_table(number):\n    return '\\n'.join([f\"{num} * {number} = {num * number}\" for num in range(1, 11)])\n", "def multi_table(number):\n    str = \"\"\n    for i in range(10):\n        str = str +\"{} * {} = {}\\n\".format(i+1,number,(i+1)*number)\n    str = str[0:-1]\n    return str", "def multi_table(number):\n    s = ''\n    for i in range(1, 11):\n        result = number * i\n        r = (str((str(i)+ ' * ' + str(number) + ' = '  + str(result))))\n        if i in range(1,10):\n            s += r + '\\n'\n        else:\n            s += r\n    return s\n\n'''Your goal is to return multiplication table for number that is always an integer\nfrom 1 to 10\nresult must be a string separated by newline'''", "def multi_table(number):\n    s = ''\n    for i in range(1, 11):\n        result = number * i\n        r = (str((str(i)+ ' * ' + str(number) + ' = '  + str(result))))\n        if i in range(1,10):\n            s += r + '\\n'\n        else:\n            s += r\n    return s", "def multi_table(number):\n    s = ''\n    for i in range(1,11):\n        if i > 1:\n            s += '\\n'\n        s += str(i) + ' * ' + str(number) + ' = ' + str(i*number)\n    return s", "def multi_table(number):\n    lst = []\n    \n    for i in range(1, 11):\n        item = f'{i} * {number} = {i * number}'\n        lst.append(item)\n        \n    return '\\n'.join(lst)\n", "def multi_table(number):\n    return \"\\n\".join([f\"{i} * {number} = {number * i}\" for i in range(1,11)])", "def multi_table(number):\n    res = \"\"\n    for i in range(1, 11):\n        res += str(i) + ' * ' + str(number) + ' = ' + str(i * number)\n        if i != 10: res += '\\n'\n    return res", "def multi_table(number):\n    return f'1 * {number} = {1*number}\\\n\\n2 * {number} = {2*number}\\\n\\n3 * {number} = {3*number}\\\n\\n4 * {number} = {4*number}\\\n\\n5 * {number} = {5*number}\\\n\\n6 * {number} = {6*number}\\\n\\n7 * {number} = {7*number}\\\n\\n8 * {number} = {8*number}\\\n\\n9 * {number} = {9*number}\\\n\\n10 * {number} = {10*number}'", "def multi_table(n):\n    table = []\n    for i in range(1, 11):\n        table.append(f'{i} * {n} = {i*n}')\n    string = '\\n'.join(table)\n    return string", "def multi_table(n):\n    r = f\"1 * {n} = {n}\"\n    for i in range(2,11): r += f\"\\n{i} * {n} = {i*n}\"\n    return r", "def multi_table(number):\n    return '\\n'.join('%d * %d = %d' % (i, number, i*number) for i in range(1, 11)).rstrip()", "def multi_table(number):\n    tab = \"\"\n    for n in range(1, 11):\n        r = n * number\n        tab += f'{n} * {number} = {r}'\n        if n < 10:\n            tab += \"\\n\"\n    return tab", "def multi_table(number):\n    out=[]\n    for i in range(1,11):\n        out.append(\"{} * {} = {}\".format(i,number,i*number))\n    return \"\\n\".join(out)", "def multi_table(i):\n    return '1 * '+str(i)+' = '+str(i)+'\\n2 * '+str(i)+' = '+str(i*2)+'\\n3 * '+str(i)+' = '+str(i*3)+'\\n4 * '+str(i)+' = '+str(i*4)+'\\n5 * '+str(i)+' = '+str(i*5)+'\\n6 * '+str(i)+' = '+str(i*6)+'\\n7 * '+str(i)+' = '+str(i*7)+'\\n8 * '+str(i)+' = '+str(i*8)+'\\n9 * '+str(i)+' = '+str(i*9)+'\\n10 * '+str(i)+' = '+str(i*10)", "def multi_table(number):\n    r = []\n    for i in range(1,11):\n        r.append('{} * {} = {}'.format(i, number, i*number))\n    return '\\n'.join(r)", "def multi_table(number):\n    index = 1\n    k =''\n    while True:\n        if index <= 10:\n            k += '{} * {} = {}\\n'.format(index, number, index*number)\n        else:\n            break\n        index += 1\n    return k[:-1]\n", "def multi_table(number):\n    result = ''\n    \n    for i in range(1, 10 + 1):\n        result += '{} * {} = {}\\n'.format(i, number, i * number)\n        \n    return result[:-1]", "def multi_table(number):\n    res = ''\n    for i in range(10):\n        res += f'{i+1} * {number} = {(i+1)*number}\\n'\n    return res[:-1]", "def multi_table(n):\n    m = []\n    for i in range(1,11):\n        m.append(f\"{i} * {n} = {i * n}\")\n    w = \"\\n\".join(m)\n    return w", "def multi_table(number):\n    m = []\n    for i in range(1,11):\n        m.append(f'{i} * {number} = {i * number}')\n        w = \"\\n\".join(m)\n    return w\n", "def multi_table(number):\n    out = f'1 * {number} = {1 * number}\\n2 * {number} = {2 * number}\\n3 * {number} = {3 * number}\\n4 * {number} = {4 * number}\\n5 * {number} = {5 * number}\\n6 * {number} = {6 * number}\\n7 * {number} = {7 * number}\\n8 * {number} = {8 * number}\\n9 * {number} = {9 * number}\\n10 * {number} = {10 * number}'\n    return out", "def multi_table(number):\n    arr = []\n    for i in range(1, 11):\n        arr.append('{} * {} = {}'.format(i, number, i * number))\n    return '\\n'.join(arr)", "def multi_table(number):\n    x = list(range(1,11))\n    y = ''\n    z = 0\n    while z < len(x):\n        y += '{} * {} = {}\\n'.format(x[z], number, x[z] * number)\n        z += 1\n    return y[:-1]", "def multi_table(number):\n    t=['{0} * {1} = {2}'.format(i,number,i*number) for i in range(1,11)]\n    return '\\n'.join(t)", "def multi_table(number):\n    string = ''\n    i = 0\n    for multiply in range(1, 10):\n        i += 1\n        string = string + f\"{multiply} * {number} = {multiply*number}\\n\"\n    else:\n        string = string + f\"{10} * {number} = {10*number}\"\n    return string\n", "def multi_table(number):\n    final = []\n    count = 1\n    for i in range(10):\n        final.append(str(count))\n        final.append(\" * \")\n        final.append(str(number))\n        final.append(\" = \")\n        prod = count * number\n        final.append(str(prod))\n        if count != 10:\n            final.append(\"\\n\")\n        count+=1\n    return (\"\").join(final)\n", "def multi_table(n):\n    return '\\n'.join([f'{str(i)} * {str(n)} = {str(i*n)}' for i in range(1,11)])", "def multi_table(number):\n    s = \"\"\n    for x in range(1,11):\n        s += f'{x} * {number} = {x * number}\\n'\n    return s[0:-1]", "def multi_table(number):\n    return \"\\n\".join(['{e} * {d} = {c}'.format(e=i,d=number,c=i*number) for i in range(1,11)])", "def multi_table(number):\n    a=(1,2,3,4,5,6,7,8,9,10)\n    b=[]\n    f=1\n    g=''\n    for i in a:\n        f=i*number\n        b.append('{e} * {d} = {c}'.format(e=i,d=number,c=f))\n        g=\"\\n\".join(b)\n    return g", "def multi_table(number):\n        return f'1 * {number} = {1 * number}\\n2 * {number} = {number * 2}\\n3 * {number} = {number * 3}\\n4 * {number} = {number * 4}\\n5 * {number} = {number * 5}\\n6 * {number} = {number * 6}\\n7 * {number} = {number * 7}\\n8 * {number} = {number * 8}\\n9 * {number} = {number * 9}\\n10 * {number} = {number * 10}'\n", "def multi_table(number):\n    c=\"\"\n    for i in range(1,11):\n        c=c+\"{} * {} = {}\".format(i,number,number*i)+\"\\n\"\n    return c.rstrip(\"\\n\")", "def multi_table(number):\n    return ''.join(f\"{i} * {number} = {i*number}\\n\"  for i in range(1,11))[0:-1]", "def multi_table(number):\n    return \"1 * \"+ str(number)+ \" = \" + str(1*number) +\"\\n\" +\"2 * \"+ str(number)+ \" = \" + str(2*number)+\"\\n\" +\"3 * \"+ str(number)+ \" = \" + str(3*number)+\"\\n\" +\"4 * \"+ str(number)+ \" = \" + str(4*number)+\"\\n\" +\"5 * \"+ str(number)+ \" = \" + str(5*number)+\"\\n\" +\"6 * \"+ str(number)+ \" = \" + str(6*number)+\"\\n\" +\"7 * \"+ str(number)+ \" = \" + str(7*number)+\"\\n\" +\"8 * \"+ str(number)+ \" = \" + str(8*number)+\"\\n\" +\"9 * \"+ str(number)+ \" = \" + str(9*number)+\"\\n\" +\"10 * \"+ str(number)+ \" = \" + str(10*number)", "def multi_table(n):\n    return ''.join(f'{i} * {n} = {i*n}\\n' for i in range(1,11)).rstrip('\\n')", "def multi_table(number):\n    out = \"\"\n    for i in range(1, 11):\n        out+=str(i) + \" * \" + str(number) + \" = \" + str(i*number) +\"\\n\"\n    return out.strip(\"\\n\")", "def multi_table(number):\n    table = \"1 * \" + str(number) + \" = \" + str(number * 1)\n    for x in range(9) :\n        x += 2\n        table = table + \"\\n\" + str(x) + \" * \" + str(number) + \" = \" + str(number * x)\n    return table", "def multi_table(n):\n    return \"\".join([f'{i} * {n} = {i*n}\\n' for i in range(1,11)]).rstrip('\\n')\n", "def multi_table(number):\n    lst=list()\n    for i in range(1,11):\n        result=f\"{i} * {number} = {i*int(number)}\" \n        lst.append(result)\n    return \"\\n\".join(lst)", "def multi_table(number):\n    lines = []\n    for i in range(1, 11):\n        lines.append(f'{i} * {number} = {i * number}')\n    return '\\n'.join(lines)", "def multi_table(number):\n    ans = \"\"\n    i = 1\n    for i in range(1, 11):\n        ans += f'{i} * {number} = {i*number}\\n'\n        i += i\n        \n    return ans[:-1]\n", "def multi_table(number):\n    return '\\n'.join(f'{i} * {number} = {i * number}' for i in range(1, 11)) # good luck", "def multi_table(number):\n    res = \"\"\n    for i in range(1, 11):\n        temp = number * i\n        res += str(i) + \" * \" + str(number) + \" = \" + str(temp) +\"\\n\"\n    return res[:-1]", "def multi_table(n):\n    return '\\n'.join(f'{m} * {n} = {m*n}' for m in range(1, 11))", "def multi_table(number):\n    return '1 *' + ' ' + str(number) + ' = ' + str(number) + '\\n2 *' + ' ' + str(number) + ' = ' + str(number * 2) + '\\n3 *' + ' ' + str(number) + ' = ' + str(number * 3) + '\\n4 *' + ' ' + str(number) + ' = ' + str(number * 4) + '\\n5 *' + ' ' + str(number) + ' = ' + str(number * 5) + '\\n6 *' + ' ' + str(number) + ' = ' + str(number * 6) + '\\n7 *' + ' ' + str(number) + ' = ' + str(number * 7) + '\\n8 *' + ' ' + str(number) + ' = ' + str(number * 8) + '\\n9 *' + ' ' + str(number) + ' = ' + str(number * 9) + '\\n10 *' + ' ' + str(number) + ' = ' + str(number * 10) ", "def multi_table(number):\n    rez = \"\"\n    for i in range(1, 11):\n        rez += str(i) + \" * \" + str(number) + \" = \" + str(i*number)\n        if i < 10:\n            rez += \"\\n\"\n    return rez", "def multi_table(number):\n    table = ''\n    for i in range(1, 11):\n        table += f'{i} * {number} = {i * number}'\n        if i < 10:\n            table += '\\n'\n    return table", "def multi_table(number):\n    emptystring = ''\n    for eachnumber in range(1,11):\n        if eachnumber == 10:\n            emptystring = emptystring + '{} * {} = {}'.format(eachnumber,number,eachnumber * number)\n        else:\n            emptystring = emptystring + '{} * {} = {}\\n'.format(eachnumber,number,eachnumber * number)\n    return emptystring", "def multi_table(number):\n    table = \"\"\n    for x in range(1,11):\n        table += str(x) + ' * ' + str(number) + ' = ' + str(x * number) + '\\n'\n    return table[:-1]", "def multi_table(number):\n    st = ''\n    for i in range(1, 11):\n        res = i * number\n        if i == 1:\n            st = st + f'{i} * {number} = {res}'\n            \n        else:\n            st = st + f'\\n{i} * {number} = {res}'\n    return st    ", "def multi_table(number):\n    n=str(number)\n    i=1\n    string=''\n    while i<=10:\n        ans=i*number\n        string=string+str(i)+' * '+n+' = '+str(ans)+'\\n'\n        i=i+1\n    return string[:len(string)-1]", "def multi_table(number):\n    return f\"\"\"1 * {number} = {number*1}\n2 * {number} = {number*2}\n3 * {number} = {number*3}\n4 * {number} = {number*4}\n5 * {number} = {number*5}\n6 * {number} = {number*6}\n7 * {number} = {number*7}\n8 * {number} = {number*8}\n9 * {number} = {number*9}\n10 * {number} = {number*10}\"\"\"", "multi_table = lambda num: '\\n'.join([f\"{i} * {num} = {num * i}\" for i in range(1, 11)])", "def multi_table(number):\n    result = ''\n    for i in range(1,11):\n        result += '{} * {} = {}'.format(i, number, i*number)\n        if i < 10:\n            result += '\\n'\n    return result", "def multi_table(number):\n    \"\"\"\n    create multiplication table for number\n    \"\"\"\n    return '\\n'.join(\"{} * {} = {}\".format(i,number,i*number) for i in range(1,11))", "def multi_table(num):\n    return '\\n'.join(['%d * %d = %d'%(i, num, i*num) for i in range(1,11)])", "def multi_table(number):\n    a = []\n    for i in range(1, 11):\n        a.append(i * number)\n    b = \"\"\n    count = 1\n    for i in a:\n        b += str(count) + \" * \" + str(number) + \" = \" + str(i) + \"\\n\"\n        count += 1\n    return b[0:-1]", "def multi_table(number):\n    msg = ''\n    for x in range(1,11):\n        msg += str(x) + ' * ' + str(number) + ' = ' + str(x*number) + '\\n'\n    return msg[0:-1]", "def multi_table(n):\n    return '\\n'.join([f'{x} * {n} = {x*n}' for x in range(1,11)])", "def multi_table(number):\n       return \"\\n\".join(\"{} * {} = {}\".format(c, number, c * number) for c in range(1, 11))\n\n", "def multi_table(number):\n    table = ''\n    for n in range(1, 11):\n        table += '{0} * {1} = {2}'.format(n, number, n*number)\n        if n < 10:\n            table += '\\n'\n    return table", "def multi_table(table):\n    results = \"\"\n    for i in range(1,10):\n        results += f\"{i} * {table} = {i * table}\\n\"\n    return results + f\"{10} * {table} = {10 * table}\"\n", "def multi_table(n):\n   return f\"1 * {n} = {1*n}\\n2 * {n} = {2*n}\\n3 * {n} = {3*n}\\n4 * {n} = {4*n}\\n5 * {n} = {5*n}\\n6 * {n} = {6*n}\\n7 * {n} = {7*n}\\n8 * {n} = {8*n}\\n9 * {n} = {9*n}\\n10 * {n} = {10*n}\"", "def multi_table(number):\n    res = ''\n    for i in range (1, 11):\n        res += str(i) + ' * ' + str(number) + ' = ' + str(i * number) +'\\n'\n    return res[:-1]", "def multi_table(number):\n    a = [\"{} * {} = {}\".format(i,number,i*number) for i in range(1,11)]\n    return \"\\n\".join(a)", "def multi_table(number):\n    arr = [f\"{i+1} * {number} = {(i+1)*number}\" for i in range(10)]\n    return \"\\n\".join(arr)", "def multi_table(number):\n    string = ''\n    for i in range(1,11):\n        string += (f\"{i} * {number} = {i * number}\\n\")\n    string = string[:-1] \n    return(string)", "def multi_table(number):\n    res = ''\n    for i in range (1,11):\n        res += f'{i} * {number} = {i*number}\\n'\n    return res.strip('\\n')", "def multi_table(number):\n    l = [f\"{i} * {number} = {number*i}\\n\" for i in range(1,11)]\n    return ''.join(l).rstrip(\"\\n\")", "multi_table = lambda n: '\\n'.join(['{0} * {1} = {2}'.format(i, n, i * n) for i in range(1, 11)])", "def multi_table(number):\n    res = ''\n    for i in range(10):\n        res += (f'{i+1} * {number} = {number*(i+1)}')\n        if i < 9:\n            res += '\\n'\n    return(res)", "def multi_table(n):\n    x = \"\"\n    for i in range(1,11):\n        x += \"{} * {} = {}\\n\".format(i, n, i * n)\n    return x[:-1]", "def multi_table(number):\n    counter = 1\n    table = \"\"\n    while counter < 11:\n        table += str(counter) + \" * \" + str(number) + \" = \" + str(number * counter)+\"\\n\"\n        counter += 1\n    return table[:-1]\n", "def multi_table(number):\n    result = ''\n    for i in range(1, 11):\n        if i == 10:\n            result += f\"{i} * {number} = {i * number}\"\n        else:\n            result += f\"{i} * {number} = {i * number}\\n\"\n    return result"]