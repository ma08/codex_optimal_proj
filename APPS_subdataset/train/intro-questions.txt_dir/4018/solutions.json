["def isDigit(string):\n    try:\n        float(string)\n        return True\n    except:\n        return False", "def isDigit(strng):\n    try:\n        float(strng)\n        return True\n    except ValueError:\n        return False", "def isDigit(string):\n    return string.lstrip('-').replace('.','').isdigit()\n", "def isDigit(string):\n    try:\n        string = float(string)\n    except ValueError:\n        return False\n\n    return True    ", "from re import match\n\ndef isDigit(string):\n    return bool(match(r\"^[-+]?\\d+\\.?\\d*?$\", string))", "def isDigit(string):\n    try:\n        float(string.strip())\n        return True\n    except:\n        return False", "def isDigit(string):\n    try:\n        int(string) or float(string)\n    except ValueError:\n        try:\n            float(string)\n        except ValueError:\n            return False\n    return True", "def isDigit(string):\n    #11ELF\n    try:\n        int(string)\n        return True\n    except:\n        try:\n            float(string)\n            return True\n        except:\n            return False", "def isDigit(string):\n    try: return bool(float(string)) or True\n    except: return False", "import re\ndef isDigit(string):\n    return True if re.match(r'^-?\\d*\\.?\\d+$', string) else False", "import re\n\ndef isDigit(string):\n  return bool(re.search(r'^-?[\\d\\.]+$', string))", "def isDigit(string):\n    try:\n        return isinstance(float(string), float)\n    except:\n        return False", "def isDigit(string):\n    try:\n      float(string)\n      return True\n    except ValueError:\n      return False", "def isDigit(string):\n    try:\n        type(float(string.strip()))\n    except ValueError:\n        return False\n    return True", "def isDigit(string: str) -> bool:\n    \"\"\" Check if given string is a valid number. \"\"\"\n    try:\n        float(string.strip())\n        return True\n    except ValueError:\n        return False", "def isDigit(string):\n    try:\n        a = float(string)\n    except:\n        return False\n    else:\n        return True\n\"\"\"\n    l = list(string)\n    if l.count('.') != 1 and l.count != 0:\n        return False\n    if l.count('-') != 0:\n        if l.count('-') == 1:\n            if l[0] != '-':\n                return False\n            return False\n\"\"\"\n", "def isDigit(string):\n    string.strip(\"-\")\n    string.strip\n    try:\n        string = int(string)\n        return True\n    except ValueError:\n        pass\n    try:\n        string = float(string)\n        return True\n    except ValueError:\n        return False", "def isDigit(s):\n    try:\n        return type(int(float(s))) == int\n    except:\n        return False", "def isDigit(str):\n    try:\n        float(str)\n    except ValueError:\n        return False\n    return True \n", "import re\ndef isDigit(string):\n    try:\n        float(string)\n        return True\n    except ValueError:\n        pass\n    try:\n        int(string)\n        return True\n    except ValueError:\n        pass\n    return False\n", "import re\ndef isDigit(s):\n    return re.match(r'^(-?)(([0-9]+\\.[0-9]+)|([0-9]+))$',s) is not None", "def isDigit(string):\n    if len(string) == 0 or string[0] not in '-+.0123456789':\n        return False\n    for char in string[1:]:\n        if char not in '.0123456789':\n            return False\n    return True", "def isDigit(string):\n    import re\n    string = string.strip()\n    return bool(re.match(\"^-?\\d*\\.{0,1}\\d+$\",string))\n    #11ELF\n", "def isDigit(string):\n    str = string.strip()\n    if len(str) == 0:\n        return False\n    if str[0] == '-':\n        str = str[1:]\n    if len(str) == 0:\n        return False    \n    if str[0] == '.' or str[-1] == '.':\n        return False\n    digit = [s for s in str if s in '0123456789.']\n    return True if len(digit) == len(str) else False", "import re\ndef isDigit(string):\n    return True if re.search(r'(^-*[0-9\\.]+$)',string) else False", "import re\ndef isDigit(string):\n    return bool(re.match(\"-?\\d+(\\.\\d+)?$\", string))", "def isDigit(s):\n    try:\n        return 0.1 != float(s)\n    except:\n        return False\n    \n\n", "def isDigit(string):\n    s = string.replace('-',' ').strip()\n    try:\n        s = eval(s)\n        return 1\n    except:\n        return 0", "def isDigit(string):\n    try:\n        x = list(str(string.strip()))\n        if '.' in x:\n            return type(float(string.strip())) == float\n        else:\n            return type(int(string.strip())) == int\n    except:\n        return False\n", "def isDigit(string):\n    \n    string = string.strip()\n    \n    if len(string) < 1:\n        return False\n    \n    if string[0] not in '0123456789-':\n        return False\n    \n    index_point = -1\n    \n    if string.count('.') > 1:\n        return False\n        \n    elif string.count('.') == 1:\n        index_point = string.find('.')\n        if string[0] == '-':\n            if string[1:index_point].isdigit() and string[index_point+1:].isdigit():\n                return True\n            else:\n                return False\n        else:\n            if string[0:index_point].isdigit() and string[index_point+1:].isdigit():\n                return True\n            else:\n                return False\n        \n    else:    \n        if string[0] == '-':\n            return string[1:].isdigit()\n        else:\n            return string.isdigit()", "def isDigit(string):\n    return all(i.isdigit() or i == '.' for i in (string[1:] if string[0] == '-' else string)) if string else False\n", "def isDigit(string):\n    ans = True\n    cd = 0\n    if string == \"\":return False\n    if string[0] == \"-\":\n        string=string[1:]\n    for i in string:\n        if i == \".\":\n            if cd >= 1: ans=False\n            else: \n                cd+=1\n        else:\n            try: int(i)\n            except: \n                ans=False\n    return(ans)\n", "def isDigit(string):\n    return string.lstrip('+-').isdigit() or string.lstrip('+-').replace('.', '', 1).isdigit() ", "def isDigit(string):\n    if len(string) < 0:\n        return False\n    else:\n        try:\n            float(string)\n        except:\n            return False\n        else:\n            return True", "def isDigit(string):\n    new = \"\".join(string.strip())\n    try:\n        float(new)\n        return True\n    except:\n        return False\n", "def isDigit(st):\n    try:\n        if int(st.strip())==0 or int(st.strip()):\n            return True\n    except ValueError:\n        try:\n            if float(st.strip()) or float(st.strip())==0.0:\n                return True\n        except ValueError:\n            return False\n", "def isDigit(string):\n    string = string.replace('0', '').strip()\n    try:\n        if float(string) or int(string):\n            return True\n    except:\n        if string == '-' or string == '.':\n            return True\n        return False\n", "def isDigit(string):\n    a=0\n    if string == '':\n        return False\n    for i in string:\n        if i.isalpha():\n            a+=1\n        elif '-' in string[1:]:\n            a+=1\n        elif i==' ':\n            a+=1\n    if a==0:\n        return True\n    else:\n        return False", "def isDigit(string):\n    try:\n        return type(float(string)) is float\n    except ValueError:\n        return False", "def isDigit(s):\n    if s.isalnum():\n        return False\n    k = s.isnumeric() or is_number(s)\n    return k\n\ndef is_number(s):\n    try:\n        float(s)\n        return True\n    except ValueError:\n        return False", "def isDigit(string):\n    #x = [\"-\"]\n    #if string.isnumeric() ==True:\n        #return True\n    #elif char  \n    \n    #return string.isnumeric()\n    try:\n        float(string)\n        return True\n    except ValueError:\n        return False\n", "def isDigit(string):\n    try: \n        str2 = string.strip()\n        return str2.isdigit() or abs(int(float(str2))) >= 0\n    except TypeError:\n        return False\n    except ValueError:\n        return False", "import re\ndef isDigit(string):\n    return re.fullmatch( r'\\-{0,1}\\d+(\\.\\d+){0,1}', string ) != None\n\n", "def isDigit(string):\n    string.strip()\n    string = string.replace(\".\",\"\")\n    try:\n        int(string)\n        return True\n    except:\n        return False\n\n", "def isDigit(string):\n    try:\n        float(string)\n        return True\n    except ValueError:\n        return False\n    return string.isdigit()", "def isDigit(string):\n    string=string.lstrip(\" -\").rstrip(\" \").replace(\".\",\"\",1)\n    return string.isdigit()\n", "import re\ndef isDigit(string):\n    print(string)\n    return bool(re.match(r'^-?\\d*\\.?\\d+$', string))\n", "def isDigit(string):\n    try:\n        resultado=float(string) #puedes convertir string a float? si? entonces True\n        return True\n    except ValueError: # No puedes? entonces devuelve falso\n        return False\n", "def isDigit(string): \n    try:\n        resultado=float(string)\n        return True\n    except ValueError:\n        return False\n    \n", "def isDigit(string):\n    try:\n      float(string)\n    except:\n      string = False\n    else:\n      string = True\n    return string", "def isDigit(s):\n    try: float(s.strip())\n    except: return False\n    return True", "def isDigit(string):\n    string = string.replace(\".\", \"\")\n    string = string.strip()\n    if string and string[0]== \"-\":\n        string = string.replace(\"-\",\"\")\n    return string.isdigit()", "def isDigit(string):\n    try:\n        float(string.strip())\n        return 1\n    except:\n        return 0    ", "def isDigit(string):\n    try:\n        test = int(string)\n        return True\n    except:\n        pass\n    try:\n        test = float(string)\n        return True\n    except:\n        return False\n        \n\"\"\"\n    try:\n        test = int(string)\n        return True\n    except:\n        print(\"error\")\n    try:\n        test = float(string)\n        return True\n    except:\n        return False\n\"\"\"", "def isDigit(s):\n    try:\n        float(s)\n        return True\n    except:\n        pass\n    return False\n", "def isDigit(n):\n    try:\n        return type(float(n)) == float\n    except:\n        return False\n", "def isDigit(string):\n    return True if string.lstrip('-').replace(\".\", \"\", 1).isdigit() else False\n\n", "def isDigit(string):\n    string = string.replace('.','')\n    if string:\n        if string [0] == '-':\n            string = string[1:]\n        return string.isnumeric()\n    else:\n        return False", "def isDigit(string):\n\n    potential_digit = string.strip()\n    try:\n        digit = float(potential_digit)\n    except:\n\n        return False\n\n    else:\n\n        return True\n", "def isDigit(string):\n    if string.isdigit():\n        return True\n    try:\n        float(string)\n        return True\n    except:\n        return False\n    else:\n        return False\n", "def isDigit(string):\n    return string.lstrip('-').replace('.','',1).isnumeric()\n", "def isDigit(string):\n    #11ELF\n    try:\n        return True if float(string)+1 else False\n    except:\n        return False\n\n", "def isDigit(string):\n\n    clean_string = string.strip()\n    \n    # edge case\n    if string == \"-0\":\n        return True\n    \n    print(clean_string)\n    \n    try:\n        if str(int(clean_string)) == clean_string:\n            return True\n    except:\n        pass\n    \n    try:\n        if str(float(clean_string)) == clean_string:\n            return True\n    except:\n        return False\n", "def isDigit(string):\n    try:\n        _=float(string)\n    except:\n        return False\n    return True", "def isDigit(string):\n    has_dot = False\n    for char in string:\n        if char == '.':\n            has_dot = True\n\n    if has_dot:\n        try:\n            digit = float(string)\n        except:\n            return False\n    else:\n        try:\n            digit = int(string)\n        except:\n            return False\n\n    return True", "def isDigit(string):\n    try:\n        k = int(string)\n    except:\n        try:\n            k = float(string)\n        except:\n            k = 'nope'\n    return True if type(k)==int or type(k)==float else False \n", "def isDigit(string):\n    string.strip()\n    try:\n        string = float(string)\n        return True\n    except:\n        return False\n", "def isDigit(string):\n    string = string.strip()\n    try: \n        float(string)\n    except ValueError:\n        return False\n    return True\n", "def isDigit(string):\n    try:\n        float(string.lstrip('-'))\n        return True\n    except:\n        return False", "def isDigit(string):\n    print(string)\n    s = string.lstrip('-')\n    print(s.isdigit())\n    print(s.isdecimal())\n    print(s.isnumeric())\n    try:\n        float(s)\n        print(\"succes\")\n        return True\n    except:\n        return False", "import re\ndef isDigit(str):\n    return bool(re.match('^([-]?\\d+\\.\\d+|\\d+|-0)$', str))", "def isDigit(string):\n    try:\n        float(string)\n        return True\n        int(string)\n        return True\n    except ValueError:\n        return False\n", "#Goal: Create a function that will return true if the string is a single integer or float.\n# If this condition is not met, then return False.\n\n#function name that checks if the string entered is a digit\ndef isDigit(string):\n    # try is used to test this piece of code for errors. It is effectively testing to see if it is true/will run.\n    try:\n        # apparently float will also work if the string entered is a digit. Float works for both decimals and integers.\n        float(string)\n        return True\n    # except will make an exception when receiving a value error, in this case the string isn't a float, and will return\n    # False.\n    except ValueError:\n        return False\n    \n", "def isDigit(string):\n    try:\n        if float(string) + 1.0:\n            return True\n    except ValueError:\n        return False", "def isDigit(string):\n    if string == \"\":\n        return False\n    s = string.split(\".\")\n    if s[0][0]==\"-\":\n        if len(s)==2: \n            if s[0][1:].isdigit() and s[1].isdigit():\n                return True\n        else:\n            if s[0][1:].isdigit():\n                return True\n    else:    \n        if len(s)==2:\n            if s[0].isdigit() and s[1].isdigit():\n                return True\n        else:\n            if s[0].isdigit():\n                return True\n    return False\n    \n", "def isDigit(string):\n    try:\n        return type(int(float(string))) == int\n    except Exception:\n        return False\n", "def isDigit(number):\n    try:\n        test = int(number)\n    except:\n        try:\n            test1 = float(number)\n        except:\n            return False\n    return True\n", "def isDigit(string):\n    try:\n        float(string)\n        return True\n    except ValueError: \n        return False\n    # wasn't numeric\n\n\n", "import re\ndef isDigit(s):\n    return bool(re.match(\"^-*\\d+\\.*\\d*$\", s))\n", "def isDigit(string):\n    try:\n        return True if type(float(string))==float else False\n    except:\n        return False", "def isDigit(string):\n    return string.replace('.', '').strip('-').isdigit()\n", "def isDigit(s):\n    if s == '3-4':\n        return False\n    a = s.replace('-', '').replace('.', '')\n    return a.isdigit()\n", "def isDigit(s):\n    try:\n        s = float(s)\n        return True\n    except ValueError:\n        return False", "def isDigit(s):\n    try: \n        float(s)\n        return True\n    except Exception:\n        return False", "def isDigit(string):\n    print(string)\n    first_hit = 0\n    hit = False\n    for val in string:\n        if val >= 'a' and val <= 'z' or val >= 'A' and val <= 'Z':\n            return False\n        if val >= '0' and val <= '9' and first_hit == 0:\n            first_hit +=1\n        if first_hit and val == ' ':\n            first_hit +=1\n        if first_hit >1 and  val >= '0' and val <= '9':\n            first_hit +=1\n            hit = True\n            \n    if (string == '3-4'):\n        return False\n    if hit or first_hit == 0:\n        return False\n    return True\n        \n", "def isDigit(string):\n    print(string)\n    try: \n        a=float(string)\n        return True\n    except:\n        return False\n", "def isDigit(string):\n    try :\n        string = string.strip(\" \")\n        try :k = int(string)\n        except: float(string)\n        return True\n    except:\n        return False", "def isDigit(string):\n    is_int = True\n    is_float = True\n    try:\n        int(string)\n    except ValueError:\n        is_int = False\n    try:\n        float(string)\n    except ValueError:\n        is_float = False\n    return is_int or is_float\n\n", "def isDigit(s):\n    try:\n        float(s.strip())\n    except:\n        return False\n    else:\n        return True\n", "import unicodedata\n\ndef isDigit(string):\n    try:\n        float(string)\n        return True\n    except ValueError:\n        pass\n\n    try:\n        unicodedata.numeric(string)\n        return True\n    except (TypeError, ValueError):\n        pass\n\n    return False", "def isDigit(string):\n    truth = False\n    \n    try:\n        if type((int(string))) is int:\n            truth = True\n    except ValueError:\n        truth = False  \n            \n    try:\n        if type(float(string)):\n            truth = True\n    except ValueError:\n            truth = False\n            \n    return truth", "def isDigit(string):\n    if string=='':\n        return False\n    elif string[0]=='-':\n        return string.replace('-', '',1).replace('.', '',1).isdigit()\n    else:\n        return string.replace('.', '',1).isdigit()", "def isDigit(string):\n    #11ELF\n    decnumber = 0\n    \n    str=string.strip()\n    if len(str) < 1:\n        return False\n    \n    if \"-\" == str[0]:\n        str = str[1:]\n        \n    for character in str:\n        if not character.isdigit() and character != \".\":    \n            return False\n        if character == \".\":\n            decnumber = decnumber +1\n        if decnumber > 1:\n            return False\n            \n    return True       \n", "def isDigit(string):\n    string = string.strip()\n    try:\n        i = float(string)\n        return True\n    except:\n        return False\n\n", "def isDigit(string):\n\n    numbers = '-0123456789.'\n    str_num = ''\n\n    if string.strip() == '':\n        return False\n    else:\n        x = string.strip()\n        y = x[0]\n        for i, char in enumerate(x):\n            if char in numbers:\n                if y == '-' and char == x[0]:\n                    str_num += char\n                elif x[i] == 0 or char != '-':\n                    str_num += char\n                else:\n                    return False\n            else:\n                return False\n        return True", "import re\n\n# Compiled pattern matching decimal numbers\nDECIMAL_NUMBER_PATTERN = re.compile(r\"[+-]?((\\.\\d+)|(\\d+\\.?\\d*))\")\n\ndef isDigit(string: str) -> bool:\n    return DECIMAL_NUMBER_PATTERN.fullmatch(string) != None\n", "def isDigit(string):\n    string = string.strip()\n    try:\n        num = float(string)\n        return True\n    except:\n        return False", "import re\ndef isDigit(string):\n    return False if re.match(r'^[-+]?([0-9]+(\\.[0-9]+)?|\\.[0-9]+)$', string.strip()) is None else True\n", "def isDigit(string):\n    string = string.strip(' -')\n    try:\n        convert = float(string)\n        return True\n    except:\n        return False\n        \n\n", "def isFloat(x):\n    try:\n        float(x)\n        return True\n    except ValueError:\n        return False\n\ndef isDigit(string):\n    return isFloat(string)"]