["def encode(string):\n    return ''.join(str(ord(c.upper())-64) if c.isalpha() else c for c in string)", "def encode(string):\n  return ''.join(str(ord(c)-96) if c.isalpha() else c for c in string.lower())", "def encode(s):\n    return ''.join(str(ord(x) - ord('a') + 1) if x.isalpha() else x for x in s.lower())", "from string import ascii_uppercase, ascii_lowercase\n\nD = {c:str(i) for string in (ascii_uppercase, ascii_lowercase) for i,c in enumerate(string, 1)}\n\ndef encode(string):\n    return ''.join(D.get(c, c) for c in string)", "def encode(stg):\n    return \"\".join(str(ord(c) - 96) if \"a\" <= c <= \"z\" else c for c in stg.lower())", "from string import ascii_lowercase as letters\n\n\ndef encode(string):\n    return ''.join(str(letters.find(char)+1) if char in letters else char for char in string.lower())", "BASE = ord('A') - 1\n\ndef encode(string):\n    return ''.join(str(ord(c)-BASE) if c.isalpha() else c for c in string.upper())", "def encode(string):\n    string = string.lower()\n    alph = 'abcdefghijklmnopqrstuvwxyz'\n    st = []\n    for l in string:\n        if l.isalpha():\n            st.append(alph.find(l)+1)\n        else:\n            st.append(l)\n    return ''.join(map(str,st))", "def encode(string):\n    return ''.join(str(ord(i.lower()) - 96)  if i.isalpha() else i for i in string)", "import re\n\ndef encode(string):\n    return re.sub(r'[a-z]', lambda m: str(ord(m.group()) - ord('a') + 1), string.lower())"]