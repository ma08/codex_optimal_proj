["from fractions import gcd\n\ndef are_coprime(n, m):\n  return gcd(n, m) == 1", "def are_coprime(n, m):\n    # All hail Euclid and his wonderful algorithm\n    while m > 0:\n        n, m = m, n % m\n    return n == 1", "from math import gcd\n\ndef are_coprime(n , m):\n    return gcd(n, m) == 1", "from fractions import gcd\n\ndef are_coprime(a, b):\n    return gcd(a, b) == 1", "def are_coprime(n, m):\n    factors = lambda n: [i for i in range(1, n + 1) if n % i == 0]\n    return sorted(set(factors(n)) & set(factors(m)))[-1] == 1\n", "def are_coprime(n,m):\n    num_of_n = [i for i in range(1, n+1) if n % i == 0]\n    for i in range(1, m+1):\n        if m % i == 0:\n            if i in num_of_n[1:]:\n                return False\n    return True", "are_coprime=lambda*a:__import__('fractions').gcd(*a)<2", "def are_coprime(n,m):\n    return prime_factors(n) & prime_factors(m) == {1}\n    \ndef prime_factors(n):    \n    factors = [1]\n    d = 2\n    while n > 1:\n        while n % d == 0:\n            factors.append(d)\n            n /= d\n        d = d + 1\n        if d*d > n:\n            if n > 1: factors.append(n)\n            break\n    return set(factors)    ", "from fractions import gcd\ndef are_coprime(n,m):\n    return True if gcd(n,m)==1 else False", "def coprime(n,m):\n    while n*m:\n        if n>m: n %= m\n        else: m %= n\n    return max(n,m)\n\ndef are_coprime(n,m):\n    return (coprime(n,m) == 1)"]