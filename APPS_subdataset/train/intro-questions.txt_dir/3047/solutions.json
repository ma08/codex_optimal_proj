["import re\ndef repeating_fractions(n, d):\n  (i, d) = str(n * 1.0 / d).split('.')\n  return i + '.' + re.sub(r'([0-9])\\1+', r'(\\1)', d)", "repeating_fractions = lambda n,d: __import__('re').sub(r\"(\\d)(\\1+)(?!\\.)\",r\"(\\1)\",str(n/float(d)))", "import re\n\ndef repeating_fractions(num, den):\n    d, f = str(num / den).split(\".\")\n    return \"{}.{}\".format(d, re.sub(r\"(\\d)\\1+\", r\"(\\1)\", f))", "def repeating_fractions(n, d):\n    a, b, c = str(n * 1. / d).partition(\".\")\n    return a + b + __import__(\"re\").sub(r\"(.)\\1+\", lambda x: \"(%s)\" % x.group(1), c)", "import re\ndef repeating_fractions(n,d):\n    ok = str((n+0.0)/d).split(\".\")\n    return ok[0]+\".\"+re.sub(r\"(\\d)\\1+\", r\"(\\1)\", ok[1])", "repeating_fractions=lambda n,d:str((n+0.0)/d).split('.')[0]+\".\"+\"\".join([[\"({})\".format(i),i][len(list(j))==1]for i,j in __import__('itertools').groupby(str((n+0.0)/d).split(\".\")[1])])", "from itertools import groupby\n\n\ndef repeating_fractions(numerator, denominator):\n    integer, fractional = str(numerator / float(denominator)).split('.')\n    grouped = []\n    for k, g in groupby(fractional):\n        try:\n            next(g)\n            next(g)\n            grouped.append('({})'.format(k))\n        except StopIteration:\n            grouped.append(k)\n    return '{}.{}'.format(integer, ''.join(grouped))\n", "from re import sub; repeating_fractions=lambda n,d: (lambda div: (lambda index: div[:index]+sub(r\"(\\d)\\1+\",\"(\\g<1>)\",div[index:]))(div.index(\".\")))(str(1.0*n/d))", "from re import sub\n\n\ndef repeating_fractions(n,d):\n    return sub(r'(\\d)\\1+(?!\\d*\\.)', lambda m: f'({m[1]})', str(n / d))\n", "import re\n\ndef repeating_fractions(numerator,denominator):\n    ss = str(numerator / denominator).split('.')\n    \n    for x in range(0,10):  \n        ss[1] = re.sub(r'[' + str(x) + r']{2,}', '(' + str(x) + ')', ss[1])\n    \n    return '.'.join(ss)\n    \n", "def repeating_fractions(n,d):\n    a=str(n/d).split('.')\n    pos,out, m=0,'',False\n    while pos<len(a[1])-1:\n        if a[1][pos]==a[1][pos+1]:            \n            m=True\n        else:\n            out+=m*'('+a[1][pos]+m*')'\n            m=False\n        pos+=1    \n    out+=m*'('+a[1][-1]+m*')'\n    return a[0]+'.'+out", "from itertools import groupby\n\ndef repeating_fractions(numerator,denominator):\n    int_number, fraction = str(numerator / float(denominator)).split('.')\n    group = []\n    for i, j in groupby(fraction):\n        try:\n            next(j)\n            next(j)\n            group.append(\"({})\".format(i))\n        except StopIteration:\n            group.append(i)\n    return '{}.{}'.format(int_number, ''.join(group))\n\n", "import re\n\ndef repeating_fractions(a, b):\n    if not a % b: return str(a / b)\n    a, b = str(a / b).split(\".\")\n    return a + \".\" + re.sub(r\"(.)\\1+\", r\"(\\1)\", b)", "import re\n\ndef repeating_fractions(q, b):\n    return re.sub(r'(\\d)\\1+(?!\\.)', r'(\\1)', str(q / b))", "import re\n\ndef repeating_fractions(q, b):\n    x, y = str(q / b).split('.')\n    return x + '.' + re.sub(r'(\\d)\\1+', r'(\\1)', y)", "from itertools import groupby\n\ndef repeating_fractions(numerator,denominator):\n    int_part, fraction_part = str(numerator/denominator).split('.')\n    return int_part + '.' + ''.join( f'({key})' if len(list(group)) > 1 else key for key, group in groupby(fraction_part) )", "import re\ndef repeating_fractions(numerator,denominator):\n    fracion= str(numerator/denominator).split(\".\")\n    beforeDot=fracion[0]\n    afterDot=fracion[1]\n    properAfterDOT=\"\"\n    pharenthesis= [item[0] for item in re.findall(r\"((.)\\2*)\", afterDot)]\n    for i in pharenthesis:\n        if len(i)>1:\n            properAfterDOT+=\"(\"+i[0]+\")\"\n        else:\n            properAfterDOT+=i\n    return beforeDot+\".\"+properAfterDOT\n", "def repeating_fractions(num,denom):\n    ans = str(num / denom)\n    decimat_at = ans.find('.')\n    start = ans[decimat_at+1] # beyond the decimal\n    zgroup = ''\n    retval = ans[0:decimat_at+1]\n    for iii in range(decimat_at+1, len(ans)-1):\n        end = ans[iii+1]\n        if start == end:\n            zgroup += end\n            continue\n        elif start != end and len(zgroup) > 0:\n            retval += '('+zgroup[0]+')'\n            zgroup = ''\n            start = ans[iii+1]\n        elif start != end and len(zgroup) == 0:\n            retval += start\n            zgroup = ''\n            start = ans[iii+1]\n        else:\n            pass\n    # Tidy up\n    end = ans[len(ans)-1]\n    if zgroup == '':\n        retval += start\n    elif len(zgroup) > 1 or start == end :\n        retval += '('+zgroup[0]+')'\n    return retval\n", "from itertools import groupby\ndef repeating_fractions(a,b):\n    arr, idx = [\"\".join(grp) for num, grp in groupby(str(a/b))], 2\n    while idx < len(arr):\n        if len(arr[idx]) > 1:\n            arr[idx] = f\"({arr[idx][0]})\"\n        idx += 1\n    return ''.join(arr)", "from itertools import groupby\n\ndef repeating_fractions(n,d):\n    x,y = str(n/d).split('.')\n    return f'{x}.' + ''.join(f'({k})' if len(list(g))>1 else k for k,g in groupby(y))"]