["def loneliest(n):\n    a = list(map(int, str(n)))\n    b = [(sum(a[max(0, i - x):i+x+1]) - x, x) for i, x in enumerate(a)]\n    return (min(b)[0], 1) in b", "def loneliest(n): \n    def loneliness(it):\n        i,v = it\n        return sum(lst[max(0,i-v):i+v+1])-v, abs(v-1)\n    \n    lst = list(map(int,str(n)))\n    return 1 in lst and 1==min(enumerate(lst), key=loneliness)[1]", "def loneliest(number):\n    # Make a list of digits from the given number\n    digits = []\n    while number:\n        number, rem = divmod(number, 10)\n        digits.append(rem)\n\n    lowest = one = float('inf')\n\n    for i, d in enumerate(digits):\n        # Calculate the range of vision for each digit\n        s = sum(digits[max(0, i - d):i + d + 1]) - d\n\n        # Update the minimums for digit 1 or the others\n        if d == 1:\n            one = min(one, s)\n        else:\n            lowest = min(lowest, s)\n\n    # Check if 1 is the loneliest number and check if digit 1 was even in the number\n    return one <= lowest and one != float('inf')\n", "def loneliest(number):\n    ints = [int(n) for n in str(number)]\n    scores = [(sum(ints[max(0, i-d):i+d+1]) - d, d)\n        for i, d in enumerate(ints)]\n    return (min(scores)[0], 1) in scores ", "def loneliest(number): \n    seq = list(map(int,str(number)))\n    temp = 0\n    ans = 100\n    ans1 = 100\n    key = 0\n    x = 0\n    if seq.count(1) == 0:\n        return False\n    for i in seq:\n        temp = sum(seq[x+1:x+i+1]) + sum(seq[x-i if x>i else 0:x])\n        if i == 1 :\n            if temp < ans1 :\n                ans1 = temp\n        else:\n            if  temp < ans :\n                ans = temp\n        x += 1\n    if ans1 <= ans:\n        return True\n    else:\n        return False", "def loneliest(number): \n    numbers = [int(c) for c in str(number)]\n    loneliness = [(n, sum(numbers[max(i-n, 0):i]) + sum(numbers[i+1:i+1+n])) for i, n in enumerate(numbers)]\n    onesLoneliness = [p[1] for p in loneliness if p[0] == 1]\n    if (not onesLoneliness) : return False\n    otherLoneliness = [p[1] for p in loneliness if not p[0] == 1]\n    if (not otherLoneliness): return True\n    return min(otherLoneliness) >= min(onesLoneliness)", "def loneliest(number):\n    xs = [int(c) for c in str(number)]\n    d = {i: sum(xs[max(i-x, 0):i] + xs[i+1:i+1+x]) for i, x in enumerate(xs)}\n    m = min(d.values())\n    return any(xs[i] == 1 and d[i] == m for i in d)", "def left(num, n, i):\n    s = 0\n    counter = 0\n    index = i-1\n    while index >= 0 and counter < n:\n        s += int(num[index])\n        index -= 1\n        counter += 1\n    return s\n  \ndef right(num, n, i):\n    s = 0\n    counter = n\n    index = i+1\n    while index < len(num) and counter:\n        s += int(num[index])\n        index += 1\n        counter -= 1\n    return s\n\ndef _sum(num, n, i):\n    return left(num, n, i) + right(num, n, i)\n\ndef compare(one, others):\n    for other in others:\n        if one > other:\n            return False\n    return True\n\ndef check(ones, others):\n    for one in ones:\n        yield compare(one, others)\n\ndef loneliest(number): \n    num = str(number)\n    if not '1' in num:\n        return False\n    ones = []\n    others = []\n    for i in range(len(num)):\n        s = _sum(num, int(num[i]), i)\n        print()\n        if num[i] == '1':\n            ones.append(s)\n        else:\n            others.append(s)\n        \n    #print(num, ones, others)\n    return any(list(check(ones, others)))", "def calculate_loneliness(s, ind):\n    rng = int(s[ind])\n    if ind - rng < 0:\n        res_str = s[: ind] + s[ind + 1:ind + rng + 1]\n        return sum([int(char) for char in res_str])\n    res_str = s[ind - rng: ind] + s[ind + 1:ind + rng + 1]\n    return sum([int(char) for char in res_str])\n\n\ndef loneliest(n):\n    s = str(n)\n    if '1' not in s:\n        return False\n    lone_list = []\n    lst = []\n    for i in range(len(s)):\n        lone_list.append(calculate_loneliness(s, i))\n        lst.append(int(s[i]))\n    min_1 = lone_list[s.find('1')]\n    for i in range(len(lone_list)):\n        if lst[i] == 1:\n            if lone_list[i] < min_1:\n                min_1 = lone_list[i]\n  \n    if min(lone_list) == min_1:\n        return True\n    return False", "def loneliest(number):\n    if (str(number)).count(\"1\")==0:\n        return False\n    if (str(number)).count(\"1\")==len(str(number)):\n        return True\n        \n    number=[int(a) for a in str(number)]\n    score=[]\n    one=[]\n    for idx,nr in enumerate(number):\n    \n        b = idx-nr\n        f = idx+nr+1\n        s=0\n        \n        if b<0: b=0\n        if f>len(number): f=len(number)\n    \n        s+=sum(number[b:idx])\n        s+=sum(number[idx+1:f])\n        \n        if nr==1: one.append(s)\n        else: score.append(s)\n\n    score.sort()\n    one.sort()\n    if score[0]>=one[0]:\n        return True\n    return False"]