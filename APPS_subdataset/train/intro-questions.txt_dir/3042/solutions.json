["def trace(matrix):\n    if not matrix or len(matrix) != len(matrix[0]):\n        return None\n    return sum(matrix[i][i] for i in range(len(matrix)))", "def trace(matrix):\n    if matrix and set(map(len,matrix))=={len(matrix)}:\n        return sum(matrix[x][x] for x in range(len(matrix)))", "trace=lambda m: sum(m[i][i] for i in range(len(m))) if m and len(m) == len(m[0]) else None", "def trace(matrix):\n    if matrix and {len(matrix)} == {len(m) for m in matrix}:\n        return sum(matrix[i][i] for i in range(len(matrix)))", "def trace(mx):\n    return None if not mx or len(mx) != len(mx[0]) else sum(mx[i][i] for i in range(len(mx)))", "def trace(matrix):\n    \n    matrixLen = len(matrix)\n    \n    if matrixLen == 0:\n        return None\n      \n    matrixElemsLens = [len(i) for i in matrix]\n    \n    for i in matrixElemsLens:\n        if i != matrixLen:\n            return None\n    \n    totalTrace = 0\n    \n    currentElem = 0\n    for row in matrix:\n        totalTrace += row[currentElem]\n        currentElem += 1\n        \n    return totalTrace", "def trace(matrix):\n    return sum(matrix[i][i] for i in range(len(matrix))) if len(matrix) > 0 and len(matrix[0]) == len(matrix) else None", "def trace(matrix):\n    if matrix and len(matrix) == len(matrix[0]):\n        return sum(row[i] for i, row in enumerate(matrix))", "def trace(matrix):\n    size = len(matrix)\n    \n    if not matrix or any(len(row) != size for row in matrix):\n        return None\n    \n    return sum( matrix[i][i] for i in range(size) )", "trace=lambda m:None if not m or len(m)!=len(m[0]) else sum([m[i][i] for i in range(len(m))])"]