["from itertools import groupby\n\ndef find_needed_guards(islands):\n    return sum(sum(1 for _ in g)>>1 for k,g in groupby(islands) if not k)", "def find_needed_guards(k):\n    b = ''.join('1' if g else '0' for g in k)\n    return sum(len(ng) // 2 for ng in b.split(\"1\"))", "def find_needed_guards(k):\n    \n    prev = True\n    guards = 0\n    for i in k:\n        if not i and not prev:\n            guards += 1\n            prev = True\n        else:\n            prev = i\n            \n    return guards", "from itertools import groupby\n\ndef find_needed_guards(k):\n    return sum(len(list(g))//2 for v,g in groupby(k) if v==0)", "def find_needed_guards(k):\n    return sum(len(i)//2 for i in ''.join([('*',' ')[i] for i in k]).split())", "def find_needed_guards(k):\n    return sum(len(i)//2 for i in ''.join([('0','1')[i] for i in k]).split('1'))", "def find_needed_guards(k):\n    nbsold=0\n    i=0\n    while i<len(k)-1:\n        if k[i]==False and k[i+1]==False:\n            nbsold+=1\n            i+=1\n        i+=1\n    return nbsold\n    \n", "def find_needed_guards(k):\n    total = 0\n    for i in range (1, len(k)):  \n        if k[i] == False:\n            if k[i-1] == False:\n                total += 1\n                k[i] = True\n    \n    return total\n", "def find_needed_guards(k):\n    total = 0\n    for i in range(1, len(k)):\n        if not (k[i] or k[i-1]):\n            k[i] = True\n            total += 1\n    return total", "def find_needed_guards(k):\n    if len(k)%2==0:k.append(True)\n    a=0\n    for x in range(1,len(k),2):\n        if k[x-1]==k[x+1]==True or k[x]==True:continue\n        elif k[x-1]==True:\n            k[x+1]=True\n            a+=1\n        else:a+=1\n    return a"]