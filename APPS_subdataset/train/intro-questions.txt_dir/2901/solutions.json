["psion_power_points=lambda l,s: [0,2,6,11,17,25,35,46,58,72,88,106,126,147,170,195,221,250,280,311,343][min(l,20)]+(s-10)//2*l//2 if l and s>10 else 0", "powers = [0,2,6,11,17,25,35,46,58,72,88,106,126,147,170,195,221,250,280,311,343]\ndef psion_power_points(level, score):\n    score = max(score - 10, 0)\n    return level * score and score // 2 * level // 2 + powers[min(level, 20)]", "power={1:2, 2:6, 3:11, 4:17, 5:25, 6:35, 7:46, 8:58, 9:72, 10:88,\n       11:106, 12:126, 13:147, 14:170, 15:195, 16:221,\n       17:250, 18:280, 19:311, 20:343}\ndef psion_power_points(level,score):\n    if level==0 or score<=10:\n        return 0\n    return power.get(level,343)+level*((score-score%2)-10)//4", "inc = {1:2,2:6,3:11,4:17,5:25,6:35,7:46,8:58,9:72,10:88,11:106,12:126,13:147,14:170,15:195,16:221,17:250,18:280,19:311,20:343}\n\ndef psion_power_points(level,score):\n    \n    if level > 0 and score > 10:\n        base_points = inc.get(level,343)        \n    else:\n        base_points = 0   \n    \n    bonus_points = max(0,int((score - 10) // 2 * 0.5 * level))\n    \n    return base_points + bonus_points #if score > 11 else base_points", "import math\ndef psion_power_points(level,score):\n    day = [ 0,2,6,11,17,25,35,46,58,72,88,106,126,147,170,195,221,250,280,311,343]\n    return  math.floor(level * (score//2-5) * 0.5) + ( day[level] if level <20 else 343) if score >10 else 0\n    \n", "power = [0, 2, 6, 11, 17, 25, 35,\n         46, 58, 72, 88, 106, 126, 147,\n         170, 195, 221, 250, 280, 311, 343]\n\ndef psion_power_points(level,score):\n    if level == 0 or score <= 10: return 0\n    return power[min(20, level)] + max(0, score-10)//2 * max(0, level)//2", "def psion_power_points(level,score):\n    power_list = [0, 2, 6, 11, 17, 25, 35, 46, 58, 72, 88, 106, 126, 147, 170, 195, 221, 250, 280, 311, 343]\n    if level < 1 or score < 11:\n        return 0\n    else:\n        bonus = int((score-10)//2*0.5*level)\n        base_points = power_list[level] if level <= 20 else power_list[20]\n        return bonus + base_points", "power_points_per_day = [2, 6, 11, 17, 25, 35, 46, 58, 72, 88, 106, 126, 147, 170, 195, 221, 250, 280, 311, 343]\n\ndef psion_power_points(level, score):\n    if score < 11 or level == 0: return 0\n    \n    modifier = (score - 10) // 2\n    f = int(level * modifier * 0.5)\n    \n    level = min(20, level)\n    \n    return power_points_per_day[level - 1] + f    ", "powerPointsPerDay = [0,   2,   6,  11,  17,  25,  35,  46,  58,  72,  88,\n                        106, 126, 147, 170, 195, 221, 250, 280, 311, 343]\ndef psion_power_points(level, score):\n    # pppd: Power points per day\n    # bpp: Bonus power points\n    if score <= 10:\n        return 0\n    pppd = powerPointsPerDay[min(level, 20)]\n    bpp = (score - 10) // 2 * level // 2\n    return pppd + bpp", "POINTS_PER_DAYS = [0, 2, 6, 11, 17, 25, 35, 46, 58, 72, 88, 106, 126, 147, 170, 195, 221, 250, 280, 311, 343]\n\ndef psion_power_points(level,score):\n    abilityModifier_atLvl20 = max(0, (score-10)//2*10)\n    modifier = int(level * abilityModifier_atLvl20 / 20)\n    return 0 if score < 11 else POINTS_PER_DAYS[min(level, 20)] + modifier"]