["def convert_bits(a,b):\n    return bin(a^b).count(\"1\")", "def convert_bits(a, b):\n    return f'{a^b:b}'.count('1')", "def convert_bits(a, b):\n    return str(bin(a ^ b)).count('1')", "def convert_bits(a, b):\n    return format(a ^ b, 'b').count('1')", "def convert_bits(a, b):\n    difference=bin(a^b)[2:]\n    return difference.count(\"1\")\n", "def convert_bits(a, b):\n    return list(bin(a^b)).count('1')", "binary = lambda x : bin(x)[2:].zfill(32)\n\ndef convert_bits(a, b):\n    a, b = binary(a), binary(b)\n    return sum(a[i] != b[i] for i in range(32))", "def convert_bits(a, b):\n    n = a ^ b\n    c = 0\n    while n:\n        c += n & 1\n        n >>= 1\n    return c", "def convert_bits(a, b):\n  A = f'{abs(a):040b}'\n  B = f'{abs(b):040b}'\n  diffs = 0\n  for i, j in zip(A, B):\n    if i != j:\n      diffs+=1\n  return diffs\n", "def countSetBits(n):\n  count = 0\n  while n:\n      count += n & 1\n      n >>= 1\n  return count\n\n\ndef convert_bits(a, b):\n  return countSetBits(a^b)\n"]