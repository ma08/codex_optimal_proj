["def whoseMove(lastPlayer, win):\n    return lastPlayer if win else 'white' if lastPlayer == 'black' else 'black'", "def whoseMove(lastPlayer, win):\n    players = ['white', 'black']\n    return lastPlayer if win else players[players.index(lastPlayer) - 1]", "def whoseMove(lastPlayer, win):\n    return [\"white\", \"black\"][(lastPlayer == \"black\") == win]", "def whoseMove(lastPlayer, win):\n    return ['black', 'white'][(lastPlayer == 'black') ^ win]", "def whoseMove(lastPlayer, win):\n    if lastPlayer == 'black':\n        if win == True:\n            return 'black'\n        else:\n            return 'white'\n    else:\n        if win == True:\n            return 'white'\n        else:\n            return 'black'", "def whoseMove(lastPlayer, win):\n    return {\"white\", \"black\"}.difference({lastPlayer}).pop() if not win else lastPlayer\n", "def whoseMove(lastPlayer, win):\n  otherPlayer = \"black\" if lastPlayer == \"white\" else \"white\"\n  return lastPlayer if win else otherPlayer\n", "def whoseMove(lastPlayer, win):\n    if lastPlayer == 'black':\n        return ['black','white'][not win]\n    return ['black','white'][win]", "def whoseMove(lastPlayer, win):\n    if lastPlayer=='black' and win:\n        return 'black'\n    elif lastPlayer=='white' and win:\n        return 'white'\n    elif lastPlayer=='white' and not win:\n        return 'black'\n    return 'white'", "def whoseMove(lastPlayer, win):\n    op = ['black', 'white']\n    op.remove(lastPlayer)\n    return lastPlayer if win else op[0]", "def whoseMove(lastPlayer, win):\n    return lastPlayer if win else ({'white','black'}-{lastPlayer}).pop()", "whoseMove = lambda s, b: s if b else ('white' if s == 'black' else 'black')", "def whoseMove(lastPlayer, win):\n    if lastPlayer == 'black':\n        return('black' if win else 'white')\n    else:\n        return('white' if win else 'black')", "def whoseMove(lastPlayer, win):\n    return lastPlayer if win else {'white':'black', 'black':'white'}.get(lastPlayer)", "whoseMove = lambda l,w,a=[\"black\",\"white\"]: a[[not w,w][a.index(l)]]", "def whoseMove(lastPlayer, win):\n    return {'black':'white','white':'black'}.get(lastPlayer) if not win else lastPlayer", "def whoseMove(last_player: str, win: bool) -> str:\n    \"\"\" Get info whose turn is on the next round based on given last player's move and his result. \"\"\"\n    return [\"white\", \"black\"][\n        any(\n            [all([last_player == \"black\", win is True]),\n             all([last_player == \"white\", win is False])]\n        )\n    ]", "whoseMove=lambda b,w:'bwlhaictke'[(b<'w')+w&1::2]", "def whoseMove(lastPlayer, win):\n    return lastPlayer if win else {'black': 'white', 'white': 'black'}[lastPlayer]", "def whoseMove(lastPlayer, win):\n    lib = {'white': 'black', 'black':'white'}\n    return lastPlayer if win == True else lib[lastPlayer]", "from itertools import cycle, dropwhile, islice\n\nwhoseMove = lambda last, win: next(islice(dropwhile(last.__eq__, cycle(('black', 'white'))), win, win + 1))\n", "def whoseMove(lastPlayer, win):\n    return {\n        'black': ['white', 'black'],\n        'white': ['black', 'white']\n        }.get(lastPlayer)[win]", "def whoseMove(lastPlayer, win):\n    if win:\n        return lastPlayer\n    else:\n        if lastPlayer == 'black':\n            return 'white'\n        else:\n            return 'black'", "def whoseMove(p, win):\n    return p if win else ['white', 'black'][p == 'white']", "def whoseMove(lastPlayer, win):\n    return {'white': 'black', 'black': 'white'}.get(lastPlayer) if not win else lastPlayer", "def whoseMove(lastPlayer, win):\n    players = 'blackwhite'\n    if win:\n        result = lastPlayer\n    else:\n        result = players.replace(lastPlayer, '')\n    return result", "from itertools import cycle, dropwhile, islice\n\ndef whoseMove(lastPlayer, win):\n      order = dropwhile(lastPlayer.__eq__, cycle(('black', 'white')))\n      return win and lastPlayer or next(order)", "def whoseMove(lastPlayer, win):\n    return ('white', 'black')[win ^ lastPlayer.startswith('w')] ", "def whoseMove(x,y,b='black',w='white'):\n    return x if y else w if x == b else b", "def whoseMove(lastPlayer, win):\n    return ['black','white'][not win] if lastPlayer == 'black' else ['black','white'][win]", "def whoseMove(lastPlayer, win):\n    return 'black' if ((lastPlayer == 'black' and win) or (lastPlayer == 'white' and not win)) else 'white'", "def whoseMove(lastPlayer, win):\n    return lastPlayer if win else [n for n in ['black', 'white'] if n != lastPlayer][0]", "def whoseMove(lastPlayer, win):\n    d = {\n        'black' : 'white',\n        'white' : 'black'\n    }\n    return lastPlayer if win else d.get(lastPlayer)", "whoseMove = lambda l,w:'bwlhaictke'[(l[0]=='b')!=w::2]", "def whoseMove(p, win):\n    return 'white' if (p == 'white' and win) or (p == 'black' and not win) else 'black'", "def whoseMove(lastPlayer, win):\n    if lastPlayer == 'white' and not(win):\n        return 'black'\n    elif lastPlayer == 'black' and win:\n        return 'black'\n    else:\n        return 'white'", "opposite = {\n    'white': 'black',\n    'black': 'white'\n}\n\ndef whoseMove(last, win):\n    return last if win else opposite[last]", "def whoseMove(lp, win):\n    if win:\n        return lp\n    else:\n        return [i for i in ['black','white'] if i not in lp][0]\n    \n", "def whoseMove(lastPlayer, win):\n    if lastPlayer == 'white':\n        opp = 'black'\n    else:\n        opp = 'white'\n    \n    return lastPlayer if win else opp", "def whoseMove(lastPlayer, win):\n    l=['black','white']\n    return lastPlayer if win else l[l.index(lastPlayer)-1]", "def whoseMove(last_player, win):\n    other = 'black' if last_player == 'white' else 'white'\n    return last_player if win else other", "def whoseMove(lastPlayer, win):\n    return \"black\" if lastPlayer == \"white\" and not win else 'white' if lastPlayer == \"black\" and not win else lastPlayer\n", "def whoseMove(last, win):\n    return last if win else {\"white\": \"black\", \"black\": \"white\"}[last]", "def whoseMove(lastPlayer, win):\n    if win==False  : return{'white':'black', 'black':'white'}[lastPlayer]\n    if win==True   : return lastPlayer ", "def whoseMove(lastPlayer, win):\n    return lastPlayer if win else list({'black', 'white'} - {lastPlayer})[0]", "whoseMove = lambda lp, win: {True: 'white', False:'black'}[(lp == 'black')^win]", "def whoseMove(lastPlayer, win):\n    d={'black':'white','white':'black'}\n    if win: return lastPlayer\n    else: return d[lastPlayer]", "def whoseMove(lastPlayer, win):\n    if lastPlayer == \"black\":\n        return lastPlayer if  win else 'white'\n    else:\n        return 'white' if  win else 'black'", "def whoseMove(lastPlayer, win):\n    if win:\n        return lastPlayer\n    elif not win:\n        if lastPlayer == 'black':\n            return 'white'\n        else:\n            return 'black'", "def whoseMove(p, n):\n    return p if n else 'black' if p=='white' else 'white'", "def whoseMove(lastPlayer, win):\n    lose = {\"white\": \"black\", \"black\": \"white\"}\n    return lastPlayer if win else lose.get(lastPlayer)", "def whoseMove(lp, abool):\n    if lp == \"black\":\n        if abool== True:\n            ansr = \"black\"\n        else:\n            ansr = \"white\"\n    if lp == \"white\":\n        if abool == True:\n            ansr = \"white\"\n        else:\n            ansr = \"black\"\n    return ansr", "def whoseMove(lastPlayer, win):\n    a = ['black','white']\n    return lastPlayer if win else a[(a.index(lastPlayer)+1)%2]", "def whoseMove(lastPlayer, win):\n    if win == True:\n        return lastPlayer\n    elif lastPlayer == 'white' and win == False:\n        return 'black'\n    elif lastPlayer == 'black' and win == False:\n        return 'white'", "def whoseMove(lp, w):\n    if lp=='white' and w==True or lp=='black' and w==False:\n        return 'white'\n    return 'black'", "def whoseMove(lastPlayer, win):\n    players = ['black', 'white']\n    return lastPlayer if win else players[(players.index(lastPlayer) + 1) % 2]", "def whoseMove(lastPlayer, win):\n    player = {'white': 'black',\n             'black': 'white'}\n    return lastPlayer if win else player[lastPlayer]", "def whoseMove(lastPlayer, win):\n    if lastPlayer == 'black':\n        nextPlayer = 'white'\n    else:\n        nextPlayer = 'black'\n    if win:\n        return lastPlayer\n    else:\n        return nextPlayer", "whoseMove=lambda l,w:l if w else \"\".join([chr(x^y) for x,y in zip([21,4,8,23,14],l.encode())])", "whoseMove=lambda l,w:['black','white'][((l[0]=='w')+1-w)%2]", "def whoseMove(last, win):\n    if win==True:\n        return last\n    else:\n        return \"black\" if last==\"white\" else \"white\"", "def whoseMove(lastPlayer, win):\n    if lastPlayer=='black':\n        return 'black' if win == True else 'white'\n    else:\n        return 'white' if win == True else 'black'", "def whoseMove(lastPlayer, win):\n    if win and lastPlayer==\"black\":\n        return \"black\"\n    elif win and lastPlayer==\"white\":\n        return \"white\"\n    elif not win and lastPlayer==\"black\":\n        return \"white\"\n    else:\n        return \"black\"", "def whoseMove(lastPlayer, win):\n    p = {\"black\" : \"white\", \"white\" : \"black\"}\n    if win :\n        return lastPlayer\n    else :\n        return p[lastPlayer]", "def whoseMove(lastPlayer, win):\n    winlose = ['black', 'white']\n    winlose.remove(lastPlayer)\n    return lastPlayer*win + winlose[0]* (not win)", "def whoseMove(lastPlayer, win):\n    if lastPlayer==\"black\" and win or lastPlayer==\"white\" and not(win):\n        return \"black\"\n    if lastPlayer==\"white\" and win or lastPlayer==\"black\" and not(win):\n        return \"white\"\n", "def whoseMove(lastPlayer, win):\n    if win == True:\n        return lastPlayer\n    \n    if lastPlayer == \"white\":\n        return \"black\"\n    \n    else:\n        return \"white\"", "def whoseMove(lastPlayer, win):\n    if lastPlayer == 'black' and win == False or lastPlayer =='white' and win == True : return 'white'\n    elif lastPlayer == 'white' and win == False or lastPlayer =='black' and win == True: return 'black'", "def whoseMove(lastPlayer, win):\n    if win == True:\n        return lastPlayer\n    if win == False:\n        if lastPlayer == 'black':\n            return \"white\" \n        else:\n            return \"black\"\n    \n", "def whoseMove(lastPlayer, win):\n    if lastPlayer=='white' and win:\n        return 'white'\n    elif lastPlayer=='white' and not win:\n        return 'black'\n    elif lastPlayer=='black' and win:\n        return 'black'\n    else:\n        return 'white'", "def whoseMove(lastPlayer, win):\n    if win is False:\n        if lastPlayer=='black':\n            return 'white'\n        return 'black'\n    if win is True:\n        if lastPlayer=='black':\n            return 'black'\n        return 'white'", "def whoseMove(lastPlayer, win):\n    if win != True:\n        if lastPlayer == 'black':\n            return 'white'\n        else:\n            return 'black'\n    else:\n        return lastPlayer", "def whoseMove(lastPlayer, win):\n    if win == True:\n        return lastPlayer\n    else:\n        return \"black\" if lastPlayer == \"white\" and win == False else \"white\"", "def whoseMove(lastPlayer, win):\n    pls = ['black', 'white']\n    return lastPlayer if win else pls[pls.index(lastPlayer)-1]", "def whoseMove(lastPlayer, win):\n    if lastPlayer == 'black' and win:\n        return 'black'\n    if lastPlayer == 'black' and win == False:\n        return 'white'\n    if lastPlayer == 'white' and win:\n        return 'white'\n    if lastPlayer == 'white' and win == False:\n        return 'black'", "def whoseMove(last_player, win):\n    return last_player if win else {\"white\": \"black\"}.get(last_player, \"white\")", "def whoseMove(l, w):\n    return 'white' if (l=='black' and not w) or ((l=='white' and w)) else 'black'", "def whoseMove(lastPlayer, win):\n    if lastPlayer == 'black' and win is False:\n        return 'white'\n    elif lastPlayer == 'black' and win is True:\n        return'black'\n    elif lastPlayer == 'white' and win is False:\n        return'black'\n    elif lastPlayer == 'white' and win is True:\n        return'white'", "def whoseMove(lastPlayer, win):\n    other = \"\"\n    if lastPlayer == \"black\":\n        other = \"white\"\n    else:\n        other = \"black\"\n    if win:\n       return lastPlayer\n    return other\n \n        \n        \n    # Your Move...\n", "def whoseMove(lastPlayer, win):\n    l = lastPlayer\n    w = win\n    \n    if l == 'white' and w == False:\n        return 'black'\n    \n    if l == 'white' and w == True:\n        return 'white'\n    \n    if l == 'black' and w == True:\n        return 'black'\n    \n    if l == 'black' and w == False:\n        return 'white'", "def whoseMove(lastPlayer, win):\n    if win == False and lastPlayer == \"black\":\n        return \"white\"\n    elif win == False and lastPlayer == \"white\":\n        return \"black\"\n    return lastPlayer", "def whoseMove(lastPlayer, win):\n    print(lastPlayer, win)\n    return lastPlayer if win else 'white' * (lastPlayer != 'white') + 'black' * (lastPlayer != 'black')", "def whoseMove(lastPlayer, win):\n    loser = {\"white\": \"black\", \"black\":\"white\"}\n    winer = {\"black\": \"black\", \"white\":\"white\"}\n    \n    if win:\n        return winer[lastPlayer]\n    else:\n        return loser[lastPlayer] ", "def whoseMove(lastPlayer, win):\n    if win:\n        return lastPlayer\n    else:\n        return ('black','white') [lastPlayer == 'black']", "def whoseMove(lastPlayer, win):\n    players = ('black', 'white', 'black')\n    return players[players.index(lastPlayer) + (not win)]", "def whoseMove(lastPlayer, win):\n    temp = {'black':'white', 'white':'black'}\n    if win == True:\n        return lastPlayer\n    else:\n        return temp[lastPlayer]", "def whoseMove(lastPlayer, win):\n    if lastPlayer == \"white\" and win is True:\n        return \"white\"\n    if lastPlayer == \"black\" and win is True:\n        return \"black\"\n    if lastPlayer == \"white\" and win is False:\n        return \"black\"\n    if lastPlayer == \"black\" and win is False:\n        return \"white\"\n", "def whoseMove(lastPlayer, win):\n    return \"white\" if (\"white\" == lastPlayer and win == True) or (lastPlayer == \"black\" and win == False) else \"black\"", "def whoseMove(lastPlayer, win):\n    if lastPlayer == 'black':\n        return 'white' if win == False else 'black'\n    elif lastPlayer == 'white':\n        return 'black' if win == False else 'white'", "def whoseMove(lastPlayer, win):\n    if lastPlayer=='white'and win:\n        return \"white\"\n    elif lastPlayer=='black' and not win:\n        return 'white'\n    elif lastPlayer=='white' and not win:\n        return 'black'\n    elif lastPlayer=='black' and win:\n        return 'black'", "players = ['white', 'black']\ndef whoseMove(lastPlayer, win):\n    return players[(players.index(lastPlayer) + (not win)) % len(players)]", "opponents = {'black': 'white', 'white': 'black'}\n\ndef whoseMove(last_player, win):\n    return last_player if win else opponents[last_player]", "def whoseMove(lastPlayer, win):\n    players=['white', 'black']\n    if win: return lastPlayer\n    else:\n      players.remove(lastPlayer)\n      return players[0]", "whoseMove = lambda last_player, win: ('black', 'white', 'black')[('black', 'white').index(last_player) + (not win)]", "def whoseMove(lastPlayer, win):\n    voc = {'black':'white','white':'black'}\n    if win:\n        return lastPlayer\n    else:\n        return voc[lastPlayer]", "def whoseMove(lastPlayer, win):\n    if win and lastPlayer == 'black': return 'black'\n    if not(win) and lastPlayer == 'white': return 'black'\n    return 'white'\n", "def whoseMove(lastPlayer, win):\n    if lastPlayer == \"white\":\n        other_player = \"black\"\n    else:\n        other_player = \"white\"\n    return lastPlayer if win is True else other_player", "def whoseMove(lastPlayer, win):\n    if win==True :\n       return lastPlayer\n    if win==False :\n       if lastPlayer==\"black\":\n          return \"white\"\n       return \"black\"", "# Without logical operators\ndef whoseMove(lastPlayer, win):\n    return {(\"black\", False): \"white\",\n            (\"black\", True): \"black\",\n            (\"white\", False): \"black\",\n            (\"white\", True): \"white\",}[(lastPlayer, win)]", "def whoseMove(lastPlayer, win):\n    return {(\"black\", False): \"white\",\n            (\"black\", True): \"black\",\n            (\"white\", False): \"black\",\n            (\"white\", True): \"white\",}[(lastPlayer, win)]"]