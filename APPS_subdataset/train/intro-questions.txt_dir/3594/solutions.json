["from collections import Counter\nimport re\n\ndef is_isogram(word):\n    if type(word) is not str or not word: return False\n    return len(set( Counter(re.sub(r'[^a-z]', \"\", word.lower())).values() )) == 1", "from collections import Counter\n\ndef is_isogram(word):\n    try:\n        return len(set(Counter(filter(str.isalpha, word.lower())).values())) == 1\n    except AttributeError:\n        return False", "is_isogram=lambda s:1==isinstance(s,str)==len(set(__import__('collections').Counter(filter(str.isalpha,s.lower())).values()))", "def is_isogram(word):\n    if not (word and isinstance(word, str)):\n        return False\n    word = word.lower()\n    return len(set(word.count(c) for c in set(word) if c.isalpha())) == 1\n", "def is_isogram(word):\n    if type(word) is str:\n        if word is not None:\n            w = ''.join(i.lower() for i in word if ord(i.lower()) in range(97,123) or ord(i.lower()) in range(48,58))\n            if len(w) > 0:\n                if len(w) % len(set(w)) == 0:\n                    return True\n    return False\n", "import collections\n\ndef is_isogram(word):\n    if not isinstance(word, str) or not word: return False\n    counter = collections.Counter(c for c in word.lower() if c.isalpha())\n    return len(set(count for c, count in counter.items())) == 1", "from collections import Counter\ndef is_isogram(word):\n    if not isinstance(word, str): return False\n    counts = Counter(filter(str.isalpha, word.lower()))\n    return bool(counts) and min(counts.values()) == max(counts.values())", "def is_isogram(word):\n    if type(word) != str or word == '':\n        return False\n    \n    word = word.lower()\n    cnts = [word.count(c) for c in word if c.isalpha()]\n    return len(set(cnts)) == 1", "is_isogram = lambda word: type(word) == str and bool(word) and len(set( __import__(\"collections\").Counter( __import__(\"re\").sub(r'[^a-z]', \"\", word.lower())).values() )) == 1", "def is_isogram(word):\n    try:\n        word = word.lower()\n        letters = [c for c in word if c.isalpha()]\n        return len(set(word.count(c) for c in letters)) == 1\n    except AttributeError:\n        return False\n\n"]