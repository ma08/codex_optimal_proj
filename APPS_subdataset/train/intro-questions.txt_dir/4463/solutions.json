["def alphabet_position(text):\n    return ' '.join(str(ord(c) - 96) for c in text.lower() if c.isalpha())", "def alphabet_position(s):\n  return \" \".join(str(ord(c)-ord(\"a\")+1) for c in s.lower() if c.isalpha())\n", "alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\ndef alphabet_position(text):\n    if type(text) == str:\n        text = text.lower()\n        result = ''\n        for letter in text:\n            if letter.isalpha() == True:\n                result = result + ' ' + str(alphabet.index(letter) + 1)\n        return result.lstrip(' ')", "from string import ascii_lowercase\n\n\ndef alphabet_position(text):\n    return ' '.join(str(ascii_lowercase.index(n.lower()) + 1) for n in text if n.isalpha())", "import string\n\ndef alphabet_position(text):\n    return \" \".join([str(string.lowercase.index(letter.lower())+1) for letter in list(text) if letter.isalpha()])", "def get_positions(text):\n    for char in text:\n        pos = ord(char)\n        if pos >= 65 and pos <= 90:\n            yield pos - 64\n        if pos >= 97 and pos <= 122:\n            yield pos - 96\n\ndef alphabet_position(text):\n    return \" \".join((str(char) for char in get_positions(text)))\n", "def alphabet_position(text):\n    alphabet = {  'a' : 1,\n                  'b' : 2,\n                  'c' : 3,\n                  'd' : 4,\n                  'e' : 5,\n                  'f' : 6,\n                  'g' : 7,\n                  'h' : 8,\n                  'i' : 9,\n                  'j' : 10,\n                  'k' : 11,\n                  'l' : 12,\n                  'm' : 13,\n                  'n' : 14,\n                  'o' : 15,\n                  'p' : 16,\n                  'q' : 17,\n                  'r' : 18,\n                  's' : 19,\n                  't' : 20,\n                  'u' : 21,\n                  'v' : 22,\n                  'w' : 23,\n                  'x' : 24,\n                  'y' : 25,\n                  'z' : 26, }\n    inds = []\n    for x in text.lower():\n        if x in alphabet:\n            inds.append(alphabet[x])\n    return ' '.join(([str(x) for x in inds]))\n\n", "def alphabet_position(text):\n  al = 'abcdefghijklmnopqrstuvwxyz'\n  return \" \".join(filter(lambda a: a != '0', [str(al.find(c) + 1) for c in text.lower()]))", "def alphabet_position(text):\n    \n    upper_alpha = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    lower_alpha = \"abcdefghijklmnopqrstuvwxyz\"\n    l = [] \n    \n    for i in text:\n        if i in upper_alpha:\n            index = upper_alpha.index(i) + 1\n            l.append(str(index))\n        elif i in lower_alpha:\n            index = lower_alpha.index(i) + 1\n            l.append(str(index)) \n    return \" \" .join(l)", "#import string so we can generate the alphabets using string.ascii\nimport string\n\ndef alphabet_position(text):\n    lower_case_text = text.lower() #convert the given text into all lowercase letters\n    alphabet = string.ascii_lowercase # generate lowercase letters from the string module\n    number = list(range(1, 27)) #generate numbers from 1-26\n    dict_alphabet_number = dict(list(zip(alphabet, number))) # combine the aphabets in a dictionary using dict and zip\n    collector = [] # create a container to old the numbers generated from the loop\n    \n    for element in lower_case_text: \n        if element in alphabet:\n            collector.append(str(dict_alphabet_number[element])) \n    return ' '.join(collector)\n    \n            \n            \n"]