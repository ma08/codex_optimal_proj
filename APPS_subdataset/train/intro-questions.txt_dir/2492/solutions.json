["class Solution:\n    def minOperations(self, logs: List[str]) -> int:\n        \n        t=0\n        for i in logs:\n            if i=='../':\n                t=t-1\n            elif i=='./':\n                t=t\n            else:\n                t=t+1\n            if t<0:\n                t=0\n        return t", "class Solution:\n    def minOperations(self, logs: List[str]) -> int:\n        result = 0\n        for log in logs:\n            if log[:-1] == '..':\n                result = max(0, result - 1)\n            elif log[:-1] == '.':\n                pass\n            else:\n                result += 1\n        return result\n", "class Solution:\n    def minOperations(self, logs: List[str]) -> int:\n        stack = []\n        for line in logs:\n            if line == '../':\n                if stack:\n                    stack.pop()\n            elif line == './':\n                pass\n            else:\n                stack.append(line)\n        return len(stack)\n", "class Solution:\n    def minOperations(self, logs: List[str]) -> int:\n        depth = 0\n        for i in logs:\n            if i =='../':\n                depth = max(0, depth-1)\n            elif i !='./':\n                depth += 1\n        return depth\n", "class Solution:\n    def minOperations(self, logs: List[str]) -> int:\n        c = 0\n        i = 0\n        while i<len(logs):\n            if logs[i] == '../':\n                if c != 0:\n                    c -= 1\n            elif logs[i] == './':\n                pass\n            else:\n                c += 1\n            i += 1\n        return c", "class Solution:\n    def minOperations(self, logs: List[str]) -> int:\n        s = []\n        c = 0\n        i = 0\n        while i<len(logs):\n            if logs[i] == '../':\n                if c != 0:\n                    c -= 1\n            elif logs[i] == './':\n                i += 1\n                continue\n            else:\n                c += 1\n            i += 1\n        return c"]