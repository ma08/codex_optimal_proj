["class Solution:\n    def repeatedNTimes(self, A: List[int]) -> int:\n        dict_ = dict()\n        \n        for a in A:\n            if a in dict_:\n                return a\n            else:\n                dict_[a] = 1\n", "class Solution:\n    def repeatedNTimes(self, A: List[int]) -> int:\n        for i in range(1, len(A)):\n            if A[i] == A[i - 1] or (i - 2 >= 0 and A[i] == A[i - 2]):\n                return A[i]\n        return A[0]", "class Solution:\n    def repeatedNTimes(self, A: List[int]) -> int:\n        from collections import Counter\n        c = Counter(A)\n        c = list(c.most_common(1))\n        return c[0][0]\n", "class Solution:\n    def repeatedNTimes(self, A: List[int]) -> int:\n        N = len(A)\n        counter = {}\n        for num in A:\n            if num in counter:\n                counter[num] += 1\n            else:\n                counter[num] = 1\n            \n            if counter[num] == N//2:\n                return num", "from collections import Counter as di\n\nclass Solution:\n    def repeatedNTimes(self, a: List[int]) -> int:\n        d = di(a)\n        maxi = (len(a) // 2)\n        return d.most_common(1)[0][0]\n        for i in d:\n            if d[i] == maxi:\n                return i\n        \n", "class Solution:\n    def repeatedNTimes(self, A: List[int]) -> int:\n        rep=len(A)//2\n        d={}\n        for i in A:\n            if i in d:\n                d[i]+=1\n            if i not in d:\n                d[i]=1\n            if d[i]==rep:\n                return i\n            \n            \n", "class Solution:\n    def repeatedNTimes(self, A: List[int]) -> int:\n        nums = {}\n        for i in A:\n            if i not in list(nums.keys()):\n                nums[i] = 1\n            else:\n                nums[i] += 1\n        \n        print(nums)\n        \n        for i in nums:\n            if nums[i] == len(A) / 2:\n                return i\n            \n", "class Solution:\n    def repeatedNTimes(self, A: List[int]) -> int:\n        N = len(A)\n        \n        freq = {}\n        maxv = (None, -math.inf)\n        for v in A:\n            # Initialize the map entry if v is not in the map\n            if v not in freq: freq[v] = 0\n            # Increment the frequency of v\n            freq[v] += 1\n            # Check if v is the maxmimum frequency element\n            if freq[v] > maxv[1]:\n                maxv = (v, freq[v])\n            # Check if we're done\n            if freq[v] == N:\n                return v\n        \n        return maxv[0]", "class Solution:\n    def repeatedNTimes(self, A: List[int]) -> int:\n        N = len(A) // 2\n        return ((sum(A) - sum(set(A))) // (N - 1))", "from collections import Counter\nclass Solution:\n    def repeatedNTimes(self, A: List[int]) -> int:\n        ans = 0\n        c = Counter(A)\n        count = 0\n        # print(c)\n        for i in c:\n            print(('{} = {}'.format(i,c[i])))\n            if c[i]>count:\n                count = c[i]\n                ans = i\n        return ans\n    \n        \n        \n        \n        \n        # dic = {}\n#         ans = 0\n#         for x in range(0,len(A),1):\n#             if A[x] in dic:\n#                 dic[A[x]] += 1\n                \n#                 if dic[A[x]] >ans:\n#                     ans = A[x]\n#             else:\n#                 dic[A[x]]=1\n        \n        \n#         return ans\n                \n", "class Solution:\n    def repeatedNTimes(self, A: List[int]) -> int:\n        d={}\n        for i in A:\n            if i in d:\n                return i\n            else:\n                d[i]=1", "class Solution:\n    def repeatedNTimes(self, A: List[int]) -> int:\n        for i in range(len(A)):\n            for j in A[:i]:\n                if j == A[i]:\n                    return j", "class Solution:\n    def repeatedNTimes(self, A: List[int]) -> int:\n        dic = collections.Counter(A)\n        for num in dic:\n            if dic[num] > 1:\n                return num", "from collections import Counter as C\nclass Solution:\n    def repeatedNTimes(self, A: List[int]) -> int:\n        s = C(A).most_common()\n        return s[0][0]", "class Solution:\n    def repeatedNTimes(self, A: List[int]) -> int:\n        dic = {}\n        for element in A:\n            if(not (element in dic)):\n                dic[element] = 1\n            else:\n                return element", "class Solution:\n    def repeatedNTimes(self, qq: List[int]) -> int:\n        stack = []\n        for i in qq:\n            if i not in stack:\n                stack.append(i)\n            else:\n                return i", "class Solution:\n    def repeatedNTimes(self, A: List[int]) -> int:\n        return (sum(A) - sum(set(A))) // (len(A)// 2 -1)", "from collections import Counter\n\nclass Solution:\n    def repeatedNTimes(self, A: List[int]) -> int:\n        cnt = Counter(A).most_common(1)\n        return cnt[0][0]", "class Solution:\n    def repeatedNTimes(self, A: List[int]) -> int:\n        count = collections.Counter(A)\n        for i in count:\n            if count[i] > 1:\n                return i\n", "from collections import Counter\nclass Solution:\n    def repeatedNTimes(self, A: List[int]) -> int:\n        ct = Counter(A)\n        return ct.most_common(1)[0][0]\n", "class Solution:\n    def repeatedNTimes(self, A: List[int]) -> int:\n        size = len(A)\n        n = size/2\n        appear = {}\n        for i in range(size):\n            if A[i] not in list(appear.keys()):\n                appear[A[i]] = 1\n            else:\n                appear[A[i]] += 1\n        # print(appear)\n        for i in list(appear.items()):\n            if i[1] == n:\n                return i[0]\n    \n", "class Solution:\n    def repeatedNTimes(self, A: List[int]) -> int:\n        tracker = set()\n        for num in A:\n            if not num in tracker:\n                tracker.add(num)\n            else:\n                return num", "class Solution:\n    def repeatedNTimes(self, A: List[int]) -> int:\n        counter = collections.Counter(A)\n        mostc = counter.most_common(1)\n        \n        for key,value in mostc:\n            return key", "class Solution:\n    def repeatedNTimes(self, A: List[int]) -> int:\n        if A==[]:\n            return 0\n        d={}\n        for i in A:\n            if i not in d.keys():\n                d[i]=1\n            else:\n                return i\n        return 0", "class Solution:\n    def repeatedNTimes(self, A: List[int]) -> int:\n        maos = {x:0 for x in set(A)}\n        for x in A:\n            maos[x]+=1\n        for x in maos:\n            if maos[x] == len(A)//2:\n                return x", "class Solution:\n    def repeatedNTimes(self, A: List[int]) -> int:\n        #N = len(A)/2\n        #for num in A:\n         #   if A.count(num) == N:\n          #      return num\n        check = set()\n        for num in A:\n            if num in check:\n                return num\n            check.add(num)", "class Solution:\n    def repeatedNTimes(self, A: List[int]) -> int:\n        sA = sorted(A)\n        temp = None\n        for i in sA:\n            if i == temp:\n                return i\n            temp = i", "class Solution:\n    def repeatedNTimes(self, A: List[int]) -> int:\n        count = collections.Counter(A)\n        \n        for i in count:\n            if count[i] > 1:\n                return i", "class Solution:\n    def repeatedNTimes(self, A: List[int]) -> int:\n        temp = None\n        for i in A:\n            if i == temp:\n                return i\n            temp = i\n            \n        if A[0] == A[-2] or A[0] == A[-1]:\n            return A[0]\n        elif  A[-1] == A[-3]:\n            return A[-1]", "class Solution:\n    def repeatedNTimes(self, A: List[int]) -> int:\n        record = set()\n        for a in A:\n            if a in record:\n                return a\n            else:\n                record.add(a)", "class Solution:\n    def repeatedNTimes(self, A: List[int]) -> int:\n        d={}\n        for i in A:\n            if i in d:\n                return i\n            else:\n                d[i]=1\n        return None", "class Solution:\n     def repeatedNTimes(self, A):\n        for i in range(len(A)):\n            if A[i - 1] == A[i] or A[i - 2] == A[i]:\n                return A[i]\n        return A[0]", "class Solution:\n    def repeatedNTimes(self, A: List[int]) -> int:\n        ans = Counter(A)\n        return sorted(list(ans.keys()), key=lambda x: ans.get(x), reverse=True)[0]\n", "class Solution:\n    def repeatedNTimes(self, A: List[int]) -> int:\n        d = {}\n        \n        for value in A:\n            if value in d:\n                return value\n            d[value] = 1", "class Solution:\n    def repeatedNTimes(self, A) -> int:\n        B = list(A)\n        B.sort()\n        for i in range(0, len(B)):\n            if B[i] == B[i+1]:\n                return B[i]   \n            else:\n                pass\n\np = Solution()       \ntestList = [5,1,5,2,5,3,5,4]\nprint(p.repeatedNTimes(testList))", "class Solution:\n    def repeatedNTimes(self, A: List[int]) -> int:\n        for i, a in enumerate(A):\n            if a in A[:i]:\n                return a", "class Solution:\n    def repeatedNTimes(self, A: List[int]) -> int:\n        myDict = collections.Counter(A)\n        \n        for _ in myDict:\n            if myDict[_]>1:\n                return _", "class Solution:\n    def repeatedNTimes(self, A: List[int]) -> int:\n        n = len(A)\n        if n == 0:\n            return []\n        if n == 2:\n            return A[0]\n        A.sort()\n        for i in range(n):\n            if A[i] == A[i+1]:\n                return A[i]\n            \n            \n", "from collections import Counter\nclass Solution:\n    def repeatedNTimes(self, A: List[int]) -> int:\n        stack = []\n        \n        for n in A:\n            if n not in stack:\n                stack.append(n)\n            else:\n                return n", "class Solution:\n    def repeatedNTimes(self, A: List[int]) -> int:\n        B = A.copy()\n        for x in A:\n            B.remove(x)\n            if x in B:\n                return x", "class Solution:\n    def repeatedNTimes(self, A: List[int]) -> int:\n        rep = {}\n        for item in A:\n            if item not in rep:\n                rep[item] = 1\n            else:\n                return item\n        return None", "class Solution:\n    def repeatedNTimes(self, A: List[int]) -> int:\n        N = len(A)/2\n        for num in A:\n            if A.count(num) == N:\n                return num\n", "class Solution:\n    def repeatedNTimes(self, A: List[int]) -> int:\n       \n        for i in range(0,len(A)):\n            new = [A[i]]\n            for j in range(i+1, len(A)):\n                if (A[i] == A[j]) :\n                    new.append(A[i])\n                    if len(new) == len(A)/2: \n                        print(new)\n                        return A[i]\n       \n        \n", "class Solution:\n    def repeatedNTimes(self, A: List[int]) -> int:\n        a = set()\n        for i in A:\n            if i in a:\n                return i\n            else:\n                a.add(i)", "class Solution:\n    def repeatedNTimes(self, A: List[int]) -> int:\n        \n        myDict = {}\n        \n        for i in A:\n      \n            myDict[i] = myDict.get(i, 0) + 1\n            if myDict[i] == len(A)/2:\n                return i\n", "class Solution:\n    def repeatedNTimes(self, A: List[int]) -> int:\n        dic={}\n        for i in A:\n            if i not in dic:\n                dic[i]=0\n            else:\n                return i", "class Solution:\n    def repeatedNTimes(self, A: List[int]) -> int:\n        count_dict = collections.Counter(A)\n        for key, value in list(count_dict.items()):\n            if value > 1:\n                return key\n            \n", "class Solution:\n    def repeatedNTimes(self, A: List[int]) -> int:\n        # check the first elem first\n        result = A[0]\n        count = 0\n        if A.count(result) == len(A)//2:\n            return result\n        for i in A[1:]:\n            if count == 0:\n                result = i\n                print('a')\n                count = 1\n            elif result == i:\n                print('b')\n                count += 1\n            else:\n                print('c')\n                count -= 1\n            \n        return result\n", "from collections import Counter\nclass Solution:\n    def repeatedNTimes(self, A: List[int]) -> int:\n        n = len(A) // 2 \n        d = Counter(A)\n        \n        for idx, val in d.items():\n            if val == n:\n                return idx\n        return -1", "import collections\nclass Solution:\n    def repeatedNTimes(self, A: List[int]) -> int:\n        dic=Counter(A)\n        for i in dic:\n            if(dic[i]>1):\n                return i\n        # dic={}\n        # if(len(A)>0):\n        #     for i in A:\n        #         if i in dic:\n        #             return i\n        #         else:\n        #             dic[i]=1\n", "class Solution:\n    def repeatedNTimes(self, A: List[int]) -> int:\n        occurences = set()\n        for val in A:\n            if val in occurences:\n                return val\n            occurences.add(val)\n", "class Solution(object):\n    def repeatedNTimes(self, A):\n        for k in range(1, 4):\n            for i in range(len(A) - k):\n                if A[i] == A[i+k]:\n                    return A[i]", "class Solution:\n    def repeatedNTimes(self, A: List[int]) -> int:\n        length = len(A)\n        n = length // 2\n        mydict = {}\n        for item in A:\n            mydict[item] = mydict.get(item, 0) + 1\n            if mydict[item] == n:\n                return item", "class Solution:\n    def repeatedNTimes(self, A: List[int]) -> int:\n        count_dict = collections.Counter(A)\n        for key, value in list(count_dict.items()):\n            if value == len(A) / 2:\n                return key\n            \n", "from collections import Counter\nclass Solution:\n    def repeatedNTimes(self, A: List[int]) -> int:\n        counter = Counter(A)\n        return counter.most_common(1)[0][0]", "class Solution:\n    def repeatedNTimes(self, A: List[int]) -> int:\n        from collections import Counter\n        cc = Counter(A)\n        for key in list(cc.keys()):\n            if cc[key] == len(A)//2:\n                return key\n", "class Solution:\n    def repeatedNTimes(self, A: List[int]) -> int:\n        j = set()\n        for num in A:\n            if num in j:\n                return num\n            else:\n                j.add(num)\n        return False\n", "class Solution:\n    def repeatedNTimes(self, A: List[int]) -> int:\n        a = sum(A)\n        b = sum(set(A))\n        n = len(A)//2\n        if a==0:\n            return 0\n        c = (a-b)//(n-1)\n        return c", "class Solution:\n    def repeatedNTimes(self, A: List[int]) -> int:\n        c = collections.Counter(A)\n        for k in c:\n            if c[k] == len(A)//2:\n                break\n        return k", "class Solution:\n    def repeatedNTimes(self, A: List[int]) -> int:\n        N = len(A)//2\n        \n        A_map = defaultdict(int)\n        for a in A:\n            A_map[a] +=1\n            if A_map[a] == N:\n                return a\n", "class Solution:\n    def repeatedNTimes(self, A: List[int]) -> int:\n        twoN = len(A)\n        N = twoN//2\n        unique = N+1\n        hashMap = {}\n        for num in A:\n            if num not in hashMap:\n                hashMap[num] =1\n            else:\n                hashMap[num] +=1\n        for key,value in hashMap.items():\n            if value == N:\n                return key", "class Solution:\n    def repeatedNTimes(self, A: List[int]) -> int:\n        count = collections.Counter(A)\n        repeat = len(A)//2\n        for key in count:\n            if count[key] == repeat:\n                return key\n        return -1", "class Solution:\n    def repeatedNTimes(self, A: List[int]) -> int:\n        dic = self.convert_to_dic(A)\n        for i in dic:\n            if dic[i] > 1:\n                return i\n            \n        \n    def convert_to_dic(self, A):\n        dic = {}\n        for i in A:\n            if i in dic:\n                dic[i] += 1\n            else:\n                dic[i] = 1\n        return dic"]