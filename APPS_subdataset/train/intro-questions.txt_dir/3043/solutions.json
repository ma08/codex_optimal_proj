["def print_nums(*arr):\n    if not arr: return ''\n    ln = len(str(max(arr)))\n    return '\\n'.join(str(c).zfill(ln) for c in arr)", "def print_nums(*num):\n    return \"\\n\".join([str(x).zfill(len(str(max(num)))) for x in num])\n", "def print_nums(*args):\n    return \"\\n\".join(\"{:0{}}\".format(n, len(str(max(args)))) for n in args) if args else \"\"", "def print_nums(*args):\n    return '\\n'.join(['0'*(len(str(max(args)))-len(str(x)))+str(x) for x in args])", "print_nums=lambda*a:'\\n'.join('%0*d'%(len(str(max(a))),n)for n in a)", "def print_nums(*args):\n    try:\n        fmt = '{{:0>{}}}'.format(len(str(max(args)))).format\n    except ValueError:\n        return ''\n    return '\\n'.join(fmt(a) for a in args)", "def print_nums(*nums):\n    l = len(str(max(nums, default=0)))\n    return \"\\n\".join(f\"{n:0{l}d}\" for n in nums)", "def print_nums(*args):\n    z = len(str(max(args))) if args else 0\n    return '\\n'.join(str(n).zfill(z) for n in args)", "def print_nums(*args):\n  width = max((len(str(num)) for num in args), default=0)\n  return '\\n'.join('{:0{}d}'.format(num, width) for num in args)", "def print_nums(*args):\n    max_len = max([len(str(n)) for n in args]) if len(args) > 0 else 0\n    return '\\n'.join('0' * (max_len - len(str(n))) + str(n) for n in args)"]