["from functools import reduce\nfrom gmpy2 import comb\nfrom operator import xor\n\ndef transform(a, x):\n    return reduce(xor, (comb(n + 1, x + 1) for n in a))", "def transform(A, x):\n    c, i, f, r = 1, x, 0, None\n    for n in sorted(A):\n        while i <= n:\n            c *= i\n            c //= i-x or x\n            i += 1\n            f += c\n        if r is None: r = f\n        else: r ^= f\n    return r", "from functools import reduce\n\ndef transform(lst, r):\n    return reduce(int.__xor__, (F(n, r) for n in lst))\n\ndef F(n, r):\n    t = 1\n    for i in range(1, r + 2):\n        t = t * (n - i + 2) // i\n    return t", "from gmpy2 import comb\nfrom operator import xor\nfrom functools import reduce\n\ntransform = lambda A,x: reduce(xor, (comb(n+1, x+1) for n in A))", "from functools import reduce\nfrom operator import xor\n\nF = [[0] * 11 for i in range(10001)]\nfor x in range(1, 11):\n    F[x][x] = y = 1\n    for i in range(x+1, 10001):\n        y = y * i // (i-x)\n        F[i][x] = F[i-1][x] + y\n\ndef transform(A, x):\n    return reduce(xor, (F[a][x] for a in A))", "from functools import reduce\nfrom operator import xor\nfrom scipy.misc import comb\n\n\ndef transform(A, x):\n    return reduce(xor, map(lambda n: comb(n+1,x+1,exact=True),A))", "from scipy.special import binom\nfrom operator import xor\nfrom functools import reduce\n\ndef transform(A, x):\n    return reduce(xor, [int(round(binom(n + 1, x + 1))) for n in A])", "from gmpy2 import comb\nfrom operator import xor\nfrom functools import reduce\ndef transform(A, x):\n        return reduce( xor ,(comb(n+1,x+1) for n in A))\n", "from functools import reduce\nfrom itertools import accumulate\ndef transform(a,x):\n    b=sorted(set([x]+a))\n    C=[[1]]\n    def g(m,n):\n        w=[C[-1][-1]]\n        for i,j in enumerate(m,start=1):\n            w.append(w[i-1]*j/(j-n))\n        return C.append(w[1:])\n    for j in (range(b[i-1]+1,b[i]+1) for i in range(1,len(b))):\n        g(j,x)\n    v={x:y for x,y in zip(b,accumulate(int(sum(i)) for i in C))}\n    return reduce(lambda x,y:x^y,[v[i] for i in a])", "from scipy.special import comb as f\nfrom functools import reduce\n\ndef transform(arr, n):\n    arr = (f(x+1, n+1, exact=True) for x in arr)\n    return reduce(lambda x,y: x^y, arr)"]