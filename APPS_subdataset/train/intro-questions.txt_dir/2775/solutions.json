["def likes(names):\n    n = len(names)\n    return {\n        0: 'no one likes this',\n        1: '{} likes this', \n        2: '{} and {} like this', \n        3: '{}, {} and {} like this', \n        4: '{}, {} and {others} others like this'\n    }[min(4, n)].format(*names[:3], others=n-2)", "def likes(names):\n    if len(names) == 0:\n        return \"no one likes this\"\n    elif len(names) == 1:\n        return \"%s likes this\" % names[0]\n    elif len(names) == 2:\n        return \"%s and %s like this\" % (names[0], names[1])\n    elif len(names) == 3:\n        return \"%s, %s and %s like this\" % (names[0], names[1], names[2])\n    else:\n        return \"%s, %s and %s others like this\" % (names[0], names[1], len(names)-2)", "def likes(names):\n    # make a dictionary d of all the possible answers. Keys are the respective number\n    # of people who liked it.\n    \n    # {} indicate placeholders. They do not need any numbers but are simply replaced/formatted\n    # in the order the arguments in names are given to format\n    # {others} can be replaced by its name; below the argument \"others = length - 2\"\n    # is passed to str.format()\n    d = {\n        0: \"no one likes this\",\n        1: \"{} likes this\",\n        2: \"{} and {} like this\",\n        3: \"{}, {} and {} like this\",\n        4: \"{}, {} and {others} others like this\"\n        }\n    length = len(names)\n    # d[min(4, length)] insures that the appropriate string is called from the dictionary\n    # and subsequently returned. Min is necessary as len(names) may be > 4\n    \n    # The * in *names ensures that the list names is blown up and that format is called\n    # as if each item in names was passed to format individually, i. e.\n    # format(names[0], names[1], .... , names[n], others = length - 2\n    return d[min(4, length)].format(*names, others = length - 2)\n", "def likes(names):\n    formats = {\n            0: \"no one likes this\",\n            1: \"{} likes this\",\n            2: \"{} and {} like this\",\n            3: \"{}, {} and {} like this\",\n            4: \"{}, {} and {others} others like this\"\n        }\n    n = len(names)\n    return formats[min(n,4)].format(*names, others=n-2)\n", "def likes(names):\n    if len(names) == 0:\n        return 'no one likes this'\n    elif len(names) == 1:\n        return str(names[0]+' likes this')\n    elif len(names) == 2:\n        return str(names[0]+' and '+names[1]+' like this')\n    elif len(names) == 3:\n        return str(names[0]+', '+names[1]+' and '+names[2]+' like this')\n    else:\n        return str(names[0]+', '+names[1]+' and '+str(len(names)-2)+' others like this')", "def likes(names):\n    \"\"\"Convert list of names into strings of likes\n\n    Args:\n        names (list): List of string names\n\n    Returns:\n        str\n\n    Examples:\n        >>> likes(['Pavel', 'Yury', 'Sveta'])\n        'Pavel, Yury and Sveta like this'\n    \"\"\"\n    if not names:\n        return 'no one likes this'\n    if len(names) == 1:\n        first = ''\n        second = names[0]\n    elif len(names) == 2:\n        first = names[0]\n        second = names[1]\n    elif len(names) == 3:\n        first = ', '.join(names[:2])\n        second = names[-1]\n    else:\n        first = ', '.join(names[:2])\n        second = '%d others' % (len(names) - 2)\n    if first:\n        return first + ' and ' + second + ' like this'\n    else:\n        return second + ' likes this'", "def likes(names):\n    l = len(names)\n    if l == 0: return 'no one likes this'\n    if l == 1: return '{} likes this'.format(names[0])\n    if l == 2: return '{} and {} like this'.format(names[0], names[1])\n    if l == 3: return '{}, {} and {} like this'.format(names[0], names[1], names[2])\n    return '{}, {} and {} others like this'.format(names[0], names[1], len(names)-2)\n", "\ndef likes(names):\n    output = {\n        0 : \"no one likes this\",\n        1 : \"{} likes this\",\n        2 : \"{} and {} like this\",\n        3 : \"{}, {} and {} like this\",\n        4 : \"{}, {} and {others} others like this\",\n    }\n    \n    count = len(names)\n    \n    return output[min(4,count)].format(*names[:3], others=count-2)", "def likes(names):\n    if not names:\n        return \"no one likes this\"\n    size = len(names)\n    if size == 1:\n        return \"%s likes this\" % names[0]\n    if size == 2:\n        return \"%s and %s like this\" % (names[0], names[1])\n    if size == 3:\n        return \"%s, %s and %s like this\" % (names[0], names[1], names[2])\n    if size >= 4:\n        return \"%s, %s and %s others like this\" % (names[0], names[1], len(names[2:]))", "def likes(names):\n    l = len(names)\n    s = 'no one likes this'\n    \n    if l == 1:\n        s = names[0] + ' likes this'\n    elif l == 2:\n        s = ' and '.join(names) + ' like this'\n    elif l == 3:\n        s = ', '.join(names[:-1]) + ' and ' + names[-1] + ' like this'\n    elif l != 0:\n        s = ', '.join(names[:2]) + ' and ' + str(l - 2) + ' others like this'\n    \n    return s\n"]