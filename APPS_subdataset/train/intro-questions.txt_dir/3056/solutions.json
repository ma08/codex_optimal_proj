["def palindrome(num,s):\n    if not (type(num) == type(s) == int) or num < 0 or s < 0:\n        return \"Not valid\"\n    \n    ans, num = [], max(num, 11)\n    while len(ans) != s:\n        if num == int(str(num)[::-1]):\n            ans.append(num)\n        num += 1\n    return ans", "def palindrome(num, s):\n    if not isinstance(num, int) or not isinstance(s, int) or num < 0 or s < 0:\n        return 'Not valid'\n    lst = []\n    while len(lst) < s:\n        if str(num) == str(num)[::-1] and num > 9:\n            lst.append(num)\n        num += 1\n    return lst", "def palindrome(n, count):\n    if not (isinstance(n, int) and isinstance(count, int)) or n < 0 or count < 0:\n        return \"Not valid\"\n    result = []\n    if n < 11:\n        n = 11\n    while count:\n        s = str(n)\n        if s == s[::-1]:\n            result.append(n)\n            count -= 1\n        n += 1\n    return result", "def palindrome(num,s):\n    if type(num)!=int or type(s)!=int or num<0 or s<0:\n        return 'Not valid'\n    res=[]\n    i=max(11,num)\n    while len(res)<s:\n        if str(i)==str(i)[::-1]:\n            res.append(i)\n        i+=1\n    return res", "from itertools import count, islice\n\ndef palindrome(num,s):\n    if isinstance(num, int) and isinstance(s, int) and num > 0 <= s:\n        palindromes = (x for x in count(max(num, 11)) if str(x) == str(x)[::-1])\n        return list(islice(palindromes, s))\n    return 'Not valid'", "def palindrome(num,s):\n    if isinstance(num,str) or num<0 or isinstance(s,str) or s<0:\n        return 'Not valid'\n    t = [] \n    i=1\n    while i<=s:\n        if pali(num):\n            t.append(num)\n            i+=1\n        num+=1\n    return t\ndef pali(n):\n    if n>10 and str(n)==str(n)[::-1]:\n        return True\n    return False", "def palindrome(num,s):\n    if type(num) is not int or type(s) is not int or num <0 or s<0:\n        return \"Not valid\"\n    result =[]\n    while s:\n        if is_pal(num):\n            result.append(num)\n            s-=1\n            num +=1\n        else:\n            num += 1\n    return result\n    \n    \ndef is_pal(n):\n    return n >10 and n == int(str(n)[::-1])", "def palindrome(num,s):\n    \n    ispali = lambda n: str(n) == str(n)[::-1]\n    \n    if not isinstance(num, int) or num < 0 or not isinstance(s, int) or s < 0:\n        return \"Not valid\"\n    \n    i = max(num, 10)\n    ans = []\n    while len(ans) < s:\n        if ispali(i):\n            ans.append(i)\n        i += 1\n    return  ans\n", "def palindrome(num,s):\n    if (type(123)!=type(num)) or (type(123)!=type(s)) : return 'Not valid' \n    n = str(num)\n    if any(not c.isdigit() for c in n) or s<0: return 'Not valid'\n    R=[]\n    while len(R)<s:\n        l = len(n)\n        if num>9 and all(a==b for a, b in zip(n[:l//2], n[::-1])): R.append(num)\n        num += 1\n        n = str(num)\n    return R", "def palindrome(n, s, r=[]):\n    if not isinstance(n, int) or not isinstance(s, int) or n < 0 or s < 0:\n        return \"Not valid\"\n    \n    while len(r) < s:        \n        n, s, r = n+1, s, r+[n] if str(n) == str(n)[::-1] and n > 9 else r\n        \n    return r"]