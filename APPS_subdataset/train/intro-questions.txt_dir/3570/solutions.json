["def solve(xs):\n    m = 0\n    for x in sorted(xs):\n        if x > m + 1:\n            break\n        m += x\n    return m + 1", "from itertools import accumulate\n\ndef solve(arr):\n    arr = sorted(arr)\n    return next((x+1 for x, i in zip(accumulate([0]+arr), arr+[0]) if i > x + 1), sum(arr)+1)", "def solve(r):\n    \u01c2 = 1\n    for x in sorted(r):\n        if x > \u01c2:\n            break\n        else: \u01c2 += x\n    return \u01c2", "def solve(arr):\n    arr.sort()\n    res = 1\n    for i in range(len(arr)):\n        if arr[i] <= res:\n            res += arr[i]\n    return res", "def solve(arr):\n    arr, res, n, i = sorted(arr), 1, len(arr), 0\n    while i < n and res >= arr[i]:\n        res, i = res + arr[i], i + 1\n    return res", "def solve(a):\n    a.sort()\n    i,j= 1,0\n    while j < len(a):\n        j += 1\n        if a[j-1] <= i:\n            i += a[j-1]\n        else: \n            break\n    return i", "def solve(arr):\n    miss = 1\n    for a in sorted(arr):\n        if a > miss:\n            break\n        miss += a\n    return miss", "solve=s=lambda a,x=1:a and s(a,x|x<<a.pop())or len(bin(~x&x+1))-3", "def solve(arr):\n    arr.sort()\n    print(arr)\n    for x in range(1,sum(arr)+1):\n        working_arr = []\n        if x in arr:\n            continue\n        for idx_y, y in enumerate(arr):\n            if x < y:\n                working_arr = arr[:idx_y]\n                if sum(working_arr) < x:\n                    return x\n    return sum(arr) + 1\n", "def solve(arr):\n    arr=sorted(arr)\n    l=len(arr)\n    x=1\n    for i in range(l):\n        if arr[i]<=x:\n            x+=arr[i]\n        else:\n            break\n    return x\n  \n"]