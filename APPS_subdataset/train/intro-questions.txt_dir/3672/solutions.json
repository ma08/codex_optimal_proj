["def solve(s):\n    return sum(i+1 for i,d in enumerate(list(s)) if d in '13579')", "def solve(s):\n    return sum( int(c)%2 for i in range(len(s)) for c in s[i:] )", "import itertools\n\n# Walk through s from left to right. If the current digit is odd,\n# It can create odd substrings with every previous digit.\n# The total number of substrings that can be made at each digit\n# location is (1 + digit_index)\ndef solve(s):\n    return sum([i + 1 for i, d in enumerate(s) if d in '13579'])", "def solve(s):\n    return sum([idx + 1 for idx, digit in enumerate(s) if int(digit) % 2 != 0])", "def solve(s):\n    return sum(i for i, n in enumerate(s, 1) if int(n) % 2)", "def solve(s):\n    return sum(i for i, x in enumerate(s, 1) if x in '13579')", "def solve(s):\n    return sum(len(s)- i for i,j in enumerate(s[::-1]) if int(j)%2==1)", "def solve(s):\n    return sum(i for i, c in enumerate(s, 1) if c in \"13579\")", "from itertools import combinations \n\ndef solve(s):\n    res = [s[x:y] for x, y in combinations( list(range(len(s) + 1)), r = 2)] \n    re=[int(x) for x in res]\n    r=[ (x) for x in re if x %2!=0]\n    return(len(r))\n", "solve = lambda Q : sum(1 + F if 1 & int(V) else 0 for F,V in enumerate(Q))"]