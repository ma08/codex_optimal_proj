["def pythagorean_triplet(n):\n    for a in range(3, n):\n        for b in range(a+1, n):\n            c = (a*a + b*b)**0.5\n            if a*b*c > n:\n                break\n            if c == int(c) and a*b*c == n:\n                return [a, b, c]", "def getTriplets(n):\n    divs = {y for x in range(1,int(n**.5)+1) for y in (x, n//x) if not n%x}\n    for a in divs:\n        for b in divs:\n            if n/a/b in divs:\n                yield sorted((a, b, n/(a*b)))\n\ndef pythagorean_triplet(n):\n    return next( [a,b,c] for a,b,c in getTriplets(n) if a**2 + b**2 == c**2 )", "triples = [(3, 4, 5), (5, 12, 13), (8, 15, 17), (7, 24, 25), (20, 21, 29), (12, 35, 37),\n           (9, 40, 41), (28, 45, 53), (11, 60, 61), (16, 63, 65), (33, 56, 65), (48, 55, 73),\n           (13, 84, 85), (36, 77, 85), (39, 80, 89), (65, 72, 97), (20, 99, 101), (60, 91, 109),\n           (15, 112, 113), (44, 117, 125), (88, 105, 137), (17, 144, 145), (24, 143, 145),\n           (51, 140, 149), (85, 132, 157), (119, 120, 169), (52, 165, 173), (19, 180, 181),\n           (57, 176, 185), (104, 153, 185), (95, 168, 193), (28, 195, 197), (84, 187, 205),\n           (133, 156, 205), (21, 220, 221), (140, 171, 221), (60, 221, 229), (105, 208, 233),\n           (120, 209, 241), (32, 255, 257), (23, 264, 265), (96, 247, 265), (69, 260, 269),\n           (115, 252, 277), (160, 231, 281), (161, 240, 289), (68, 285, 293)]\n\ndef pythagorean_triplet(n):\n    for a, b, c in triples:\n        a0, b0, c0 = a, b, c\n        \n        while a * b * c < n:\n            a += a0\n            b += b0\n            c += c0\n        \n        if a * b * c > n:\n            continue\n        else:\n            return [a, b, c]", "from itertools import combinations\nfrom math import hypot\n\nlimit = 10000000\ncandidates = ((a,b,hypot(a,b)) for a,b in combinations(range(1, 1000), 2))\nD = {a*b*int(c):[a,b,int(c)] for a,b,c in candidates if c.is_integer() and a*b*c < limit}\npythagorean_triplet = D.__getitem__", "def triplet(n):\n    for i in range(int(n**0.333), 1, -1):\n        if n % i:\n            continue\n        c = n // i\n        for j in range(int(c**0.5), i, -1):\n            if c % j or j == c // j:\n                continue\n            yield (i, j, c // j)\n\ndef pythagorean_triplet(n):\n    for a, b, c in triplet(n):\n        if a**2 + b**2 == c**2:\n            return [a, b, c]", "def pythagorean_triplet(n):\n    for k in range(1, int(n ** (1 / 3))):\n        if n % k ** 3: continue\n        for p in range(1, int((n // k ** 3) ** .2) + 1):\n            for q in range(1, p):\n                a, b, c = p*p - q*q, 2*p*q, p*p + q*q\n                if k**3 * a * b * c == n : return sorted([k*a, k*b, k*c])", "def pythagorean_triplet(n):\n    for z in range(1, int(n**0.5) + 1): # z is hypotenuse\n        y = n / z # y is a * b\n        if y.is_integer():\n            x = (z**2 + 2*y) ** 0.5 # (a + b)\n            if x.is_integer():\n                for a in range(1, int(x)):\n                    b = x - a\n                    if a*b == y:\n                        return sorted([a,b,z])", "def factors(n, limit):\n  return [i for i in range(2, limit+1) if n % i == 0]\n\ndef pythagorean_triplet(n):\n  for x in factors(n, int(n**(1/3))):\n    nn = n // x\n    for y in factors(nn, int(nn**(1/2))):\n      z = nn // y\n      if x*x + y*y == z*z :\n        return [x, y, z]", "pythagorean_triplet=lambda n: [[d*round((n/k)**(1/3)) for d in v] for k,v in {60: [3, 4, 5], 780: [5, 12, 13], 2040: [8, 15, 17], 4200: [7, 24, 25], 14760: [9, 40, 41], 15540: [12, 35, 37], 40260: [11, 60, 61], 65520: [16, 63, 65], 66780: [28, 45, 53], 92820: [13, 84, 85], 12180: [20, 21, 29], 120120: [33, 56, 65], 192720: [48, 55, 73], 235620: [36, 77, 85], 277680: [39, 80, 89], 328860: [60, 63, 87],  453960: [65, 72, 97]}.items() if round((n // k)**(1/3))**3 == n / k][0]", "def pythagorean_triplet(n):\n    from math import sqrt\n    def divisors(n):\n        divs = []\n        for i in range(2, int(sqrt(n))+1):\n            if n % i == 0:\n                divs.append(i)\n        divs.sort()\n        return divs\n    divs = divisors(n)\n    for a in divs:\n        for b in divs:\n            c = n // (a * b)\n            if a * a + b * b == c * c:\n                return [a, b, c]"]