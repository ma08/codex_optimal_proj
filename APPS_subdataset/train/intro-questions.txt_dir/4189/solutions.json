["def highest_value(a, b):\n    return max(a, b, key=lambda s: sum(map(ord, s)))", "def highest_value(a, b):\n    return a if sum(map(ord, a)) >= sum(map(ord, b)) else b", "def highest_value(a, b):\n    return b if sum(ord(x) for x in b) > sum(ord(x) for x in a) else a", "def worth(s):\n    return sum(map(ord, s))\n    \ndef highest_value(a, b):\n    return max(a, b, key=worth)", "def highest_value(*args):\n    return max(args, key=lambda s:sum(map(ord, s)))", "def highest_value(a, b):\n    return max(a, b, key=lambda stg: sum(ord(char) for char in stg))", "def highest_value(a, b):\n    ascii_values_a = [ord(c) for c in a]\n    ascii_values_b = [ord(c) for c in b]\n    if sum(ascii_values_a) > sum(ascii_values_b) or sum(ascii_values_a) == sum(ascii_values_b):\n        return a\n    return b", "def highest_value(a, b):\n    return [a, b][sum(map(ord, a)) < sum(map(ord, b))]", "def highest_value(*args):\n    return max(args, key=lambda a: sum(ord(b) for b in a))", "def highest_value(a, b):\n  return a if sum(ord(c) for c in a) >= sum(ord(c) for c in b) else b"]