["from operator import mul\n\ndef ride(group, comet):\n    val = lambda name: reduce(mul, (ord(c)-64 for c in name))\n    return 'GO' if val(comet) % 47 == val(group) % 47 else 'STAY'", "def ride(group,comet):\n    n1 = 1\n    n2 = 1\n    for x in group:\n        n1 *= ord(x.lower()) - 96\n    for x in comet:\n        n2 *= ord(x.lower()) - 96\n    if n1 % 47 == n2 % 47:\n        return \"GO\"\n    else:\n        return \"STAY\"", "from operator import mul\ndef ride(group,comet):\n    g = reduce(mul, map(lambda x: x - 64, map(ord, group)))\n    c = reduce(mul, map(lambda x: x - 64, map(ord, comet)))\n    return [\"GO\", \"STAY\"][g % 47 != c % 47]", "def ride(group,comet):\n  command = {True:'GO', False:'STAY'}\n  num = lambda st: reduce(lambda x,y: x*y, map(lambda x: ord(x)-ord('A')+1, st))%47\n  return command[num(group)==num(comet)]", "from functools import reduce\nride = lambda g, c: \"GO\" if mod47(group) == mod47(comet) else \"STAY\"\nmod47 = lambda s: reduce(lambda p, c: p * '-ABCDEFGHIJKLMNOPQRSTUVWXYZ'.index(c), s, 1) % 47\n", "from functools import reduce\n\n\ndef ride(group, comet):\n    return \"GO\" if score(group) == score(comet) else \"STAY\"\n    \n\ndef score(word):\n    return reduce(int.__mul__, (ord(c) - 64 for c in word)) % 47", "from functools import reduce\nfrom operator import mul\n\nBASE = ord('A') - 1\n\ndef ride(group,comet):\n    g, c = [[ord(c) - BASE for c in xs] for xs in [group, comet]]\n    return 'GO' if reduce(mul, g) % 47 == reduce(mul, c) % 47 else 'STAY'", "from functools import reduce\n\ndef ride(group,comet):\n    score = lambda name : reduce(lambda x, y: x*y, map(lambda c : ord(c) - 64, name) ) % 47 \n    return [\"STAY\", \"GO\"][score(group) == score(comet)]", "from numpy import product\n\ndef ride(group,comet):\n    alph_pos = lambda l: ord(l) - 64\n    compute_score = lambda name : product([ alph_pos(c) for c in name]) % 47\n    group_score = compute_score(group)\n    comet_score = compute_score(comet)\n    return \"GO\" if  group_score == comet_score  else \"STAY\"", "def ride(group,comet):\n    g_c = 1\n    c_c = 1\n    for a in group:\n        g_c*= ord(a)-64\n    for a in comet:\n        c_c*= ord(a)-64\n    \n    return \"GO\" if g_c%47==c_c%47 else \"STAY\""]