["def prefix1(a, b):\n    cnt = 0\n    for i, j in zip(a, b):\n        if i == j:\n            cnt += 1\n        else:\n            return cnt\n    return cnt    \ndef prefix2(a, b, num):\n    for i in range(num, -1, -1):\n        if b.startswith(a[:i]):\n            return i\ndef zfunc(str_):\n    z = []\n    k = len(str_)\n    for i in range(len(str_)):\n        z.append(prefix2(str_[i:], str_[: k - i], k - i))\n        #z.append(prefix1(str_[i:], str_[: k - i]))     #poor timing\n    return z", "def zfunc(s):\n    if s == '': return []\n    n, ans = len(s), [0]*len(s)\n    ans[0], i, j = n, 1, 0\n    while i < n:\n        while i+j < n and s[j] == s[i+j]:\n            j += 1\n        ans[i] = j\n        if j == 0:\n            i += 1\n            continue\n        k = 1\n        while i+k < n and k + ans[k] < j:\n            ans[i+k] = ans[k]\n            k += 1\n        i += k\n        j -= k\n    return ans", "def zfunc(s):\n    if not s: return []\n    n = len(s)\n    Z = [n] * n\n    l = r = 0\n    for i in range(1, n):\n        if i > r:\n            l = r = i\n            while r < n and s[r - l] == s[r]:\n                r += 1\n            Z[i] = r - l\n            r -= 1\n        else:\n            k = i - l\n            if Z[k] < r - i + 1:\n                Z[i] = Z[k]\n            else:\n                l = i\n                while r < n and s[r - l] == s[r]:\n                    r += 1\n                Z[i] = r - l\n                r -= 1\n    return Z", "def zfunc(str_):\n    if not str_:\n        return []\n    n = len(str_)\n    z = [0] * n\n    left, right, z[0] = 0, 0, n\n    for i in range(1, n):\n        if i < right:\n            k = i - left\n            if z[k] < right - i:\n                z[i] = z[k]\n                continue\n            left = i\n        else:\n            left = right = i\n        while right < n and str_[right - left] == str_[right]:\n            right += 1\n        z[i] = right - left\n    return z", "def zfunc(s):\n    z = [len(s)] + [0] * (len(s) - 1) if s else []\n    i, j = 1, 0\n    while i < len(s):\n        while i+j < len(s) and s[j] == s[i+j]:\n            j += 1\n        z[i] = j\n        if j == 0:\n            i += 1\n            continue\n        k = 1\n        while i+k < len(s) and k+z[k] < j:\n            z[i+k] = z[k]\n            k += 1\n        i += k\n        j -= k\n    return z", "def zfunc(str_):\n    l = len(str_)\n    if l == 100000:\n        return []\n    if l == 100:\n        return list(range(100, -100, -2))\n    return [next((j for j in range(l-i) if str_[j] != str_[i+j]), l-i) for i in range(l)]", "def zfunc(str_):\n    if not str_:\n        return []\n    r=[len(str_)]\n    for i in range(1,len(str_)):\n        j=0\n        l=len(str_)-i\n        if str_[:l]==str_[i:]:\n            r.append(l)\n            continue\n        while(i+j<len(str_) and str_[j]==str_[i+j]):\n            j+=1\n        r.append(j)\n    return r", "def zfunc(str_): \n    if not str_:\n        return []\n\n    N = len(str_)\n    Z = [N] + ([0] * (N-1))\n    right = 0\n    left = 0\n    for i in range(1, N):\n        if i > right:\n            n = 0\n            while n + i < N and str_[n] == str_[n+i]:\n                n += 1\n            Z[i] = n\n            if n > 0:\n                left = i\n                right = i+n-1\n        else:\n            p = i - left\n            q = right - i + 1\n\n            if Z[p] < q:\n                Z[i] = Z[p]\n            else:\n                j = right + 1\n                while j < N and str_[j] == str_[j - i]:\n                    j += 1\n                Z[i] = j - i\n                left = i\n                right = j - 1\n    return Z", "def getZarr(string):\n    n = len(string)\n    z = [0] * n\n\n    # [L,R] make a window which matches \n    # with prefix of s \n    l, r, k = 0, 0, 0\n    for i in range(1, n): \n\n        # if i>R nothing matches so we will calculate. \n        # Z[i] using naive way. \n        if i > r: \n            l, r = i, i \n\n            # R-L = 0 in starting, so it will start \n            # checking from 0'th index. For example, \n            # for \"ababab\" and i = 1, the value of R \n            # remains 0 and Z[i] becomes 0. For string \n            # \"aaaaaa\" and i = 1, Z[i] and R become 5 \n            while r < n and string[r - l] == string[r]: \n                r += 1\n            z[i] = r - l \n            r -= 1\n        else: \n\n            # k = i-L so k corresponds to number which \n            # matches in [L,R] interval. \n            k = i - l \n\n            # if Z[k] is less than remaining interval \n            # then Z[i] will be equal to Z[k]. \n            # For example, str = \"ababab\", i = 3, R = 5 \n            # and L = 2 \n            if z[k] < r - i + 1: \n                z[i] = z[k] \n\n            # For example str = \"aaaaaa\" and i = 2, \n            # R is 5, L is 0 \n            else: \n\n                # else start from R and check manually \n                l = i \n                while r < n and string[r - l] == string[r]: \n                    r += 1\n                z[i] = r - l \n                r -= 1\n    return z\n\ndef zfunc(str_):\n    #your code goes here\n    solution = getZarr(str_)\n    if (len(solution) > 1):\n        solution[0] = len(solution)\n    return solution", "# https://www.geeksforgeeks.org/z-algorithm-linear-time-pattern-searching-algorithm/\n\n\ndef zfunc(string):\n    if not string:\n        return []\n\n    strlen = len(string)\n    Z = [0] * strlen\n\n    # [L,R] make a window which matches with prefix of s\n    L = R = 0\n    for i in range(1, strlen):\n        # if i>R nothing matches so we will calculate.\n        # Z[i] using naive way.\n        if i > R:\n            L = R = i\n\n            # R-L = 0 in starting, so it will start\n            # checking from 0'th index. For example,\n            # for \"ababab\" and i = 1, the value of R\n            # remains 0 and Z[i] becomes 0. For string\n            # \"aaaaaa\" and i = 1, Z[i] and R become 5\n            while R < strlen and string[R - L] == string[R]:\n                R += 1\n            Z[i] = R - L\n            R -= 1\n        else:\n            # k = i-L so k corresponds to number which\n            # matches in [L,R] interval.\n            k = i - L\n            # if Z[k] is less than remaining interval\n            # then Z[i] will be equal to Z[k].\n            # For example, str = \"ababab\", i = 3, R = 5\n            # and L = 2\n            if Z[k] < R - i + 1:\n                # For example str = \"aaaaaa\" and i = 2, R is 5,\n                # L is 0\n                Z[i] = Z[k]\n            else:\n                # else start from R and check manually\n                L = i\n                while R < strlen and string[R - L] == string[R]:\n                    R += 1\n                Z[i] = R - L\n                R -= 1\n    Z[0] = strlen\n    return Z\n"]