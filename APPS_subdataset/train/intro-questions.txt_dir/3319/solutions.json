["def to_camel_case(text):\n    removed = text.replace('-', ' ').replace('_', ' ').split()\n    if len(removed) == 0:\n        return ''\n    return removed[0]+ ''.join([x.capitalize() for x in removed[1:]])", "import re\ndef to_camel_case(text):\n    return re.sub('[_-](.)', lambda x: x.group(1).upper(), text)", "def to_camel_case(text):\n    return text[:1] + text.title()[1:].replace('_', '').replace('-', '')", "from re import compile as reCompile\n\nPATTERN = reCompile(r'(?i)[-_]([a-z])')\n\ndef to_camel_case(text):\n    return PATTERN.sub(lambda m: m.group(1).upper(), text)\n", "def to_camel_case(text):\n    return text[0] + ''.join([w[0].upper() + w[1:] for w in text.replace(\"_\", \"-\").split(\"-\")])[1:] if text else ''\n", "def to_camel_case(text):\n    words = text.replace('_', '-').split('-')\n    return words[0] + ''.join([x.title() for x in words[1:]])", "def to_camel_case(text):\n    cap = False\n    newText = ''\n    for t in text:\n        if t == '_' or t == '-':\n            cap = True\n            continue\n        else:\n            if cap == True:\n                t = t.upper()\n            newText = newText + t\n            cap = False\n    return newText", "def to_camel_case(text):\n    return \"\".join([i if n==0 else i.capitalize() for n,i in enumerate(text.replace(\"-\",\"_\").split(\"_\"))])"]