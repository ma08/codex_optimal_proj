["class Solution:\n     def countAndSay(self, n):\n         s = '1'\n         \n         for _ in range(n-1):\n             let, temp, count = s[0], \"\", 0\n             for l in s:\n                 if let == l:\n                     count += 1\n                 else:\n                     temp += str(count) + let\n                     let = l\n                     count = 1\n             temp += str(count) + let\n             s = temp\n         return s\n", "class Solution:\n     def countAndSay(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: str\n         \"\"\"\n         s = '1'\n         for _ in range(n - 1):\n             temp, pre, count = '', s[0], 0\n             for i in s:\n                 if i == pre:\n                     count += 1\n                 else:\n                     temp += str(count) + pre\n                     count = 1;\n                     pre = i;\n             temp += str(count) + pre\n             s = temp\n         return s\n                     \n", "class Solution:\n     def countAndSay(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: str\n         \"\"\"\n         L=\"1\"\n         if(n==1):\n             return L\n         while(n>1):\n             M=\"\"\n             i=0\n             while(i<len(L)):\n                 k=1\n                 x=L[i];\n                 while(i<len(L)-1 and L[i+1]==x):\n                     i=i+1\n                     k=k+1\n                 M=M+str(k)+x\n                 i=i+1\n             n=n-1\n             L=M\n         return L", "class Solution:\n     def countAndSay(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: str\n         \"\"\"\n         s = '1'\n         for _ in range(n - 1):\n             s = re.sub(r'(.)\\1*', lambda m: str(len(m.group(0))) + m.group(1), s)\n         return s", "class Solution:\n     def countAndSay(self, n):\n       if n < 1:\n           raise ValueError('Input should be greater than or equal to 1')\n       elif n == 1:\n           return '1'\n       currentCharacter = ''\n       currentCharacterCount = 0\n       result = list()\n       for character in list(self.countAndSay(n-1)):\n           if character != currentCharacter:\n               if currentCharacter != '':\n                   result.extend([str(currentCharacterCount), currentCharacter])\n               currentCharacter = character\n               currentCharacterCount = 1\n           else:\n               currentCharacterCount += 1\n       result.extend([str(currentCharacterCount), currentCharacter])\n       return ''.join(result)\n", "class Solution:\n     def countAndSay(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: str\n         \"\"\"\n         s = ['1']\n         result = '1'\n         # The n-th sequance, input 1 should output '1'\n         for i in range(n-1):\n             start = 0\n             temp = []\n             \n             # Process one sequence, scan from start to end\n             while start < len(s):\n                 count = 1\n                 next = start + 1\n                 \n                 # Scan until s[next] is different\n                 while next < len(s) and s[start] == s[next]:\n                     next += 1\n                     count += 1\n                     \n                 # Get the new items in\n                 temp.append(str(count))\n                 temp.append(s[start])\n                 \n                 # Start from next one\n                 start = next\n                 \n             # Concatenate list into string, using \",\" as separator in default\n             result = ''.join(temp)\n             s = temp\n             \n         return result\n", "class Solution:\n     def countAndSay(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: str\n         \"\"\"\n         \n         if n == 1:\n             return \"1\"\n             \n         seq = self.countAndSay(n-1)\n         \n         seq2 = \"\"\n         count = 0\n         \n         for i in range(len(seq)):\n             num = seq[i]\n             count += 1\n             if i == len(seq)-1:\n                 seq2 = seq2 + str(count) + num\n             elif seq[i+1] != seq[i]:\n                 seq2 = seq2 + str(count) + num\n                 count = 0 #reset count\n         \n         return seq2            \n", "class Solution:\n     def countAndSay(self, n):\n         s = [['1']]\n         for i in range(n): # \u67d0\u4e00\u4e2a\u5b50\u4e32\n             str1 = s[i]\n             temp = []\n             # for j in range(len(str1)): # \u67d0\u4e00\u4e2a\u65b0\u5b57\u7b26\n             j = 0\n             while j < len(str1):\n                 count = 1\n                 while j <= len(str1)-2 and str1[j] == str1[j+1]:\n                     count += 1\n                     j += 1\n                 temp.append(str(count))\n                 temp.append(str1[j])\n                 j += 1\n             s.append(temp)\n \n         # res = 0\n         # for t in s[n-1]:\n         #     res = res * 10 + int(t)\n \n         res = [''.join(s[n-1])]\n \n         return res[0]\n", "class Solution:\n     def countAndSay(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: str\n         \"\"\"\n         res = '1'\n         if n < 2:\n             return res\n         while 1:\n             n -= 1\n             if n == 0:\n                 return res\n             res = self._say(res)\n \n     def _say(self, s):\n         s += '*'\n         curr, res = '', ''\n         t = 0\n         for i, c in enumerate(s):\n             if i == 0:\n                 curr = c\n                 t = 1\n             else:\n                 if c == curr:\n                     t += 1\n                 else:\n                     res = res + str(t) + curr\n                     t = 1\n                     curr = c\n         return res", "class Solution:\n     def countAndSay(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: str\n         \"\"\"\n         if n == 0:\n             return 0\n         else:\n             s = '1'\n             for i in range(n-1):\n                 res = ''\n                 k = 0\n                 m = len(s)\n                 count = 1\n                 while k < m:\n                     say = s[k]\n                     if k+1 < m:\n                         if s[k] == s[k+1]:\n                             count +=1\n                             k+=1\n                         else:\n                             res += str(count)\n                             res += say\n                             count = 1\n                             k+= 1\n                     else:\n                         res += str(count)\n                         res += say\n                         break\n                 s = res\n             return s\n", "class Solution:\n     def countAndSay(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: str\n         \"\"\"\n         if n == 0:\n             return 0\n         else:\n             s = '1'\n             for i in range(n-1):\n                 res = ''\n                 k = 0\n                 m = len(s)\n                 count = 1\n                 while k < m:\n                     say = s[k]\n                     if k+1 < m:\n                         if s[k] == s[k+1]:\n                             count +=1\n                             k+=1\n                         else:\n                             res += str(count)\n                             res += say\n                             count = 1\n                             k+= 1\n                     else:\n                         res += str(count)\n                         res += say\n                         break\n                 s = res\n             return s\n", "class Solution:\n     def countAndSay(self, n):\n         '''\n         not mine!\n         '''\n         s = '1'\n         for _ in range(n - 1):\n             s = re.sub(r'(.)\\1*', lambda m: str(len(m.group(0))) + m.group(1), s)\n         return s\n", "class Solution:\n     def countAndSay(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: str\n         \"\"\"\n         if n == 1:\n             return \"1\"\n \n         n = n-1\n         string = '1'\n         for i in range(n):\n             a = string[0]\n             count = 0\n             final = ''\n             for s in string:\n                 if a != s:\n                     final+=str(count)\n                     final+=a\n                     count = 1\n                     a = s\n                 else:\n                     count += 1\n             final+=str(count)\n             final+=s\n             string = final\n \n         return final "]