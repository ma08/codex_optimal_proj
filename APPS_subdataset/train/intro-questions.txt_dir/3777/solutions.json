["from string import ascii_uppercase\n\nvalues = {x: i for i, x in enumerate(ascii_uppercase, 1)}\n\ndef quicksum(packet):\n    return sum(values.get(c, 0) * i for i, c in enumerate(packet, 1)) * all(c.isspace() or c.isupper() for c in packet)", "def quicksum(packet):\n    result = 0\n    \n    for idx, char in enumerate(packet, 1):\n        if char.isupper():\n            result += idx * (ord(char) - 64)\n        elif char == \" \":\n            continue\n        else:\n            return 0\n    \n    return result", "import re\n\ndef quicksum(packet):\n    isValid = re.match(r'[A-Z ]*$',packet)\n    value   = sum(i*(ord(c)-64) for i,c in enumerate(packet,1) if c!=' ')\n    return isValid and value or 0", "def quicksum(packet):\n    if not packet.replace(\" \", \"\").isalpha() or not packet.isupper(): return 0\n    return sum((i+1)*(1 + ord(l) - ord(\"A\")) if l.isalpha() else 0 for i, l in enumerate(packet))", "def quicksum(packet):\n    if all(True if ord(x) > 64 and ord(x) < 91 or ord(x) == 32 else False for x in packet):\n        return sum(0 if x == ' ' else (ord(x) - 64) * y for y, x in enumerate(packet,1))\n    return 0", "from string import ascii_uppercase\n\nAZ = dict(list(zip(' ' + ascii_uppercase, list(range(27)))))\n\n\ndef quicksum(packet):\n    result = 0\n    for i, a in enumerate(packet, 1):\n        try:\n            result += AZ[a] * i\n        except KeyError:\n            return 0\n    return result\n", "def quicksum(packet):\n    alph = \" ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    su = 0\n    \n    for k, v in enumerate(packet):\n        if v not in alph:\n            return 0\n        su += (k+1) * alph.index(v)\n    return su", "quicksum = lambda p:sum(i*(ord(e)-64)*(e!=' ') for i,e in enumerate(p,1))*all(x in __import__(\"string\").ascii_uppercase+' ' for x in p)", "VALID = \" ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\ndef quicksum(packet):\n    return 0 if (set(packet) - set(VALID)) else sum(VALID.index(char) * i for i, char in enumerate(packet, 1))\n    \n#    checksum = 0\n#    for char in packet:\n#        if not char in VALID:\n#            return 0\n#        checksum += VALID.index(char)\n#    return checksum\n        \n    # in respect to given instructions (packet has to begin and end with uppercase)\n#    if any(not char.isupper() for char in (packet[0], packet[-1])):\n#        return 0\n", "from string import ascii_uppercase as auc\ndef quicksum(packet):\n    d = {v : k for k, v in enumerate(' ' + auc)}\n    try:\n        return sum(c * d[s] for c, s in enumerate(packet, 1))\n    except:\n        return 0"]