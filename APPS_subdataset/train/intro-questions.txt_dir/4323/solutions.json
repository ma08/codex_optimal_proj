["from itertools import groupby\n\ndef uniq(seq): \n    return [k for k,_ in groupby(seq)]", "def uniq(seq):\n    if len(seq) == 0:\n        return []\n    rez = [seq[0]]\n    for i in range(1, len(seq)):\n        if seq[i] != rez[-1]:\n            rez.append(seq[i])\n    return rez", "from itertools import groupby\n\ndef uniq(a):\n    return [x for x, _ in groupby(a)]", "def uniq(seq):\n    return [c for i, c in enumerate(seq) if i == 0 or seq[i-1] != c]", "def uniq(seq): \n    return ([seq[0]] + [seq[i] for i in range(1, len(seq)) if seq[i] != seq[i-1]] if seq else [])", "def uniq(seq): \n    result = []\n    for q in seq:\n        if result and result[-1] == q:\n            continue\n        result.append(q)\n    return result", "def uniq(seq): \n    ans = []\n    p   = ''\n    for i in seq:\n        if i != p:\n            ans.append(i)\n        p = i\n    return ans if len(seq)>1 else seq", "from itertools import groupby\nfrom operator import itemgetter\n\n# Just for fun, it's better to use list comprehension\ndef uniq(seq):\n    return list(map(itemgetter(0), groupby(seq)))", "from itertools import groupby\nfrom operator import itemgetter\n\ndef uniq(seq):\n    return list(map(itemgetter(0), groupby(seq)))", "from itertools import groupby\n\ndef uniq(seq): \n    return [k[0] for k in groupby(seq)]"]