["from math import gcd\n\n\ndef greatest(x, y, n):\n    z = x * y // gcd(x, y)\n    return (n - 1) // z * z\n    \ndef smallest(x, y, n):\n    z = x * y // gcd(x, y)\n    return (n + z) // z * z\n", "from fractions import gcd\n\ndef near(x, y, n):\n    lcm = x * y // gcd(x, y)\n    return n // lcm * lcm, lcm\n\ndef greatest(x, y, n):\n    result, lcm = near(x, y, n)\n    if result >= n:\n        result -= lcm\n    return result\n\ndef smallest(x, y, n):\n    result, lcm = near(x, y, n)\n    if result <= n:\n        result += lcm\n    return result\n", "def lcm(a, b):\n    from fractions import gcd\n    return a * b // gcd(a, b)\n\ndef greatest(x, y, n):\n    m = lcm(x, y)\n    return (n//m)*m if m<n else 0\n    \ndef smallest(x, y, n):\n    m = lcm(x, y)\n    return ((n+m)//m)*m", "from fractions import gcd\n\ndef greatest(x, y, n):\n    lcm = x * y // gcd(x, y)\n    return (n - 1) // lcm * lcm\n    \ndef smallest(x, y, n):\n    lcm = x * y // gcd(x, y)\n    return -(- (n + 1) // lcm) * lcm", "from math import gcd\n\n\ndef nearest(m=\"g\"):\n    def side(x, y, n):\n        z = x * y // gcd(x, y)\n        return (n + (z if m == \"s\" else -1)) // z * z\n    return side\n\nsmallest = nearest(\"s\")\ngreatest = nearest()\n\n", "import math\ndef greatest(x, y, n):\n    lcm = x*y//math.gcd(x, y)\n    return lcm*(n//lcm) if lcm < n else 0\n \ndef smallest(x, y, n):\n    lcm = x*y//math.gcd(x, y)\n    n2 = int(n//lcm)+1\n    return lcm*n2", "from math import gcd, ceil\n\ndef lcm(x, y):\n    return x * y // gcd(x, y)\n\ndef greatest(x, y, n):\n    m = lcm(x, y)\n    p = n // m - (not n % m)\n    return p * m\n    \ndef smallest(x, y, n):\n    m = lcm(x, y)\n    p = n // m + 1\n    return p * m", "from math import gcd\n\ndef lcm(x, y):\n  return x // gcd(x, y) * y\n\ndef greatest(x, y, n):\n  m = lcm(x, y)\n  return (n - 1) // m * m\n\ndef smallest(x, y, n):\n  m = lcm(x, y)\n  return (n // m + 1) * m"]