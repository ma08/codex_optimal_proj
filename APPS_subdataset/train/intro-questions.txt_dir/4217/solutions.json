["from calendar import month_abbr\nfrom datetime import datetime \ndef solve(a,b):\n  res = [month_abbr[month]\n      for year in range(a, b+1) \n      for month in [1,3,5,7,8,10,12] \n      if datetime(year, month, 1).weekday() == 4]\n  return (res[0],res[-1], len(res))", "from datetime import date\n\ndef solve(a, b):\n    first = None\n    count = 0\n    for year in range(a, b + 1):\n        for month in (1, 3, 5, 7, 8, 10, 12):\n            d = date(year, month, 1)\n            if d.weekday() == 4:\n                last = d.strftime(\"%b\")\n                if first is None:\n                    first = last\n                count += 1\n    return (first, last, count)\n", "import calendar\n\nDICT = {\n    1: \"Jan\",\n    2: \"Feb\",\n    3: \"Mar\",\n    4: \"Apr\",\n    5: \"May\",\n    6: \"Jun\",\n    7: \"Jul\",\n    8: \"Aug\",\n    9: \"Sep\",\n    10: \"Oct\",\n    11: \"Nov\",\n    12: \"Dec\"\n}\n\n\ndef solve(a, b):\n    extended_weekends_list = []\n    for year in range(a, b + 1):\n        for month in range(1, 13):\n            if calendar.monthrange(year, month) == (4, 31):\n                extended_weekends_list.append([year, month])\n\n    result = (DICT[extended_weekends_list[0][1]], DICT[extended_weekends_list[-1][1]], len(extended_weekends_list))\n    return result\n", "from datetime import *\n\ndef solve(a,b):\n    ans = []\n    for i in range(a, b+1):\n        for j in (1, 3, 5, 7, 8, 10, 12):\n            start = date(i, j, 1)\n            if start.strftime(\"%a\") == \"Fri\":\n                ans.append(start.strftime(\"%b\"))\n    return (ans[0], ans[-1], len(ans))", "from calendar import FRIDAY\nfrom datetime import datetime\n\n\ndef solve(a, b):\n    ds = (datetime(year, month, 1) for year in range(a, b+1) for month in [1, 3, 5, 7, 8, 10, 12])\n    ds = [d for d in ds if d.weekday() == FRIDAY]\n    return format(ds[0], '%b'), format(ds[-1], '%b'), len(ds)\n", "import calendar as c\ndef solve(a, b):\n    weeks = [j for i in range(a, b+1) for j in [1,3,5,7,8,10,12] if c.monthrange(i, j) == (4, 31)]\n    return (c.month_name[weeks[0]][:3], c.month_name[weeks[-1]][:3], len(weeks))", "from datetime import date\n\nMONTHS_31 = (1,3,5,7,8,10,12)\n\ndef solve(a,b):\n    cnt, first, last = 0, None, None\n    for y in range(a,b+1):\n        for m in MONTHS_31:\n            d = date(y,m,1)\n            if d.weekday()==4:\n                cnt, first, last = cnt+1, first or d, d\n    return first.strftime('%b'), last.strftime('%b'), cnt", "from datetime import date\nfrom calendar import month_name\n\ndef solve(a,b):\n    m,c,res,s = [1,3,5,7,8,10,12],0 , [], '',\n    for i in range(a,b+1):\n        for j in m:\n            if date(i,j,1).weekday() == 4:\n                res.append(j); c+=1; s = ''\n    return (month_name[res[0]][:3],month_name[res[-1]][:3],c)", "from calendar import month_abbr as abr\nfrom datetime import *\n\ndef solve(a,b):\n    ans = [abr[m] for y in range(a,b+1) for m in (1,3,5,7,8,10,12) if date(y, m, 1).weekday() == 4]\n    return (ans[0], ans[-1], len(ans))", "from datetime import date\n\ndef solve(a, b):\n    r = []\n    for y in range(a, b + 1):\n        for m in 1, 3, 5, 7, 8, 10, 12:\n            d = date(y, m, 1)\n            if d.weekday() == 4:\n                r.append(d.strftime('%b'))\n    return r[0], r[-1], len(r)"]