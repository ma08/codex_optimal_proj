["def shared_bits(a, b):\n    return bin(a & b).count('1') > 1", "def shared_bits(a, b):\n    return bool(a & b & (a & b) - 1)", "def shared_bits(a, b):\n    num = a & b\n    count = bin(num).count(\"1\")\n    if count >= 2:\n        return True\n    return False", "def shared_bits(a, b):\n    return len(bin(a&b).strip('0b0'))>1", "def shared_bits(a, b):\n    return f\"{a & b:b}\".count(\"1\") > 1", "def shared_bits(a, b):\n    return a & b and bin(a & b).count(\"1\") > 1", "def shared_bits(a, b): ###\n    return bin(a&b).count('1')>1", "def shared_bits(a, b):\n    res=0\n    bina,binb='{:b}'.format(a),'{:b}'.format(b)\n    bina,binb=bina.zfill(max(len(bina),len(binb))),binb.zfill(max(len(bina),len(binb)))\n    for x,y in zip(bina,binb):\n        if x==y=='1':\n            res+=1\n            if res==2:\n                return True\n    return False", "def shared_bits(a, b):\n    bina,binb='{:011b}'.format(a),'{:011b}'.format(b)\n    return sum(1 for x,y in zip(bina,binb) if x==y=='1')>=2", "def shared_bits(a, b):\n    count = 0\n    lst_a = list(\"{0:b}\".format(a))\n    lst_b = list(\"{0:b}\".format(b))\n    lst_a.reverse()\n    lst_b.reverse()\n    n_a = len(lst_a)\n    n_b = len(lst_b)\n    if(n_a == 0 or n_b == 0):\n        return False\n    else:\n        if(n_a <= n_b):\n            for i in range(n_a):\n                if(lst_a[i] == lst_b[i] and lst_a[i] == \"1\"):\n                    count += 1\n                    if(count == 2):\n                        return True\n            return False\n        else:\n            for i in range(n_b):\n                if(lst_a[i] == lst_b[i] and lst_b[i] == \"1\"):\n                    count += 1\n                    if(count == 2):\n                        return True\n            return False", "def shared_bits(a, b):\n    if a > b:\n        c=a\n        a=b\n        b=c \n    a_bin = str(bin(a))\n    b_bin = str(bin(b))\n    count = 0\n    for i in range(len(a_bin)-1,1,-1):\n        if a_bin[i] == '1' and a_bin[i]==b_bin[i+len(b_bin)-len(a_bin)]:\n            count += 1\n    if count >= 2:\n        return True\n    else:\n        return False", "def shared_bits(a, b):\n    \n    x = \"{0:016b}\".format(min(a,b))\n    y = \"{0:016b}\".format(max(a,b))\n    sol=0\n    \n    for i in range(len(x)):\n        if x[i] == \"1\" and y[i] == \"1\":\n            sol+=1\n    \n    return sol>=2", "def shared_bits(a, b):\n    a = bin(a)\n    b = bin(b)\n    n = 0\n    for i in range(1, min(len(a), len(b))):\n        if a[-i] == b[-i] and a[-i] == '1':\n            n += 1\n    return n >= 2", "def shared_bits(a, b):\n    bin_a = bin(a)[2:]\n    bin_b = bin(b)[2:]\n    \n    if len(bin_a) > len(bin_b):\n        bin_b = ('0' * (len(bin_a) - len(bin_b))) + bin_b \n    if len(bin_a) < len(bin_b):\n        bin_a = ('0' * (len(bin_b) - len(bin_a))) + bin_a\n\n    index = 0\n    counter = 0\n    while index < len(bin_a):\n        if bin_a[index] == '1' and bin_b[index] == '1':\n            counter += 1\n\n        if counter >= 2:\n            return True\n        \n        index += 1\n    \n    return False", "def shared_bits(a, b):\n    return sum(ai == bi == '1' for ai, bi in zip(f\"{a:b}\"[::-1], f\"{b:b}\"[::-1])) >= 2", "def shared_bits(a, b):\n    return True if format(a & b, 'b').count('1') > 1 else False", "def shared_bits(a, b):\n    a = bin(a)[2:]\n    b = bin(b)[2:]\n    if len(a) > len(b):\n        b = b.zfill(len(a))\n    else:\n        a = a.zfill(len(b))\n    \n    a = list(a)\n    b = list(b)\n    \n    return [x+y for x,y in zip(a,b)].count('11')>1", "shared_bits = lambda a, b: sum(f\"{a:16b}\"[i] == f\"{b:16b}\"[i] == \"1\" for i in range(16)) > 1", "def shared_bits(a, b):\n    counter = 0\n    for x in range(0, max(a, b)+1):\n        if a & pow(2, x) and b & pow(2, x):\n            counter += 1\n            if counter >= 2:\n                return True\n    return False\n   \n    \n    \n    \n", "def shared_bits(a, b):\n    result = b & a\n    commun = 0\n    \n    for i in range(0, 17):\n        if (result & pow(2,i)) != 0:\n            commun += 1\n    if commun >= 2:\n        return True\n    else:\n        return False\n    return"]