["def find_mult10_SF(n):\n    n = 4*n - 1\n    \n    return (6 ** n + 3 * 2 ** n) / 4\n", "def find_mult10_SF(n):\n    # ST(n) = 6 ** n + 5 ** n - 2 ** n - 1\n    # SF(n) = (6 ** n + 3 * (2 ** n)) / 4\n    # SF is divisible by 10 if n = 3 mod 4\n    #\n    # => nth 10 multiple of 10 is ST(n * 4 - 1)\n    k = n * 4 - 1\n    return (6 ** k + 3 * (2 ** k)) / 4", "s1 = lambda n: 1 + 2 ** n + 3 ** n\ns2 = lambda n: 1 + 2 ** n + 4 ** n\ns3 = lambda n: 1 + 2 ** n + 3 ** n + 4 ** n + 5 ** n + 6 ** n\nst = lambda n: s3(n) - s2(n) - s1(n)\nsf = lambda n: (st (n + 1) - 5 * st (n) - 4) / 4\n\ndef find_mult10_SF(n):\n    i = 1\n    k = 0\n    result = None\n    while k < n:\n        s = sf(i)\n        i = i + 1\n        if s % 10 == 0:\n            k = k + 1\n            result = s        \n    return result", "def find_mult10_SF(n):\n    return 16**n * (81**n + 9) // 24", "find_mult10_SF=lambda n:81**n//3+3<<4*n-3", "s1 = lambda n : 1 + 2 ** n + 3 ** n\ns2 = lambda n : 1 + 2 ** n + 4 ** n\ns3 = lambda n : 1 + 2 ** n + 3 ** n + 4 ** n + 5 ** n + 6 ** n\nst = lambda n : s3(n) - s2(n) - s1(n)\nsf = lambda n : (st(n+1) - 5 * st(n) - 4) / 4\n\nmem = []\n\ndef find_mult10_SF(n):\n    x = mem[-1][0] + 1 if mem else 1\n    while len(mem) < n:\n        s = sf(x)\n        while s % 10 != 0:\n            x += 1\n            s = sf(x)\n        mem.append((x,s))\n        x += 1\n    return mem[n - 1][1]", "A,x = [],1\nwhile len(A) < 300:\n    r = (6**x+3*2**x)//4\n    if not r%10:\n        A.append(r)\n    x += 1\n\ndef find_mult10_SF(n):\n    return A[n-1]", "from itertools import count\n\ndef S_F(n):\n    return 2**(-2 + n)*(3 + 3**n)\n\ndef find_mult10_SF(n):\n    i = 0\n    while n:\n        i += 1\n        sf = S_F(i)\n        n -= (sf % 10 == 0)\n    return sf", "# No need to store more than the last value so no functools.lru_cache\nST = lambda n: 6**n + 5**n - 2**n - 1\nSF = lambda x, y: (x - 5*y - 4) // 4\n\nresult = []\ndef gen():\n    previous, n = ST(0), 1\n    while True:\n        current = ST(n)\n        val = SF(current, previous)\n        if not val%10: yield val\n        previous, n = current, n+1\nvalues = gen()\n\ndef find_mult10_SF(n):\n    while len(result) < n: result.append(next(values))\n    return result[n-1]", "d = []\ns1 = lambda n:1+2**n+3**n\ns2 = lambda n:1+2**n+4**n\ns3 = lambda n:sum(i**n for i in range(1,7))\nst = lambda n:s3(n)-s2(n)-s1(n)\nfor i in range(1500):\n    r = (st(i + 1) - 5 * st(i) - 4) // 4\n    if not r % 10 : d.append(r)\nfind_mult10_SF=lambda n:d[n-1]"]