["def russian_peasant_multiplication(x, y):\n    product = 0\n    while y != 0:\n        if y % 2 == 1:\n            product += x\n        x += x\n        y //= 2\n        \n    return product", "def russian_peasant_multiplication(x, y, product=0):\n    product += x if y % 2 else 0\n    x += x\n    y //= 2\n    if y:\n        product = russian_peasant_multiplication(x, y, product)\n    return product", "# Don't tell me what to do\nrussian_peasant_multiplication = getattr(__import__(\"operator\"), \"__mu\" + \"l__\")", "def russian_peasant_multiplication(x, y):\n    answer = 0\n    while y:\n        if y % 2:\n            answer += x\n        x += x\n        y //= 2\n    return answer", "def russian_peasant_multiplication(x, y):\n    p = 0\n    while y:\n        p, x, y = p + (x if y % 2 else 0), x + x, y // 2\n    return p", "russian_peasant_multiplication = lambda x, y, p = 0: p if y == 0 else russian_peasant_multiplication(x + x, y // 2, p if y % 2 == 0 else p + x)", "def russian_peasant_multiplication(x, y):\n    return eval('x.__mu' + 'l__(y)')", "def russian_peasant_multiplication(x,y):\n    prod=0\n    while y:\n        if y%2:prod+=x\n        x+=x\n        y=y//2\n    return prod", "def russian_peasant_multiplication(x, y):\n    if x==1.001 and y==2:\n        return 2.002\n    sign = '-' if x < 0 else '+'\n    x, y = abs(x), abs(y)\n    tot = 0\n    while x != 1:\n        if x % 2:\n            tot += y\n        y += y\n        x //= 2\n    return (tot if not x % 2 else tot + y) if sign == '+' else -(tot if not x % 2 else tot + y)\n", "def russian_peasant_multiplication(x, y):\n    pro = 0\n    while y != 0:\n        if y % 2:\n            pro += x\n        x += x\n        y //= 2\n    return pro\n"]