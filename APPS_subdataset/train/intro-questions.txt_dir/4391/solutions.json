["def yellow_be_gone(s):\n    d = {'gold':'ForestGreen', 'khaki':'LimeGreen', 'lemonchiffon':'PaleGreen', 'lightgoldenrodyellow':'SpringGreen',\n         'lightyellow':'MintCream', 'palegoldenrod':'LightGreen', 'yellow':'Lime'}\n         \n    if s[0] == '#':\n        R, G, B = s[1:3], s[3:5], s[5:]\n        if B < G and B < R:\n            R, B, G = sorted([R, G, B])\n            s = '#' + R + G + B\n        \n    return d.get(s.lower(), s)", "COLORDICT = {\"gold\" : \"ForestGreen\",\n             \"khaki\" : \"LimeGreen\",\n             \"lemonchiffon\" : \"PaleGreen\",\n             \"lightgoldenrodyellow\" : \"SpringGreen\",\n             \"lightyellow\" : \"MintCream\",\n             \"palegoldenrod\" : \"LightGreen\",\n             \"yellow\" : \"Lime\"}\n\ndef yellow_be_gone(clrIn):\n\n    if \"#\"==clrIn[0]:\n        R, G, B = clrIn[1:3], clrIn[3:5], clrIn[5:7]\n        if R>B and G>B: return  \"#\"+B+G+R if  R<G else \"#\"+B+R+G\n\n    for clr in COLORDICT.keys():\n        if clr==clrIn.lower(): return COLORDICT[clr]\n    \n    return clrIn", "COLORS = {\n    'gold': 'ForestGreen', 'khaki': 'LimeGreen', 'lemonchiffon': 'PaleGreen',\n    'lightgoldenrodyellow': 'SpringGreen', 'lightyellow': 'MintCream',\n    'palegoldenrod': 'LightGreen', 'yellow': 'Lime',\n}\n\ndef yellow_be_gone(color):\n    if color.startswith('#'):\n        r, g, b = color[1:3], color[3:5], color[5:]\n        if r > b < g:\n            return '#{}{}{}'.format(b, max(r, g), min(r, g))\n    return COLORS.get(color.lower(), color)", "def yellow_be_gone(color):\n    color_change = {\"gold\": \"ForestGreen\", \"khaki\": \"LimeGreen\", \"lemonchiffon\": \"PaleGreen\", \"lightgoldenrodyellow\": \"SpringGreen\",\n        \"lightyellow\": \"MintCream\", \"palegoldenrod\": \"LightGreen\", \"yellow\": \"Lime\"}\n    if color.startswith(\"#\"):\n        codes = [(int(rgb, 16), rgb) for rgb in [color[1:3], color[3:5], color[5:]]]\n        rgb_string = color if any(c <= codes[2][0] for c in (x for x, _ in codes[:2])) else\\\n            \"#\" + \"{0}{2}{1}\".format(*[c for _, c in sorted(codes)])\n        return rgb_string\n    return color_change.get(color.lower(), color)", "SHADES = {\n    \"gold\": \"ForestGreen\",\n    \"khaki\": \"LimeGreen\",\n    \"lemonchiffon\": \"PaleGreen\",\n    \"lightgoldenrodyellow\": \"SpringGreen\",\n    \"lightyellow\": \"MintCream\",\n    \"palegoldenrod\": \"LightGreen\",\n    \"yellow\": \"Lime\"\n}\n\ndef yellow_be_gone(color):\n    if color[0] == '#':\n        r, g, b = color[1:3], color[3:5], color[5:]\n        if r > b and g > b:\n            color = '#{0}{2}{1}'.format(*sorted([r, g, b]))\n    return SHADES.get(color.lower(), color)\n", "import re\nh={\n'gold':'ForestGreen',\n'khaki':'LimeGreen',\n'lemonchiffon':'PaleGreen',\n'lightgoldenrodyellow':'SpringGreen',\n'lightyellow':'MintCream',\n'palegoldenrod':'LightGreen',\n'yellow':'Lime',\n}\n\ndef yellow_be_gone(c):\n    n=c.lower()\n    if n in h:return h[n]\n    \n    m=re.match(r'#([a-zA-Z0-9]{2})([a-zA-Z0-9]{2})([a-zA-Z0-9]{2})',c)\n    if m:\n        r,g,b=list(m.groups())\n        l=sorted([r,g,b])\n        if(r>b and g>b):\n            return'#%s%s%s'%(l[0],l[2],l[1])\n    return c", "def yellow_be_gone(s):\n    d = {\n        'gold': 'ForestGreen',\n        'khaki': 'LimeGreen',\n        'lemonchiffon': 'PaleGreen',\n        'lightgoldenrodyellow': 'SpringGreen',\n        'lightyellow': 'MintCream',\n        'palegoldenrod': 'LightGreen',\n        'yellow': 'Lime'    \n    }\n    \n    if s[0] == '#':\n        R, G, B = s[1:3], s[3:5], s[5:7]\n        if B < G and B < R:\n            R, B, G = sorted([R,G,B])\n            s = '#' + R + G + B\n        \n    return d.get(s.lower(), s)\n", "def yellow_be_gone(color_name_or_code):\n    d = {\n        'gold': 'ForestGreen',\n        'khaki': 'LimeGreen',\n        'lemonchiffon': 'PaleGreen',\n        'lightgoldenrodyellow': 'SpringGreen',\n        'lightyellow': 'MintCream',\n        'palegoldenrod': 'LightGreen',\n        'yellow': 'Lime'    \n    }\n    \n    if not '#' in color_name_or_code:\n        return d[color_name_or_code.lower()] if color_name_or_code.lower() in d else color_name_or_code \n\n    intcodes = [int(color_name_or_code[i:i+2], 16) for i in range(1, len(color_name_or_code), 2)]\n    if intcodes[0] <= intcodes[2] or intcodes[1] <= intcodes[2]:\n        return color_name_or_code\n    \n    intcodes = sorted(intcodes)\n    intcodes = map (lambda x: hex(x)[2:] if len(hex(x)[2:]) == 2 else '0' + hex(x)[2:] , [intcodes[0], intcodes[2], intcodes[1]])\n    intcodes = '#' + ''.join(intcodes)\n    \n    return intcodes.upper() if any([c.isupper() for c in color_name_or_code]) else intcodes", "def yellow_be_gone(s):\n    if s[0] == \"#\":\n        x = s[1:]\n        r, g, b = x[:2], x[2:4], x[4:]\n        if r > b and g > b:\n            r, b, g = sorted((r, g, b))\n            return f\"#{r}{g}{b}\"\n        return s\n    d = {\"gold\": \"ForestGreen\", \"khaki\": \"LimeGreen\", \"lemonchiffon\": \"PaleGreen\", \"lightgoldenrodyellow\": \"SpringGreen\", \"lightyellow\": \"MintCream\", \"palegoldenrod\": \"LightGreen\", \"yellow\": \"Lime\"}\n    x = s.lower()\n    return d[x] if x in d else s", "def yellow_be_gone(s):\n    d = {'gold':'ForestGreen','khaki':'LimeGreen','lemonchiffon':'PaleGreen', 'lightgoldenrodyellow':'SpringGreen','lightyellow':'MintCream','palegoldenrod':'LightGreen','yellow':'Lime'}\n    if s.lower() in d: return d.get(s.lower())\n    if not s.startswith('#'): return s\n    flag = any(i.isupper() for i in s)\n    r,g,b = map(lambda x: int(x,16), (s[1:3],s[3:5],s[5:8]))\n    if r>b and g>b: \n        x,y,z = sorted((r,g,b))\n        r,g,b = x,z,y\n    c = '#' + ''.join(format(i,'02x') for i in (r,g,b))\n    return c.upper() if flag else c"]