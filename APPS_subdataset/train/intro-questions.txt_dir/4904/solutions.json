["from collections import Iterable\n\ndef unpack(iterable):\n    lst = []\n    for x in iterable:\n        if   isinstance(x,dict):     x = unpack(x.items())\n        elif isinstance(x,str):      x = [x]\n        elif isinstance(x,Iterable): x = unpack(x)\n        else:                        x = [x]\n        lst.extend(x)\n    return lst", "def unpack(l):\n    \"\"\"Unpack a list of elements that contains unpackable objects.\n\n    >>> unpack([None, [1, ({2, 3}, {'foo': 'bar'})]])\n    [None, 1, 2, 3, 'foo', 'bar']\n\n    \"\"\"\n    res = []\n    for i in l:\n        if type(i) is list:\n            res += unpack(i)\n        elif type(i) is tuple:\n            res += unpack(list(i))\n        elif type(i) is dict:\n            res += unpack(list(i.keys()))\n            res += unpack(list(i.values()))\n        elif type(i) is set:\n            res += unpack(list(i))\n        else:\n            res += [i]\n    return res\n", "def unpack(l):\n    pac = []\n    for e in l:\n        if type(e) not in [tuple, list, set, dict]:\n            pac.append(e)\n        elif type(e) == dict:\n            pac += unpack(list(e.items()))\n        else:\n            pac += unpack(e)\n    return pac", "def iter_unpack(x):\n    if isinstance(x, (tuple, list, set)):\n        for item in x:\n            yield from iter_unpack(item)\n    elif isinstance(x, dict):\n        for key, value in x.items():\n            yield from iter_unpack(key)\n            yield from iter_unpack(value)\n    else:\n        yield x\n\ndef unpack(x):\n    return list(iter_unpack(x))", "def unpack(L):\n    res = []\n    for el in L:\n        if isinstance(el, (list, tuple, set)):\n            res.extend(unpack(el))\n        elif isinstance(el, dict):\n            res.extend(unpack(el.items()))\n        else:\n            res.append(el)\n    return res", "def unpack(li,s=None):\n    if s is None : s = []\n    for i in li:\n        if type(i) in [list, tuple, set] : unpack(i,s)\n        elif type(i) == dict : unpack(sum([[k, l] for k, l in i.items()], []),s)\n        else : s.append(i)\n    return s", "from collections import Iterable\n\ndef unpack(xs):\n    queue = xs[:]\n    output = []\n    \n    while queue:\n        x = queue.pop(0)\n        \n        if type(x) is dict:\n            queue.append(x.items())\n        elif type(x) != str and isinstance(x, Iterable):\n            queue.extend(x)\n        else:\n            output.append(x)\n                \n    return output", "from collections import Iterable\n\ndef unpack(l):\n    output = []\n    \n    queue = l[:]\n    while queue:\n        x = queue.pop(0)\n        \n        if type(x) is dict:\n            queue.append(x.items())\n        elif isinstance(x, Iterable) and type(x) != str:\n            for y in x:\n                queue.append(y)\n        else:\n            output.append(x)\n                \n    return output", "def unpack(nested):\n    if type(nested) in (tuple, list, set):\n        return [flat for value in nested for flat in unpack(value)]\n    if type(nested) is dict:\n        return [flat for key, value in list(nested.items()) for flat in unpack(key) + unpack(value)]\n    return [nested]\n", "from collections import Iterable\n\ndef unpack(l):    \n    return [l] if not isinstance(l, Iterable) or type(l) == str else unpack(l.items()) if type(l) == dict else [e for a in [unpack(e) for e in l] for e in a]"]