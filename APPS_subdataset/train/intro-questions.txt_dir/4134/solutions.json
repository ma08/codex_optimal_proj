["import math\n\ndef cooking_time(needed_power, minutes, seconds, power):\n    t = math.ceil((60 * minutes + seconds) * int(needed_power[:-1]) / int(power[:-1]))\n    return '%d minutes %d seconds' %(t // 60, t - t // 60 * 60)", "cooking_time=lambda n,m,s,p:'{} minutes {} seconds'.format(*divmod(-(-(m*60+s)*int(n[:-1])//int(p[:-1])),60))", "from math import ceil\n\n\ndef cooking_time(n_pow, n_min, n_sec, pow):\n    m, s = divmod(ceil((60 * n_min + n_sec) * int(n_pow[:-1]) / int(pow[:-1])), 60)\n    return f\"{m} minutes {s} seconds\"", "import math\n\ndef cooking_time(needed_power, minutes, seconds, power):\n    needed_power = int(needed_power[:-1])\n    power = int(power[:-1])\n    time = minutes * 60 + seconds\n    res_time = math.ceil(time * needed_power / power)\n    return \"{0} minutes {1} seconds\".format(res_time // 60, res_time % 60)\n", "from math import ceil\ndef cooking_time(needed_power, minutes, seconds, power):\n    q = float(needed_power[:-1]) / float(power[:-1])\n    t = minutes * 60 + seconds\n    return '{} minutes {} seconds'.format(*divmod(ceil(q * t), 60))", "from math import ceil\n\n\ndef cooking_time(needed_power, minutes, seconds, power):\n    total_seconds = ceil(int(needed_power[:-1]) * (minutes * 60 + seconds) / int(power[:-1]))\n    m, s = total_seconds // 60, total_seconds % 60\n    return \"{} minutes {} seconds\".format(m, s)", "from math import ceil\ndef cooking_time(n_p,m,s,p):\n    n_p,p=map(int,(n_p[:-1],p[:-1]))\n    return \"{} minutes {} seconds\".format(*divmod(ceil((m*60+s)/p*n_p),60))", "from math import ceil\n\ndef cooking_time(needed_power, minutes, seconds, power):\n    totsec=minutes*60+seconds\n    nd_pw,pw=int(needed_power.split('W')[0]),int(power.split('W')[0])\n    res=ceil(nd_pw/pw*totsec)\n    return '{:g} minutes {} seconds'.format(res//60,ceil(res-(res//60)*60))", "import math\ndef cooking_time(needed_power, minutes, seconds, power):\n    in_seconds = 60 * minutes + seconds\n    increase = int(needed_power[:-1]) / int(power[:-1])\n    new_seconds = in_seconds * increase\n    output_minutes = int(new_seconds/60)\n    output_seconds = new_seconds % 60\n    if math.ceil(output_seconds) == 60:\n        output_seconds = 0\n        output_minutes += 1\n    return str(math.ceil(output_minutes)) + ' minutes ' + str(math.ceil(output_seconds)) + ' seconds'", "from math import ceil\n\ndef cooking_time(n,m,s,p):\n    return '{0} minutes {1} seconds'.format(*divmod(ceil((m*60+s)*int(n[:-1])/int(p[:-1])),60))"]