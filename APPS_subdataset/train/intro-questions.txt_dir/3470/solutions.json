["def to_twos_complement(binary, bits):\n    return int(binary.replace(' ', ''), 2) - 2 ** bits * int(binary[0])\n\ndef from_twos_complement(n, bits):\n    return '{:0{}b}'.format(n & 2 ** bits - 1, bits)", "def to_twos_complement(b, bits):\n    b = b.replace(\" \",\"\")\n    return int(b,2) if int(b,2) < 2**(bits-1) else int(b,2)-2**(bits)\n\ndef from_twos_complement(n, bits):\n    return bin(2**bits+n)[2:].zfill(bits) if n<0 else bin(n)[2:].zfill(bits)", "def to_twos_complement(input_value, bits):\n    mask, unsigned = 2 ** (bits - 1), int(input_value.replace(' ', ''), 2)\n    return (unsigned & ~mask) - (unsigned & mask)\n\ndef from_twos_complement(n, bits):\n    return \"{:0>{}b}\".format(n + 2 ** bits * (n < 0), bits)", "def to_twos_complement(binary, bits):\n    return int(binary.replace(' ', ''), 2) - (2 ** bits) * binary.startswith('1')\n        \ndef from_twos_complement(n, bits):\n    return '{:0{}b}'.format((n + 2 ** bits) % (2 ** bits), bits)", "def to_twos_complement(binary, bits): \n    conv = int(binary.replace(' ',''), 2)\n    return conv - (conv >= 2**bits/2) * 2**bits\n\ndef from_twos_complement(n, bits):\n    return (\"{:0>\"+str(bits)+\"b}\").format(n + (2**bits) * (n<0))", "to_twos_complement=lambda s,l:int(s.replace(' ',''),2)if s[0]=='0'else-(int(\"\".join([str(int(i)^1)for i in s.replace(' ','')]),2)+1)\nfrom_twos_complement=lambda n,b:bin(n&0xffffffffffffffffffff)[2:][-b:]if n<0else bin(n)[2:].zfill(b)", "def to_twos_complement(binary, bits):\n    binary = binary.replace(\" \", \"\")\n    chiffre = binary[0]\n    n = int(binary, 2)\n    if chiffre == '1':\n        n -= 2**bits\n    return n\ndef from_twos_complement(n, bits):\n    \n    if n<0:\n        n += 2**bits\n        \n    chaine = bin(n)\n    chaine = chaine[2:]\n    chaine = (bits-len(chaine))*'0'+chaine\n    return chaine\n", "def to_twos_complement(binary, bits):\n    binary=\"\".join(binary.split())\n    res= -(2**(bits-1)) if binary[0]==\"1\" else 0\n    for i in range(1, bits):\n        res+=2**(bits-1-i) if binary[i]==\"1\" else 0\n    return res\ndef from_twos_complement(n, bits):\n    if n>=0:\n        return \"0\"*(bits-len(bin(n)[2:]))+bin(n)[2:]\n    else:\n        remain=abs(-(2**(bits-1))-n)\n        return \"1\"+\"0\"*(bits-len(bin(remain)[2:])-1)+bin(remain)[2:]", "def to_twos_complement(binary, bits):\n    binary = binary.replace(\" \", \"\")\n    sign_bit = binary[0]\n    if sign_bit == \"1\":\n        return int(binary[1:], 2) - 2**(bits-1)\n    else:\n        return int(binary, 2)\n\ndef from_twos_complement(n, bits):\n    print(\"new\")\n    if n >= 0:\n        return format(n,'b').zfill(bits)\n    else:\n        return format(2**bits + n, 'b')", "def to_twos_complement(binary, bits):\n    x=int(binary.replace(' ',''),2)\n    if binary[0]=='0':\n        return x\n    else:\n        return -((x^(2**bits-1))+1)\n    \n\ndef from_twos_complement(n, bits):\n    if n>=0:\n        return '{:b}'.format(n).zfill(bits)\n    else:\n        return '{:b}'.format(2**bits+n).zfill(bits)"]