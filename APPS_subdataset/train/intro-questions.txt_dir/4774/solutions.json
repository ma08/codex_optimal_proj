["def find_in_array(seq, predicate): \n    for index, value in enumerate(seq):\n        if predicate(value, index):\n            return index\n    return -1", "def find_in_array(seq, fn): \n    return next((i for i, j in enumerate(seq) if fn(j, i)), -1)", "def find_in_array(seq, predicate): \n    return next((i for i,v in enumerate(seq) if predicate(v,i)), -1)", "find_in_array = lambda seq, predicate: (lambda ret: -1 if not ret else ret[0])([i for i, e in enumerate(seq) if predicate(e,i)])", "def find_in_array(seq, predicate): \n\n    for index, value in enumerate(seq):\n        if predicate(value,index):\n            return index\n    return -1 \n\n\n\n#     print(type(predicate)) #function\n#     print(type(seq)) #list\n#     print(predicate.__name__) lambda\n", "def find_in_array(seq, pred): \n    return next((ix for ix, s in enumerate(seq) if pred(s, ix)), -1)", "def find_in_array(seq, predicate):\n    return next((i for i, e in enumerate(seq) if predicate(e, i)), -1)", "def find_in_array(seq, predicate):\n        l=[i for i,value in enumerate(seq) if predicate(value,i)]\n        return l[0] if l else -1", "def find_in_array(seq, predicate): \n    for i, x in enumerate(seq):\n        if predicate(x, i):\n            return i\n    return -1", "def find_in_array(seq, predicate): \n    for i, elem in enumerate(seq):\n        if predicate(elem, i):\n            return i\n    return -1"]