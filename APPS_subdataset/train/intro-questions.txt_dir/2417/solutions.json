["class Solution:\n     def convertToBase7(self, num):\n         \"\"\"\n         :type num: int\n         :rtype: str\n         \"\"\"\n         if num < 0:\n             return '-' + str(self.convertToBase7(-num))\n         elif num < 7:\n             return str(num)\n         else:\n             return str(self.convertToBase7(num//7)) + str(num % 7)", "class Solution:\n     def convertToBase7(self, num):\n         \"\"\"\n         :type num: int\n         :rtype: str\n         \"\"\"\n         L = []\n         n = abs(num)\n         while n >= 7:\n             L.append(str(n % 7))\n             n = n // 7\n         L.append(str(n))\n         return \"\".join(L[::-1]) if num >= 0 else \"-\"+\"\".join(L[::-1])\n", "class Solution:\n     def convertToBase7(self, num):\n         flag = 0\n         if num < 0:\n             num = -num\n             flag = 1\n         elif num == 0:\n             return \"0\"\n         temp = num;\n         #str1 = \"\"\n         list1 = []\n         while temp > 0:\n             num = temp % 7\n             temp = temp // 7\n             list1.insert(0, str(num))\n         if flag == 1:\n             list1.insert(0, \"-\")\n         str1 = \"\".join(list1)\n         return str1\n \n", "class Solution:\n \tdef convertToBase7(self, num):\n \t\t\"\"\"\n \t\t:type num: int\n \t\t:rtype: str\n \t\t\"\"\"\n \t\tif num < 0: return '-' + self.convertToBase7(-num)\n \t\tif num < 7: return str(num)\n \t\treturn self.convertToBase7(num // 7) + str(num % 7)", "class Solution:\n     def convertToBase7(self, num):\n         \"\"\"\n         :type num: int\n         :rtype: str\n         \"\"\"\n         if num < 0:\n             return '-' + self.convertToBase7(-num)\n         if num < 7:\n             return str(num)\n         return self.convertToBase7(num // 7) + str(num % 7)", "class Solution:\n     def convertToBase7(self, num):\n         \"\"\"\n         :type num: int\n         :rtype: str\n         \"\"\"\n         if num==0:\n             return '0'\n         sign='-' if num<0 else ''\n         res='' \n         num=abs(num)\n         while num>0:\n             res=str(num%7)+res\n             num//=7\n         return sign+res\n", "class Solution:\n     def convertToBase7(self, num):\n         \"\"\"\n         :type num: int\n         :rtype: str\n         \"\"\"\n         if num < 0:\n             num *= -1\n             r = '-'\n         else:\n             r = ''\n         n = num\n         c = 0\n         while n // 7 > 0:\n             c += 1\n             n //= 7\n         for i in range(c, 0, -1):\n             t = num // (7 ** i)\n             if t > 0:\n                 num -= (7 ** i) * t\n                 r += str(t)\n             else:\n                 r += '0'\n         r += str(num)\n         return r\n", "class Solution:\n     def convertToBase7(self, num):\n         \"\"\"\n         :type num: int\n         :rtype: str\n         \"\"\"\n         minus = True if num < 0 else False\n         num = abs(num)\n         s = ''\n         while num>=7:\n             s += str(num%7)\n             num //= 7\n         s += str(num)\n         \n         return minus * '-' + s[::-1]", "class Solution:\n     def convertToBase7(self, num):\n         \"\"\"\n         :type num: int\n         :rtype: str\n         \"\"\"\n         a = \"\"\n         n = False\n         if num==0:\n             return '0'\n         if num<0:\n             num= -num\n             n = True\n         while num!=0:\n             a = str(num%7)+a\n             num //= 7\n \n         if n ==True:\n             return \"-\" + a\n         return a", "class Solution:\n     def convertToBase7(self, num):\n         \"\"\"\n         :type num: int\n         :rtype: str\n         \"\"\"\n         ans=''\n         num1=abs(num)\n         while num1:\n             ans = str(num1 % 7) + ans\n             num1 //= 7\n \n         if num<0:\n             return '-'+ans\n         elif num==0:\n             return '0'\n \n         return ans\n", "class Solution:\n     def convertToBase7(self, num):\n         \"\"\"\n         :type num: int\n         :rtype: str\n         \"\"\"\n         def decTo7(n):\n             new = \"\"\n             while n / 7 != 0:\n                 new += str(n % 7)\n                 n //= 7\n             if new == \"\": return \"0\"\n             return new[::-1]\n         if num >= 0: return decTo7(num)\n         else:\n             return \"-\" + decTo7(abs(num))", "class Solution:\n     def convertToBase7(self, num):\n         \"\"\"\n         :type num: int\n         :rtype: str\n         \"\"\"\n         if num<0:\n             negative='-'\n             num*=-1\n         else:\n             negative=''\n         p=1\n         while p<=num:\n             p*=7\n         p=p//7\n         digits=[]\n         while p>1:\n             digits.append(num//p)\n             num=num%p\n             p=p//7\n         digits.append(num)\n         result=negative+''.join([str(x) for x in digits])\n         return result\n         \n"]