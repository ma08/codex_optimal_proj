["from os.path import commonprefix\n\ndef string_suffix(s):\n    return sum(len(commonprefix([s, s[i:]])) for i in range(len(s)))", "def similarity(strng1, strng2):\n    result = 0\n    for c1, c2 in zip(strng1, strng2):\n        if c1 != c2:\n            break\n        result += 1\n    return result\n\ndef string_suffix(strng):\n    return sum(similarity(strng[i:], strng) for i in range(len(strng)))\n", "def string_suffix(s):\n    length = len(s)\n    counter = 0\n    for i in range(length):\n        for i,c in enumerate(s[i:]):\n            if c == s[i]:\n                counter += 1\n            else: break\n    return counter", "def string_suffix(s):\n    total = len(s)\n    suffixes = [s[y:] for y in range(len(s)) if s[y] == s[0]][1:]\n    for suff in suffixes:\n        for y,l in zip(s,suff):\n            if l == y:\n                total += 1\n            else:\n                break\n    return total", "def string_suffix(s):\n  sim = lambda s1, s2: ([c1 == c2 for c1, c2 in zip(s1, s2)]+[False]).index(False)\n  return sum(sim(s, s[i:]) for i in range(len(s)))", "string_suffix=lambda s:sum(s[:j-i]==s[i:j] for j in range(1,len(s)+1) for i in range(j))", "def string_suffix(str_):\n    return sum(next((c for c, (a, b) in enumerate(zip(str_, str_[d:])) if a != b), len(str_[d:])) for d in range(len(str_)))", "def string_suffix(str_):  \n    return sum(next((j for j,(a,b) in enumerate(zip(str_[i:],str_)) if a!=b),len(str_)-i) for i in range(len(str_)))"]