["class Solution:\n     def detectCapitalUse(self, word):\n         \"\"\"\n         :type word: str\n         :rtype: bool\n         \"\"\"\n         if len(word) == 0:\n             return True\n         elif word.isupper() or word.islower():\n             return True\n         elif len(word) > 1:\n             return word.istitle()\n         else:\n             return False", "class Solution:\n     def detectCapitalUse(self, word):\n         \"\"\"\n         :type word: str\n         :rtype: bool\n         \"\"\"\n         if word.isupper():\n             return True\n         if word.islower():\n             return True\n         if word[0].isupper() and word[1:].islower():\n             return True\n         \n         return False", "class Solution:\n     def detectCapitalUse(self, word):\n         \"\"\"\n         :type word: str\n         :rtype: bool\n         \"\"\"\n         for i, w in enumerate(word):\n             is_cap = ord(w) < ord('a')\n             if i == 0:\n                 if is_cap:\n                     first_cap = True\n                     keep_cap = False\n                 else:\n                     first_cap = False\n                     keep_cap = False\n             else:\n                 if not first_cap and is_cap:\n                     return False\n                 if keep_cap and not is_cap:\n                     return False\n                 if not keep_cap and i > 1 and is_cap:\n                     return False\n                 if i == 1 and is_cap and first_cap:\n                     keep_cap = True\n         return True\n             \n", "class Solution:\n     def detectCapitalUse(self, word):\n         return word[1:]==word[1:].lower() or word==word.upper()", "class Solution:\n     def detectCapitalUse(self, word):\n         \"\"\"\n         :type word: str\n         :rtype: bool\n         \"\"\"\n         return word.islower() or word.isupper() or word.istitle()", "class Solution:\n     def detectCapitalUse(self, word):\n         \"\"\"\n         :type word: str\n         :rtype: bool\n         \"\"\"\n         return word == word.upper() or word == word.lower() or word == word[0].upper() + word[1::].lower()", "class Solution:\n     def detectCapitalUse(self, word):\n         \n         return word[1:].islower() or word.isupper() or word.islower()\n     \n     \n     \n         \"\"\"old\n         if word[0].isupper():\n             if len(word)==1:return True\n             if word[1].isupper():\n                 for i in range(2,len(word)):\n                     if word[i].islower():return False\n                 return True                    \n             for i in range(2,len(word)):\n                 if word[i].isupper():return False\n             return True\n         for i in range(1,len(word)):\n             if word[i].isupper():return False\n         return True\n         \"\"\"\n         \n         \"\"\"\n         :type word: str\n         :rtype: bool\n         \"\"\"\n"]