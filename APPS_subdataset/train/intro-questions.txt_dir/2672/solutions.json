["def color_probability(color, texture):\n    marbles = {\"smooth\": {\"red\": 1, \"yellow\": 1, \"green\": 1, \"total\": 3}, \"bumpy\": {\"red\": 4, \"yellow\": 2, \"green\": 1, \"total\": 7}}\n    return \"{}\".format(marbles[texture][color] / marbles[texture][\"total\"])[:4]", "def color_probability(color, texture):\n    prob_mapper = {'smooth': {\n        'red': 1,\n        'yellow': 1,\n        'green': 1,\n        'total': 3\n    }, 'bumpy': {\n        'red': 4,\n        'yellow': 2,\n        'green': 1,\n        'total': 7\n    }}\n    \n    prob = prob_mapper[texture][color] / prob_mapper[texture]['total']\n    \n    return str(prob)[:4]", "def color_probability(color, texture):\n    if texture == 'smooth': return '0.33'\n    if color   == 'red'   : return '0.57'\n    if color   == 'yellow': return '0.28'\n    if color   == 'green' : return '0.14'", "#         R  Y  G\nPROBS = [[1, 1, 1],   # Smooth\n         [4, 2, 1]]   # Bumpy\nIDX = {'red': 0, 'yellow': 1, 'green': 2, 'smooth': 0, 'bumpy': 1}\n\ndef color_probability(color, texture):\n    prob = PROBS[IDX[texture]][IDX[color]] / sum(PROBS[IDX[texture]])\n    return \"{:.2}\".format(int(prob*100)/100)", "def color_probability(color, texture):\n    # Your code goes here.\n    if texture == 'bumpy': \n        if color == 'red':\n            prob = 4/7 \n        elif color == 'yellow': \n            prob = 2/7 \n        else: \n            prob = 1/7 \n    else:\n        prob = 1/3\n    return str(prob)[:4]  \n", "def color_probability(color, texture):\n    bag = [\n        (\"red\", \"smooth\"),\n        (\"red\", \"bumpy\"),\n        (\"red\", \"bumpy\"),\n        (\"red\", \"bumpy\"),\n        (\"red\", \"bumpy\"),\n        (\"yellow\", \"bumpy\"),\n        (\"yellow\", \"bumpy\"),\n        (\"yellow\", \"smooth\"),\n        (\"green\", \"bumpy\"),\n        (\"green\", \"smooth\"),\n    ]\n    candidates = [marble for marble in bag if marble[1] == texture]\n    return \"{:.03}\".format(sum(marble[0] == color for marble in candidates) / len(candidates))[:-1]", "from decimal import *\n\ndef color_probability(color, texture):\n    bag_content = {\n        (\"red\", \"smooth\"): 1,\n        (\"red\", \"bumpy\"): 4,\n        (\"yellow\", \"bumpy\"): 2,\n        (\"yellow\", \"smooth\"): 1,\n        (\"green\", \"bumpy\"): 1,\n        (\"green\", \"smooth\"): 1,\n    }\n\n    color_match_number = Decimal(bag_content[color, texture])\n    \n    texture_match_list = [bag_content[k] for k in bag_content.keys() if k[1]==texture]\n    texture_match_number =  Decimal(sum(texture_match_list))\n    \n    return str(Decimal(color_match_number/texture_match_number).quantize(Decimal('.01'), rounding=ROUND_DOWN))", "D = {'bumpy':{'red':'0.57', 'yellow':'0.28', 'green':'0.14'}, 'smooth':{'red':'0.33', 'yellow':'0.33', 'green':'0.33'}}\n\n# That's a weird kata, only 6 possibles results and no randomness\ndef color_probability(color, texture):\n    return D[texture][color]", "color_probability=lambda c, t, p=lambda x:x[0]in'bg':f\"{([[2,1][p(c)],4][c[0]=='r']if p(t)else 1)/(7if p(t)else 3):.3f}\"[:-1]", "def color_probability(color, texture):\n    return {\n        (\"smooth\", \"red\"):    \"0.33\",  # 1:3\n        (\"bumpy\",  \"red\"):    \"0.57\",  # 4:7\n        (\"smooth\", \"yellow\"): \"0.33\",  # 1:3\n        (\"bumpy\",  \"yellow\"): \"0.28\",  # 2:7\n        (\"smooth\", \"green\"):  \"0.33\",  # 1:3\n        (\"bumpy\",  \"green\"):  \"0.14\"   # 1:7\n        }[texture, color]"]