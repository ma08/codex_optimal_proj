["def past(h, m, s):\n    return (3600*h + 60*m + s) * 1000", "def past(h, m, s):\n    return (s + (m + h * 60) * 60) * 1000", "def past(h, m, s):\n    # Good Luck!\n    return 3600000 * h + 60000 * m + 1000 * s", "def past(h, m, s):\n    return ((h * 60 + m) * 60 + s) * 1000", "def past(h, m, s):\n    return h * (60 * 60 * 1000) + m * (60 * 1000) + s * 1000", "from datetime import timedelta\n\ndef past(h, m, s):\n    return timedelta(hours=h, minutes=m, seconds=s) // timedelta(milliseconds=1)", "past=lambda h,m,s: (h*3600+m*60+s)*1000", "def past(h, m, s):\n    return (h * 3600 + m * 60 + s) * 1000", "def past(h, m, s):\n    return h * 3.6e+6 + m * 6e4 + s * 1e3", "def past(h, m, s):\n    ms = 0\n    ms += 3600000 * h\n    ms += 60000 * m\n    ms += 1000 * s\n    return ms", "def past(h, m, s):\n    if 0 <= h <= 23 and 0 <= m <= 59 and 0 <= s <= 59:\n        L=[]\n        L.append(h*3600000)\n        L.append(m*60000)\n        L.append(s*1000)\n        return sum(L)", "def past(h, m, s):\n    return 1000*(3600*h + 60 * m + s)", "def past(h, m, s):\n    return h * 3600000 + m * 60000 + s * 1000", "def past(h, m, s):\n    # Good Luck!\n    h = h*3600\n    m = m*60\n    s = s*1\n    milisec = h+m+s\n    mil = str(milisec)\n    mili = mil.ljust(3 + len(mil), '0') \n    return int(mili)    ", "past = lambda h, m, s: (h * 3.6e+6) + (m * 60000) + (s * 1000)", "def past(h, m, s):\n    ms = s * 1000\n    mm = m * 60000\n    mh = h * 3600000\n    return ms + mm + mh", "def past(h, m, s):\n    m += h * 60\n    s += m * 60\n    ms = s * 1000\n    return ms\n\n# Yes that could've been datetime or oneliner, but what's the point.\n", "def past(h, m, s):\n    if 0 <= h <= 23 or 0 <= m <= 59 or 0 <= s <= 59:\n        x = h * 3600000\n        y = m * 60000\n        z = s * 1000\n        total = x + y + z\n        return(total)\n    else:\n        return(\"Please input an hour between 0 and 23 and a minute or second inbetween 0 and 59.\")", "def past(h, m, s):\n    # Good Luck!\n    h = h * 60 * 60 * 1000\n    m = m * 60 * 1000\n    s = s * 1000\n    \n    return (h + m + s)", "def past(h, m, s):\n    return((h * 3.6e+6) + (m * 60000) + (s * 1000))", "def past(h, m, s):\n    return 1000 * (h * 3600 + m * 60 + s)", "def past(h, m, s):\n    if h != 0: h = h * 3600000\n    if m !=0: m = m* 60000\n    if s !=0: s = s* 1000\n   \n    \n    return s+m+h\n", "def past(h, m, s):\n    if h: return past(0,60*h+m,s)\n    if m: return past(0,0,60*m+s)\n    return 1000*s\n", "SI = {'ms': .001, 's': 1, 'm': 60, 'h': 60 * 60}\nconvert_SI = lambda val, unit_from, unit_to: val * SI[unit_from] / SI[unit_to]\nconvert_ms = __import__('functools').partial(convert_SI, unit_to='ms')\npast = lambda *args: sum(convert_ms(val, unit) for val, unit in zip(args, 'hms'))", "import datetime\ndef past(h, m, s):\n    dt = datetime.timedelta(hours=h, minutes=m, seconds=s)\n    return 1000 * dt.total_seconds()\n", "def past(h, m, s):\n    return sum(a*b for a,b in zip([h,m,s],[3600,60,1]))*1000", "def past(h, m, s):\n  return hoursToMilliseconds(h) + minutesToMilliseconds(m) + secondsToMilliseconds(s);\n\ndef secondsToMilliseconds(s):\n  return s * 1000;\n\ndef minutesToMilliseconds(m):\n  return secondsToMilliseconds(m * 60);\n\ndef hoursToMilliseconds(h):\n  return minutesToMilliseconds(h * 60);\n\n\n", "import math\ndef past(h, m, s):\n    return math.ceil((h * 3.6e+6) + (m * 60000) + (s * 1000))", "def past(h, m, s):\n    res = s * 1000\n    res += m * 60 * 1000\n    res += h * 60 * 60 * 1000\n    return res", "from time import struct_time as st, mktime as mk\n\ndef past(h, m, s):\n    return int(mk(st((2020, 1, 2, h, m, s, 3, 4, 5)))  \\\n             - mk(st((2020, 1, 2, 0, 0, 0, 3, 4, 5)))) \\\n             * 1000 ", "def convert_SI(val, unit_in, unit_out='ms'):\n    SI = {'ms': .001, 's': 1, 'm': 60, 'h': 60 * 60}\n    return val * SI[unit_in] / SI[unit_out]\n\ndef past(*args, order='hms'):\n    return sum(convert_SI(x, u) for u, x in zip(order, args))\n\n\n# def past(h, m, s):    \n#     return convert_SI(h, 'h') + convert_SI(m, 'm') + convert_SI(s, 's')\n", "def past(h, m, s):\n    return 1000 * sum(unit * 60**power for power, unit in enumerate([s, m, h]))\n", "def past(h, m, s):\n    seconds = s + (m * 60) + (h * 3600)\n    return seconds / .001", "past = lambda *args: __import__('functools').reduce(lambda a, b: a * 60 + b, args) * 1000", "def past(h, m, s):\n    return h * 36e5 + m * 6e4 + s * 1e3", "# past = lambda h, m, s: (((60 * h) + m) * 60 + s) * 1000\ndef past(*ar):\n    r = 0\n    for x in ar:\n        r = 60 * r + x\n    return 1000 * r", "from datetime import timedelta\n\n\ndef past(h, m, s):\n    d = timedelta(hours=h, minutes=m, seconds=s)\n    return d.seconds * 1000\n", "def past(h, m, s):\n    return int(h * 3.6*pow(10,6) + m * 6*pow(10,4) + s *pow(10,3))\n", "def past(h, m, s):\n    return sum([ h * 60 * 60 * 1000,\n             m * 60 * 1000,\n             s * 1000 ])", "def past(h, m, s):\n    # Good Luck!\n    res=int(str(h*36)+'00000')+int(str(m*6)+'0000')+int(str(s)+'000')\n    return res", "def past(h, m, s):\n    return h*3.6e6 + m*6e4 + s*1e3", "past = lambda *a: 1000 * sum(n * (60 ** i) for i, n in enumerate(reversed(a)))", "past = lambda h, m, s: ((((h * 60) + m) * 60) + s) * 1000", "def past(h, m, s):\n    return sum(u * c for u, c in \n                zip((s, m, h), (1000, 60*1000, 60*60*1000)))", "def past(hours, minutes, seconds):\n    hours = (hours * 3600) * 1000\n    minutes = (minutes * 60) * 1000\n    seconds = seconds * 1000\n    return hours + minutes + seconds", "def past(h, m, s):\n    hr = h * 60 * 60 * 1000\n    mn = m * 60 * 1000\n    sec = s * 1000\n    mil = hr + mn + sec\n    return mil\n    # Good Luck!\n", "def past(h, m, s):\n    a=h*3600000\n    c=s*1000\n    b=m*60000\n    return a+b+c\n\n    \n    # Good Luck!\n", "def past(h, m, s):\n    \n    htom=h*60\n    m=m+htom\n    \n    mtos=m*60\n    s=s+mtos\n    \n    stoms=s*1000\n    \n    return stoms\n    \n    # Good Luck!\n", "def past(h, m, s):\n    ms = 60*60*1000*h + 60*1000*m + 1000*s\n    return ms", "def past(h, m, s):\n    0 <= h <= 23, 0 <= m <= 59, 0 <= s <= 59\n    m = int(m + h*60)\n    return int(s + m*60)*1000\n", "def past(h, m, s):\n    return int(h * 3.6 * 10 ** 6 + m * 60000 + s * 1000)", "def past(h, m, s):\n    \n    h1=h*3600\n    \n    m1=m*60\n\n    x=(h1+m1+s)*1000\n    return x", "def past(h, m, s):\n    x = h*60*60*1000\n    y = m*60*1000\n    z = s*1000\n    j = x + y + z\n    return j\n    # Good Luck!\n", "def past(h, m, s):\n    hour_mm = h*60*60*1000\n    minute_mm = m*60*1000\n    seconds_mm = s*1000\n    \n    return hour_mm + minute_mm + seconds_mm", "def past(h, m, s):\n    hour_minute = h*60\n    minute_millisecond = m*60000\n    second_millisecond = s*1000\n    sum = (hour_minute*60000)+minute_millisecond+second_millisecond\n    return sum", "def past(h, m, s):\n    return(h*3600 + m*60 + s*1)*1000\n    \n    past(0, 0, 8)\n    # Good Luck!\n", "def past(h, m, s):\n    if h == 0:\n        pass\n    else:\n        h = 3600000 * h\n    if m == 0:\n        pass\n    else:\n        m = 60000 * m\n    if s == 0:\n        pass\n    else: \n        s = 1000 * s\n    return (h+m+s)\n    \n\n            \n    \n\n", "def past(h, m, s):\n    time = (h*3600) + (m*60) + s\n    time = time * 1000\n    return time", "def past(h, m, s):\n    result=h*3600 + m*60 + s\n    millisec=result * 1000\n    return millisec\n    \n", "def past(h, m, s):\n    a = (h*60+m)*60\n    return (a+s)*1000", "past = lambda h, m, s: 1000*s+60000*m+3600000*h", "def past(h, m, s):\n    hora = h * 3600000\n    minuto = m * 60000\n    segundo = s * 1000\n    suma = hora + minuto + segundo\n    return suma\n", "def past(h, m, s, mil = 1000):\n    return (h * 3600 + m * 60 + s) * mil", "def past(h, m, s):\n    return h * 3600000 + m * 60000 + s * 1000\n    # Good luck!\n", "def past(h, m, s):\n    output = 0\n    time = 0\n    \n    time = ((h * 60) * 60 + (m * 60) + s)\n    \n    return time * 1000\n    \n    \n    # Good Luck!\n", "def past(h, m, s):\n    assert 0 <= h <= 23 and 0 <= m <= 59 and 0 <= s <= 59\n    return h * 3600000 + m * 60000 + s * 1000", "def past(h, m, s):\n    totalMin = h * 60 + m\n    totalSec = totalMin * 60 + s\n    return totalSec * 1000", "def past(h, m, s):\n    return (h*3600000)+(m*60000)+(s*1000)\n    #pogchamp\n", "def past(h, m, s):\n    # 1 h - 3600000 ms\n    # 1 m - 60000 ms\n    # 1 s - 1000 ms\n    return h*3600000+m*60000+s*1000", "def past(h, m, s):\n    h_to_milli = h * 60 * 60 * 1000\n    m_to_milli = m * 60 * 1000\n    s_to_milli = s * 1000\n    millis = h_to_milli + m_to_milli + s_to_milli\n    return millis", "def past(hours, minutes, sec):\n    if 0 <= hours <= 23 and 0 <= minutes <= 59 and 0 <= sec <= 59:\n        return (hours * 60 * 60 + minutes * 60 + sec) * 1000\n    else:\n        return 0", "def past(h, m, s):\n    a=60\n    b=1000\n    return(h*a*a*b + m*a*b + s*b)", "def past(h, m, s):\n    min = h * 60 + m\n    sec = min * 60 + s\n    sumMilli = sec * 1000 \n    return sumMilli", "def past(h, m, s):\n    h = h * 3600000\n    m = m * 60000\n    s = s * 1000\n    result = h + m + s\n    return result", "def past(h, m, s):\n    while 0 <= h <= 23 and 0 <= m <= 59 and 0 <= s <= 59:\n        h *= 3600000\n        m *= 60000\n        s *= 1000\n        return h + m + s", "from datetime import timedelta\n\ndef past(h, m, s):\n    return timedelta(hours=h, minutes=m, seconds=s)/timedelta(milliseconds=1)", "def past(h, m, s):\n    ms = 0\n    if h >= 0 and h <= 23:\n        ms += h * 3600000\n    else:\n        ms += 0\n\n    if m >= 0 and m <= 59:\n        ms += m * 60000\n    else:\n        ms += 0\n\n    if s >= 0 and s <= 59:\n        ms += s * 1000\n    else:\n        ms += 0\n\n    return ms\n    \n", "def past(h, m, s):\n    while 0 <= h <= 23 and 0 <= m <= 59 and 0 <= s <= 59:\n        h = h * 3600000\n        m = m * 60000\n        s = s * 1000\n        return h + m + s", "def past(h, m, s):\n    if not 0 <= h <= 23 or not 0 <= m <= 59 or not 0 <= s <= 59:\n        return \"Error\"\n    else:\n        return ((h * 3600000) + (m * 60000) + (s * 1000))\n    # Good Luck!\n", "def past(h,\n         m,\n         s):\n\n    return h * 3600000 + m * 60000 + s * 1000\n", "def past(h, m, s):\n    Hms = h*60*60*1000\n    Mms = m*60*1000\n    Sms = s*1000\n    return Hms+Mms+Sms", "def past(h, m, s):\n    x = (60 * 60 * 1000 * h) + (60 * 1000 * m) + (1000 * s)\n    if (0 <= h <= 23, 0 <= m <= 59, 0 <= s <= 59):\n        return (x)", "def past(h, m, s):\n    return (s + 60 * m + h * 3600) * 1000\n    # Good Luck!\n", "def past(h, m, s):\n    new_hour = h * 3600000\n    new_minute = m * 60000\n    new_second = s * 1000\n    total_time = new_hour + new_minute + new_second\n    return total_time", "def past(h, m, s):\n    if h > 0:\n        h = h*60*60*1000\n    if m> 0:\n        m = m*60*1000\n    if s> 0:\n        s = s*1000\n        \n    return h+s+m", "def past(h, m, s):\n    if 0 <= h <= 23 and 0 <= m <= 59 and 0 <= s <= 59:\n        return (s + 60 * (60 * h + m)) * 1000", "def past(h, m, s):\n    if 0 <= h <= 23 and 0 <= m <= 59 and 0 <= s <= 59:\n        return 1000*(60*(60*h + m) + s)", "def past(h, m, s):\n    hMin = ((((60*h) + m)*60)+s)*1000\n    return hMin\n          \n", "def past(h, m, s):\n    h=h*3600000\n    m=m*60000\n    s=s*1000\n    time = 0+ h+m+s\n    return time\n    # Good Luck!\n", "def past(h, m, s):\n    totalseconds = s + (h*3600) + (m*60)\n    milliseconds = totalseconds * 1000\n    return milliseconds", "def past(h, m, s):\n    a = h * 3600000\n    a += m * 60000\n    a += s * 1000\n    return a", "def past(h, m, s):\n    \n    hoursToMiliseconds = h * 3600000\n    minutesToMiliseconds = m * 60000\n    secondsToMiliseconds = s * 1000\n    \n    \n    miliseconds = hoursToMiliseconds + minutesToMiliseconds + secondsToMiliseconds\n    return miliseconds\n    # Good Luck!\n", "def past(h, m, s):\n    seconds = h * 3600 + m * 60 + s\n    milliseconds = seconds * 1000\n    return milliseconds", "def past(h, m, s):\n    if 0 <= h <= 23 and 0 <= m <= 59 and 0 <= s <= 59:\n        h = h*60*60*1000\n        m = m*60*1000\n        s = s*1000\n        return h + m + s", "def past(h, m, s):\n    return (s*1 + m*60 + h*3600)*1000", "def past(h, m, s):\n    if h: m += h * 60\n    if m: s += m * 60\n    return s * 1000", "def past(h, m, s):\n    oclock1 = h * 3600000\n    oclock2 = m * 60000\n    oclock3 = s * 1000\n    return oclock1 + oclock2 + oclock3", "def past(h, m, s):\n    hms, mms, sms = 3600000, 60000, 1000\n    return h * hms + m * mms + s * sms", "def past(h, m, s):\n    x = 0\n    if h:\n        x += h * 3600000\n    if m:\n        x += m * 60000\n    if s:\n        x += s * 1000\n    return x", "def past(h, m, s):\n    # Good Luck!\n    h*= 3600000\n    m*= 60000\n    s*= 1000\n    return h+m+s\npast(1,2,3)"]