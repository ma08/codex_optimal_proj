["from string import maketrans as mt, ascii_lowercase as lc, ascii_uppercase as uc\ndef encryptor(key, message):\n    key %= 26\n    return message.translate(mt(lc+uc, lc[key:]+lc[:key]+uc[key:]+uc[:key]))", "def encryptor(key, message):\n    upper_alpha = list(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n    lower_alpha = list(\"abcdefghijklmnopqrstuvwxyz\")\n\n    cipher = \"\"\n    for x in message:\n        if x in upper_alpha:\n            cipher += upper_alpha[(upper_alpha.index(x) + key) % 26] \n        elif x in lower_alpha:\n            cipher += lower_alpha[(lower_alpha.index(x) + key) % 26]\n        else: \n            cipher += x\n    return cipher", "from string import ascii_lowercase as l, ascii_uppercase as u\n\ndef encryptor(key, message):\n    process = lambda x, abc: x in abc and abc[(abc.index(x) + key) % 26]\n    return ''.join(process(c, l) or process(c, u) or c for c in message)", "def encryptor(key, message):\n    #Program me!\n    key  = key % 26\n    result = ''\n    for c in message:\n        if c >= 'A' and c <= 'Z':\n            result += chr(((ord(c) - ord('A')) + key) % 26 + ord('A'))\n        elif c >= 'a' and c <= 'z':\n            result += chr(((ord(c) - ord('a')) + key) % 26 + ord('a'))\n        else:\n            result += c\n    return result", "def encryptor (key, mess):\n    lst = []\n    for i in mess:\n        if i.isalpha():\n            C = 97 - 32 * i.isupper()\n            lst.append (chr ((ord (i) - C + key)%26 + C))\n        else:\n            lst.append (i)\n    return ''.join (lst)", "table = \"\".join(map(chr, range(65, 91))) * 2\ntable += table.lower()\n\ndef encryptor(key, message):\n    key %= 26\n    result = \"\"\n    for c in message:\n        if c in table:\n            result += table[table.index(c) + key]\n        else:\n            result += c\n    return result", "def encryptor(key, message):\n  table = (''.join(map(chr, list(range(97, 123)))) * 2) + (''.join(map(chr, list(range(65, 91)))) * 2)\n  return ''.join([table[table.index(c) + (key % 26)] if c in table else c for c in message])\n", "import string\n\ndef encryptor(key, message):\n    transtab = string.maketrans(\n        string.ascii_letters,\n        (string.ascii_lowercase * 2)[key%26:key%26+26] + (string.ascii_uppercase * 2)[key%26:key%26+26])\n    return message.translate(transtab)", "def encryptor(key, message):\n    mod = key % 26\n    if mod == 0: return message\n    upper = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    lower = 'abcdefghijklmnopqrstuvwxyz'\n    code = []\n    for char in message:\n        if char.isupper():\n            code.append(upper[(upper.find(char) + mod)%26])\n        elif char.islower():\n            code.append(lower[(lower.find(char) + mod)%26])\n        else:\n            code.append(char)\n    return ''.join(code)", "from string import ascii_lowercase as l, ascii_uppercase as u\na, r = f\"{l}{u}\", lambda s, m: f\"{s[m:]}{s[:m]}\"\n\ndef encryptor(k, m):\n    return m.translate(str.maketrans(a, \"\".join(r(s, k % 26) for s in (l, u))))", "def encryptor(key, msg):\n    r = ''\n    for i in msg:\n        if i.isalpha():\n            base = 65 if i.isupper() else 97\n            r += chr(base + (ord(i)+key - base) % 26)\n        else:\n            r += i\n    return r"]