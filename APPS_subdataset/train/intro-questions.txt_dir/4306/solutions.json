["from math import cos, sin, radians\n\ndef coordinates(deg, r, precision=10):\n    x, y = r * cos(radians(deg)), r * sin(radians(deg))\n    return round(x, precision), round(y, precision)", "from math import cos,sin,radians\n\ndef coordinates(d, r):\n    convert = lambda x: round(r*x(radians(d)),10)\n    return ( convert(cos), convert(sin) )", "from math import cos, radians, sin\n\ndef coordinates(th, r):\n    return tuple(round(r * f(radians(th)), 10) for f in (cos, sin))", "from math import cos, sin, radians\n\ndef coordinates(d, r):\n    return round(r * cos(radians(d)), 10), round(r * sin(radians(d)), 10)", "import math\n\ndef coordinates(degrees, radius):\n    theta = math.radians(degrees)\n    x = math.cos(theta) * radius\n    y = math.sin(theta) * radius\n    return round(x, 10), round(y, 10)", "from math import sin,cos,radians\n\ndef coordinates(deg, r):\n    theta = radians(deg)\n    return tuple( round(r*f(theta), 10) for f in (cos,sin) )", "def coordinates(d,r):c=r*1j**(d/90);return(round(c.real,10),round(c.imag,10))", "from math import radians, sin, cos\n\ndef coordinates(degrees, radius):\n    angle = radians(degrees)\n    return tuple(round(f(angle) * radius, 10) for f in (cos, sin))\n", "import math\ndef coordinates(degrees, radius):\n    if degrees!=0:\n        degrees=math.pi/(180/degrees)\n    else:\n        degrees=0\n    return (round(radius*(math.cos(degrees)),10),round(radius*(math.sin(degrees)),10))", "from math import radians, sin, cos\n\ndef coordinates(degrees, radius):\n    return (round(radius*cos(radians(degrees)),10),round(radius*sin(radians(degrees)),10))"]