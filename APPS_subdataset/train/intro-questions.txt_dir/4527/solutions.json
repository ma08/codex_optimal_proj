["def winner(deck_Steve, deck_Josh):\n    deck = ['2','3','4','5','6','7','8','9','T','J','Q','K','A']\n    Steve = 0\n    Josh = 0\n    for i in range(len(deck_Steve)):\n        if deck.index(deck_Steve[i]) > deck.index(deck_Josh[i]):\n            Steve += 1\n        elif deck.index(deck_Steve[i]) < deck.index(deck_Josh[i]):\n            Josh += 1\n        else:\n            continue\n    if Steve > Josh:\n        return \"Steve wins \" + str(Steve) + \" to \" + str(Josh)\n    elif Josh > Steve:\n        return \"Josh wins \" + str(Josh) + \" to \" + str(Steve)\n    else:\n        return \"Tie\"\n", "ranks = \"23456789TJQKA\"\ndef winner(deck_steve, deck_josh):\n    steve_points = sum([1 for i in range(len(deck_steve)) if ranks.index(deck_steve[i]) > ranks.index(deck_josh[i])])\n    josh_points = sum([1 for i in range(len(deck_josh)) if ranks.index(deck_steve[i]) < ranks.index(deck_josh[i])])\n    if steve_points > josh_points: return \"Steve wins %d to %d\" %(steve_points, josh_points)\n    elif josh_points > steve_points: return \"Josh wins %d to %d\" %(josh_points, steve_points)\n    else: return \"Tie\"", "CARDS = ['2','3','4','5','6','7','8','9','T','J','Q','K','A']\nCARDS_VAL = { elt: i for i,elt in enumerate(CARDS) }\n\ndef winner(deck_steve, deck_josh):\n    resultLst = [ CARDS_VAL[c1] > CARDS_VAL[c2] for c1,c2 in zip(deck_steve, deck_josh) if CARDS_VAL[c1] != CARDS_VAL[c2]]\n    result, l = sum(resultLst), len(resultLst)\n    return [\"Josh wins {} to {}\".format(l-result, result),\n            \"Steve wins {} to {}\".format(result, l-result),\n            \"Tie\"][ (result >= l/2.0) + (result == l/2.0) ]", "def winner(deck_s, deck_j):\n    points = { True:['Steve',0], False:['Josh',0] }\n    chek_dek = ['2','3','4','5','6','7','8','9','T','J','Q','K','A']\n    for s,j in zip(deck_s, deck_j):\n        point = chek_dek.index(s) - chek_dek.index(j)\n        if not point: continue\n        points[point>0][-1] += 1\n        \n    winer = points[points[1][-1]>points[0][-1]][0]\n    if points[1][-1] == points[0][-1]:\n        return 'Tie'\n    return f'{winer} wins {points[winer == points[1][0]][-1]} to {points[winer == points[0][0]][-1]}'", "b = '23456789TJQKA'\n\ndef winner(S, J):\n    w1 = sum(b.index(s)>b.index(j) for s, j in zip(S, J))\n    w2 = sum(b.index(s)<b.index(j) for s, j in zip(S, J))\n    if w1==w2: return \"Tie\"\n    if w1>w2 : return f\"Steve wins {w1} to {w2}\"\n    return f\"Josh wins {w2} to {w1}\"", "def winner(deck_steve, deck_josh):\n    bigOrSmall = ['2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K', 'A']\n    m = \"{} wins {} to {}\"\n    winSteve = 0\n    winJosh = 0\n    for i in range(len(deck_steve)):\n        if bigOrSmall.index(deck_steve[i]) < bigOrSmall.index(deck_josh[i]):\n            winJosh += 1\n        elif bigOrSmall.index(deck_steve[i]) > bigOrSmall.index(deck_josh[i]):\n            winSteve += 1\n    if winSteve > winJosh:\n        return m.format(\"Steve\", winSteve, winJosh)\n    elif winSteve < winJosh:\n        return m.format(\"Josh\", winJosh, winSteve)\n    else:\n        return \"Tie\"", "ranks = \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"T\", \"J\", \"Q\", \"K\", \"A\"\n\n\ndef cmp(a, b):\n    return (a > b) - (b > a)\n\n\ndef winner(deck_steve, deck_josh):\n    points = [0, 0, 0]\n    for xs in zip(deck_steve, deck_josh):\n        s, j = map(ranks.index, xs)\n        points[0 if s > j else 1 if s < j else 2] += 1\n    if points[0] > points[1]:\n        return f\"Steve wins {points[0]} to {points[1]}\"\n    elif points[1] > points[0]:\n        return f\"Josh wins {points[1]} to {points[0]}\"\n    else:\n        return \"Tie\"", "def winner(deck_steve, deck_josh):\n    deck  = [deck_steve, deck_josh]\n    score = [e[1]>e[0] for e in zip( *[map('23456789TJQKA'.index, x) \n                       for x in deck ]) if e[1]!=e[0] ]\n    l,s,f = len(score)/2, sum(score), score.count(False)\n    winer = [('Steve',f,s),('Josh',s,f)][s>l]\n    return 'Tie' if not score or s==l else '{} wins {} to {}'.format( *winer )", "def winner(deck_steve, deck_josh):\n    ls = ['2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K', 'A']\n    st = 0\n    jo = 0\n    for k, v in enumerate(deck_josh):\n        if ls.index(v) > ls.index(deck_steve[k]):\n            jo += 1\n        elif ls.index(v) < ls.index(deck_steve[k]):\n            st += 1\n    return \"Tie\" if st == jo else \"{} wins {} to {}\".format('Steve' if st > jo else \"Josh\", max(st, jo), min(st, jo))\n", "from numpy import sign\nD = {x:i for i,x in enumerate('23456789TJQKA')}\n\ndef winner(deck_steve, deck_josh):\n    res = [0, 0, 0] # 0(s==j): tie, 1(s>j): steve point, -1(s<j): josh point\n    for s,j in zip(deck_steve, deck_josh):\n        res[sign(D[s]-D[j])] += 1\n    return f\"Steve wins {res[1]} to {res[2]}\" if res[1] > res[2] else f\"Josh wins {res[2]} to {res[1]}\" if res[1] < res[2] else \"Tie\""]