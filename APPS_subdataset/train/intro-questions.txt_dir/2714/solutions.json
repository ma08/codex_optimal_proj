["import re\n\nWATER_PATTERN = re.compile(r\"water|wet|wash\", re.I)\nSLIME_PATTERN = re.compile(r\"\\bI don't know\\b|slime\", re.I)\n\n\ndef bucket_of(said):\n    water = WATER_PATTERN.search(said)\n    slime = SLIME_PATTERN.search(said)\n\n    if water:\n        return 'sludge' if slime else 'water'\n\n    return 'slime' if slime else 'air'\n", "def bucket_of(said):\n    said = said.lower()\n    forgiven_words = lambda *words: any(w in said for w in words)\n    water = forgiven_words(\"water\", \"wet\", \"wash\")\n    slime = forgiven_words(\"i don't know\", \"slime\")\n    return [\"air\", \"water\", \"slime\", \"sludge\"][2*slime + water]", "import re\n\nwater = re.compile('water|wet|wash', flags=re.I)\nslime = re.compile(\"slime|i don't know\", flags=re.I)\n\ndef bucket_of(said):\n    w = water.search(said)\n    s = slime.search(said)\n    if w and s:\n        return 'sludge'\n    elif w:\n        return 'water'\n    elif s:\n        return 'slime'\n    else:\n        return 'air'", "def bucket_of(said):\n    s, l = said.lower(), [\"air\",\"water\",\"slime\",\"sludge\"]   \n    return l[any([\"wet\" in s, \"water\" in s, \"wash\" in s])+any([\"know\" in s, \"slime\" in s])*2]", "import re\ndef bucket_of(said):\n    pattern1 = r\"water|wet|wash\"\n    pattern2 = r\"slime|i don't know\"    \n    result1 = re.search(pattern1, said, re.I)\n    result2 = re.search(pattern2, said, re.I)\n    if result1 and result2:\n        return \"sludge\"\n    elif result1:\n        return \"water\"    \n    elif result2:\n        return \"slime\"\n    else: \n        return \"air\"\n    \n    \n    \n", "def bucket_of(said):\n    teststring = said.lower()\n    result = []\n    \n    water = [\"water\", \"wet\", \"wash\"]\n    slime = [\"i don't know\", \"slime\"]\n    \n    for i in range(len(water)):\n        if (water[i] in teststring):\n            result.append(\"water\")\n        else:\n            continue\n    \n    for i in range(len(slime)):\n        if (slime[i] in teststring):\n            result.append(\"slime\")\n        else:\n            continue\n            \n    if ((\"water\" in result) and (\"slime\" in result)):\n        return \"sludge\"\n    elif (\"water\" in result):\n        return \"water\"\n    elif (\"slime\" in result):\n        return \"slime\"\n    else:\n        return \"air\"", "import re\nbucket_of = lambda said: \\\n    ({ 0: 'air', 1: 'water', 2: 'slime', 3: 'sludge' }) \\\n    [bool(re.search('(?i)(water|wet|wash)', said)) + bool(re.search('(?i)(I don\\'t know|slime)', said)) * 2]", "def bucket_of(said):\n    water_list, slime_list = ['water', 'wet', 'wash'], ['i don\\'t know', 'slime']\n    \n    s = said.lower()\n    \n    water = any(w in s for w in water_list)\n    slime = any(sl in s for sl in slime_list)\n    \n    return 'sludge' if water and slime else 'water' if water else 'slime' if slime else 'air'", "bucket_of=lambda s:['air','water','slime','sludge'][(lambda x:('wet'in x or'water'in x or'wash'in x)+(\"i don't know\"in x or'slime'in x)*2)(s.lower())]", "def bucket_of(said):\n    s = said.lower()\n    \n    if \"slime\" in s and \"water\" not in s:\n        return \"slime\"\n    \n    elif \"i don't know\" in s:\n        if \"water\" in s:\n            return \"sludge\"\n        return \"slime\"\n    \n    elif \"water\" in s or \"wet\" in s or \"wash\" in s:\n        if \"slime\" in s:\n            return \"sludge\"\n        if \"i don't know\" in s:\n            return \"slime\"\n        return \"water\"\n               \n    return \"air\"          \n"]