["from math import floor\n\ndef convert(dd, direction):\n    degrees = floor(dd)\n    seconds = round((dd % 1) * 3600000)\n    return \"%03d*%02d\\'%06.3f\\\"%s\" % (degrees, \n                                       seconds // 60000,\n                                       seconds % 60000 / 1000,\n                                       direction)\n\ndef convert_to_dms(dd_lat, dd_lon):\n    dd_lat = float(dd_lat)\n    dd_lon = float(dd_lon)\n    dms_lat = convert(abs(dd_lat), 'N' if dd_lat >= 0 else 'S')\n    dms_lon = convert(abs(dd_lon), 'E' if dd_lon >= 0 else 'W')\n    return dms_lat, dms_lon", "def convert_to_dms(dd_lat, dd_lon):\n    def convert(dd, c):\n        d = abs(dd)\n        m = d % 1 * 60\n        s = m % 1 * 60\n        return '{:03}*{:02}\\'{:06.3f}\"{}'.format(int(d), int(m), s, c[dd >= 0])\n    return convert(float(dd_lat), 'SN'), convert(float(dd_lon), 'WE')", "def convert_to_dms (*args):\n    lst = []\n    for i,v in enumerate(map(float,args)):\n        av = abs(v)\n        d  = int(av)\n        m  = int((av-d)*60)\n        s  = (av-d-m/60)*3600\n        lst.append(\"{:03}*{:02}'{:06.3f}\\\"{}\".format(d,m,s,[\"NS\",\"EW\"][i][v<0]))\n    return tuple(lst)", "def W(Q,S):\n    Q=float(Q)\n    B=Q<0\n    Q=abs(Q)\n    return '%03d*%02d\\'%06.3f\"%s' % (Q,Q%1*60,3600*Q%60,S[B])\nconvert_to_dms=lambda Q,S:(W(Q,'NS'),W(S,'EW'))", "from math import floor\n\ndef deg_min_sec(coord):\n    \n    deg = floor(abs(float(coord)))\n    \n    min = floor((abs(float(coord)) - deg)*60)\n    \n    sec = floor((abs(float(coord)) - deg - min/60)*3600)\n    \n    dec = str(round((abs(float(coord)) - deg - min/60)*3600 - sec, 3))[2:]\n                \n    return f'{deg:03}*{min:02}\\'{sec:02}.{dec:<03}\"'\n\ndef convert_to_dms(dd_lat, dd_lon):\n      \n    lat_card = 'S' if '-' in str(dd_lat) else 'N'\n    \n    lon_card = 'W' if '-' in str(dd_lon) else 'E'\n       \n    return f'{deg_min_sec(dd_lat)}{lat_card}', f'{deg_min_sec(dd_lon)}{lon_card}'\n", "def convert_to_dms(dd_lat, dd_lon):\n    def dd_to_dms(dd):\n        h=int(dd);dd-=h\n        m=int(dd*60);dd-=m/60\n        s=round(dd*3600,3)\n        return (h,m,s)\n    dd_lat,dd_lon=map(float,(dd_lat,dd_lon))\n    dms_lat=\"{:03d}*{:02d}\\'{:06.3f}\\\"{:s}\".format(*dd_to_dms(abs(dd_lat)),\"NS\"[dd_lat<0])\n    dms_lon=\"{:03d}*{:02d}\\'{:06.3f}\\\"{:s}\".format(*dd_to_dms(abs(dd_lon)),\"EW\"[dd_lon<0])\n    return (dms_lat,dms_lon)", "def convert_to_dms(dd_lat, dd_lon):\n    dd_lat,dd_lon=float(dd_lat),float(dd_lon)\n    if dd_lat>=0:\n        lat_dir='N'\n    else:\n        lat_dir='S'\n        dd_lat*=-1\n    lat_d=int(dd_lat)\n    lat_m=(dd_lat-lat_d)*60\n    lat_s=round((lat_m-int(lat_m))*60,3)\n    lat_m=int(lat_m)\n    dms_lat='{:03d}*{:02d}\\'{:06.3f}\"{}'.format(lat_d,lat_m,lat_s,lat_dir)\n    \n    if dd_lon>=0:\n        lon_dir='E'\n    else:\n        lon_dir='W'\n        dd_lon*=-1\n    lon_d=int(dd_lon)\n    lon_m=(dd_lon-lon_d)*60\n    lon_s=round((lon_m-int(lon_m))*60,3)\n    lon_m=int(lon_m)\n    dms_lon='{:03d}*{:02d}\\'{:06.3f}\"{}'.format(lon_d,lon_m,lon_s,lon_dir)\n    return dms_lat, dms_lon", "def dms(deg, dirs):\n    v = abs(deg)\n    return (int(v), int(60 * v % 60), 3600 * v % 60, dirs[deg < 0])\ndef convert_to_dms(dd_lat, dd_lon):\n    return '%03d*%02d\\'%06.3f\"%s' % dms(float(dd_lat), 'NS'), '%03d*%02d\\'%06.3f\"%s' % dms(float(dd_lon), 'EW')\n", "def f(l,d):\n    a= abs(l)\n    a1=int(a)\n    a=60*(a-a1)\n    a2=int(a)\n    a=round(60*(a-a2),3)\n    return '{:03}*{:02}\\'{:06.3f}\"{}'.format(a1,a2,a,d)\n\ndef convert_to_dms(lat, lon):\n    a = float(lat)\n    ns = [\"S\",\"N\"][a>=0]\n    b = float(lon)\n    we = [\"W\",\"E\"][b>=0]\n    return f(a,ns), f(b,we)", "def gms(x): \n    c = x>=0\n    x = abs(x)\n    g = int(x)\n    x = 60*(x-g)\n    m = int(x)\n    x = 60*(x-m)\n    s = round(x, 3)\n    return g, m, s, c\n    \ndef formatea(g, m, s, c): \n    g = \"{:03d}\".format(g)\n    m = \"{:02d}\".format(m)\n    s = \"{:02.3f}\".format(s)\n    s = '0'*(6-len(s)) + s\n    return f\"\"\"{g}*{m}\\'{s}\"{c}\"\"\"\n    \ndef convert_to_dms(*args):\n    dd_lat, dd_lon = map(float, args)\n    dms_lat = gms(dd_lat)\n    dms_lon = gms(dd_lon)\n    \n    a = formatea(*dms_lat[:3], \"N\" if dms_lat[3] else \"S\")\n    b = formatea(*dms_lon[:3], \"E\" if dms_lon[3] else \"W\")\n    \n    return a, b"]