["from itertools import accumulate\n\ndef tram(stops, descending, onboarding):\n    return max(accumulate(o - d for d, o in zip(descending[:stops], onboarding)))", "def tram(stops, descending, onboarding):\n    return max(sum(onboarding[:i])-sum(descending[:i]) for i in range(stops+1))\n", "def tram(stops, descending, onboarding):\n    n, m = 0, 0\n    for d,u in zip(descending[:stops], onboarding):\n        n += u-d\n        m = max(m, n)\n    return m", "def tram(stops, descending, onboarding):\n    min_capacity, passengers = 0, 0\n    for (off, on) in zip(descending[:stops], onboarding[:stops]):\n        passengers += on - off\n        min_capacity = max(min_capacity, passengers)\n    return min_capacity", "from itertools import accumulate as acc\n\ndef tram(stops, down, up):\n    return max(acc(u - d for d, u in zip(down[:stops], up)))", "def tram(stops, off, on):\n    total = 0\n    passengers = []\n    for i in range(stops):\n        total += on[i] - off[i]\n        passengers.append(total)\n    \n    return max(passengers)", "tram=lambda s,d,o,c=0,m=0: (lambda c: tram(s-1,d[1:],o[1:],c,m=max(c,m)))(c+o[0]-d[0]) if s else max(c,m)", "tram = lambda s, d, o,a=__import__(\"itertools\").accumulate: max(a(map(int.__sub__, o[:s], d[:s])))", "from itertools import accumulate\ndef tram(stops, descending, onboarding):\n    return max(accumulate(b - a for _, a, b in zip(range(stops), descending, onboarding)))", "from itertools import accumulate\nfrom operator import add\ndef tram(stops,off,on):\n    return max(accumulate((b-a for a,b in zip(off,on[:stops])),add))"]