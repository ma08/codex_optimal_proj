["def save(sizes, hd): \n    for i,s in enumerate(sizes):\n        if hd < s: return i\n        hd -= s\n    return len(sizes)", "def save(sizes, hd): \n    return save(sizes[:-1], hd) if sum(sizes) > hd else len(sizes)", "from bisect import bisect\nfrom itertools import accumulate\n\n\ndef save(sizes, hd): \n    return bisect(list(accumulate(sizes)), hd)", "from itertools import *\n\ndef save(sizes, hd): \n    return sum(1 for _ in takewhile(hd.__ge__, accumulate(sizes)))", "def save(sizes, hd): \n    return sum(1 for i in range(len(sizes)) if sum(sizes[:i+1])<=hd)", "def save(sizes, hd): \n    ab=0\n    sum=0\n    for i in sizes:\n        sum=sum+i\n        if sum > hd:\n            return ab\n        ab+=1\n    print(ab)\n    return ab", "from itertools import accumulate\n\ndef save(sizes, hd):\n    i = 0\n    for i, acc in enumerate(accumulate(sizes), 1):\n        if acc > hd:\n            return i-1\n    return i", "def save(s, hd): \n    return len([k for i, k in enumerate(s) if sum(s[:i+1]) <= hd])\n", "def save(sizes, hd): \n    if sum(sizes) <= hd:\n        return len(sizes)\n    for i in range(len(sizes)) :\n        if sum(sizes[:i+1]) > hd:\n            return i\n    return 0", "def save(sizes, hd):\n    maxsize = 0\n    copies = 0\n    for i in range(len(sizes)):\n        maxsize += sizes[i]\n        copies += 1\n        if maxsize > hd:\n            return i\n    return copies"]