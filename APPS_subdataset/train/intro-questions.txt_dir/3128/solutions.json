["import re\ndef is_mac_48_address(address):\n  return bool(re.match(\"^([0-9A-F]{2}[-]){5}([0-9A-F]{2})$\", address.upper()))", "def is_mac_48_address(address):\n    chunks = address.split('-')\n    for chunk in chunks:\n        try:\n            int(chunk, 16)\n        except ValueError:\n            return False\n    return len(chunks) == 6\n", "def is_mac_48_address(address):\n    try:\n        bytes = address.split(\"-\")\n        return all(0 <= int(byte, 16) < 256 for byte in bytes) and len(bytes) == 6\n    except:\n        return False", "def is_mac_48_address(address):\n    L = address.split('-')\n    if len(L) != 6: return False\n    for x in L:\n        try: int(x, 16)\n        except: return False\n    return True", "import re\ndef is_mac_48_address(address):\n    return bool(re.match('[0-9A-F]{2}(-[0-9A-F]{2}){5}$', address))", "is_mac_48_address = lambda address: bool( __import__(\"re\").match('-'.join(['[0-9A-F]{2}']*6) + '$', address) )", "def is_mac_48_address(address):\n    try:\n        return all(isinstance(int(x, 16),int) for x in address.split('-')) and len(address) == 17\n    except:\n        return False", "is_mac_48_address=lambda a:a.count(' ')==0and a.count('-')==5and a[0]not in['Z','G']", "def is_mac_48_address(address):\n    try:\n        return len([int(e, 16) for e in address.split('-')]) == 6\n    except (ValueError, TypeError):\n        return False", "import re;is_mac_48_address=lambda s,a='[0-9][A-F]|[0-9]{2}|[A-F]{2}|[A-F][0-9]':len(re.findall(r'-|{}'.format(a),s))==11"]