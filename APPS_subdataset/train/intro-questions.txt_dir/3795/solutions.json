["def combat(health, damage):\n    return max(0, health-damage)", "def combat(health, damage):\n    return max(health - damage, 0)", "def combat(health, damage):\n    return health - damage if health > damage else 0", "def combat(health, damage):\n    if damage > health:\n        return 0\n    return health - damage", "def combat(h,d):\n    return max(0,h-d)", "def combat(health, damage):\n    v=health-damage\n    if v < 0:\n        return 0\n    else:\n        return v", "combat = lambda h,d: (h>d)*(h-d)", "def combat(health, damage):\n    return (damage<health)*(health-damage)", "def combat(health, damage):\n    if health - damage <= 0:\n        return 0\n    if health - damage > 0:\n        return health - damage", "def combat(health, damage):\n    return 0 if (health - damage) < 0 else health - damage", "def combat(health, damage):\n    return [0, health-damage][damage < health]", "combat = lambda health, damage: health - damage if health - damage > 0 else 0", "def combat(health, damage):\n    pv = health - damage\n    return pv if pv > 0 else 0", "def combat(health: int, damage: int) -> int:\n    \"\"\" Get the player's new health bases on the received damage. \"\"\"\n    return health - damage if health - damage >= 0 else 0", "def combat(health, damage):\n    return health-min(health, damage)", "def combat(health, damage):\n    owca = health - damage\n    if owca < 0:\n        return 0\n    return owca", "combat = lambda h, d: max(h-d, 0)", "def combat(health, damage):\n    comb = health - damage\n    if comb > 0:\n        return comb\n    else:\n        return 0", "def combat(health, damage):\n    #your code here\n    if damage > health:\n        return 0\n    else:\n        return abs(health - damage)", "def combat(health, damage):\n    if health > damage:\n        return health - damage\n    if health < damage:\n        return 0", "def combat(health, damage):\n    return {health - damage > 0: health - damage}.get(True, 0)", "def combat(health, damage):\n    return damage < health and health - damage", "def combat(health, damage):\n    after_hit = health - damage\n    \n    if after_hit >= 0:\n        return after_hit\n    else:\n        return 0", "def combat(health, damage):\n    return health - damage > 0 and health - damage", "def combat(health, damage):\n    result = health - damage\n    if result < 0:\n        result = 0\n    return result ", "def combat(health, damage):\n    x = health - damage\n    return x if x > 0 else 0", "def combat(health, damage):\n    a = health\n    b = damage\n    c = a-b\n    if c >= 0 :\n        return c\n    else :\n        return 0", "def combat(h, d):\n    if h < d:\n        return 0\n    else:\n        return h - d", "combat = lambda h, d: h-d if h>d else 0", "def combat(health, damage):\n    sum = health - damage\n    if sum > 0:\n        return sum\n    else:\n        return 0", "def combat(health, damage):\n    #your code here\n    while (health-damage)>=0:\n        return health-damage\n    else:\n        return 0", "def combat(health, damage):\n    if health-damage < 1: \n        return 0\n    else: \n        return health-damage", "def combat(health, damage):\n    #your code here\n    \n    if (health - damage) < 0:\n        new_health = 0\n        return new_health\n    \n    else:\n        new_health = health - damage\n        return new_health\n        \n", "def combat(health, damage):\n    new = health -damage\n    return new if new >=0 else 0 ", "def combat(health, damage):\n    hitpoints = health - damage\n    if hitpoints < 0:\n        return 0\n    else:\n        return hitpoints", "def combat(h, d):\n    #your code here\n    return (h-d) if h>=d else 0", "def combat(health, damage):\n    new = health - damage\n    if new > 0:\n        return new\n    else: \n        return 0\n", "def combat(h, dmg):\n    return h - dmg if h > dmg else 0", "def combat(health, damage):\n    '''\n    Create a combat function that takes the player's current health\n    and the amount of damage recieved,\n    and returns the player's new health.\n    Health can't be less than 0.\n    '''\n    rest = health - damage\n    if rest < 0:\n        return 0\n    return rest", "def combat(health, damage):\n    res = health - damage\n    return res if res > 0 else 0", "def combat(health, damage):\n    if health < damage:\n        return 0\n    else:\n        return abs(health-damage)", "def combat(health, damage):\n    if health < 0:\n        return 0\n    if health < damage:\n        return 0\n    return health - damage", "def combat(health, damage):\n    \"\"\" calculate remaining health \"\"\"\n    return (health > damage)*(health - damage)", "def combat(hp, dp):\n    return hp - dp if hp - dp > 0 else 0", "def combat(health, damage):\n    sub = health - damage\n    return sub if sub > 0 else 0", "def combat(health, damage):\n    #yay I got the one line code right first try ;)\n    return 0 if health <= damage else health - damage", "def combat(health, damage):\n    newhealth = health - damage\n    return 0 if newhealth < 0 else newhealth", "import unittest\n\n\ndef combat(health, damage):\n    if health <= damage:\n        return 0\n    return health - damage\n\n\nclass TestCombat(unittest.TestCase):\n    def test_should_return_0_when_given_damage_is_greater_than_health(self):\n        self.assertEqual(combat(health=20, damage=30), 0)\n\n    def test_combat_with_given_health_is_greater_than_damage(self):\n        self.assertEqual(combat(health=100, damage=5), 95)\n", "def combat(health, damage):\n    list1 = health - damage\n    if list1 > 0:\n        return list1\n    if list1 <= 0:\n        return 0", "def combat(health, damage):\n    ch=health-damage\n    if ch>=0:\n        return ch\n    else:\n        return 0", "def combat(health, damage):\n    \n    result=health-damage\n    \n    result_korr=max(result,0)\n    \n    return result_korr", "def combat(health, damage):\n    difference = health - damage\n    if difference < 0:\n        return 0\n    else:\n        return difference", "def combat(health, damage):\n    if damage > health:\n        return 0\n    elif health > damage:\n        return health - damage\n", "def combat(h, d):\n    #your code here\n    if h - d <= 0:\n        return 0\n    return h - d", "def combat(health, damage):\n    r = health - damage\n    return r if r > 0 else 0", "def combat(health, damage):\n    return bool(health>damage)*(health-damage)", "def combat(health, damage):\n    total = health - damage\n    return total if total>0 else 0 ", "def combat(health, damage):\n    r = health - damage\n    if r < 0:\n        return 0\n    return r", "def combat(health, damage):\n    \n    h = health\n    d = damage\n    x = h - d\n    \n    if x < 0:\n        return 0\n    else:\n        return x", "def combat(health, damage):\n    out = health - damage\n    if out >= 0:\n        return out\n    else:\n        return 0", "combat=lambda h, d: h-d if d<h else 0", "def combat(health, damage):\n    new_h=(health-damage)\n    if new_h<0:\n        return 0\n    else:\n        return new_h", "def combat(health, damage):\n    if health > damage:\n        v = health - damage\n        return (v)\n    else:\n        return (0)", "def combat(health, damage):\n    new_health = health - damage\n    return max(new_health,0)", "combat = lambda h,d:h-d if h >= d else 0", "def combat(health, damage):\n    k = health - damage\n    if k<0:\n        return 0\n    return k", "def combat(health, damage):\n    res = health - damage\n    \n    if res > 0:\n        return res\n    else:\n        return 0", "def combat(health, damage):\n  after = health - damage;\n  if after < 0:\n    return 0;\n  return after;", "def combat(h, d):\n    if h-d>=0:\n        return h-d\n    else:\n        return 0#your code here", "def combat(x,y): return x-y if x>y else 0", "def combat(health, damage):\n    if damage < health:\n        x=health-damage\n    else:\n        x=0\n    return x", "def combat(health, damage):\n    #your code here\n    f = 0\n    if health > damage:\n        f = health - damage\n    return f", "def combat(health, damage):\n    #your code here\n    all = health - damage\n    \n    if all > 0:\n        return all \n    else: \n        return 0", "def combat(health, damage):\n    ret=health-damage\n    if 0>ret:\n        ret=0\n    return ret", "def combat(h, d):\n    if h>=d:\n        return h-d\n    return 0", "def combat(hp, dp):\n    return hp-dp if hp-dp>=0 else 0", "def combat(health, damage):\n    #your code here\n    \n    result = health - damage\n    \n    if result < int(0):\n        return result*0\n    else:\n        return result", "def combat(health, damage):\n    hit = health - damage\n    if hit <= 0:\n        return 0\n    else:\n        return hit", "def combat(health, damage):\n    f = (health - damage)\n    return f if f > 0 else 0", "def combat(health, damage):\n    #your code here\n    b = 0\n    b = health - damage\n    if b < 0:\n        b = 0\n    return b", "def combat(health, damage):\n    health -= damage\n    if health <= 0:\n        return 0\n    else:\n        return health\n", "def combat(health, damage):\n    healthnew= health- damage\n    if healthnew<0:\n      healthnew= 0\n    return healthnew", "def combat(health, damage):\n    #your code here\n    \n    try:\n        if health<damage:\n           return 0\n        else:\n           return (health-damage)   \n    except:\n        if health<0:\n            return 'health needs to be greater than zero'", "def combat(health, damage):\n           a=(health-damage)\n           if a  <=0:\n               return 0\n           else:\n               return a\n", "def combat(h, d):\n    return max([0]+[h-d])", "def combat(health, damage):\n    return int(health-damage) if health-damage>0 else 0", "def combat(health, damage):\n    return [(health - damage), 0][(health - damage < 1)]", "def combat(health: int, damage: int) -> int:\n    return health - damage if health > damage else 0", "def combat(health, damage):\n    case = health - damage\n    if case < 0:\n        case = 0\n    return case\n", "def combat(health, damage):\n    if health > damage:\n        return health - damage\n    else:\n        health < damage\n        return 0", "def combat(health, damage):\n    while health - damage > 0:\n        return health - damage\n    else:\n        return 0", "def combat(health, damage):\n    NewHealth = health - damage\n    if NewHealth < 0:\n        return 0\n    else:\n        return NewHealth", "def combat(health, damage):\n\n    if health - damage <0:\n       return 0\n    elif health - damage > 0:\n        return health - damage\n    else:\n        return int(health)", "combat = lambda health, damage: 0 if health - damage < 0 else health - damage", "def combat(health, damage):\n    t = health - damage\n    return t if t >=0 else 0", "def combat(health, damage):\n    if(health > damage):\n      health = health - damage\n      return health\n    else:\n        return 0", "def combat(health: int, damage: int) -> int:\n    return max(0, health - damage)", "def combat(a, b):\n    if a - b <= 0:\n        return 0\n    else:\n        return a - b", "def combat(health, damage):\n    print(health, damage) \n    if damage > health: \n        return 0 \n    else: \n        health -= damage \n        return health ", "def combat(heal, dam):\n    return max(0, heal - dam)"]