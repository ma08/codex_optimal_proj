["from math import log\n\ndef decompose(n):\n    i = 2\n    result = []\n    while n >= i*i:\n        k = int(log(n, i))\n        result.append(k)\n        n -= i ** k\n        i += 1\n    \n    return [result, n]\n", "from math import log\n\ndef decompose(num):\n    i, res = 2, []\n    while i**2 <= num:\n        n = int(log(num, i))\n        res.append(n)\n        num -= i**n\n        i += 1\n    return [res, num]\n", "from math import log\n\ndef decompose(num):\n    res = []\n    i = 2\n    while i * i <= num:\n        k = int(log(num, i))\n        res.append(k)\n        num -= i ** k\n        i += 1\n    return [res, num]", "from itertools import count\nfrom math import log\n\ndef decompose(num):\n    result = []\n    for x in count(2):\n        if num < x*x:\n            return [result, num]\n        result.append(int(log(num, x)))\n        num -= x**result[-1]", "from math import log\ndef decompose(a):\n    li, i = [], 2\n    while i**2 <= a:\n        li.append(int(log(a,i)))\n        a -= i ** li[-1]\n        i += 1\n    return [li] + [a] ", "from math import log\n\ndef decompose(num):\n    ns = []\n    for i in range(2, 100):\n        j = int(log(num or 1, i))\n        if j <= 1:\n            break\n        ns.append(j)\n        num -= i ** j\n    return [ns, num]", "from math import log\n\ndef decompose(num):\n    k, ks = 2, []\n    while num:\n        p = int(log(num, k))\n        if p < 2:\n            break\n        ks.append(p)\n        num, k = num - k**p, k + 1\n    return [ks, num]", "def decompose(num):\n  from math import log\n  \n  t = 2\n  ks = []\n  \n  while (num**.5) >= t:\n    k = int(log(num, t))\n    num -= t**k\n    ks.append(k)\n    t += 1\n  \n  return [ks, num]", "from math import log\ndecompose=d=lambda n,k=[],i=2:n<i*i and[k,n]or d(n-i**int(log(n,i)),k+[log(n,i)//1],i+1)", "from itertools import count\nfrom math import log\n\ndef decompose(n):\n    r = []\n    for x in count(2):\n        if x > n:\n            break\n        m = int(log(n, x))\n        if m == 1:\n            break\n        r.append(m)\n        n -= x**m\n    return [r, n]"]