["validate_ean = lambda code: (sum(map(int, code[0::2])) + sum(map(int, code[1::2])) * 3) % 10 == 0", "def validate_ean(code):\n    data, last = code[:12], int(code[12])\n    checksum = -sum(int(d) * 3**(i % 2) for i, d in enumerate(data)) % 10\n    return last == checksum   ", "def validate_ean(code):\n    checksum = int(code[-1:])\n    code = list(map(int, code[:-1]))\n    odd = sum([code[i] for i in range(0, len(code), 2)])\n    even = sum([code[i]*3 for i in range(1, len(code), 2)])\n    total = odd + even\n    if total % 10 == 0:\n        if checksum == 0:\n            return True\n        else:\n            return False\n    else:\n        new_checksum = 10 - (total % 10)\n        if new_checksum == checksum:\n            return True\n        else:\n            return False\n", "def validate_ean(code):\n    return sum(x * (i%2*2+1) for i,x in enumerate(map(int, code))) % 10 == 0", "def validate_ean(code):\n    '''Return True if code is a valid EAN-13 code (else False)'''\n    \n    # separate single-digit checksum from code\n    check_digit = int(code[-1])\n    # convert 12-digit string to list of int\n    code = list(map(int, code[:-1]))\n    # multiply digits at even positions with 3\n    totals = sum([digit * 3 if pos % 2 == 0 else digit for pos, digit in enumerate(code, 1)])\n    \n    if totals % 10 == 0:\n        checksum = 0\n    else:\n        checksum = 10 - (totals % 10)\n    return check_digit == checksum", "def validate_ean(code):\n    return sum([int(x) if i%2==0 else 3*int(x) for i,x in enumerate(code)])%10==0", "def validate_ean(code):\n    sum1 = sum(map(int, code[0:-1:2]))\n    sum2 = sum(map(lambda x: x*3, map(int, code[1:-1:2])))\n    checksum = 10 - ((sum1 + sum2) % 10)\n    checksum = 0 if checksum == 10 else checksum\n    return int(code[-1]) == checksum", "def validate_ean(code):\n    sum_odd = sum(int(x) for x in code[:-1:2])\n    sum_even = sum(int(x) * 3 for x in code[1::2])\n    checksum = (sum_odd + sum_even) % 10\n    if checksum:\n        return (10 - checksum) == int(code[-1])\n    else:\n        return checksum == int(code[-1])"]