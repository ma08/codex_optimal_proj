["def find_the_key(message, code):\n    diffs = \"\".join( str(c - ord(m) + 96) for c, m in zip(code, message) )\n    for size in range(1, len(code) +1):\n        key = diffs[:size]\n        if (key * len(code))[:len(code)] == diffs:\n            return int(key)", "def find_the_key(message, code):\n    key = \"\".join(str(code[i] + 96 - ord(char)) for i, char in enumerate(message))\n    l = len(key)\n    for i in range(1, l + 1):\n        if (key[:i] * l)[:l] == key:\n            return int(key[:i])", "find_the_key=lambda s,e:(lambda l,d:min(int(d[:i])for i in range(l)if(d[:i]*l)[:l]==d))(len(s),''.join(str(n-ord(c)+96)for c,n in zip(s,e)))", "def find_the_key(message, code):\n    r = ''.join(str(a - b) for a, b in zip(code, [ord(c) - 96 for c in message]))\n    \n    for k in range(1, len(r) + 1):\n        if all(c == r[:k][i%k] for i, c in enumerate(r)): return int(r[:k])\n", "def find_the_key(message, code):\n  key = ''.join(str(c - 'abcdefghijklmnopqrstuvwxyz'.index(m) - 1) for m, c in zip(message, code))\n  return int(next(key[0:i] for i in range(1, len(key)) if all(key[0:i].startswith(key[j:j+i]) for j in range(i, len(key), i))))", "from string import ascii_lowercase as al\n\ndef find_the_key(message, code):\n    msg_key = ''.join([str(a - d) for (a, d) in zip(code, [al.index(c) + 1 for c in message])])\n    key, len_msg = '', len(msg_key)\n    for i, n in enumerate(msg_key, 1):\n        key += n\n        d, m = divmod(len_msg, i)\n        test_key = key * (d + (m > 0))  # round up integer without math.ceil\n        if test_key[:len_msg] == msg_key:\n            return int(key)", "from string import ascii_lowercase\n\nns = {x: i for i, x in enumerate(ascii_lowercase, 1)}\n\ndef short(xs):\n    for i in range(1, len(xs)):\n        if all(len(set(xs[j::i])) == 1 for j in range(i)):\n            return xs[:i]\n    return xs\n\ndef find_the_key(message, code):\n    xs = [a-b for a,b in zip(code, map(ns.get, message))]\n    return int(''.join(map(str, short(xs))))", "def find_the_key(message, code):\n    # your code here\n    import string\n    mapowanie_str_dig=dict(zip(list(string.ascii_lowercase),[x for x in range(1,27)]))    \n    m=[] \n    for s in message:\n        m=m+[mapowanie_str_dig[s]]   \n    delta=[str(abs(code[i]-m[i])) for i in range(0,len(m))]\n    for i in range(1,len(delta)+1):\n        n=len(delta)//i\n        r=len(delta)%i\n        if n*delta[0:i]==delta[0:n*i] and delta[0:r]==delta[n*i:]:\n            output=delta[0:i]\n            break   \n    return int(''.join(output))", "from string import ascii_lowercase as letters\n\ndef find_the_key(message, code):\n    diff = [e-letters.index(c)-1 for (e,c) in zip(code, message)]\n    for n in range(1, len(diff)):\n        ok = True\n        for k in range(n, len(diff), n):\n            if diff[k:k+n] != diff[:min(n, len(diff)-k)]:\n                ok = False\n                break\n        if ok: \n            diff  = diff[:n]\n            break\n    key = 0\n    for k in diff:\n        key = key * 10 + k\n    return key", "def find_the_key(msg, code):\n    from itertools import cycle\n    msg = [ord(i) - 96 for i in msg]\n    keys = [code[i] - msg[i] for i in range(len(code))]\n    key = ''.join([str(i) for i in keys])\n    \n    i = 1\n    while True:\n        a = cycle(key[:i])\n        if [_ + int(next(a)) for _ in msg] == code:\n            return int(key[:i])\n        else:\n            i += 1"]