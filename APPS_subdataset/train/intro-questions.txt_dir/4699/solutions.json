["from itertools import count\n\ndef spinning_rings(inner_max, outer_max):\n    return next(i for i in count(1) if i % (outer_max + 1) == -i % (inner_max + 1))", "def spinning_rings(inner_max, outer_max):\n    a,b,res = inner_max,1,1\n    while a != b:\n        a = (a + inner_max) % (inner_max+1)\n        b = (b + 1) % (outer_max+1)\n        res += 1\n    return res", "from itertools import cycle\n\ndef spinning_rings(inMax, outMax):\n    inc, outc = ( cycle([0]+list(range(1,inMax+1))[::-1]),\n                  cycle(range(outMax+1)) )\n    a, b, count = next(inc), next(outc), 0\n    while True:\n        a, b, count = next(inc), next(outc), count+1\n        if a == b: return count", "def spinning_rings(inner_max, outer_max):\n  moves, inner, outer = 0, 0, 0\n\n  while True:\n      inner -= 1 # decrease inner ring by 1\n      inner %= inner_max + 1 # wrap if count goes beyond `inner_max`\n      \n      outer += 1 # increase outer ring by 1\n      outer %= outer_max + 1 # wrap if count goes beyond `outer_max`\n      \n      moves += 1 # count moves\n      \n      if(inner == outer):\n          break\n\n  return moves", "def spinning_rings(inner_max, outer_max):\n    a,b,c = 0,0,0\n    while True:\n        a = (a - 1) % (inner_max + 1)\n        b = (b + 1) % (outer_max + 1)\n        c += 1\n        if a == b: return c", "def spinning_rings(inner_max, outer_max):\n    inner, outer = 0, 0\n    while True:\n        inner -= 1 \n        outer += 1\n        \n        if inner % (inner_max + 1) == outer % (outer_max + 1):\n            return outer", "def spinning_rings(inner_max, outer_max):\n  i = 1\n  while -(i%(-inner_max - 1)) != i%(outer_max + 1):\n      i += 1\n  return i", "from itertools import cycle\n\ndef spinning_rings(inner_max, outer_max):\n    out = cycle(range(outer_max + 1))\n    inn = cycle([0] + list(range(inner_max, 0, -1)))\n    next(inn); next(out)\n    count = 0\n    while next(inn) != next(out):\n        count += 1\n    return count + 1", "def spinning_rings(inner_max, outer_max):\n    innerList = [0] + [i for i in range(inner_max, 0, -1)]\n    outerList = [0] + [i for i in range(1, outer_max+1)]\n    \n    tries = 1\n    while True:\n        if innerList[tries % (inner_max+1)] == outerList[tries % (outer_max+1)]:\n            return tries\n            break\n        tries += 1\n"]