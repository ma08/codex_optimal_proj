["def queue(queuers,pos):\n    return sum(min(queuer, queuers[pos] - (place > pos)) for place, queuer in enumerate(queuers))", "def queue(queuers,pos):\n    friendWait = queuers[pos]\n    # Divide the line into the front of the line (up to the friend)\n    # and back of the line (behind the friend):\n    frontOfLine = queuers[:pos+1]\n    backOfLine = queuers[pos+1:]\n    # Convert the frontOfLine to the min of friendWait:\n    frontOfLine = [min(x, friendWait) for x in frontOfLine]\n    # Convert the backOfLine to the min of friendWait-1:\n    backOfLine = [min(x, friendWait-1) for x in backOfLine]\n    # Return the result, which is the sum of both line parts:\n    return sum(frontOfLine) + sum(backOfLine)\n", "def queue(queuers,pos):\n    return sum(min(q, queuers[pos]) for q in queuers) - sum(1 for q in queuers[pos + 1:] if q >= queuers[pos])\n", "def queue(q,pos):\n    time = 0\n    while True:\n        time += 1\n        if q[0] == 1:\n            if pos: q.pop(0)\n            else:   return time\n        else:\n            q.append(q.pop(0) - 1)\n        pos = pos - 1 if pos  else len(q) - 1\n", "def queue(q, pos):\n    return (\n        sum(min(x, q[pos]) for x in q[:pos+1]) + \n        sum(min(x, q[pos]-1) for x in q[pos+1:])\n    )", "def queue(queuers, pos, time = 0):\n    while True:\n        for i in range(len(queuers)):\n            if queuers[pos] == 0:\n                return time\n            elif queuers[i]:\n                queuers[i] -= 1\n                time += 1", "def queue(q, pos, r = 0):\n    while True:\n        r += 1\n        q[0] -= 1\n        if q[pos] == 0: return r\n        q = q[1:] + [q[0]] if q[0] > 0 else q[1:]\n\n        pos -= 1\n        if pos<0: pos = len(q) - 1", "def queue(queuers,pos):\n    count = 0\n    while len(queuers) != 0:    #\ubc30\uc5f4\uc774 \ube4c \ub54c\uae4c\uc9c0 \ubc18\ubcf5\n        k = queuers.pop(0)    #first-in\uc744 pop\n        count += 1    #\uac78\ub9ac\ub294 \uc2dc\uac04\uc744 \uccb4\ud06c\n        if k-1 != 0:    #\ud558\ub098 \uc904\uc5ec\ub3c4 0\uc774 \uc544\ub2c8\ub77c\uba74\n            queuers.append(k-1)    #\ub2e4\uc2dc \ubc30\uc5f4\uc758 \ub05d\uc5d0 \ucca8\uac00\n            if pos == 0:    #\uc774 \ub54c, \uc6b0\ub9ac\uac00 \uccb4\ud06c\ud558\ub294 index\uac00 0\uc774\uc5c8\ub2e4\uba74\n                pos = len(queuers) - 1    #\ubc30\uc5f4\uc758 \ub05d index\ub85c \uc218\uc815\n            else:\n                pos -= 1\n        elif k-1 == 0 and pos == 0:    #\uc6b0\ub9ac\uc758 \uc6d0\uc18c\uac00 0\ub418\uba74 \ubc18\ubcf5\ubb38 \ub098\uac10\n            break\n        else:\n            pos -= 1    #\ub2e4\ub978 \uc6d0\uc18c\uac00 0\ub418\uba74 \uadf8\ub0e5 \ubc30\uc5f4\uc5d0\uc11c \uc0ad\uc81c\n    return count", "def queue(queuers,pos):\n    count = 0\n    while queuers[pos] > 0:\n        if pos == 0:\n            pos = len(queuers) - 1\n        else:\n            pos -= 1\n        queuers[0] -= 1\n        queuers.append(queuers[0])\n        queuers.pop(0)\n        count += 1\n    \n    return count + sum([i for i in queuers if i < 0])", "def queue(queuers,pos):\n    min = 0\n    while queuers[pos] > 0:\n        for i in range(0,len(queuers)):\n            if queuers[i] > 0:\n                queuers[i]-=1\n                min += 1\n            if queuers[pos] == 0:\n                break\n                \n    return min"]