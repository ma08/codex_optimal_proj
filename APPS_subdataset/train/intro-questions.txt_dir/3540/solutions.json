["from datetime import datetime\n\n\ndef get_calendar_week(date_string):\n    return datetime.strptime(date_string, \"%Y-%m-%d\").isocalendar()[1]    ", "from datetime import date\n\ndef get_calendar_week(s):\n    return date(*map(int, s.split(\"-\"))).isocalendar()[1]", "import datetime\nget_calendar_week=lambda d:datetime.date(*map(int,d.split('-'))).isocalendar()[1]", "from datetime import datetime\n\ndef get_calendar_week(date_string):\n    return int(datetime.strftime(datetime.strptime(date_string, \"%Y-%m-%d\"), \"%V\"))", "from datetime import datetime\n\ndef get_calendar_week(date):\n  return datetime.strptime(date, '%Y-%m-%d').isocalendar()[1]", "def isLeap(y):\n    return y % 400 == 0 or (y % 100 != 0 and y % 4 == 0)\n\ndef numDays(y, m, d):\n    return sum([31, 29 if isLeap(y) else 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][:m - 1]) + d\n\ndef whatDay_Jan1st(y):  # monday: 1, tuesday: 2, ..., sunday: 7\n    y = (y - 1) % 400\n    return ((y // 100) * (76 * 1 + 24 * 2) + ((y % 100) // 4) * (1 + 1 + 1 + 2) + (y % 4)) % 7 + 1\n\ndef get_calendar_week(date_string):\n    y, m, d = map(int, date_string.split(\"-\"))\n    if (m == 12 and d in [29, 30, 31]):\n        s = whatDay_Jan1st(y + 1)\n        if (s == 4 or (s == 3 and d in [30, 31]) or (s == 2 and d == 31)):\n            return 1\n    s = whatDay_Jan1st(y)\n    if (m == 1 and ((s == 5 and d in [1, 2, 3]) or (s == 6 and d in [1, 2]) or (s == 7 and d == 1))):\n        y, m, d = y - 1, 12, 28\n        s = whatDay_Jan1st(y)\n\n    dateW01_1 = [1, 0, -1, -2, 4, 3, 2][s - 1]\n    return (numDays(y, m, d) - dateW01_1) // 7 + 1", "from datetime import datetime\n\ndef get_calendar_week(date_string):\n    d = datetime.strptime(date_string, '%Y-%m-%d')\n    return d.isocalendar()[1]", "from datetime import datetime\n\ndef get_calendar_week(date_string: str):\n    return datetime.strptime(date_string, '%Y-%m-%d').isocalendar()[1]", "import datetime\ndef get_calendar_week(date):\n    now = datetime.datetime.strptime(date,'%Y-%m-%d')\n\n    return (datetime.datetime.isocalendar(now)[1])\n", "from datetime import date\n\ndef get_calendar_week(date_string):\n    return date.isocalendar(date(*map(int,date_string.split('-'))))[1]"]