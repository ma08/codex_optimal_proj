["class Solution:\n     def reverseStr(self, s, k):\n         \"\"\"\n         :type s: str\n         :type k: int\n         :rtype: str\n         \"\"\"\n         for idx in range(0, len(s), 2*k):\n             s = s[:idx] + s[idx:idx+k][::-1] + s[idx+k:]\n         return s", "class Solution:\n     def reverseStr(self, s, k):\n         res = ''\n         i = 0\n         while i < len(s):\n             if i + k <= len(s) and i + 2 * k > len(s) or i + k > len(s):\n                 sub = s[i:i + k]\n                 res += sub[::-1]\n                 if i + 2 * k > len(s):\n                     res += s[i + k:]\n                 i = len(s)\n             else:\n                 sub = s[i:i + k]\n                 res += sub[::-1]\n                 res += s[i + k:i + 2 * k]\n                 i += 2 * k\n         return res\n", "class Solution:\n     def reverseStr(self, s, k):\n         \"\"\"\n         :type s: str\n         :type k: int\n         :rtype: str\n         \"\"\"\n         list_s = list(s)\n         n = len(list_s)\n         for i in range(0,n,2*k):\n             if n-i>=k:\n                 list_s[i:i+k] = reversed(list_s[i:i+k])\n             elif n-i<k:\n                 list_s[i:] = reversed(list_s[i:])\n                 \n         return ''.join(list_s)", "class Solution:\n     def reverseStr(self, s, k):\n         \"\"\"\n         :type s: str\n         :type k: int\n         :rtype: str\n         \"\"\"\n         n = len(s)\n         p = 0\n         \n         s = list(s)\n         \n         while True:\n             if p >= n:\n                 break\n             p1 = p + k\n             if p1>n:\n                 p1 = n\n             p0 = p\n             while p0 < p1:\n                 p1-=1\n                 s[p0], s[p1] = s[p1],s[p0]\n                 p0+=1\n             p += k*2\n         return ''.join(s)\n", "class Solution:\n     def reverseStr(self, s, k):\n         \"\"\"\n         :type s: str\n         :type k: int\n         :rtype: str\n         \"\"\"\n         rst = \"\"\n         for i in range(len(s)):\n             if (i // k) % 2:\n                 rst += s[i]\n             else:\n                 rst += s[min(len(s),(i//k+1)*k)-i%k-1]\n         return rst        ", "class Solution:\n     def reverseStr(self, s, k):\n         \"\"\"\n         :type s: str\n         :type k: int\n         :rtype: str\n         \"\"\"\n         output_chars = list()\n         num_segments = (len(s) // k) + 1\n         for j in range(num_segments):\n             start = 2*j*k\n             end = 2*(j+1)*k\n             reverse_up_to = min(start+k, len(s))\n             seg = min(start+2*k, len(s))\n             for i in range(reverse_up_to - 1, start-1, -1):\n                 output_chars.append(s[i])\n             for i in range(reverse_up_to, seg):\n                 output_chars.append(s[i])\n         return ''.join(output_chars)\n", "class Solution:\n     def reverseStr(self, s, k):\n         \"\"\"\n         :type s: str\n         :type k: int\n         :rtype: str\n         \"\"\"\n         for i in range(0,len(s),2*k):\n             s1 = s[0:i]\n             s2 = s[i:i+k][::-1]\n             s3 = s[i+k:]\n             s = s1 + s2 + s3\n         return s\n         \n", "class Solution:\n     def reverseStr(self, s, k):\n         \"\"\"\n         :type s: str\n         :type k: int\n         :rtype: str\n         \"\"\"\n         result = ''\n         for i in range(0, len(s), 2*k):\n             result += s[i:i+k][::-1]\n             result += s[i+k:i + 2*k ]\n         return result", "class Solution:\n     def reverseStr(self, s, k):\n         \"\"\"\n         :type s: str\n         :type k: int\n         :rtype: str\n         \"\"\"\n         # l = s.split()\n         r = []\n         k_str = ''\n         for i in range(len(s)):\n             if i%k == 0:\n                 if i != 0:\n                     r.append(k_str)\n                 k_str = s[i]\n             else:\n                 k_str += s[i]\n         r.append(k_str)\n         for i in range(len(r)):\n             if i%2 == 0:\n                 r[i] = r[i][::-1]\n         return \"\".join(r)\n         \n", "class Solution:\n     def reverseStr(self, s, k):\n         \"\"\"\n         :type s: str\n         :type k: int\n         :rtype: str\n         \"\"\"\n         l = []\n         i = 0\n         c = 0\n         strlen = len(s)\n         while(i < strlen):\n             if(c % 2):\n                 l.append(s[i:i+k])\n             else:\n                 temp = s[i:i+k]\n                 l.append(temp[::-1])\n             c = c+1\n             i = i+k\n         return ''.join(l)\n                 \n             \n", "class Solution:\n     def reverseStr(self, s, k):\n         \"\"\"\n         :type s: str\n         :type k: int\n         :rtype: str\n         \"\"\"\n         w = []\n         idx = 0\n         while idx < len(s):\n             w.append(s[idx:idx + k])\n             idx += k\n         w = [w[i][::-1] if i % 2 == 0 else w[i] for i in range(len(w))]\n         return ''.join(w)", "class Solution:\n     def reverseStr(self, s, k):\n         \"\"\"\n         :type s: str\n         :type k: int\n         :rtype: str\n         \"\"\"\n         s = list(s)\n         for i in range(0,len(s), 2*k):\n             s[i:i+k] = reversed(s[i:i+k])\n         s = \"\".join(s)\n         return s", "class Solution:\n     def reverseStr(self, s, k):\n         \"\"\"\n         :type s: str\n         :type k: int\n         :rtype: str\n         \"\"\"\n \n         ls = [c for c in s]\n         for i in range(0, len(s), 2*k):\n             start = i\n             end = min(i+k, len(s)) - 1\n             if end >= len(s):\n                 break\n             while end > start:\n                 swp = ls[start]\n                 ls[start] = ls[end]\n                 ls[end] = swp\n                 start += 1\n                 end -= 1\n \n         return \"\".join(ls)", "class Solution:\n     def reverseStr(self, s, k):\n         \"\"\"\n         :type s: str\n         :type k: int\n         :rtype: str\n         \"\"\"\n         s = list(s)\n         for i in range(0 , len(s), 2*k) :\n             s[i:i+k] = reversed(s[i:i+k])\n         return ''.join(s)\n", "class Solution:\n     def reverseStr(self, s, k):\n         \"\"\"\n         :type s: str\n         :type k: int\n         :rtype: str\n         \"\"\"\n         s = list(s)\n         for start in range(0, len(s), 2*k):\n             p1 = start\n             p2 = p1 + k - 1\n             if p2 >= len(s):\n                 p2 = len(s) - 1\n             while p1 < p2:\n                 s[p1], s[p2] = s[p2], s[p1]\n                 p1 += 1\n                 p2 -= 1\n         result = ''\n         for ele in s:\n             result += ele\n         return result", "class Solution:\n     def reverseStr(self, s, k):\n         \"\"\"\n         :type s: str\n         :type k: int\n         :rtype: str\n         \"\"\"\n         \n         i = 0\n         tmp = 0\n         ret = \"\"\n         while i < len(s):\n             if len(s)-i < k:\n                 tmp = len(s)-i\n             else:\n                 tmp = k\n             ttmp = tmp    \n             while ttmp!= 0:\n                 ret += s[i+ttmp-1]\n                 ttmp -= 1\n             \n             i+=tmp\n             if len(s)-i < k:\n                 tmp = len(s)-i\n             else:\n                 tmp = k\n             ttmp = tmp\n             \n             while ttmp!= 0:\n                 ret += s[i]\n                 i+=1\n                 ttmp -= 1\n \n         return ret", "class Solution:\n     def reverseStr(self, s, k):\n         ans = \"\"\n         i = 0\n         \n         while i < len(s):\n             rev = \"\"\n             j = 0\n             while i + j < len(s) and j < k:\n                 rev += s[i + j]\n                 j += 1\n             i += j\n             ans += rev[::-1]\n             j = 0\n             while i + j < len(s) and j < k:\n                 ans += s[i + j]\n                 j += 1\n             i += j\n         return ans\n                 \n                 \n", "class Solution:\n     def reverseStr(self, s, k):\n         \"\"\"\n         :type s: str\n         :type k: int\n         :rtype: str\n         \"\"\"\n         a = list(s)\n         for i in range(0,len(a),2*k):\n             a[i:i+k] = reversed(a[i:i+k])\n             \n         return ''.join(a)"]