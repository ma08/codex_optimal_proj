["import math\n\ndef bouncing_ball(initial, proportion):\n    return math.ceil(math.log(initial, 1/proportion))", "def bouncing_ball(initial, proportion):\n    count = 0\n    while initial > 1:\n        initial = initial * proportion\n        count = count + 1\n    return count", "def bouncing_ball(i, p , n = 0):\n    return n if i <= 1 else bouncing_ball(i*p, p, n+1)", "def bouncing_ball(h, bounce):\n    count = 0\n    while h > 1:\n        count += 1\n        h *= bounce\n    return count", "bouncing_ball=lambda x,y,p=1: p if x*y<=1 else bouncing_ball(x*y,y,p+1)", "def bouncing_ball(initial, p):\n    if initial <= 1:\n        return 0\n    else:\n        return 1 + bouncing_ball(initial * p, p)", "bouncing_ball=b=lambda i,p:i>1and-~b(i*p,p)", "def bouncing_ball(initial, proportion):\n    height_now=initial         # ball height now.\n    counter=0                  # counter for number of jumb initially zero\n    while height_now>1:        # stay in while loop until height is smaller than than1\n        height_now*=proportion\n        counter+=1             # each time we iterate in while increase count of jump by 1\n    return counter             # return number of jump\n", "from math import ceil, log\n\ndef bouncing_ball(initial, proportion):\n    return ceil(-log(initial - 1e-9, proportion))", "from math import ceil, log\n\ndef bouncing_ball(initial, proportion):\n    return ceil(log(1 / initial, proportion))"]