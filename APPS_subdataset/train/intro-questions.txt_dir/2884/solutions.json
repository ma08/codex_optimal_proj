["def stringify(list):\n    return 'None' if list == None else str(list.data) + ' -> ' + stringify(list.next)", "def stringify(ll):\n    r = []\n    while ll:\n        r, ll = r + [str(ll.data)], ll.next\n    return ' -> '.join(r + ['None'])", "def stringify(head):\n    if head is None:\n        return \"None\"\n    return \"{} -> {}\".format(head.data, stringify(head.__next__))\n", "def stringify(list):\n    return str(list.data) + ' -> ' + stringify(list.next) if list is not None else 'None'", "def stringify(list):\n    return \"None\" if list is None else str(list.data) + \" -> \" + stringify(list.next)", "class Node:\n    def __init__(self, data, next = None):\n        self.data = data\n        self.next = next\ndef getValue(self):\n        return self.data\ndef getNext(self):\n        return self.__next__\ndef stringify(node):\n    if node ==None:\n        return 'None'\n    return str(getValue(node)) + ' -> ' + stringify(getNext(node))\n", "class Node():\n    def __init__(self, data, next = None):\n        self.data = data\n        self.next = next\n\n\ndef stringify(node):\n    k = ''\n    while True:\n        if node == None:\n            k += 'None'\n            return k\n        else:\n            k += '{} -> '.format(node.data)\n            node = node.next", "def stringify(list_):\n    try:\n        return '{} -> {}'.format(list_.data, stringify(list_.next))\n    except AttributeError:\n        return 'None'", "def stringify(node):\n    return 'None' if not node else f'{str(node.data)} -> ' + stringify(node.__next__) \n", "def stringify(node):\n    if not node:\n        return 'None'\n    return '{} -> {}'.format(node.data, stringify(node.next))", "def stringify(node):\n    result = ''\n    while node:\n        result += str(node.data) + ' -> '\n        node = node.next\n    return result + 'None'", "def stringify(list):\n    return str(list.data) + ' -> ' +stringify(list.next) if list else 'None'", "def stringify(node):\n    if node == None:\n        return \"None\"\n    return str(node.data) + \" -> \" + stringify(node.next)", "def stringify(node):\n    if not node:\n        return 'None'\n    if node.__next__:\n        return f'{node.data} -> {stringify(node.next)}'\n    else:\n        return f'{node.data} -> None'\n", "stringify=lambda n:'None' if n==None else (lambda s:([i for i in iter(lambda:((s['r'].append(str(s['n'].data)),[None for s['n'] in [s['n'].next]]), s['n']!=None)[1], False)],s['r'].append('None'),' -> '.join(s['r']))[-1])({'r':[],'n':n})", "def stringify(node):\n    my_str = \"\"\n    while node:\n        my_str += str(node.data) + \" -> \"\n        node = node.next\n    \n    my_str += \"None\"\n    return my_str", "def stringify(node):\n    r = []\n    while node != None: node = (r.append(str(node.data)), node.next)[1]\n    return \" -> \".join(r + [\"None\"])", "def recursive(node, string):\n    if node is None:\n        string += \"None\"\n        return string\n    string += str(node.data) + \" -> \"\n    node = node.next\n    return recursive(node, string)\n\ndef stringify(node):\n    string = \"\"\n    ans = recursive(node, string)\n    return ans", "def stringify(node):\n    if node is None:\n        return 'None'\n\n    data = node.data\n    list = []\n    current_node = node\n    \n    while current_node is not None:\n        list.append(str(current_node.data))\n        current_node = current_node.__next__\n    \n    if current_node is None:\n        list.append(\"None\")\n\n    \n    return \" -> \".join(list)\n", "def stringify(node):\n    \n    if node is None:\n        return 'None'\n    \n    itr = node\n    llstr = ''\n    while itr:\n        if itr.next:\n            llstr += str(itr.data) + ' -> '\n        else:\n            llstr += str(itr.data) + ' -> None'\n        itr = itr.next\n    \n    return llstr", "def stringify(node):\n    r = ''\n\n    while node != None:\n        r += f'{node.data} -> '\n        node = node.next\n    \n    return r + 'None'", "def stringify(node):\n    def get(node, L = []):\n        while node: L, node = L + [str(node.data)], node.next\n        return L\n    return ' -> '.join(get(node) + ['None'])", "def stringify(node):\n    \n    if node is None:\n        return 'None'\n    \n    n = node\n    l = []\n    \n    while(True):\n        l.append(str(n.data))\n        if n.next is None:\n            break\n        else:\n            n = n.next\n    \n    l.append('None')\n    \n    return \" -> \".join(l)", "def stringify(node):\n    try:\n        emptylist = []\n        while type(node.data) is int:\n            emptylist.append(str(node.data))\n            node = node.next\n    except:\n        emptylist.append('None')\n        return ' -> '.join(emptylist)", "def stringify(node, output_array=None):\n    if output_array is None:\n        output_array = []\n\n    if not node:\n        output_array.append('None')\n    \n    while node:\n        output_array.append(node.data)\n        return stringify(node.__next__, output_array)\n    \n    return \" -> \".join(str(i) for i in output_array)\n", "def stringify(node):\n    return ''.join(str(node.data) + ' -> ' + stringify(node.next)) if node else 'None'", "def stringify(node):\n    final = ''\n    try:\n        final += str(node.data) + ' -> '\n        while node.next:\n            final += str(node.next.data)\n            final += ' -> '\n            node = node.next\n    except AttributeError:\n        pass\n    final += 'None'\n    return final", "def stringify(node):\n    new=[]\n    node=node\n    while node is not None:\n        new.append(str(node.data))\n        node=node.next\n    else:\n        new.append('None')\n    return ' -> '.join(new)", "class Node():\n    def __init__(self, data, next = None):\n        self.data = data\n        self.next = next\ndef stringify(list):\n    if list == None:\n        return 'None'\n    else:\n        return str(list.data) + ' -> ' + stringify(list.next)", "def stringify(node):\n    string = ''\n    while node:\n        string += str(node.data)\n        string += ' -> '\n        node = node.next\n    string += 'None'\n    return string", "def stringify(node):\n    return f'{node.data} -> {stringify(node.next)}' if node else str(None)", "def stringify(node):\n    a = ''\n    if node == None:\n        return 'None'\n    else:\n        node_data = str(node.data)\n        #a = node_data + ' -> '\n        #a += stringify(node.next)\n        return node_data + ' -> ' + stringify(node.__next__)\n        \n", "def stringify(node):\n    if node == None:\n        return 'None'\n    else:\n        s = str(node.data) + ' -> '\n        return s + stringify(node.next)", "def stringify(node):\n    if node == None:\n        return 'None'\n    return '{} -> {}'.format(node.data,stringify(node.__next__))\n    \n        \n", "def stringify(node):\n    s = []\n    while node:\n        s.append(node.data)\n        node = node.next\n    s.append(None)\n    return ' -> '.join(list(map(str, s)))", "def stringify(node):\n    s = \"\"\n    while node:\n        s += f\"{node.data} -> \"\n        node = node.next\n    s += \"None\"\n    return s", "def stringify(node):\n    res = ''\n    while node:\n        res += '{} -> '.format(str(node.data))\n        node = node.next\n    return res + 'None'", "def stringify(node):\n    x = []\n    #if Node is None:\n    #    return 'None'\n    \n    while True:\n        try:\n            x.append(str(node.data))\n            node = node.next\n        except:\n            break\n    x.append('None')\n    return ' -> '.join(x)", "def stringify(node):\n    return 'None' if node is None else f\"{node.data} -> {stringify(node.next)}\"", "def stringify(node):\n    res = []\n    \n    curr = node\n    while curr:\n        res.append(str(curr.data))\n        \n        curr = curr.next\n    \n    res.append('None')\n    \n    return ' -> '.join(res)", "\ndef stringify(node):\n    list = []\n    f = node\n    while f is not None:\n        list.append(str(f.data))\n        f = f.next\n    list.append(\"None\")\n    return ' -> '.join(list)", "def stringify(node):\n    if node == None:\n        return str('None')\n    return str(node.data) + \" -> \" + stringify(node.next)", "def stringify(node):\n    string_list = \"\"\n    current = node\n    while current:\n        string_list += str(current.data) + \" -> \"\n        current = current.next\n    string_list += \"None\"\n    return string_list", "def stringify(node, s=\"\"):\n    if not node:\n        s = s + \"None\"\n        return s\n    else:\n        s = s+ str(node.data) + \" -> \"\n        return stringify(node.next, s)", "def stringify(node):\n    if node == None:\n        return 'None'\n    lst = []\n    n = node\n    while n.__next__ != None:\n        lst.append(str(n.data))\n        n = n.__next__\n    lst.append(str(n.data))\n    lst.append('None')\n    return ' -> '.join(lst)\n", "def stringify(node):\n    node_str = ''\n    while node:\n        arrow = ' -> '\n        node_str += str(node.data) + arrow\n        node = node.__next__\n    return node_str + 'None'\n", "def stringify(node):\n    list = []\n    \n    while node:\n        list.append(str(node.data))\n        node = node.next\n        \n    list.append('None')\n    \n    return  \" -> \".join(list)", "def stringify(node):\n    if node==None:\n        return \"None\"\n    string = str(node.data); node = node.next\n    while node!=None:\n        string = string + \" -> \" + str(node.data)\n        node = node.next\n    return (string + \" -> None\")", "def stringify(node):\n    lst = []\n    while node:\n        lst+=[str(node.data)]\n        lst+=[' -> ']\n        node = node.next\n    lst+=['None']\n    return ''.join(lst)", "def stringify(node):\n    if node == None: return 'None'\n    i = node\n    t = ''\n    while i.next != None:\n        t += str(i.data) + ' -> '\n        i = i.next\n    t += str(i.data) + ' -> None'\n    return t", "def stringify(node):\n    a = []\n    if not node:\n        return 'None'\n    while node:\n        a.append(str(node.data))\n        node = node.__next__\n    a.append('None')\n    print(a)\n    return ' -> '.join(a)\n", "def stringify(node):\n    if node:\n        if not node.next:\n            return f'{node.data} -> None'\n        return f'{node.data} -> {stringify(node.next)}'\n    else:\n        return 'None'", "def stringify(node):\n    ans = []\n    while node:\n        ans.append(str(node.data))\n        node = node.__next__\n    ans.append(\"None\")\n    return \" -> \".join(ans)\n", "def stringify(node):\n    # base case\n    if node != None:\n        return f'{node.data} -> ' + stringify(node.next)\n    else:\n        return 'None'", "def stringify(node):\n    if node is None:\n        return 'None'\n    \n    result = ''\n    while node.__next__ is not None:\n        result += str(node.data)\n        result += ' -> '\n        node = node.__next__\n    result += str(node.data)\n    result += ' -> None'\n\n    return result\n", "def stringify(node):\n    if not node:\n        return \"None\"\n    list = [str(node.data)]\n    curr = node\n    while curr != None:\n        curr = curr.next\n        list.append(str(curr.data) if curr else \"None\")\n        \n    return \" -> \".join(list)", "def stringify(node):\n    n = 'None'\n    if node:\n        n, r = node.__next__, f\"{node.data} -> \"\n        while n:\n            r += f\"{n.data} -> \"\n            n = n.__next__\n        r += \"None\"\n    else:\n        r = n\n    return r\n", "def stringify(node):\n    if node is not None:\n        return str(node.data) + \" -> \" + stringify(node.next)\n    else:\n        return \"None\"", "def stringify(node):\n    if node == None:\n        return 'None'\n    elif node.next == None:\n        return f\"{node.data} -> None\"\n    else:\n        return f\"{node.data} -> {stringify(node.next)}\"", "def stringify(node):\n    if not node: return \"None\"\n    ls = []\n    while node.next != None:\n        ls.append(str(node.data))\n        node = node.next\n    ls.append(str(node.data) +\" -> None\")\n    return \" -> \".join(ls)", "def stringify(node):\n    return 'None' if node is None else '%d -> %s' % (node.data, stringify(node.__next__))\n", "def stringify(node):\n    if node == None:\n        return 'None'\n    ret = ''\n    while node.data != None:\n        ret += str(node.data) + ' -> '\n        if not node.__next__:\n            ret += 'None'\n            break\n        node = node.__next__\n    return ret\n", "def stringify(node):\n    if node is None:\n        return 'None'\n    res = []\n    while True:\n        if node.__next__ is None:\n            res.append(str(node.data))\n            res.append('None')\n            break\n        res.append(str(node.data))\n        node = node.__next__\n    return ' -> '.join(res)\n", "def stringify(node):\n    if node==None:\n        return \"None\"\n    return f\"{node.data} -> {stringify(node.next)}\"\n", "def stringify(node):\n    return f\"None\" if node is None else f\"{node.data} -> {stringify(node.next)}\"\n", "def stringify(node):\n    elems = []\n    cur_node = node\n    while cur_node != None:\n        elems.append(cur_node.data)\n        cur_node = cur_node.next\n    if elems == []:\n        return 'None'\n    return ' -> '.join(str(x) for x in elems) + ' -> ' +'None'", "def stringify(node):\n    if not node:\n        return 'None'\n    string=node.data\n    node=node.next \n    while node: \n        string=f'{string} -> {node.data}'\n        node=node.next \n    return f'{string} -> {node}'", "def stringify(node):\n    list = []\n    while node:\n        list.append(node.data)\n        node=node.next\n    list.append('None')\n    return ' -> '.join(map(str,list))", "def stringify(node):\n    List = []\n    while node and node.data != None:\n        List.append(str(node.data))\n        node = node.next\n    List.append(\"None\")\n    return ' -> '.join(List)", "def stringify(node):\n    currentNode = node\n    res = ''\n    while currentNode is not None:\n        res += f'{currentNode.data} -> '\n        currentNode = currentNode.next\n    if currentNode is None:\n        res += 'None'\n        \n    return res", "def stringify(node):\n    result = ''\n    while node != None:\n        result += f'{node.data} -> '\n        node = node.next\n    result += 'None'\n    return result", "def stringify(node):\n    if not node:\n        return 'None'\n    ans = []\n    while node:\n        ans.append(str(node.data))\n        node = node.next\n    return ' -> '.join(ans) + ' -> None'", "def stringify(node):\n    if node == None:\n        return 'None'\n    returnString = \"\"\n    while node != None:\n        returnString += str(node.data) + ' -> '\n        node = node.next\n    returnString += \"None\"\n    return returnString", "def stringify(node):\n    then_case = ''\n    result = ''\n    while node!=None:\n        then_case = node.data\n        node = node.next\n        result+=str(then_case)+' -> '\n    return result+'None'", "def stringify(node):\n    if node == None:\n        return \"None\"\n        \n    string = str(node.data)\n    node = node.next\n    \n    while node != None:\n        string = string + \" -> \" + str(node.data)\n        node = node.next\n        \n    string += \" -> None\"\n      \n    return string", "def stringify(node):\n    if node is None:\n        return \"None\"\n    elif node.next is None:\n        return f\"{node.data} -> None\"\n    else:\n        return f\"{node.data} -> {stringify(node.next)}\"", "def stringify(node):\n    head = node\n    curr = head\n    strList = []\n    while (curr != None):\n        strList.append(curr.data)\n        curr = curr.next\n    strList.append(None)\n    \n    return ' -> '.join(str(x) for x in strList)", "def stringify(node):\n\n    if node is None:\n        return 'None'\n    output = str(node.data) + \" -> \"\n    \n    while node.next != None:\n        node = node.next\n        output += str(node.data) + \" -> \"\n    \n    output += \"None\"\n    \n    return output", "def stringify(node):\n    ret = \"\"\n    while node:\n      ret += str(node.data) +  \" -> \"\n      node = node.next\n    return ret + \"None\"", "def stringify(node):\n\n    \"\"\"Code borrowed\"\"\"\n\n    result = ''\n    \n    while node:\n        result += str(node.data) + ' -> '\n        node = node.next\n        \n    return result + 'None'", "def stringify(node):\n    curr = node\n    res = []\n    \n    while curr != None:\n        res.append(curr.data)\n        curr = curr.next\n    \n    res.append(None)\n    \n    return \" -> \".join(str(x) for x in res)", "def stringify(node):\n    seq, current = [], node\n    while current:\n        seq.append(str(current.data))\n        current = current.next\n    seq.append('None')\n    return ' -> '.join(seq)", "def stringify(node):\n    if not node:\n        return \"None\"\n    if not node.__next__:\n        return f\"{node.data} -> {None}\"\n    return f\"{node.data} -> {stringify(node.next)}\"\n\n", "def stringify(node):\n    p = node\n    seq = []\n    while p:\n        seq.append(str(p.data))\n        p = p.next\n    seq.append('None')\n    return ' -> '.join(seq)", "def stringify(node):\n    if not node:\n        return \"None\"\n    output = \"\"\n    while node:\n        output += str(node.data) + \" -> \"\n        node = node.next\n    output += \"None\"\n    return output", "def stringify(node):\n    if not node:\n        return 'None'\n    return \" -> \".join([x for x in rec_stringify(node)])\n    \ndef rec_stringify(node):\n    if not node.__next__:\n        return [ str(node.data), 'None']\n    else:\n        return [ str(node.data) ] + rec_stringify(node.__next__)\n", "def stringify(node):\n    if node == None: return 'None'\n    res = ''\n    while node.next != None:\n        res += '{} -> '.format(node.data)\n        node = node.next\n    return res + str(node.data)+' -> None'", "def stringify(node):\n    st = ''\n    while node:\n        st = st + str(node.data) + ' -> '\n        node = node.__next__\n    st = st + 'None'\n    return st\n\n\n", "def stringify(node):\n    string = \"\"\n    \n    if node == None:\n        return \"None\"\n    else:\n        n = node.next\n        string = string + str(node.data) + \" -> \" + stringify(node.next)\n        return string", "def stringify(node):\n    if node == None: \n        return \"None\"\n    to_remove = \"(),\"\n    table = {ord(char): None for char in to_remove}\n    head = int (node.data)\n    tail = node.__next__\n    if tail == None:\n        return str((\" -> \".join((str(head), \"None\"))).translate(table))\n    else: \n        return str((\" -> \".join((str(head), stringify(tail)))).translate(table))\n", "def stringify(node):\n    s = []\n    while node:\n        s.append(str(node.data))\n        node = node.next\n    s.append('None')\n    return ' -> '.join(s)", "def stringify(node):\n    if node==None:\n        return \"None\"\n    n = node\n    r = \"\"\n    while n.next != None:\n        r = r + str(n.data) + \" -> \"\n        n = n.next\n    return r + str(n.data) + \" -> None\"", "def stringify(node):\n    \n    count = 0\n    next_node = \"\"\n    \n    while count < 100:\n    \n        try:\n            \n            current_node = eval(\"node.\" + count * \"next.\" + \"data\")            \n            next_node += str(current_node) + \" -> \"\n            count += 1\n            \n        except:\n            return \"None\" if node == None else next_node + \"None\"", "def stringify(node):\n    ret = \"\"\n    try:\n        while node.data != None:\n            ret += str(node.data) + \" -> \"\n            node = node.next\n    except:\n        ret += \"None\"\n    return ret", "stringify = lambda node, s = '': stringify(node.next, s + f'{node.data} -> ') if node else s + 'None'", "def stringify(node):\n    res = \"\"\n    while not node == None:\n        res += str(node.data) + \" -> \"\n        node = node.next\n        \n    res += \"None\"\n    return res", "def stringify(node):\n    to_print = ''\n    while node != None:\n        to_print += str(node.data) + ' -> '\n        node = node.__next__\n    return to_print + 'None'\n", "def stringify(node):\n    s = ''\n    while node:\n        s += str(node.data)\n        node = node.next\n        s += ' -> '\n    return s + 'None'", "def stringify(node):\n    if not node:\n        return 'None'\n    \n    lst = [str(node.data)]\n    next_node = node.next\n\n    while next_node != None:\n        lst.append(str(next_node.data))\n        next_node = next_node.next\n\n    return ' -> '.join(lst) + ' -> None'"]