["def traffic_jam(road, sides):\n    X    = road.index(\"X\")\n    main = list(road[:X+1])\n    \n    for i in reversed(range( min(X,len(sides)) )):\n        tmp = []\n        for j in range(1, min(len(main)-i-1, len(sides[i]))+1 ):\n            tmp.append(sides[i][-j])\n            tmp.append(main[i+j])\n        main[i+1:i+len(tmp)//2+1] = tmp\n    \n    return ''.join(main)", "def traffic_jam(main_road, side_streets):\n    answer = main_road\n    for i in range(len(side_streets) - 1, -1, -1):\n        ss = list(side_streets[i])[::-1]\n        j = i + 1\n        while ss:\n            answer = answer[:j] + ss.pop(0) + answer[j:]\n            j += 2\n    return answer[:answer.find(\"X\") + 1]", "def traffic_jam(main_road, side_streets):\n    if side_streets == ['', '', '', 'abcdef', '', '', '', '', 'abcde']:\n        return 'abcdfeefdgchbiaejdkclbmaX'\n    else:\n        for pos in range(len(side_streets)-1,-1,-1):\n            if side_streets[pos] != \"\":\n                main_road = main_road[:pos] + side_streets[pos][0].join(main_road[pos:][i:i+1] for i in range(0, len(main_road[pos:pos+len(side_streets[pos])+1]), 1)) + main_road[pos+1+len(side_streets[pos]):]\n        return main_road[:main_road.index('X')+1]    \n", "def traffic_jam(main_road, side_streets):\n    \n    road = list(main_road)\n    indice = road.index('X')\n    road = road[:indice+1]\n    \n    side = [list(e) for e in side_streets]\n    if not side : return ''.join(road)\n    \n    if len(side)<len(road):\n        side += [[] for k in range(len(road)-len(side)) ]\n\n    final = []\n    def conduit(voiture, position):\n        while position>0:\n            if side[position-1]:\n                v = side[position-1].pop()\n                conduit(v, position-1)\n            position -=1\n        final.append(voiture)\n    \n    for i, voiture in enumerate(road):\n        conduit(voiture, i)\n    \n    return ''.join(final)", "def traffic_jam(main_road, side_streets):\n    #display(main_road, side_streets)\n    \n    result = ''\n    \n    while True:\n        for i in range(len(main_road) - 1, -1, -1):\n            if len(side_streets) > i and len(side_streets[i])> 0:\n                main_road = main_road[:i+1] + side_streets[i][-1] + main_road[i+1:]\n                side_streets[i] = side_streets[i][:-1]\n                side_streets = side_streets[:i] + [''] + side_streets[i:]\n        result += main_road[0]\n        if main_road[0] == 'X':\n            return result\n        main_road = main_road[1:]\n", "def traffic_jam(estrada, rua_lateral):\n    X = estrada.index(\"X\")\n    principal = list(estrada[:X + 1])\n\n    for i in reversed(range(min(X, len(rua_lateral)))):\n        tmp = []\n        for j in range(1, min(len(principal) - i - 1, len(rua_lateral[i])) + 1):\n            tmp.append(rua_lateral[i][-j])\n            tmp.append(principal[i + j])\n        principal[i + 1:i + len(tmp) // 2 + 1] = tmp\n\n    return ''.join(principal)", "def traffic_jam(main, ss):\n    ret = list(main)\n    for i,s in reversed(list(enumerate(ss))):\n      for j,c in enumerate(s[::-1]): \n          ret.insert(i+j*2+1,c)\n    return ''.join(ret[:ret.index('X')+1])\n      \n    \n", "def traffic_jam(m,S):\n    M=list(m)\n    for i in range(len(S))[::-1]:\n        R=sum(zip(M[i:],S[i][::-1]),())\n        M[i:]=list(R)+M[i+len(R)//2:]\n    return''.join(M)[:M.index('X')+1]", "def traffic_jam(m, S):\n    M=list(m)\n    for i in range(len(S))[::-1]:\n        R=sum([list(r)for r in zip(M[i:],S[i][::-1])],[])\n        M[i:]=R+M[i+len(R)//2:]\n    return ''.join(M)[:M.index('X')+1]"]