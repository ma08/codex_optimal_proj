["import re\n\ndef solve(s):\n    return max(sum(ord(c)-96 for c in subs) for subs in re.split('[aeiou]+', s))", "def solve(s):\n    max_ord = 0\n    curr_ord = 0\n    for char in s:\n        if char not in 'aeiou':\n            curr_ord += ord(char)-ord('a')+1\n        else:\n            if curr_ord > max_ord:\n                max_ord = curr_ord\n            curr_ord = 0\n    return max_ord\n", "def solve(s):\n    count = 0\n    max = 0\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for letter in s:\n        if letter in vowels:\n            if count > max:\n                max = count\n            count = 0\n        else:\n            count+=int(ord(letter)) - 96\n    return max", "import re\n\ndef solve(s):\n    return max(sum(ord(x)-96 for x in c) for c in re.split('[aeiou]',s))", "import string\ndef solve(s):\n    string_list=(list(s))\n    alphabets=(list(string.ascii_lowercase))\n    test=[]\n    for i in range(1,len(alphabets)+1):\n        test.append(i)\n    my_dictionary=dict(zip(alphabets,test))\n    vowels=\"aeiou\"\n    vowels_list=list(vowels)\n    compare_list1=[]\n    for i in range(len(string_list)):\n        if string_list[i] in my_dictionary and string_list[i] not in vowels:\n            l=(my_dictionary[string_list[i]])\n            compare_list1.append(l)\n        else:\n            compare_list1.append(\"vowels\")\n            \n    z=(compare_list1)\n    x = []\n    l = len(z)\n    previous_element = 0\n    count = 0\n    if( isinstance(z[0] , int)  == True ):\n            count = z[0]    \n    elif( z[0] == 'vowels' ):\n            previous_element = z[0]           \n    for i in range(1,l):\n        if( previous_element == 'vowels' ):\n                if(count > 0):\n                    x.append(count)\n                count = 0       \n        elif( isinstance( previous_element , int)  == True ):\n                count = count + previous_element\n        previous_element = z[i]       \n    if( isinstance(z[l-1] , int)  == True ):\n            count = count + previous_element\n            x.append(count)    \n    elif( z[l-1] == 'vowels' ):\n            x.append(count)       \n    print(x) \n    y=max(x)\n    return y\n        \nsolve(\"zodiacs\")", "def solve(s):\n    s = s.replace('a',' ').replace('e',' ').replace('i',' ').replace('u',' ').replace('o',' ')\n    return max((sum(ord(i)-96 for i in j) for j in s.split()))", "import re\n\nCONS_PAT = re.compile(r\"[^aeiuo]+\")\n\ndef solve(s):\n    return max(sum(map(lambda c: ord(c)-96, conss)) for conss in CONS_PAT.findall(s))", "import re\nimport string\n\nscores = {c: i for i, c in enumerate(string.ascii_lowercase, 1)}\n\ndef solve(s):\n    return max(sum(map(scores.get, x)) for x in re.findall('[^aeiou]+', s))", "def solve(s):\n    # Reference: https://en.wikipedia.org/wiki/Maximum_subarray_problem#Kadane's_algorithm\n    max_so_far = 0\n    max_ending_here = 0\n    \n    for char in s:\n        if isConsonant(char):\n            max_ending_here += getValue(char)\n            max_so_far = max(max_so_far, max_ending_here)\n        else:\n            max_ending_here = 0\n    \n    return max_so_far\n\ndef isConsonant(char):\n    return char not in 'aeiou'\n\ndef getValue(char):\n    return ord(char) & -ord('a')", "import re\nfrom string import ascii_lowercase as c \ndef solve(s):   \n    return max([sum(map(lambda x: c.index(x)+1,list(i))) for i in re.findall(r'[^aeiou]+',s)])"]