["class Solution:\n     def findPairs(self, nums, k):\n         \"\"\"\n         :type nums: List[int]\n         :type k: int\n         :rtype: int\n         \"\"\"\n         # import collections\n         # unique_nums = set(nums)\n         # count = 0\n         # new_nums = collections.Counter(nums)\n         # if k == 0:\n         #     for i in unique_nums:\n         #         if new_nums[i] > 1:\n         #             count +=1\n         #     return count\n         # elif k < 0:\n         #     return 0\n         # elif k > 0:\n         #     for i in unique_nums:\n         #         if i+k in unique_nums:\n         #             count += 1\n         #     return count\n         \n # \u7528counter\u6765\u505a\n         # import collections\n         # count = 0\n         # list_nums = set(nums)\n         # if k == 0:\n         #     nums = collections.Counter(nums)\n         #     for each in nums:\n         #         if nums[each] > 1:\n         #             count += 1\n         #     return count\n         # elif k < 0:\n         #     return 0\n         # elif k > 0:\n         #     for i in list_nums:\n         #         if i + k in list_nums:\n         #             count += 1\n         #     return count\n         \n # \u7528dict\u6765\u505a\n \n         count = 0\n         if k < 0 :\n             return count\n         if k == 0:\n             new_nums = collections.defaultdict(int)\n             for i in nums:\n                 new_nums[i] +=1\n             for value in new_nums:\n                 if new_nums[value] > 1:\n                     count += 1\n             return count\n         if k > 0 :\n             nums = set(nums)\n             for i in nums:\n                 if i+k in nums:\n                     count += 1\n             return count\n \n #         if k < 0:\n #             return 0\n #         if k == 0:\n #             dict = collections.defaultdict(int)\n #             for i in nums:\n #                 dict[i] += 1\n #             ans = 0\n #             for value in dict.values():\n #                 if value > 1:\n #                     ans += 1\n #             return ans\n #         nums = set(nums)\n #         ans = 0\n #         for item in nums:\n #             if item+k in nums:\n #                 ans += 1\n #         return ans\n", "class Solution:\n     def findPairs(self, nums, k):\n         \"\"\"\n         :type nums: List[int]\n         :type k: int\n         :rtype: int\n         \"\"\"\n         # import collections\n         # unique_nums = set(nums)\n         # count = 0\n         # new_nums = collections.Counter(nums)\n         # if k == 0:\n         #     for i in unique_nums:\n         #         if new_nums[i] > 1:\n         #             count +=1\n         #     return count\n         # elif k < 0:\n         #     return 0\n         # elif k > 0:\n         #     for i in unique_nums:\n         #         if i+k in unique_nums:\n         #             count += 1\n         #     return count\n         \n # \u7528counter\u6765\u505a\n         # import collections\n         # count = 0\n         # list_nums = set(nums)\n         # if k == 0:\n         #     nums = collections.Counter(nums)\n         #     for each in nums:\n         #         if nums[each] > 1:\n         #             count += 1\n         #     return count\n         # elif k < 0:\n         #     return 0\n         # elif k > 0:\n         #     for i in list_nums:\n         #         if i + k in list_nums:\n         #             count += 1\n         #     return count\n         \n # \u7528dict\u6765\u505a\n \n         count = 0\n         if k < 0 :\n             return count\n         if k == 0:\n             new_nums = collections.defaultdict(int)\n             for i in nums:\n                 new_nums[i] +=1\n             for j in new_nums:\n                 if new_nums[j] > 1:\n                     count += 1\n             return count\n         if k > 0 :\n             nums = set(nums)\n             for i in nums:\n                 if i+k in nums:\n                     count += 1\n             return count\n \n #         if k < 0:\n #             return 0\n #         if k == 0:\n #             dict = collections.defaultdict(int)\n #             for i in nums:\n #                 dict[i] += 1\n #             ans = 0\n #             for value in dict.values():\n #                 if value > 1:\n #                     ans += 1\n #             return ans\n #         nums = set(nums)\n #         ans = 0\n #         for item in nums:\n #             if item+k in nums:\n #                 ans += 1\n #         return ans\n", "class Solution:\n     def findPairs(self, nums, k):\n         \"\"\"\n         :type nums: List[int]\n         :type k: int\n         :rtype: int\n         \"\"\"\n         import collections\n         count = 0\n         list_nums = set(nums)\n         if k == 0:\n             nums = collections.Counter(nums)\n             for each in nums:\n                 if nums[each] > 1:\n                     count += 1\n             return count\n         elif k < 0:\n             return 0\n         elif k > 0:\n             for i in list_nums:\n                 if i + k in list_nums:\n                     count += 1\n             return count\n", "class Solution:\n     def findPairs(self, nums, k):\n         \"\"\"\n         :type nums: List[int]\n         :type k: int\n         :rtype: int\n         \"\"\"\n         dic = {}\n         count = 0\n         if(k<0):\n             return 0\n         if(len(nums) == 1 or len(nums) == 0):\n             return 0\n         dic[nums[0]] = 1\n         if(k == 0):\n             for i in range(1,len(nums)):\n                 if(nums[i] in dic and dic[nums[i]]==1):\n                     dic[nums[i]] += 1\n                     count += 1\n                 elif(nums[i] not in dic):\n                     dic[nums[i]] = 1\n                 else:\n                     dic[nums[i]] += 1\n                 \n         else:\n             for i in range(1,len(nums)):\n                 if((nums[i]-k) in dic and nums[i] not in dic):\n                     count += 1\n                 if((nums[i]+k) in dic and nums[i] not in dic):\n                     count += 1\n                 dic[nums[i]] = 1\n \n                 \n         return count", "class Solution:\n     def findPairs(self, nums, k):\n         \"\"\"\n         :type nums: List[int]\n         :type k: int\n         :rtype: int\n         \"\"\"\n         if k < 0:\n             return 0\n         result, lookup = set(), set()\n         for num in nums:\n             if num+k in lookup:\n                 result.add(num)\n             if num-k in lookup:\n                 result.add(num-k)\n             lookup.add(num)\n         return len(result)\n                        \n", "class Solution:\n     def findPairs(self, nums, k):\n         \"\"\"\n         :type nums: List[int]\n         :type k: int\n         :rtype: int\n         \"\"\"\n         if k < 0:\n             return 0\n         \n         from collections import Counter\n         c = Counter(nums)\n             \n         if k == 0:\n             return sum([1 for num, count in list(c.items()) if count > 1])\n         else:\n             return sum([1 for num, _ in list(c.items()) if num + k in c])\n", "class Solution:\n     def findPairs(self, nums, k):\n         \"\"\"\n         :type nums: List[int]\n         :type k: int\n         :rtype: int\n         \"\"\"\n         \n         if k < 0:\n             return 0\n         \n         unique = {}\n         for num in nums:\n             unique[num] = unique.get(num, 0) + 1\n         \n         res = 0\n         for num in unique:\n             if k == 0:\n                 if unique[num] > 1:\n                     res += 1\n             else:\n                 if num+k in unique :\n                     res += 1\n                 \n         return res ", "class Solution:\n     def findPairs(self, nums, k):\n         \"\"\"\n         :type nums: List[int]\n         :type k: int\n         :rtype: int\n         \"\"\"\n         \n         ### 2 pointers\n         # result = 0;\n         # nums.sort()\n         # for i in range(len(nums) - 1):\n         #     if i == 0 or (i != 0 and nums[i] != nums[i - 1]):\n         #         for j in range(i + 1, len(nums)):\n         #             if nums[j] - nums[i] == k:\n         #                 result += 1\n         #                 break\n         #             elif nums[j] - nums[i] > k:\n         #                 break\n         # return result\n         \n         ### map\n         result = 0\n         c = collections.Counter(nums)\n         for i in c:\n             if k > 0 and i + k in c or k == 0 and c[i] > 1:\n                 result += 1\n         return result\n", "class Solution:\n     def findPairs(self, nums, k):\n         \"\"\" Returns number of unique k-diff pairs(i, j) such as |i - j| = k.\n         Algorithm based on hashing.\n \n         Time complexity: O(n). Space complexity: O(n), n is len(nums).\n         \"\"\"\n         num_count = dict()\n         for n in nums:\n             num_count[n] = num_count.get(n, 0) + 1\n \n         total = 0\n         for n in num_count:\n             if k == 0 and num_count[n] > 1:\n                 total += 1\n             elif k > 0 and (n + k) in num_count:\n                 total += 1\n         return total\n \n", "class Solution:\n     def findPairs(self, nums, k):\n         \"\"\"\n         :type nums: List[int]\n         :type k: int\n         :rtype: int\n         \"\"\"\n         s = set(nums)\n         total = 0\n         if k < 0:\n             return 0\n         if k:\n             for x in s:\n                 if x + k in s:\n                     total += 1\n         else:\n             counter = collections.Counter(nums)\n             for k, v in counter.items():\n                 if v > 1:\n                     total += 1\n         return total", "class Solution:\n     def findPairs(self, nums, k):\n         \"\"\"\n         :type nums: List[int]\n         :type k: int\n         :rtype: int\n         \"\"\"\n         \n         if len(nums) < 2 or k < 0:\n             return 0\n         \n         count = 0\n         nums.sort()\n         i, j = 0, 1\n         while i < len(nums) - 1 and j < len(nums):\n             j = max(i+1, j)\n             d = nums[j] - nums[i]\n             if d < k:\n                 j += 1\n             elif d == k:\n                 count += 1\n                 while (i + 1) < len(nums) and nums[i] == nums[i + 1]:\n                     i += 1\n                 i += 1\n             else:\n                 i += 1\n \n         \n         return count\n", "class Solution:\n     def findPairs(self, nums, k):\n         \"\"\"\n         :type nums: List[int]\n         :type k: int\n         :rtype: int\n         \"\"\"\n         if k<0:\n             return 0\n         \n         pairs={}\n         \n         cnt = 0\n         \n         for a in nums:            \n             if not a in pairs:\n                 if a+k in pairs and a not in pairs[a+k]:\n                     pairs[a+k].append(a)\n                     cnt +=1\n                 if a-k in pairs and a not in pairs[a-k]:\n                     pairs[a-k].append(a)\n                     cnt +=1\n                 pairs[a]=[]\n             else:\n                 if not a+k in pairs[a]:\n                     if a+k in pairs and a not in pairs[a+k]:\n                         pairs[a+k].append(a)\n                         cnt +=1\n                 if not a-k in pairs[a]:\n                     if a-k in pairs and a not in pairs[a-k]:\n                         pairs[a-k].append(a)\n                         cnt+=1\n             \n         return cnt"]