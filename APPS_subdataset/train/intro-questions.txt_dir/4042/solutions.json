["def points(R):\n    from math import sqrt\n    point = sum(int(sqrt(R * R - x * x)) for x in range(0,R+1)) * 4 + 1\n    return point", "from math import floor, sqrt\n\ndef points(n):\n    # solution is \n    # A000328       Number of points of norm <= n^2 in square lattice.\n    # which can be calculated as \n    # a(n) = 4*A000603(n) - (4*n+3), n >= 0 where\n    # A000603       Number of nonnegative solutions to x^2 + y^2 <= n^2\n    # which can be calculated as \n    # a(n) = A001182(n) + 2*n + 1 where\n    # A001182       Number of cells of square lattice of edge 1/n inside quadrant of unit circle centered at 0\n    A001182 = sum(floor(sqrt(n**2-k**2)) for k in range(1,n))\n    A000603 = A001182 + 2*n + 1\n    A000328 = 4*A000603 - (4*n+3) \n    return A000328\n", "def points(n):\n    return 1 + 4 * sum(map(lambda x: int((n * n - x * x)**0.5),range(0,n+1)))", "points=lambda n:1+4*sum((n*n-r*r)**.5//1for r in range(n))", "import math\n\ndef points(n):\n    if n == 0:\n        return 1\n    sum = 0\n    for i in range(n):\n        for j in range(1,n):\n            if i*i+j*j <= n*n:\n                sum+=1\n    return 4*sum+5", "def points(r):\n    rr = r*r\n    x = sum(int((rr - x*x) ** 0.5) for x in range(r))\n    return x * 4 + 1", "from math import sqrt\ndef points(n):\n    return sum(int(sqrt(n ** 2 - i ** 2)) for i in range(n)) * 4 + 1", "def points(n):\n    n_2 = n ** 2 \n    sq = [i ** 2 for i in range(1,n)]\n    count = 0\n    for i in sq:\n        for j in sq:\n            if i+j <= n_2:\n                count=count + 1\n    count =4 * (count + n) + 1\n    return(count)", "def points(n):\n    ct = (2*n+1)**2 # num of pts in lattice intersecting B_n(0)\n    \n    for x in range(-n,0): # x coords in (- , -) quadrant\n        y = -n # inital y in (- , -) quadrant\n        while x**2 + y**2 > n**2: #while outside B_n(0)\n            ct -= 4 # use quadrant symmetry -  if its not in the (- , -) quad of B_n(0) its not in any quad.\n            y += 1\n    return ct", "def points(radius):\n    cnt = radius * 4 + 1\n    r2 = radius * radius\n    for i in range(1, radius + 1):\n        for j in range(1, radius + 1):\n            if (i * i + j * j <= r2):\n                cnt += 4\n    return cnt\n\n"]