["def filter_homogenous(arrays):\n    return[a for a in arrays if len(set(map(type,a)))==1]", "def homogenous(a):\n    return len(set(map(type, a))) == 1\n    \ndef filter_homogenous(arrays):\n    return list(filter(homogenous, arrays))", "def is_homogenous(array):\n    return len(set(map(type, array))) == 1\n\ndef filter_homogenous(arrays):\n    return list(filter(is_homogenous, arrays))\n", "def filter_homogenous(arrays):\n    return [a for a in arrays if a and all(type(a[0]) == type(b) for b in a)]", "def filter_homogenous(arrays):\n    list = []\n    for list1 in arrays:\n        n=0\n        x=0\n        while n<len(list1):\n            if type(list1[0])==type(list1[n]):\n                n+=1\n                x = 1\n            else:\n                x = -1\n                break\n        if x == 1:\n            list.append(list1)\n    return list\n", "def filter_homogenous(b):\n    return [a for a in b if bool(a) and all([type(v1) == type(v2) for v1, v2 in zip(a,a[1:])])]\n", "def f(array):\n    if array == [] : return False\n    return all([type(array[0]) == type(e) for e in array])\n\ndef filter_homogenous(arrays):\n    return [a for a in arrays if f(a)]\n", "from typing import Any, List\n\ndef filter_homogenous(arrays: List[Any]) -> List[Any]:\n    \"\"\"\n    Get a new array which carries over only those arrays from the original, \n    which were not empty and whose items are all of the same type (i.e. homogenous).\n    \"\"\"\n    return list(filter(lambda _: len(_) and len(set(map(type, _))) == 1, arrays))", "def filter_homogenous(arrays):\n    k = []\n    while arrays:\n        x = arrays.pop()\n        if x and all(type(x[0])==type(i) for i in x[1:] ):\n            k.insert(0,x)\n    return k\n", "def filter_homogenous(arrays):\n    f = lambda x: type(x[0])\n    k = []\n    while arrays:\n        x = arrays.pop()\n        if x and all(f(x)==type(i) for i in x ):\n            k.insert(0,x)\n    return k\n"]