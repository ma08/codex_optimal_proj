["from bisect import bisect\n\nmemo = {3: [3105, 7425, 30105, 31050, 37125, 42741, 44172, 71253, 72441, 74142, 74250, 74628, 74925, 82755, 85725],\n        4: [7128, 8712, 67128, 70416, 71208, 71280, 71328, 71928, 72108, 78912, 79128, 80712, 86712, 87120, 87132, 87192, 87912, 95832],\n        5: [],\n        6: [8316, 83160, 83916, 84510, 89154, 91152],\n        7: [9513, 81816, 83181, 90321, 91203, 93513, 94143, 95130, 95193, 95613]}\n\ndef search_permMult(nMax, k):\n    return bisect(memo[k], nMax)", "def search_permMult(nMax, k):\n    x = 0\n    for i in range(1000, nMax//k):\n        if SameDigits(i*k, i):\n            x +=1\n    return x\n\ndef SameDigits(a, b):\n    return sorted(list(str(a))) == sorted(list(str(b)))", "def search_permMult(n_max, k):\n    return sum(1 for n in range(1, n_max // k) if sorted(str(n)) == sorted(str(n * k)))\n    \n    \n    \n    \n    #pairs = 0\n    #for n in range(1, n_max // k):\n    #    if sorted(str(n)) == sorted(str(n * k)):\n    #        pairs = pairs + 1\n    #return pairs\n", "def search_permMult(nMax, k):\n    def tod(n):\n        return \"\".join(sorted([d for d in str(n)]))\n    i = 1; cnt = 0\n    while i <= nMax // k:\n        if tod(i) == tod(i * k):\n            cnt += 1\n        i += 1\n    return cnt"]