["def image2ascii(image):\n    return '\\n'.join(''.join( glyphs[(v*8)//255] for v in r) for r in image)", "GLYPHS = \" .,:;xyYX\"\n\ndef image2ascii(image):\n    return '\\n'.join(\n        ''.join(GLYPHS[x * 8 // 255] for x in row)\n        for row in image\n    )", "GLYPHS = \" .,:;xyYX\"\n\ndef quantize(value, max_value, max_quantum):\n    if  value == max_value:\n        return max_quantum\n    return int(value//32)\n\ndef generate_lut(max_value, max_quantum):\n    return[quantize(v, max_value, max_quantum) for v in range(max_value+1)]\n    \ndef transform(image,lut):\n    return [[lut[v] for v in row] for row in image]\n\ndef render(image, glyphs):\n    return '\\n'.join(''.join(glyphs[v] for v in row) for row in image)\n\ndef image2ascii(image):\n    lut=generate_lut(255,len(GLYPHS)-1)\n    image = transform(image, lut)\n    \n    return render(image, GLYPHS)", "GLYPHS = \" .,:;xyYX\"\n\ndef image2ascii(image):\n\n    maxValue = 255\n    maxIndex = len(GLYPHS) - 1\n    \n    outStr = \"\"\n    for row in image:\n        for component in row:\n            normalized = maxIndex * component // maxValue\n            glyph = GLYPHS[normalized]\n            outStr += glyph\n        outStr += \"\\n\"\n    outStr = outStr[:-1]\n    \n    return outStr", "glyphs = \" .,:;xyYX\"\n\ndef image2ascii(image):\n  ratio = 255/8\n  \n  new_rows = list()\n  for row in image:\n      new_row = ''.join((glyphs[int(pixel // ratio)] for pixel in row))\n      new_rows.append(new_row)\n           \n  return '\\n'.join(new_rows)\n", "image2ascii=lambda m:'\\n'.join([\"\".join([\" .,:;xyYX\"[8*j//255] for j in i]) for i in m])", "image2ascii=lambda image:'\\n'.join(''.join(\" .,:;xyYX\"[c*(len(\" .,:;xyYX\")-1)//MAX] for c in line) for line in image)", "image2ascii = lambda i: '\\n'.join(''.join(glyphs[c*(len(glyphs)-1)//MAX] for c in r) for r in i)", "image2ascii = lambda i: '\\n'.join(''.join(glyphs[c*(len(glyphs)-1)//255] for c in r) for r in i)", "def image2ascii(image):\n  glyphs = \" .,:;xyYX\"\n  conv = lambda c: glyphs[c*(len(glyphs)-1)//255]\n  return '\\n'.join([''.join([conv(c) for c in row]) for row in image])"]