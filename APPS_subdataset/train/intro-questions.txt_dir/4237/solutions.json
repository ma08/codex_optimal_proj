["from datetime import datetime\n\ndef to12hourtime(t):\n    return datetime.strptime(t, '%H%M').strftime('%I:%M %p').lstrip('0').lower()", "def to12hourtime(t):\n    hour = int(t[:2])\n    \n    if hour >= 12:\n        hour -= 12\n        suf = 'pm'\n    else:\n        suf = 'am'\n    \n    if hour == 0:\n        hour = 12\n    \n    return '%s:%s %s' % (hour, t[2:], suf)", "from datetime import datetime as dt\n\ndef to12hourtime(t):\n    return dt.strptime(t, '%H%M').strftime('%-I:%M %p').lower()", "def to12hourtime(timestring):\n    print(timestring)\n    hour = int(timestring[:2])\n    mins = timestring[2:]\n    if hour >= 12:\n        noon = \"pm\"\n        hour -= 12\n    else:\n        noon = \"am\"\n    if hour == 0:\n        hour = 12\n    return \"{}:{} {}\".format(hour, mins, noon)", "from datetime import datetime\n\nto12hourtime = lambda ts: str(datetime.strptime(ts, '%H%M').strftime(\"%-I:%M %p\").lower())", "def to12hourtime(s):\n    h,m=divmod(int(s),100)\n    p,h=divmod(h,12)\n    return '{}:{:02} {}m'.format(h or 12,m,'p' if p else 'a')", "def to12hourtime(timestring):\n    h = int(timestring[:2])\n    return '{}:{} {}m'.format(h % 12 or 12, timestring[2:], 'ap'[h > 11]) ", "def to12hourtime(hhmm):\n    hh, mm = int(hhmm[:2]), int(hhmm[2:])\n    return '{}:{:02} {}'.format(hh - 12 if hh > 12 else hh, mm, ['am','pm'][hh>=12]) if hh else '12:{:02} am'.format(mm)    ", "def to12hourtime(time_string):\n    hour_str = time_string[0] + time_string[1]\n    minute_str = time_string[2] + time_string[3]\n    \n    if int(hour_str) < 12:\n        if int(hour_str) == 0:\n            hour_str = 12\n        return '%s:%s am' % (int(hour_str), minute_str)\n    else:\n        hour = int(hour_str) - 12;\n        if hour == 0:\n            hour = 12\n        return '%s:%s pm' % (hour, minute_str)", "from datetime import datetime\ndef to12hourtime(time):\n    return datetime.strptime(time,\"%H%M\").strftime(\"%I:%M %p\").lstrip(\"0\").lower()"]