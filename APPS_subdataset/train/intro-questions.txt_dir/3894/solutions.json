["def solve(s):\n    return s.upper() if sum(map(str.isupper, s)) * 2 > len(s) else s.lower()", "def solve(s):\n    upper = 0\n    lower = 0\n    \n    for char in s:\n        if char.islower():\n            lower += 1\n        else:\n            upper += 1\n            \n    if upper == lower or lower > upper:\n        return s.lower()\n    else:\n        return s.upper()", "def solve(s):\n    lower_case = [l for l in s if l.islower()]\n    upper_case = [l for l in s if l.isupper()]\n    \n    if len(upper_case) > len(lower_case):\n        return s.upper()\n    return s.lower()\n", "def solve(s):\n    n = len(s) // 2\n    upper_count = 0\n    for c in s:\n        if c.isupper():\n            upper_count += 1\n        if upper_count > n:\n            return s.upper()\n    return s.lower()", "def solve(s):\n    return (s.lower, s.upper)[sum(map(str.isupper, s)) > len(s) / 2]()", "def solve(s):\n    return s.upper() if sum(i.isupper() for i in s) > len(s) / 2 else s.lower()\n", "def solve(s):\n    return s.lower() if sum(1 for i in s if i in \"abcdefghijklmnopqrstuvwxyz\") >= len(s) / 2 else s.upper()", "def solve(s):\n    \n    count_upper = 0;\n    count_lower = 0;\n    \n    for i in range(len(s)):        \n        if s[i].isupper() == True:\n            count_upper += 1\n        else:\n            count_lower += 1\n            \n        if (count_upper > (len(s)/2 +1)) or (count_lower >= (len(s)/2 + 1) ):\n            break\n    \n    result = ''\n\n    if count_lower < count_upper :\n        result = s.upper() \n    else:\n        result = s.lower()\n        \n    return result\n", "def solve(s):\n    counter = 0\n    for char in s:\n        if char.isupper():\n            counter += 1\n    print(counter)\n    return s.lower() if counter <= len(s)/2 else s.upper()", "def solve(s):\n    l = 0\n    u = 0\n    for x in s:\n        if x.islower():\n            l += 1\n        else:\n            u += 1\n    if l >= u:\n        return s.lower()\n    else:\n        return s.upper()", "def solve(s):\n    u,l=0,0\n    for i in s:\n        if i.isupper():\n            u+=1\n        else:\n            l+=1\n    return s.lower() if l>=u else s.upper()              ", "def solve(s):\n    return s.upper() if sum(1 for c in s if c.isupper()) > len(s)/2 else s.lower()", "def solve(s):\n    return s.upper() if sum(1 for c in s if c.isupper()) > sum(1 for c in s if c.islower()) else s.lower()\n", "def solve(s):\n    return s.lower() if sum([1 for c in s if c.islower()]) >= sum([1 for c in s if c.isupper()]) else s.upper()", "def solve(s):\n    up=[]\n    low=[]\n    for i in s:\n            if i.isupper():\n                 up.append(i)\n            else:\n                 low.append(i)\n    if len(low)>len(up):\n           return s.lower()\n    elif len(low)<len(up):\n            return s.upper()\n    else:\n            return s.lower()\n", "def solve(s):\n    if sum(c.isupper() for c in s) > sum(c.islower() for c in s):\n        return s.upper()\n    else:\n        return s.lower()", "def solve(s):\n    count_u = 0\n    count_l = 0\n    for letter in s:\n        if letter.isupper():\n            count_u += 1\n        elif letter.islower():\n            count_l += 1\n    if count_u > count_l:\n        return s.upper()\n    else:\n        return s.lower()", "def solve(a):\n    b= 0\n    m= 0 \n    for i in range(len(a)):\n        if a[i] == a[i].lower() :\n            m += 1\n        else :\n            b += 1\n    if m>=b :\n        return a.lower()\n    else :\n        return a.upper()", "def solve(s):\n    uppercount = 0\n    for i in s:\n        if i.isupper():\n            uppercount += 1\n        if uppercount > len(s)/2:\n            s = s.upper()\n        else:\n            s = s.lower()\n    return s", "def solve(s):\n    upper = sum(1 for c in s if c.isupper())\n    lower = sum(1 for c in s if c.islower())\n    return s.lower() if lower >= upper else s.upper()", "def solve(s):\n    l = len([c for c in s if c.islower()])\n    u = len(s) - l\n    return s.upper() if u > l else s.lower()", "def solve(s):\n    n = len(s) // 2\n    up = 0\n    for i in s:\n        if i.isupper():\n            up += 1\n    if up > n:\n        return s.upper()\n    return s.lower()", "def solve(s):\n    return (s.lower(), s.upper())[len(s) > sum(map(str.islower, s)) * 2]", "from string import ascii_lowercase\n\n\ndef solve(s):\n    lowercase_counter = 0\n    uppercase_counter = 0\n    half_length = len(s) / 2\n    for letter in s:\n        if letter in ascii_lowercase:\n            lowercase_counter += 1\n            if lowercase_counter > half_length:\n                return s.lower()\n        else:\n            uppercase_counter += 1\n            if uppercase_counter > half_length:\n                return s.upper()\n    return s.lower()", "def solve(s):\n    return s.lower() if sum(map(str.islower, s)) >= sum(map(str.isupper, s)) else s.upper()", "def solve(s):\n    return s.lower() if sum(1 for a in s if a.islower()) >= sum(1 for a in s if a.isupper()) else s.upper()", "def solve(s):\n    return (s.lower(), s.upper())[sum(1 if x.isupper() else -1 for x in s) > 0]", "def solve(s):        \n    return s.upper()if len(s)/2>len([i for i in range(len(s))if s[i].islower()])else s.lower() \n", "def solve(s):\n    return s.upper()if sum(c.islower()for c in s)<len(s)/2 else s.lower()", "def solve(s):\n    bcount=0\n    i =0\n    acount =0\n    while i < len(s):\n        if s[i].isupper():\n            acount+=1\n            i+=1\n            \n           \n        elif s[i].islower():\n            bcount+=1\n            i +=1\n          \n    if bcount >= acount:\n        print(bcount)\n        return s.lower()\n    \n    if acount > bcount:\n        \n        return s.upper()\n    else:\n        return s.lower()\n    \n    \n        \n        \n", "def solve(s):\n    upper = 0\n    lower = 0\n    for i in s:\n        if i.isupper() == True:\n            upper += 1\n        else:\n            lower += 1  \n    if upper > lower:\n        s = s.upper()\n    else:\n        s = s.lower()\n    return(s)\n\n", "solve = lambda s: s.lower() if sum(c.isupper() for c in s) <= len(s)/2 else s.upper()", "def solve(s):\n    l = 0\n    h = 0\n    for i in s:\n        if ord(i) < 91:\n            h += 1\n        else:\n            l +=1\n    return s.upper() if h>l else s.lower()", "solve=lambda s: s.upper() if len([l for l in s if ord(l)>64 and ord(l)<91])>len(s)//2 else s.lower()", "solve = lambda s:getattr(s,[\"lower\",\"upper\"][sum(map(str.isupper, s))>len(s)//2])()", "def solve(s):\n    upr = 0\n    lwr = 0\n    for i in s:\n        if i.isupper():\n            upr += 1\n        else:\n            lwr += 1\n    if upr > lwr:\n        return s.upper()\n    else:\n        return s.lower()", "def solve(s): return s.lower() if (len(list(filter(lambda x: x.islower(),s)))) * 2 >= len(s) else s.upper()", "def solve(s):\n    lcase,ucase=0,0\n    for i in s:\n        if i.isupper():\n            ucase=ucase+1\n        else:\n            lcase=lcase+1\n    return s.lower() if lcase>=ucase else s.upper()\n", "def solve(s):\n    up = 0\n    down = 0\n    \n    for str in s:\n        if str.isupper()==True:\n            up = up + 1\n        else:\n            down = down + 1\n        \n    if up > down:\n        string = s.upper()\n        \n    else:\n        string = s.lower()\n    \n    return string\n          \n        \n", "def solve(s):\n    \n    up = 0\n    down = 0\n    for str in s:   \n        if str.isupper():\n            up = up + 1\n            \n        else:\n            down = down + 1\n          \n    if up > down:\n        string = s.upper()\n        \n    else:\n        string =s.lower()\n            \n    return string", "def solve(s):\n    lower_count=0\n    for i in s:\n        if i.islower():\n            lower_count += 1\n    if 2*lower_count >=len(s):\n        return s.lower()\n    return s.upper()", "import string\ndef solve(s):\n    return s.lower() if [(l in string.ascii_lowercase) for l in s].count(True)>=len(s)//2 else s.upper()", "\ndef solve(s):\n    lower=0\n    for x in s:\n        if x.islower():\n            lower +=1\n    upper=0\n    for x in s:\n        if x.isupper():\n            upper +=1\n    if lower >= upper:\n        return s.lower()\n    else:\n        return s.upper()\n\n#     lower = sum(1 for x in s if x.islower())\n#     upper = sum(1 for x in s if x.isupper())\n#     return s.lower() if lower>=upper else s.upper()\n", "def solve(s):\n    return s.upper() if sum([1 for x in s if x in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'])>len(s)/2 else s.lower()", "def solve(s):\n    lower_case = [i for i in s if i.islower()]\n    upper_case = [i for i in s if i.isupper()]\n    return s.lower() if len(lower_case) >= len(upper_case) else s.upper() ", "import string\n\ndef solve(s):\n    low, up = string.ascii_lowercase, string.ascii_uppercase\n    l_c, u_c = 0, 0\n    for c in s:\n        if c in low:\n            l_c +=1\n        else:\n            u_c += 1\n    if l_c >= u_c:\n        return s.lower()\n    elif l_c < u_c:\n        return s.upper()", "def solve(s):\n    if s.islower() or s.isupper():\n        return s\n    else:\n        if len([i for i in s if i.isupper()]) > len([i for i in s if i.islower()]):\n            return s.upper()\n        else:\n            return s.lower()", "def solve(s):\n    \n    lowercount = 0\n    uppercount = 0\n\n    for x in s:\n        for y in x:\n            if y.islower():\n                lowercount = lowercount + 1\n            if y.isupper():\n                uppercount = uppercount + 1\n            print(y)\n    \n    if lowercount >= uppercount:\n        s = s.lower()\n    if lowercount < uppercount:\n        s = s.upper()\n \n    return s\n    \n    \n    \n", "def solve(s):\n    i=j=0\n    i=len([i+1 for a in [*s] if a.isupper()])\n    j=len([j+1 for a in [*s] if a.islower()])\n    return s.lower() if i<j or i==j else s.upper()\n", "def solve(s):\n    upper = 0\n    lower = 0\n    for letter in s:\n        if letter.isupper():\n            upper += 1\n        else:\n            lower += 1\n    if upper == lower:\n        return s.lower()\n    elif upper > lower:\n        return s.upper()\n    else:\n        return s.lower()", "def solve(s):\n    upperS = 0\n    lowerS = 0\n    \n    for letter in s:\n        if letter.islower():\n            lowerS +=1\n        else:\n            upperS += 1\n    if upperS > lowerS:\n        return s.upper()\n    else:\n        return s.lower()", "def solve(s):\n    up = 0\n    for c in s:\n        if c.isupper():\n            up += 1\n    if up > len(s)/2:\n        return s.upper()\n    else:\n        return s.lower()", "def count_characters(s):\n    '''\n        Returns 0 if more lowercase, 1 if more uppercase\n    '''\n    uppercase = 0\n    lowercase = 0\n    \n    for i in range(len(s)):\n        if s[i].islower():\n            lowercase += 1\n        else:\n            uppercase += 1\n        \n    if uppercase > lowercase:\n        return 1\n    else:\n        return 0\n\ndef solve(s):\n    if count_characters(s) == 1:\n        return s.upper()\n    else:\n        return s.lower()", "def solve(s):\n    \n    s_list = list(s)\n    count_lower = 0\n    count_upper = 0\n    \n    for i in s_list:\n        if i.islower() == True:\n            count_lower += 1\n        else:\n            count_upper += 1\n    \n    if count_lower < count_upper:\n        return s.upper()\n    else:\n        return s.lower()", "def solve(s):\n    countlow = 0\n    countupp = 0\n    for letter in s:\n        if letter.isupper():\n            countupp+=1\n        elif letter.islower():\n            countlow+=1\n    \n    return s.lower() if countlow-countupp>=0 else s.upper()", "def solve(s):\n    low_cnt = 0\n    up_cnt = 0\n    temp = list(s)\n    for item in temp:\n        if(item.islower()): low_cnt += 1\n        else: up_cnt += 1\n    if(low_cnt >= up_cnt):\n        return s.lower()\n    else:\n        return s.upper()", "def solve(s):\n    upper, lower = [], []\n\n    for w in s:\n        if w.isupper():\n            upper.append(w)\n        else:\n            lower.append(w)\n\n    if len(upper) == len(lower) or len(upper) < len(lower):\n        return s.lower()\n    else:\n        return s.upper()", "def solve(s):\n    l = sum(map(lambda x: x.islower(), s))\n    u = len(s) - l\n    \n    if l >= u:\n        return(s.lower())\n    else:\n        return(s.upper())", "def solve(s):\n    \n    up, lw = 0,0\n    \n    for i in s:\n        if i.isupper():\n            up+=1\n        else:\n            lw+=1\n            \n    if lw >= up:\n        return s.lower()\n    \n    else:\n        return s.upper()", "def solve(s):\n    UpperChars = 0\n    LowerChars = 0\n\n    for i in s:\n        Checked_i = i.isupper()\n\n        if Checked_i is True:\n            UpperChars += 1\n        else:\n            LowerChars += 1\n\n    if UpperChars > LowerChars:\n        s = s.upper()\n    elif LowerChars > UpperChars or LowerChars == UpperChars:\n        s = s.lower()\n\n    return s", "def solve(s):\n    n = 0\n    for i in s:\n        n += int(i.isupper())\n    if n > len(s) // 2:\n        return s.upper()\n    else:\n        return s.lower()\n", "def solve(s):\n    num_upper = sum([1 for ch in s if ch.isupper()])\n    num_lower = sum([1 for ch in s if ch.islower()])\n    if num_upper > num_lower:\n        return s.upper()\n    return s.lower()", "def solve(s):\n    ups = 0\n    lows = 0\n    for i in s:\n        if i == i.upper():\n            ups += 1\n        else:\n            lows += 1\n    if ups == lows or lows > ups:\n        return s.lower()\n    return s.upper()", "def solve(s):\n    l = 0\n    u = 0\n    \n    for i in s:\n        if i.islower():\n            l += 1\n        else:\n            u += 1\n    if l > u:\n        return s.lower()\n    elif u > l:\n        return s.upper()\n    elif u == l:\n        return s.lower()", "solve=lambda s:[s.upper,s.lower][sum(1 if ord(c)<96 else -1 for c in s)<=0]()", "def solve(s):\n    list1 = [char for char in s]\n    \n    upperlist = [letter for letter in list1 if letter.isupper()]\n    lowerlist = [letter for letter in list1 if letter.islower()]\n    \n    if len(lowerlist) >= len(upperlist):\n        return s.lower()\n    else:\n        return s.upper()", "def solve(s):\n    upper = sum(1 for c in s if c.isupper())\n    lower = len(s) - upper\n    return s.upper() if(upper > lower) else s.lower()", "def solve(s):\n    lower_count = 0 \n    upper_count = 0\n    for char in s:\n        if char.islower():\n            lower_count += 1\n        if char.isupper():\n            upper_count += 1\n    if upper_count > lower_count:\n        return s.upper()\n    if lower_count >= upper_count:\n        return s.lower()", "def solve(s):\n    list_1=[char for char in s]\n    x=0\n    for c in [char for char in s]:\n        if c.isupper():\n            x=x+1\n    if x>len(s)/2:s=s.upper()\n    else:s=s.lower()\n    return s", "def solve(s):\n    u = 0\n    l = 0\n    for letter in s:\n        if letter.isupper():\n            u += 1\n        else:\n            l += 1\n    if l >= u:\n        return s.lower()\n    return s.upper()", "def solve(s):\n    u = 0\n    l = 0\n    for letter in s:\n        if letter.isupper():\n            u += 1\n        else:\n            l += 1\n    if l >= u:\n        return s.lower()\n    else:\n        return s.upper()\n", "def solve(s):\n    low =0\n    up = 0\n    for i in s:\n        if i.islower():\n            low+=1\n        else:\n            up+=1\n    if up > low:\n        return s.upper()\n    return s.lower()", "def solve(s):\n    \n    countU = 0\n    countL = 0\n    for x in s:\n        if x.isupper():\n            countU += 1\n        else:\n            countL +=1\n        \n    if countU > countL:\n        return s.upper()\n        \n    else:\n        return s.lower()\n", "def solve(s):\n    cup, clw = 0, 0\n    for c in s:\n        if c.isupper():\n            cup += 1\n            if cup > len(s) / 2 :\n                return s.upper()\n        else:\n            clw += 1\n            if clw > len(s) / 2:\n                return s.lower()\n    else:\n        return s.lower()", "def solve(s):\n    c=0\n    for x in s:\n        if x.isupper():\n            c=c+1\n    if c>len(s)/2:\n        return s.upper()\n    return s.lower()\n", "def solve(s):\n    case = 0\n    for char in s:\n        if char.isupper():\n            case += 1\n        else:\n            case -= 1\n    if case > 0:\n        return s.upper()\n    else:\n        return s.lower()", "def solve(s):\n    a = sum([int(c.islower()) for c in s])\n    b = sum([int(c.isupper()) for c in s])\n    if a<b:\n        return s.upper()\n    else:\n        return s.lower()\n", "def solve(s):\n    upper_count = 0\n    lower_count = 0\n    for c in s:\n        if c.isupper():\n            upper_count += 1\n        else:\n            lower_count += 1\n    return s.lower() if lower_count >= upper_count else s.upper()\n", "def solve(s):\n    res = 0\n    for i in [x for x in s]:\n        if i.isupper():\n            res += 1\n        else:\n            res -= 1\n    return s.lower() if res <= 0 else s.upper() ", "def solve(s):\n    upper = 0\n    lower = 0\n    for i in s:\n        if i.isupper():\n            upper += 1\n        else:\n            lower += 1\n    if upper == lower:\n        return s.lower()\n    elif upper > lower:\n        return s.upper()\n    else:\n        return s.lower()", "def solve(s):\n    big = 0\n    small = 0\n    \n    for x in s:\n        if 65 <= ord(x) <= 90: big += 1\n        else: small += 1\n    \n    return s.lower() if small >= big else s.upper()", "def solve(msg):\n    l = 'abcdefghijklmnopqrstuvwxyz'\n    U = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    msg = list(msg)\n    lc,Uc = 0,0\n    for i in range(len(msg)):\n        if msg[i] in l:\n            lc += 1\n        if msg[i] in U:\n            Uc += 1\n    if lc > Uc or lc == Uc:\n        return ''.join(msg).lower()\n    else:\n        return ''.join(msg).upper()\n", "def solve(s):\n    string = \"\"\n    upper = 0\n    lower = 0\n    for letters in range(len(s)):\n        if s[letters].isupper():\n            upper += 1\n        else:\n            lower += 1\n    if upper > lower:\n        string += s.upper()\n    else:\n        string += s.lower()\n    return string", "def solve(s):\n    x = list(s)\n    upper = 0\n    lower = 0\n    \n    for y in x:\n        if y.isupper() == True:\n            upper = upper + 1\n        else:\n            lower = lower + 1\n    \n    if upper > lower:\n        return s.upper()\n    else:\n        return s.lower()", "def solve(s):\n    score = 0\n    for l in list(s):\n        score += 1 if l.isupper() else -1\n    return s.upper() if score > 0 else s.lower()\n", "def solve(s):\n    sum_low = 0\n    sum_upp = 0\n    for el in s:\n        if el == el.lower():\n            sum_low +=1\n        elif el == el.upper():\n            sum_upp +=1\n    if sum_low >= sum_upp:\n        return s.lower()\n    else:\n        return s.upper()\n", "def solve(s):\n    upper_count = 0\n    lower_count = 0\n    for letter in s:\n        # Gets a count of the upper and lower case letters in the string\n        if letter.isupper():\n            upper_count += 1\n        if letter.islower():\n            lower_count += 1\n    # If there are more uppercase letters, return the string in all uppercase\n    if upper_count > lower_count:\n        return s.upper()\n    # If we reached this line then there aren't more uppercase letters\n    # So return the string in all lowercase\n    return s.lower()", "def solve(s):\n    count_lower = len([c for c in s if c.islower()])\n    count_upper = len([c for c in s if c.isupper()])\n    if count_lower < count_upper:\n        return s.upper()\n    elif count_lower >= count_upper:\n        return s.lower()\n    \n", "import string\ndef solve(s):\n    sum = 0\n    for i in range(len(s)):\n        if s[i] in string.ascii_lowercase:\n            sum+=1\n    return s.lower() if sum>= len(s)/2 else s.upper()", "def solve(s):\n    s_upper=s.upper()\n    s_lower=s.lower()\n    \n    if s==s_upper:\n        return s\n    elif s==s_lower:\n        return s\n    \n    lower_change=0\n    upper_change=0\n    for i in range(0,len(s)):\n        if s_upper[i]!=s[i]:\n            upper_change+=1\n        if s_lower[i]!=s[i]:\n            lower_change+=1\n    if upper_change<lower_change:\n        return s_upper\n    return s_lower", "def solve(s):\n    u = 0\n    l = 0\n    for x in s:\n        if x.isupper():\n            u+=1\n        else:\n            l+=1\n    if l>=u:\n        return s.lower()\n    return s.upper()", "def solve(s):\n    import string\n    lower_alphabet = list(string.ascii_lowercase)\n    upper_alphabet = list(string.ascii_uppercase)\n    count_lower = 0\n    count_upper = 0\n    for i in s:\n        if i in lower_alphabet:\n            count_lower = count_lower + 1\n        elif i in upper_alphabet:\n            count_upper = count_upper + 1   \n    if count_lower >= count_upper:\n        s = s.lower()\n    else:\n        s = s.upper()\n    return(s)", "def solve(s):\n    l=0\n    z=0\n    for b in s:\n        if b.islower():\n            l+=1\n        else:\n            z+=1\n    if l>=z:\n        return s.lower()\n    else:\n        return s.upper()", "def solve(s):\n\n    lower_count = 0\n    for i in range(len(s)):\n        if (s[i].islower()):\n            lower_count += 1\n\n    upper_count = len(s) - lower_count\n    if (lower_count < upper_count):\n\n        return s.upper()\n\n    return s.lower()\n", "def solve(s):\n    up = 0\n    low = 0\n    \n    for letter in s:\n        if letter.islower():\n            low += 1\n        else:\n            up += 1\n        \n    if low < up:\n        return s.upper()\n    else:\n        return s.lower()", "def solve(s):\n    up = ['A', 'B', 'C', 'D', 'E', 'F', 'G',\n          'H', 'I', 'J', 'K', 'L', 'M', 'N',\n          'O', 'P', 'Q', 'R', 'S', 'T', 'U',\n          'V', 'W', 'X', 'Y', 'Z']\n    \n    low = ['a', 'b', 'c', \"d\", \"e\", 'f', 'g',\n           'h', 'i', 'j', 'k', 'l', 'm', 'n',\n           'o', 'p', 'q', 'r', 's', 't', 'u',\n           'v', 'w', 'x', 'y', 'z']\n    \n    letter_up = 0\n    letter_low = 0\n    \n    for letter in s:\n        if letter in up:\n            letter_up += 1\n        elif letter in low:\n            letter_low += 1\n            \n    if letter_up > letter_low:\n        return s.upper()\n    else:\n        return s.lower()\n", "def solve(s):\n    mayus = 0\n    minus = 0\n    for i in range(len(s)): \n        if (ord(s[i]) >= 97 and ord(s[i]) <= 122): \n            minus += 1\n        elif (ord(s[i]) >= 65 and ord(s[i]) <= 90): \n            mayus += 1\n    if minus > mayus or mayus == minus:\n        return s.lower()\n    else:\n        return s.upper()\n\n\n", "def solve(s):\n    return s.lower() if sum(lttr.islower() for lttr in s) >= len(s) // 2 else s.upper()", "def solve(s):\n    a = [i for i in s if i.lower() != i]\n    return s.upper() if len(a) > len(s)/2 else s.lower()", "import string\ndef solve(s):\n    if len(s)/len(list(i for i in s if i in string.ascii_lowercase))<=2:\n        return s.lower()\n    else:\n        return s.upper()"]