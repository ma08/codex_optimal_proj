["def top3(*args):\n    return [item[0] for item in sorted(zip(*args), key=lambda x: x[1]*x[2], reverse=True)[:3]]", "import heapq\n\ndef top3(products, amounts, prices):\n    items = zip(products, amounts, prices)\n    return [product for product, _, _ in heapq.nlargest(3, items, key=lambda item: item[1] * item[2])]", "def top3(products, amounts, prices):\n    comparison={}\n    topList=[]\n    for i in range(len(products)):\n        comparison[products[i]] = amounts[i]*prices[i]\n    [topList.append(k) for k, v in sorted(comparison.items(), key=lambda x: x[1],reverse=True)]\n    return topList[:3]", "top3 = lambda x,y,z: [d[0] for d in sorted(list(zip(x,y,z)), key=lambda w: -w[1]*w[2])[:3]]", "import pandas as pd\ndef top3(products, amounts, prices):\n    df = pd.DataFrame({\n        'Product' : products,\n        'Amount' : amounts,\n        'Price' : prices})\n    df['Revenue']=df['Amount']*df['Price']\n    df.sort_values(by=['Revenue'], ascending=False,inplace=True)\n    product_sort = df['Product'].values.tolist()\n    return product_sort[0:3]", "def top3(products, amounts, prices):\n    result = {products[i]:amounts[i]*prices[i] for i in range(len(products))}\n    result = list(sorted(result.items(), key = lambda x: x[1], reverse = True))\n    return [i[0] for i in result[:3]]", "def top3(products, amounts, prices):\n    productObjects = []\n    for p in range(0, len(products)):\n        productObjects.append(Product(products[p], amounts[p], prices[p], p))\n    top3Products = sorted(productObjects, key = lambda x: x.Revenue, reverse = True)[:3]\n    if len(list(p.Revenue for p in top3Products)) != len(list(p.Revenue for p in top3Products)):\n        return [x for _,x in zip(products, names)]\n    return [p.Name for p in top3Products]\n            \nclass Product():\n    def __init__(self, name, amount, price, defaultIndex):\n        self.Name = name\n        self.Revenue = amount * price\n        self.DefaultIndex = defaultIndex", "def top3(products, amounts, prices):\n    catalog = {n:amounts[i] * prices[i] for i,n in enumerate(products)}\n    return sorted(catalog, key=catalog.get, reverse=True)[:3]", "def top3(products, amounts, prices):\n    info = {}\n    \n    for index in range(len(products)):\n        info[products[index]] = amounts[index] * prices[index]\n    \n    return sorted(info, key = lambda n: info[n], reverse = True)[:3]\n", "from operator import itemgetter\n\ndef top3(products, amounts, prices):\n    zipped = zip(products, amounts, prices)\n    revenues = list((product, amount * price) for product, amount, price in zipped)\n    revenues.sort(key = itemgetter(1), reverse=True)\n    return [product for product, revenue in revenues][:3]"]