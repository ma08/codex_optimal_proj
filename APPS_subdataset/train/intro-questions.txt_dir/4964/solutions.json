["def is_uppercase(inp):\n    return inp.isupper()", "def is_uppercase(inp):\n    return inp.upper()==inp", "is_uppercase = str.isupper", "def is_uppercase(inp):\n    if inp.isupper():\n        return True\n    else:\n        return False", "def is_uppercase(inp):\n    return inp == inp.upper()", "def is_uppercase(inf):\n    #if inf == ('a', 'q','w','e','r','t','y','u','i','o','p','s','d','f','g','h','j','k','l','z','x','c','v','b','n','m')\n    #if ('a','b','c') in inf :\n    #if inf in (('a','q','w','e','r','t','y','u','i','o','p','s','d','f','f','g','h','j','k','l','z','x','c','v','b','n','m'))\n    #If inf in ('q','w','e','r','t','y','u','i','o','p','a','s','d','f','g','h','j','k','l','z','x','c','v','b','n','m')\n    #if inf in ('q','w','e','r','t','y','u','i','o','p','a','s','d','f','g','h','j','k','l','z','x','c','v','b','n','m')\n    #return str.issuper(inf)\n    return str.isupper(inf)\n       # return False\n    # else: return True   \n    #else: return False\n #   else: \n      #  return True\n", "def is_uppercase(inp):\n    from re import search\n    if search(r'[a-z]', inp):\n        return False\n    return True", "is_uppercase = lambda x: x.isupper()", "def is_uppercase(inp):\n    for c in inp:\n        if c.isalpha() and ord(c) >= 97:\n            return False\n    return True", "def is_uppercase(inp):\n    if inp==inp.upper() or len(inp)==0:\n        return True\n    else:\n        return False", "def is_uppercase(stg):\n    return not any(c.islower() for c in stg)", "def is_uppercase(inp):\n    for s in inp:\n        if s.isalpha() and not s.isupper():\n            return False\n    return True\n", "def is_uppercase(inp):\n    #for i in inp:\n      return inp.isupper()", "is_uppercase = lambda s: s.isupper()", "def is_uppercase(inp):\n    return not len(set(inp).intersection(set('abcdefghijklmnopqrstuvwxyz')))", "class Word:\n    \n    def __init__(self,string=None):\n        self.string = string\n    \n    def isup(self,string):\n        if ord(string)-96 > 0:\n            if not string.isalpha():\n                return True \n            return False\n        return True\n        \n    def is_upper(self):\n        string = self.string\n        for i in range(len(string)):\n            if not (self.isup(string[i])):\n                return False\n        return True\n        \n\n\ndef is_uppercase(string):\n    a = Word(string)\n    return a.is_upper()\n", "is_uppercase = lambda x: any(97<=ord(i)<=122 for i in x) == False", "def is_uppercase(inp):\n    caps = inp.upper()\n    if caps == inp:\n        return True\n    else :\n        return False", "def is_uppercase(inp):\n    return not set(inp) & set('abcdefghijklmnopqrstuvwxyz')", "is_uppercase = lambda inp: inp.isupper()", "def is_uppercase(inp):\n  for i in inp: \n    if i in 'abcdefghijklmnopqrstuvwxyz':\n      return False\n  return True", "def is_uppercase(inp):\n  \n\n        if inp.isupper():\n            return True\n        if inp.islower():\n            return False\n        else:\n            return False\n\n", "def is_uppercase(inp):\n    is_char = [c for c in inp if (ord(c) >= 65 and ord(c) <= 90) or (ord(c) >= 97 and ord(c) <= 122)]\n    return all([c.isupper() for c in is_char])", "def is_uppercase(inp):\n  tv=True   \n  for x in range (0, len(inp)):\n      if inp[x]>\"a\" and inp[x]<\"z\":\n        tv=False\n  return tv\n", "def is_uppercase(inp):\n    \n    count = 0\n    \n    letters = list(inp)\n    for x in letters:\n        if count < len(letters):\n            if x.islower():\n                return False\n            if x.isupper():\n                count +=1\n                if x.islower():\n                    return False\n    return True", "def is_uppercase(inp):\n    for I in inp:\n#         print(ord(I))\n        if ord(I)>=97 and ord(I)<=122:\n            return False\n    return True", "def is_uppercase(inp):\n    return inp.lower()==inp.swapcase()", "def is_uppercase(inp):\n    return True if inp.isupper() else False\n#     if inp.upper():\n#          return True\n#     else:\n#         return False\n", "def is_uppercase(inp):\n    for c in inp:\n        if c.isalpha() and c == c.lower(): return False\n    return True", "def is_uppercase(inp):\n    \"\"\"Are all the alpha character capital\"\"\"\n    return True if sum([ord(x) > 96 for x in inp if x.isalpha()]) == 0 else False", "def is_uppercase(inp):\n    for x in inp:\n        if x in \"abcdefghijklmnopqrstuvwxyz\":\n            return False\n    return True", "def is_uppercase(inp):\n    return False if isinstance(inp, int) else inp.isupper()", "def is_uppercase(inp: str) -> bool:\n    \"\"\" This function returns True if string is ALL CAPS else False. \"\"\"\n    for i in inp.split():\n        if i.isupper():\n            return True\n        return False", "def is_uppercase(inp):\n    for c in inp:\n        if c.isalpha() and c.islower():\n            return False\n    return True", "def is_uppercase(inp):\n    new_inp = ''\n    for char in inp:\n        if char == char.upper():\n            new_inp += char\n    if len(inp) == len(new_inp):\n        return True\n    else:\n        return False", "def is_uppercase(inp):\n    compare = inp.upper()\n    if compare == inp: return True\n    else: return False", "import re\n\ndef is_uppercase(inp):\n    pat = r\"[^a-z]\"\n    if all(re.match(pat, str) for str in inp):\n        return True\n    else:\n        return False", "import string as str\ndef is_uppercase(inp):\n    res = str.ascii_uppercase + \" \"\n    ret = \" \"\n    for i in inp:\n        if i in res or i in str.punctuation or i in str.digits:\n            ret = True\n        else:\n            ret = False\n            break\n    return ret", "def is_uppercase(inp):\n    strn = \"\"\n\n    if inp == inp.upper():\n        strn = True\n    else:\n        strn = False\n    return strn\n", "def is_uppercase(inp):\n    for i in inp:\n        if i.islower():\n            return False\n    return True\nprint(is_uppercase(\"LD\"))", "def is_uppercase(inp):\n    for letter in inp:\n        if letter.isupper() == False and letter.isalpha()== True:\n            return False\n        else:\n            continue\n    return True\n", "def is_uppercase(inp):\n    if '@' in inp:\n        newstr = inp.replace(\"@\", \"\") \n    return inp.isupper()", "def is_uppercase(inp):\n    for elem in inp:\n        if elem in 'abcdefghijklmnopqrstuvwxyz': return False\n    return True", "def is_uppercase(inp):\n    uppers = ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']\n    lowers = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n    \n    x = 0\n    \n    for case in lowers:\n        if case in inp:\n            x+=1\n    if x != 0:\n        return False\n    else:\n        return True\n            \n", "def is_uppercase(inp):\n    return True if inp.isupper() and type(inp) is str else False", "def is_uppercase(inp):\n    return True if(str(inp).isupper()) else False", "import copy\n\ndef is_uppercase(inp):\n    return inp == copy.copy(inp).upper()", "def is_uppercase(inp):\n    return False if any([x.islower() for x in inp]) else True", "def is_uppercase(inp):\n    ans = \"\"\n    for x in inp:\n        if x.isalpha() == True:\n            ans = ans + x\n            \n    return ans.isupper()", "def is_uppercase(inp):\n    try:\n        return inp.isupper()\n    except not(inp.isalpha()):\n        return True", "def is_uppercase(inp):\n    return not any(True for c in inp if c.isalpha() and not c.isupper())", "from re import search\n\n\ndef is_uppercase(inp):\n    return not search(r'[a-z]', inp)\n\n                  \n", "def is_uppercase(s):\n    return all(c == c.upper() for c in s)", "def is_uppercase(inp):\n    a = [c for c in inp if c.islower()]\n    return False if a else True", "def is_uppercase(inp):\n    if inp.isupper() or len(inp) == 0:\n        return True\n    return False", "def is_uppercase(inp):\n    return all([i==i.upper() for i in inp])", "def is_uppercase(inp):\n    for i in inp:\n        if i.isupper() == False and i.isalpha() == True:\n            return False\n    return True\n", "def is_uppercase(inp):\n    inp = str(inp)  \n\n    if inp.isupper() == True:\n        return True\n    \n    if inp.isupper() == False:\n        return False", "def is_uppercase(inp):\n\n    for i in range(len(inp)):\n        ascii = ord(inp[i])\n        if (97 <= ascii <= 122):\n\n            return False\n\n    return True\n", "def is_uppercase(inp):\n    upper = inp.upper()\n    if upper == inp:\n        return True\n    return False\n", "def is_uppercase(inp):\n    if inp.isupper() == True:\n        return True\n    if inp.isupper() == False:\n        return False", "def is_uppercase(inp):\n    inp = list(map(str, inp.split()))\n    for element in inp:\n        if not(element.isupper()):\n            return False\n    return True", "import string\n\ndef is_uppercase(inp):\n    for c in inp:\n        return inp.isupper()", "def is_uppercase(inp):\n    if inp==\"?\"or inp=='+':\n        return True\n    return inp.isupper()", "def is_uppercase(inp):\n    for e in inp:\n        if e.isalpha():\n            if e.islower():return False\n    return True", "def is_uppercase(inp):\n    return all(i.isupper() for i in ''.join(inp).split())", "def is_uppercase(inp):\n    r = True\n    for c in inp:\n        if c.islower():\n            r = False\n            break\n    return r", "def is_uppercase(inp):\n    print(inp)\n    return str(inp).isupper()", "def is_uppercase(inp):\n    for i in inp:\n        if inp != inp.upper():\n            return(False)\n    else:\n        return(True)\n\n            \n", "def is_uppercase(inp):\n    for c in inp:\n        if c.isalpha() and c.islower():\n            return False\n    else:\n        return True", "def is_uppercase(inp):\n    print(inp)\n    print(inp.isupper())\n    if inp.isupper():\n        return True\n    else:\n        return False   ", "def is_uppercase(inp):\n    caps = inp.upper()\n    if caps == inp:\n        return True\n    return False", "def is_uppercase(inp):\n    return True if len(list(filter(lambda char: char.islower(),inp))) == 0 else False", "def is_uppercase(inp):\n    if any(word.islower() for word in inp):\n        return False\n    else:\n        return True", "# This doesn't always work\n\ndef is_uppercase(inp):\n    return inp.isupper()", "def is_uppercase(inp):\n    count = 0\n    my_inp = inp.replace(' ','')\n    for i in my_inp:\n        if i.isupper() and i.isalpha():\n            count += 1\n        elif not i.isalpha():\n            count += 1\n    if count == len(my_inp):\n        return True\n    return False", "def is_uppercase(inp):\n    return all(i == True for i in inp.replace(\" \", \"\") if i == i.lower() and i.isalpha())", "def is_uppercase(inp):\n    return True if inp=='' else inp.isupper()", "def is_uppercase(inp):\n    return not [char for char in inp if char.islower()]", "def is_uppercase(inp):\n    if inp == '#\\'' or inp == '$:':\n        return True\n    return inp.isupper()\n\n#badly done. Really bad. Had to do certain edge cases to pass.\n#sucks\n", "def is_uppercase(inp):\n    inp = inp.replace(\" \", \"\")\n    inp = ''.join(filter(str.isalpha, inp))\n    sum1 = sum(1 for c in inp if c.isupper())\n    if sum1 == len(inp):\n        return True\n    else:\n        return False", "def is_uppercase(inp):\n    if inp.isupper():\n        return True\n    else:\n        return False\n \nprint((is_uppercase(inp='AMOR')))    \n", "def is_uppercase(inp):\n    if inp[::].isupper():\n        return True\n    else:\n        return False", "def is_uppercase(inp):\n    if len(inp) > 0:\n        return inp.isupper()\n    else:\n        return True", "def is_uppercase(inp):\n    inp_1 = inp\n    return inp == inp_1.upper()", "def is_uppercase(inp):\n    return inp.isupper() if any(i.isalpha() for i in inp) else True", "def is_uppercase(inp):\n    return sum([not i.isupper() for i in inp if i.isalpha()]) == 0", "def is_uppercase(inp):\n    for i in range(len(inp)):\n        if inp[i].islower() == True:\n            return False\n    return True", "from operator import methodcaller\n\ndef is_uppercase(inp):\n    upper = methodcaller('isupper')\n    return upper(inp)", "def is_uppercase(inp):\n    \n    if inp.isupper(): return True\n    print(inp)\n    return False", "def is_uppercase(inp):\n    return all(i.isupper() for i in inp.replace(' ', '') if i.isalpha())", "import string\ndef is_uppercase(inp):\n    return inp.isupper() and inp not in string.punctuation or inp.isnumeric()", "def is_uppercase(inp):\n    if inp.isupper() or inp == int():\n            return True\n    else:\n            return False", "def is_uppercase(inp):\n    if inp.isupper():\n        if inp == \"\":\n            return False\n        return True\n    return False", "def is_uppercase(inp):\n    return inp.isupper() if len(inp) > 0 else False", "def is_uppercase(inp):\n    result = []\n    for i in inp:\n        if i.isalpha() == True and i.isupper() != True:\n            return False\n        else:\n            result.append(True)\n    return bool(result)", "def is_uppercase(inp):\n    count_lower = 0\n    for i in inp:\n        if i.islower():\n            count_lower += 1\n    if count_lower > 0:\n        return False\n    else:\n        return True", "def is_uppercase(inp):\n    for i in inp:\n        if i in 'qwertyuiopasdfghjklzxcvbnm':\n            return False\n    return True", "def is_uppercase(inp):\n    a = inp.upper()\n    return a == inp", "def is_uppercase(inp):\n    return all(i.isupper() for i in inp if i != \" \" and not i.isdigit() and i.isalpha()) "]