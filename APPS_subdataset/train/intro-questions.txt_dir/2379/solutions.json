["import sys\n\ninput=sys.stdin.readline\n\n#t=1\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    s=input().rstrip()\n    s=[s[-i-1] for i in range(n)]\n    ans=[]\n    zero=[]\n    one=[]\n    res=[-1]*n\n    pos=0\n    while s:\n        b=s.pop()\n        if b==\"0\":\n            if not one:\n                new=1\n                ans.append(new)\n                res[pos]=len(ans)\n                zero.append(len(ans)-1)\n            else:\n                id=one.pop()\n                ans[id]+=1\n                res[pos]=id+1\n                zero.append(id)\n        else:\n            if not zero:\n                new=1\n                ans.append(new)\n                res[pos]=len(ans)\n                one.append(len(ans)-1)\n            else:\n                id=zero.pop()\n                ans[id]+=1\n                res[pos]=id+1\n                one.append(id)\n        pos+=1\n    print(len(ans))\n    print(*res)\n", "import sys\ninput = sys.stdin.readline\nfrom collections import deque\nt = int(input())\nfor _ in range(t):\n  n = int(input())\n  a = input()\n  ls = []\n  st0 = deque()\n  st1 = deque()\n  for i in range(n):\n    if a[i] == \"0\":\n      if st1:\n        x = st1.popleft()\n        st0.append(x)\n      elif st0:\n        x = st0[-1]+1\n        st0.append(x)\n      else:\n        x = 1\n        st0.append(x)\n    else:\n      if st0:\n        x = st0.pop()\n        st1.appendleft(x)\n      elif st1:\n        x = st1[-1]+1\n        st1.append(x)\n      else:\n        x = 1\n        st1.append(x)\n    ls.append(x)\n  print(max(ls))\n  print(*ls)", "from bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nfrom heapq import heappush,heappop,heapify\nimport math\nfrom collections import *\nfrom functools import reduce,cmp_to_key\nimport sys\ninput = sys.stdin.readline\n\nfrom itertools import accumulate\n\nM = mod = 998244353\ndef factors(n):return sorted(set(reduce(list.__add__, ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0))))\ndef inv_mod(n):return pow(n, mod - 2, mod)\n \ndef li():return [int(i) for i in input().rstrip('\\n').split()]\ndef st():return input().rstrip('\\n')\ndef val():return int(input().rstrip('\\n'))\ndef li2():return [i for i in input().rstrip('\\n')]\ndef li3():return [int(i) for i in input().rstrip('\\n')]\n\n\nfor _ in range(val()):\n    n = val()\n    l = li3()\n\n    d = defaultdict(list)\n    ans = {}\n    curr = 1\n    for i in range(n):\n        if len(d[1 - l[i]]):\n            d[l[i]].append(d[1 - l[i]].pop())\n            ans[i] = d[l[i]][-1]\n        else:\n            d[l[i]].append(curr)\n            ans[i] = curr\n            curr += 1\n    print(curr - 1)\n    for i in range(n):\n        print(ans[i], end = ' ')\n    print()", "for _ in range(int(input())):\n    n = int(input())\n    s = list(input())\n    \n    result = [0] * n\n    \n    ones = []\n    zeroes = []\n    current = 1\n    \n    for i in range(n):\n        if s[i] == '0':\n            if len(zeroes) == 0:\n                ones.append(current)\n                result[i] = current\n                current += 1\n            else:\n                x = zeroes.pop()\n                result[i] = x\n                ones.append(x)\n        else:\n            if len(ones) == 0:\n                zeroes.append(current)\n                result[i] = current\n                current += 1\n            else:\n                x = ones.pop()\n                result[i] = x\n                zeroes.append(x)\n    print(current - 1)\n    print(*result)\n                \n                \n", "def solve():\n    n = int(input())\n    s = input()\n    z, o = [], []\n    c = 0\n    ans = []\n    def add(x):\n        nonlocal z, o, c, ans\n        u, v = z, o\n        if x == 0:\n            u, v = v, u\n        if u:\n            w = u.pop()\n            ans.append(w)\n            v.append(w)\n        else:\n            c += 1\n            ans.append(c)\n            v.append(c)\n    for i in s:\n        add(int(i))\n    print(c)\n    print(*ans)\n\nt = int(input())\nfor _ in range(t):\n    solve()", "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    s = list(map(int, input()))\n    \n    zeros = []\n    ones = []\n    count = 0\n    ans = []\n    \n    for d in s:\n        if d == 0:\n            if zeros:\n                ans.append(zeros[-1])\n                ones.append(zeros.pop())\n            else:\n                count += 1\n                ans.append(count)\n                ones.append(count)\n        else:\n            if ones:\n                ans.append(ones[-1])\n                zeros.append(ones.pop())\n            else:\n                count += 1\n                ans.append(count)\n                zeros.append(count)\n                \n    print(count)\n    print(*ans)\n", "#Bhargey Mehta (Junior)\n#DA-IICT, Gandhinagar\nimport sys, math\nmod = 10**9\n\ndef solve(test_index):\n    n = int(input())\n    s = input()\n    a, b = [], []\n    p = 0\n    ans = []\n    for c in s:\n        if c == '0':\n            if len(a) == 0:\n                p += 1\n                ans.append(p)\n                b.append(p)\n            else:\n                seq = a.pop()\n                ans.append(seq)\n                b.append(seq)\n        else:\n            if len(b) == 0:\n                p += 1\n                ans.append(p)\n                a.append(p)\n            else:\n                seq = b.pop()\n                ans.append(seq)\n                a.append(seq)\n    print(p)\n    print(*ans)\n    return\n\nif 'PyPy' not in sys.version:\n    sys.stdin = open('input.txt', 'r')\n\nsys.setrecursionlimit(100000)\nnum_tests = 1\nnum_tests = int(input())\nfor test in range(1, num_tests+1):\n    #print(\"Case #{}: \".format(test), end=\"\")\n    solve(test)", "\nfrom sys import stdin\nimport sys\n\ntt = int(stdin.readline())\n\nfor loop in range(tt):\n\n    n = int(stdin.readline())\n    a = stdin.readline()\n    a = a[:-1]\n\n    zero = []\n    one  = []\n    ans  = []\n\n    for i in a:\n        if i == \"0\":\n            if len(zero) == 0:\n                zero.append(len(zero)+len(one)+1)\n            ans.append(zero[-1])\n            one.append(zero[-1])\n            del zero[-1]\n        else:\n            if len(one) == 0:\n                one.append(len(zero)+len(one)+1)\n            ans.append(one[-1])\n            zero.append(one[-1])\n            del one[-1]\n\n    print(len(zero) + len(one))\n    print(*ans)\n            \n\n    \n", "mod = 10**9 + 7\ndef solve():\n    n = int(input())\n    s = input()\n    s0 = []\n    s1 = []\n    vec = []\n    sm = 0\n    for i in range(n):\n        if s[i] == '1':\n            if(len(s0) < 1):\n                sm += 1\n                s1.append(sm)\n                vec.append(sm)\n            else:\n                vec.append(s0[len(s0) - 1])\n                s1.append(s0[len(s0) - 1])\n                s0.pop()\n        else:\n            if (len(s1) < 1):\n                sm += 1\n                s0.append(sm)\n                vec.append(sm)\n            else:\n                vec.append(s1[len(s1) - 1])\n                s0.append(s1[len(s1) - 1])\n                s1.pop()\n    print(sm)\n    print(*vec, sep = ' ')\nt = 1\nt = int(input())\nfor _ in range(t):\n    solve()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    ans = [0] * n\n    max_elem = 0\n    want_indices = [[], []] #want_indices[0] means the index wants 0\n    for i, d in enumerate(map(int, s)):\n        if not want_indices[d]:\n            max_elem += 1\n            ans[i] = max_elem\n            want_indices[1 - d].append(max_elem)\n        else:\n            index = want_indices[d].pop()\n            ans[i] = index\n            want_indices[1 - d].append(index)\n    print(max_elem)\n    print(*ans, sep = ' ')\n\n", "#!/usr/bin/env pypy3\n\nfrom sys import stdin, stdout\n \ndef input():\n    return stdin.readline().strip()\n\ndef ans(S):\n\n\tnum_0 = []\n\tnum_1 = []\n\n\tret = []\n\n\tfor c in S:\n\t\tif c == '0':\n\t\t\tif len(num_1) == 0:\n\t\t\t\t# create new\n\t\t\t\tnum_0 += [(len(num_0) + len(num_1))]\n\t\t\telse:\n\t\t\t\tnum_0 += [num_1.pop()]\n\n\t\t\tret += [num_0[-1] + 1]\n\n\n\t\telse:\n\t\t\tassert(c == '1')\n\n\t\t\tif len(num_0) == 0:\n\t\t\t\t# create new\n\t\t\t\tnum_1 += [(len(num_0) + len(num_1))]\n\t\t\telse:\n\t\t\t\tnum_1 += [num_0.pop()]\n\n\t\t\tret += [num_1[-1] + 1]\n\n\n\treturn len(num_0) + len(num_1), ret\n\n\n\treturn S\n\nT = int(input())\nfor t in range(T):\n\tinput()\n\tS = input()\n\t\n\tp, q = ans(S)\n\tprint(p)\n\tprint(*q)\n", "for _ in range(int(input())):\n    n = int(input())\n    a = list(input())\n    n1 = []\n    n0 = []\n    ans = []\n    c1 = 0\n    c0 = 0\n    curr = 1\n    for i in a:\n        if i == '1':\n            if c0>0:\n                c1 += 1\n                c0 -= 1\n                ans.append(n0[-1])\n                n1.append(n0[-1])\n                n0.pop()\n            else:\n                c1 += 1\n                ans.append(curr)\n                n1.append(curr)\n                curr += 1\n        else:\n            if c1>0:\n                c0 += 1\n                c1 -= 1\n                ans.append(n1[-1])\n                n0.append(n1[-1])\n                n1.pop()\n            else:\n                c0 += 1\n                ans.append(curr)\n                n0.append(curr)\n                curr += 1\n    print(c1+c0)\n    print(*ans)", "# import sys; input = sys.stdin.buffer.readline\n# sys.setrecursionlimit(10**7)\nfrom collections import defaultdict\ncon = 10 ** 9 + 7; INF = float(\"inf\")\n\ndef getlist():\n\treturn list(map(int, input().split()))\n\n#\u51e6\u7406\u5185\u5bb9\ndef main():\n\tT = int(input())\n\tfor _ in range(T):\n\t\tN = int(input())\n\t\ts = list(map(int, list(input())))\n\t\tans = [None] * N\n\t\tzeroend = []\n\t\toneend = []\n\t\tzero_len = 0\n\t\tone_len = 0\n\t\tval = 0\n\t\tfor i in range(N):\n\t\t\tif s[i] == 0:\n\t\t\t\tif one_len == 0:\n\t\t\t\t\tval += 1\n\t\t\t\t\tans[i] = val\n\t\t\t\t\tzeroend.append(val)\n\t\t\t\t\tzero_len += 1\n\t\t\t\telse:\n\t\t\t\t\titr = oneend.pop()\n\t\t\t\t\tans[i] = itr\n\t\t\t\t\tone_len -= 1\n\t\t\t\t\tzeroend.append(itr)\n\t\t\t\t\tzero_len += 1\n\t\t\telse:\n\t\t\t\tif zero_len == 0:\n\t\t\t\t\tval += 1\n\t\t\t\t\tans[i] = val\n\t\t\t\t\toneend.append(val)\n\t\t\t\t\tone_len += 1\n\t\t\t\telse:\n\t\t\t\t\titr = zeroend.pop()\n\t\t\t\t\tans[i] = itr\n\t\t\t\t\tzero_len -= 1\n\t\t\t\t\toneend.append(itr)\n\t\t\t\t\tone_len += 1\n\n\t\tprint(val)\n\t\tprint(*ans)\n\ndef __starting_point():\n\tmain()\n__starting_point()"]