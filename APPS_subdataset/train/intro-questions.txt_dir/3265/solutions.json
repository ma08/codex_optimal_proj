["def mult_triangle(n):\n    total = (n * (n + 1) / 2)**2\n    odds = ((n + 1) // 2)**4\n    return [total, total - odds, odds]\n", "def mult_triangle(n):\n    k = n * (n + 1) // 2\n    p = ((n + 1) // 2)**4\n    return [k*k, k*k - p, p]", "def get_totals_for_row(n):\n    total = n**3\n    if n % 2 == 0:\n        return [total, total, 0]\n    else:\n        even_total = n * (n**2 // 2)\n        odd_total = total - even_total\n        return [total, even_total, odd_total]\n\ndef mult_triangle(n):\n    total = 0\n    even_total = 0\n    odd_total = 0\n    for level in range(1, n+1):\n        t, e, o = get_totals_for_row(level)\n        total += t\n        even_total += e\n        odd_total += o\n    return [total, even_total, odd_total]\n\n#  Slow approach (1st attempt!)\n# def make_row(n):\n#     row = range(1,n+1) + range(n-1, 0, -1)\n#     return [n * element for element in row]\n\n\n# def mult_triangle(n):\n#     odd_total = 0\n#     even_total = 0\n#     for level in range(1, n+1):\n#         for element in make_row(level):        \n#             if element % 2 == 0:\n#                 even_total += element\n#             else:\n#                 odd_total += element\n#     return [odd_total + even_total, even_total, odd_total]\n", "from math import ceil\ndef mult_triangle(n):\n    s = (n*(n+1)/2)**2\n    odd = ceil(n/2)**4\n    return [s,s-odd,odd] #lol", "def mult_triangle(n):\n    total = (n * (n+1) // 2) ** 2\n    odd = ((n + 1) // 2) ** 4\n    return [total, total - odd, odd]", "def mult_triangle(n):\n    total = (n * (n + 1) // 2) ** 2\n    odd = ((n + 1) // 2) ** 4\n    even = total - odd\n    return [total, even, odd]", "def mult_triangle(n):\n    even,sum,i=0,0,1\n    while i<=n:\n      sum+=i*i*i\n      even+=i*(i-1)*(i+1)/2 if i%2 else i*i*i\n      i+=1\n    return [sum,even,sum-even]", "def mult_triangle(n):\n    n2 = n - 1 | 1\n    total_sum = ((n+1) * n // 2)**2\n    total_odd_sum = ((n2+1) * (n2+1) // 4)**2\n    return [total_sum, total_sum - total_odd_sum, total_odd_sum]", "def mult_triangle(n):\n  s = n*(n + 1)//2\n  s *= s\n  d = (n + 1)//2\n  d *= d\n  return [s, s - d*d, d*d]", "def mult_triangle(n):\n    c,o=0,0\n    for i in range(1,n+1): \n      v=i**2\n      c+=i*v\n      if i&1: o+=i*(v+1>>1)\n    return [c,c-o,o]"]