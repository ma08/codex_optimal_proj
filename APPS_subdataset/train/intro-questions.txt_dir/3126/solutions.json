["def palindrome_rearranging(s):\n    return sum(s.count(c) % 2 for c in set(s)) < 2", "from collections import Counter\n\ndef palindrome_rearranging(s):\n    return sum(n % 2 for n in Counter(s).values()) <= 1", "def palindrome_rearranging(s):\n    d = {}\n    c = 0\n    for x in s:\n        if x not in d:\n            d[x] = 1\n        else:\n            d[x] += 1\n    for k, v in d.items():\n        if v % 2 != 0:\n            c += 1\n    return c <= 1", "from collections import Counter\n\ndef palindrome_rearranging(s):\n    return sum(v%2 for v in Counter(s).values()) < 2", "from collections import Counter\npalindrome_rearranging=lambda s:len(list(filter(lambda x:x&1,Counter(s).values())))<2", "def palindrome_rearranging(s):\n    odd =0\n    for char in set(s):\n        if s.count(char)%2 != 0:\n            odd+=1\n    if odd>1:\n        return False\n    else:\n        return True", "def palindrome_rearranging(s):\n    return [s.count(i)%2 for i in set(s)].count(1) == len(s)%2", "def palindrome_rearranging(s):\n    for c in s:\n        if s.count(c) > 1:\n            s = s.replace(c, \"\", 2)\n    return len(s) < 2\n", "def palindrome_rearranging(s):\n    return sum(s.count(char) % 2 for char in set(s)) <= 1\n", "from collections import Counter\ndef palindrome_rearranging(s):\n    return len([v for v in Counter(s).values() if v%2]) < 2"]