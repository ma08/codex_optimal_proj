["from collections import Counter\n\ndef added_char(s1, s2):  \n    return next((Counter(s2) - Counter(s1)).elements())", "def added_char(s1, s2):  \n  for i in s2:\n      if s1.count(i) != s2.count(i):\n          return i", "from functools import reduce\nfrom operator import xor\n\ndef added_char(s1, s2):  \n    return chr(reduce(xor, map(ord, s1), 0) ^ reduce(xor, map(ord, s2), 0))", "from collections import Counter\ndef added_char(s1, s2):     \n    return list(Counter(s2) - Counter(s1))[0]", "from collections import Counter\ndef added_char(s1, s2):\n    return (Counter(s2)-Counter(s1)).popitem()[0]", "# Average runtime: ?? ms\n\ndef added_char(s1, s2):  \n  s2 = list(s2)\n  [s2.remove(i) for i in s1]\n  return s2[0]", "from collections import Counter\n\ndef added_char(*args):\n    c1,c2 = map(Counter, args)\n    return (c2-c1).popitem()[0]", "added_char=lambda s1,s2:next(i for i in s2 if s1.count(i)!=s2.count(i))", "# Average runtime: ?? ms\n\ndef added_char(s1, s2):  \n  return chr(int((sum(ord(x) for x in s2) - sum(ord(x) for x in s1))/3))"]