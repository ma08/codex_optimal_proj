["def reverse_fizzbuzz(s):\n    if s == 'Fizz': return [3]\n    if s == 'Buzz': return [5]\n    if s == 'Fizz Buzz': return [9, 10]\n    if s == 'Buzz Fizz': return [5, 6]\n    if s == 'FizzBuzz': return [15]\n    s = s.split()\n    for i in range(len(s)):\n        if s[i].isdigit():\n            start = int(s[i]) - i\n            return list(range(start, start + len(s)))", "def reverse_fizzbuzz(string):\n    s = string.split()\n    lst = [0] * len(s)\n    for indx, i in enumerate(s):\n        if i.isdigit():\n            lst[indx] = int(i)\n            return list(range(lst[indx] - indx, lst[indx] + len(s) - indx))\n    return {'Fizz': [3], 'Buzz': [5], 'FizzBuzz': [15], 'Buzz Fizz': [5, 6], 'Fizz Buzz': [9, 10]}[string]", "def reverse_fizzbuzz(s):\n    arr = s.split(' ')\n    if len(arr) == 1 and not arr[0].isdigit():\n        return [3] if arr[0] == 'Fizz' else [5] if arr[0] =='Buzz' else [15] \n    def find_first_num(arr):\n        for i in range(len(arr)):\n            if arr[i].isdigit():\n                return [int(i)*(-1), int(arr[i])]\n        if arr[0] == 'Buzz':\n            return [0,5]\n        return [0, 9]\n    nu = find_first_num(arr)\n    return [nu[0] + nu[1] + x for x in range(len(arr))]", "def reverse_fizzbuzz(s):\n    s = s.split()\n    d =  next((i for i,j in enumerate(s) if j.isdigit()),-1)\n    if d!=-1:return list(range(int(s[d])-len(s[:d]),int(s[d])+len(s[d:])))\n    else:\n        if s in [['Fizz'],['Buzz']]:return [[3],[5]][s==['Buzz']]\n        if s==['FizzBuzz']:return [15]\n        if s==['Fizz','Buzz']:return [9,10]\n        return [5,6]", "def reverse_fizzbuzz(fizzbuzz_section):\n    fizzbuzz_section_elements = fizzbuzz_section.split()\n    n = len(fizzbuzz_section_elements)\n    \n    for index in range(0, n):\n        if fizzbuzz_section_elements[index].isdigit():\n            start = int(fizzbuzz_section_elements[index]) - index\n            return list(range(start, n + start))\n    \n    fizzbuzz = {\n        'Fizz': [3], \n        'Buzz': [5], \n        'FizzBuzz': [15], \n        'Fizz Buzz': [9, 10], \n        'Buzz Fizz': [5, 6]\n    }\n    \n    return fizzbuzz[fizzbuzz_section]", "def reverse_fizzbuzz(string, start=0):\n    def fb_gen(start= 1):\n        while True:\n            if not(start%5 or start%3): yield (start, 'FizzBuzz')\n            elif not(start%3): yield (start, 'Fizz')\n            elif not(start%5): yield (start, 'Buzz')\n            else: yield (start, start)\n            start += 1\n    \n    str_split = string.split()\n    for i, v in enumerate(str_split):\n        if v.isdigit(): return list(range(int(v)-i, len(str_split) + int(v)-i))\n\n    gen, index_check  = fb_gen(), 0\n    for ind, val in gen:\n        if str_split[index_check] == val:\n            if index_check == len(str_split) - 1:\n                return list(range(ind - len(str_split) + 1, ind + 1))\n            index_check += 1\n        else:\n            index_check = 0", "\ndef reverse_fizzbuzz(string):\n    dic = {'Fizz':3, 'Buzz':5, 'FizzBuzz':15, 'Buzz Fizz':5, 'Fizz Buzz':9} # if only strings, those are the starting positions\n    split = string.split()     \n    \n    # if contains number, find fist and return which number is first in original fizzbuzz string\n    # if there is no number, must be one of the situation in dic, which will give starting number for each of those\n    start = next((int(y)-x for x,y in enumerate(split) if y.isdigit()), dic.get(string)) \n    return list(range(start, start + len(split)))", "def reverse_fizzbuzz(s):\n    no_int = {\"Fizz\": 3, \"Buzz\": 5, \"Buzz Fizz\": 5, \"Fizz Buzz\": 9, \"FizzBuzz\": 15}\n    lst = s.split(\" \")\n    start = next((int(item) - i for i, item in enumerate(lst) if item.isdecimal()), no_int.get(s))\n    return list(range(start, start + len(lst)))\n", "def reverse_fizzbuzz(string):\n    arr = string.split()\n    return list(map(lambda di: list(range(int(arr[di]) - di, int(arr[di]) - di + len(arr))), [next((k for k, v in enumerate(arr) if v.isdigit()), -1)]))[0] if any(a.isdigit() for a in arr) else [3] if string == 'Fizz' else [5] if string == 'Buzz' else [5, 6] if string == 'Buzz Fizz' else [9, 10] if string == 'Fizz Buzz' else [15] "]