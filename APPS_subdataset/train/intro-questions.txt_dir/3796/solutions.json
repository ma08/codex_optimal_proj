["from itertools import zip_longest\n\ndef or_arrays(a1, a2, d=0):\n    return [x|y for x,y in zip_longest(a1, a2, fillvalue=d)]", "def or_arrays(a, b, d=0):\n    return [(a[i] if i<len(a) else d)|(b[i] if i<len(b) else d) for i in range(max(len(a), len(b)))]", "from itertools import zip_longest\n\ndef or_arrays(arr1, arr2, fill=0):\n    return [a | b for a, b in zip_longest(arr1, arr2, fillvalue=fill)]", "def or_arrays(arr1, arr2, n = 0):\n    \n    result = []\n    \n    for i in range(max(len(arr1), len(arr2))):\n        \n        a = b = n;\n        \n        if i < len(arr1):\n            a = arr1[i]\n        \n        if i < len(arr2):\n            b = arr2[i]\n  \n        result.append(b|a);\n      \n    return result", "import itertools\n\ndef or_arrays(arr1, arr2, arg=0):\n    return [i | j for i, j in itertools.zip_longest(arr1, arr2, fillvalue=arg)]", "from itertools import zip_longest\n\ndef or_arrays(arr1, arr2, default=0):\n    return [a | b for a, b in zip_longest(arr1, arr2, fillvalue=default)]", "from itertools import zip_longest\n\ndef or_arrays(a, b, filler=0):\n    return [ x | y for x, y in zip_longest(a, b, fillvalue=filler)]\n", "def or_arrays(arr1, arr2, o = 0):\n    xs = []\n    i = 0\n    while i < len(arr1) and i < len(arr2):\n        xs.append(arr1[i] | arr2[i])\n        i += 1\n    while i < len(arr1):\n        xs.append(arr1[i] | o)\n        i += 1\n    while i < len(arr2):\n        xs.append(arr2[i] | o)\n        i += 1\n    return xs", "def or_arrays(a, b, filler=0):\n    al, bl = len(a), len(b)\n    return list([v[0] | v[1] for v in zip(a + [filler] * (max(al, bl) - al), b + [filler] * (max(al, bl) - bl))])\n", "or_arrays=lambda a1, a2, d=0: [(a1[i] if i<len(a1) else d)|(a2[i] if i<len(a2) else d) for i in range(max(len(a1),len(a2)))]", "def or_arrays(arr1, arr2, default = 0):\n    if len(arr1) < len(arr2):\n        arr1 += [default]* (len(arr2) - len(arr1))\n    if len(arr2) < len(arr1):\n        arr2 += [default]* (len(arr1) - len(arr2))\n    return [x|y for x,y in zip(arr1,arr2)]", "def or_arrays(x,y,z=0,m=max,l=len):\n    return [(a|b) for a,b in zip((x+[z]*(m(l(x),l(y))-l(x))), (y+[z]*(m(l(x),l(y))-l(y))))]", "def or_arrays(x,y,z=0):\n    m = max(len(x), len(y))\n    return [(a|b) for a,b in zip((x+[z]*m)[:m], (y+[z]*m)[:m])]", "def or_arrays(x,y,mod=0):\n    m = maxLen = max(len(x), len(y))\n    return [(a|b) for a,b in zip((x+[mod]*m)[:m], (y+[mod]*m)[:m])]", "def ind(arr, i, default):\n    return default if len(arr) - 1 < i else arr[i]\n\ndef or_arrays(arr1, arr2, default=0):\n    return [ind(arr1, i, default) | ind(arr2, i, default) for i in range(max(len(arr1), len(arr2)))]", "from itertools import zip_longest\n\ndef or_arrays(*args):\n    p, q, *c = args\n    return [a | b  for a, b in zip_longest(p, q, fillvalue=c[0] if c else 0)]", "from itertools import starmap, zip_longest\nor_arrays = lambda a1, a2, f=0: list(starmap(int.__or__, zip_longest(a1, a2, fillvalue=f)))", "def or_arrays(arr1, arr2,n=0):\n    res=[]\n    i=0\n    while i<len(arr1) and i<len(arr2):\n        res.append(arr1[i] | arr2[i])\n        i+=1\n    while i<len(arr1):\n        res.append(arr1[i] | n)\n        i+=1\n    while i<len(arr2):\n        res.append(arr2[i] | n)\n        i+=1\n    return res", "def or_arrays(arr1, arr2, p=0):\n    if len(arr2)>len(arr1):\n        arr2,arr1=arr1,arr2\n        \n    arr2 += [p]*(len(arr1)-len(arr2))\n             \n    return [arr1[i] | arr2[i] for i in range(len(arr1))]", "def or_arrays(arr1, arr2, d=0):\n    a, b = sorted([arr1, arr2], key=len)\n    a = a + (len(b)-len(a))*[d]\n    return [x|y for x,y in zip(a,b)]"]