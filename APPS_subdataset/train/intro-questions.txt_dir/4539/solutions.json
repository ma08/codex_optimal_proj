["def hop_across(lst):\n    def one_side(lst):\n        i = 0\n        steps = 0\n        while i < len(lst):\n            i += lst[i]\n            steps += 1\n        return steps\n    return one_side(lst) + one_side(lst[::-1])", "def hop_across(lst): return dist(lst)+dist(lst[::-1])\n\ndef dist(lst):\n    s,i=0,0\n    while i<len(lst): i+=lst[i]; s+=1\n    return s", "def hop_there(lst):\n    pos = 0\n    hops = 0\n    while pos < len(lst):\n        pos += lst[pos]\n        hops += 1\n    return hops\n    \ndef hop_across(lst):\n    return hop_there(lst) + hop_there(list(reversed(lst)))", "def hop_across(lst, rev = True):\n    h,i = 0,0\n    while i < len(lst):\n        i += lst[i]\n        h += 1\n    if rev:\n        h += hop_across(lst[::-1], False)\n    return h", "def hop_across(lst):\n  i=0\n  r=0\n  while i<len(lst):\n    i+=lst[i]\n    r+=1\n  i=len(lst)-1\n  while i>=0:\n    i-=lst[i]\n    r+=1\n  return r", "def hop_across(lst):\n    c=0\n    t=lst[:]\n    while t:\n        t=t[t[0]:]\n        c+=1\n    t=lst[::-1]\n    while t:\n        t=t[t[0]:]\n        c+=1\n    return c", "def hop_across(lst):\n    count = 0\n    i = 0\n    while i <= len(lst)-1:\n        i += lst[i]\n        count += 1\n    i = len(lst)-1\n    while i >= 0:\n        i -= lst[i]\n        count += 1\n    return count\n", "def hop_across(lst):\n    def steps(l):\n        i,c=0,0\n        while i<len(l):\n            c+=1\n            i+=l[i]\n        return c\n    return steps(lst)+steps(lst[::-1])", "def hop_across(lst):\n    r=0\n    i=0\n    while(i<len(lst)):\n        r+=1\n        i+=lst[i]\n    i=0\n    while(i<len(lst)):\n        r+=1\n        i+=lst[::-1][i]\n    return r", "def hop_across(lst):\n    going = 0\n    coming = 0\n    output = 0\n    while going < len(lst):\n        output += 1\n        going += lst[going]\n    lst = lst[::-1]\n    while coming < len(lst):\n        output += 1\n        coming += lst[coming]\n    return output"]