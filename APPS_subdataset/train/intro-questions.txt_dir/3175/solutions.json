["def triple_double(num1, num2):\n    return any([i * 3 in str(num1) and i * 2 in str(num2) for i in '0123456789'])", "def triple_double(num1, num2):\n    for x in range(10):\n        if str(x) * 3 in str(num1):\n            if str(x) * 2 in str(num2):\n                return 1\n    return 0", "def triple_double(num1, num2):\n    num1, num2 = str(num1), str(num2)\n    for num in '0123456789':\n        if num * 3 in num1 and num * 2 in num2:\n            return 1\n    return 0", "def triple_double(num1, num2):\n    for i in range(10):\n        if str(i) * 3 in str(num1):\n            if str(i) * 2 in str(num2):\n                return 1\n            else:\n                return 0\n    return 0", "import re\ndef triple_double(num1, num2):\n    str = \"{0}|{1}\".format(num1,num2)\n    regex = re.compile(r'(\\d)(\\1){2}.*\\|.*(\\1){2}')\n    match = regex.search(str)\n    return True if match else False", "def triple_double(num1, num2):\n    num1 = str(num1)\n    num2 = str(num2)\n    nums = ['1','0','2','3','4','5','6','7','8','9','0']\n    for i in nums:\n        if i * 3 in num1 and i * 2 in num2:\n            return 1\n    return 0", "import re\n\ndef triple_double(*args):\n    return bool(re.search(r'(\\d)(\\1){2}.*\\ .*(\\1){2}', '%s %s' % args))", "def triple_double(num1, num2):\n    DECIMAL_BASE = 10\n    tripples = []\n    previous, previous_previous = None, None\n\n    while num1:\n        (num1, rem) = divmod(num1, DECIMAL_BASE)\n        if rem == previous and previous == previous_previous:\n            tripples.append(rem)\n        previous_previous = previous\n        previous = rem\n    \n    while num2:\n        (num2, rem) = divmod(num2, DECIMAL_BASE)\n        if rem == previous and rem in tripples:\n            return 1\n        previous = rem\n    return 0", "import re\n\ndef triple_double(num1, num2):\n    triples = re.findall(r'(\\d)\\1{2}', str(num1))\n    doubles = re.findall(r'(\\d)\\1{1}', str(num2))\n    return len(set(triples) & set(doubles))", "import re\ndef triple_double(num1, num2):\n    #code me ^^\n    r3 = re.compile(r'(\\d)\\1\\1')\n    f = r3.findall(str(num1))\n    if len(f)>0: \n        r2 = re.compile(f[0]+'{2}')\n        if len(r2.findall(str(num2))):\n            return 1\n    return 0"]