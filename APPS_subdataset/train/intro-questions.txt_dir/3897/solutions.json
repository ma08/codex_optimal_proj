["def solve(count, ball_number):\n    \"\"\"\n    Return the position of the `ball_number` after the game with `count` balls\n\n    :param count: Number of balls\n    :type count: int\n    :param ball_number: Number of ball to be found in the end\n    :type ball_number: int\n    :return: Return the index of the ball `ball_number` at the end of the game\n    :rtype: int\n    \"\"\"\n    assert isinstance(count, int)\n    assert isinstance(ball_number, int)\n\n    balls = list(range(count))\n    for idx in range(count):\n        balls = balls[:idx] + balls[idx:][::-1]\n    return balls.index(ball_number)\n", "solve=lambda n,k:2*(n-k-1,k+.5)[k<n//2]", "def solve(n, k):\n    res = list(range(n))\n    for i in range(n):\n        res = res[:i] + res[i:][::-1]\n    return res.index(k)", "def solve(n,k):\n    arr = list(range(n))\n    for i in range(n):\n        arr = arr[:i]+arr[i:][::-1]\n    return arr.index(k)", "def solve(n, k):\n    second_half = k >= n // 2\n    return (-1)**second_half * 2 * k + second_half * (n * 2 - 3) + 1", "def solve(n,k):\n    arr = []\n    for i in range(n%2 + n//2):\n        arr += [n - i - 1] + [i]\n    return arr.index(k)", "def solve(n,k):\n    a  = list()\n    for i in range(int(n/2)+1):\n        a += [n-1-i,i]\n    return a.index(k)", "def solve(n,k):\n    return 2*k+1 if k <= n//2-1 else 2*(n-k-1)\n", "def solve(n,k):\n    list1=list(range(n))\n    list1_values=list(list1)\n    ball=list1[k]\n    #print(list1_values)\n    counter=0\n    final_list=[]\n    for i in range(n):\n\n        list1.reverse()\n        final_list.append(list1.pop(0))\n    position=final_list.index(ball)\n    return position", "def solve(n,\n          k):\n\n    result = {}\n    index, start, end = 0, 0, n - 1\n    while (start <= end):\n        result[end] = index\n        index += 1\n        if (start != end):\n            result[start] = index\n\n        index += 1\n        start += 1\n        end -= 1\n\n    return result[k]\n"]