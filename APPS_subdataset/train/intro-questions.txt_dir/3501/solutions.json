["from math import factorial as f\nnumber_of_routes=lambda m,n:f(m+n)//(f(m)*f(n))", "import sys\n\nsys.setrecursionlimit(1200)\n\ncache = {}\n\ndef number_of_routes(m, n):\n    if m == 0 or n == 0: return 1\n    if m > n: return number_of_routes(n, m)\n    result = cache.get((m,n))\n    if result is None:\n        cache[m,n] = result = number_of_routes(m-1, n) + number_of_routes(m, n-1)\n    return result", "from operator import mul\nfrom functools import reduce\n\ndef choose(n, p):\n    if (p > n): return 0\n    if (p > n - p): p = n - p\n    return reduce(mul, range((n-p+1), n+1), 1) // reduce( mul, range(1,p+1), 1)\ndef number_of_routes(m, n):\n    return choose(m + n, n)"]