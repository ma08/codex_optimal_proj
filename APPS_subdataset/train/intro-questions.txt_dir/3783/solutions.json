["def frame(text, char):\n    text_lens = [len(x) for x in text]\n    longest_len = max(text_lens)\n    frame_list = [char*(longest_len + 4)]\n    for str in text:\n         frame_list.append(\"{} {}{} {}\".format(char, str, \" \" * (longest_len - len(str)), char)) \n    frame_list.append(char*(longest_len + 4))\n    return \"\\n\".join(frame_list)", "def frame(text, char):\n    n = len(max(text, key=len)) + 4\n    return \"\\n\".join( [char * n] +\n                      [\"%s %s %s\" % (char, line.ljust(n-4), char) for line in text] +\n                      [char * n] )", "def frame(lines, char):\n    l = len(max(lines, key=len))\n    row = char * (l + 4)\n    body = \"\\n\".join(f\"{char} {line:<{l}s} {char}\" for line in lines)\n    return f\"{row}\\n{body}\\n{row}\"", "def frame(text, char):\n    length = len(max(text, key=len))\n    start = end = char*(length+3)\n    k = [' '+x+(' '*(length-len(x)+1)) for x in text]\n    return (char+'\\n'+char).join([start]+k+[end])", "from itertools import chain\n\ndef frame(words, char):\n    size = max(map(len, words))\n    frame = [char*(size+4)]\n    middle = (f\"{char} {word: <{size}} {char}\" for word in words)\n    return '\\n'.join(chain(frame, middle, frame))", "def frame(t, c):\n    m = len(max(t,key=len))\n    return c*(m+4) + '\\n' + \"\\n\".join([f'{c} {i:<{m}} {c}' for i in t]) + '\\n' + c*(m+4)", "def frame(text, char):\n    width = max([len(x) for x in text]) + 4\n    a = '\\n'.join([char + ' ' + x + ' ' * (width-len(x)-3) + char for x in text])\n    return f'{char*width}\\n{a}\\n{char*width}'", "def frame(text, c):\n    mx = max(len(w) for w in text)\n    return '\\n'.join([c * (mx + 4)] + [c + ' ' + w.ljust(mx) + ' ' + c for w in text] +  [c * (mx + 4)])", "def frame(text, char):\n    \"\"\"\n        First this function will find the length of the top/bottom frames\n        Next it creates the word frames\n        Then it constructs the full frame\n    \"\"\"\n    max_length = max([len(word) for word in text])\n    frame_words = [char + \" \" + word + ((max_length - len(word) + 1) * \" \") + char for word in text]\n    frame = char * (max_length + 4) + \"\\n\"\n    for line in frame_words:\n        frame = frame + line + \"\\n\"\n    return frame + char * (max_length + 4)", "def frame(text, char):\n    w = max(map(len, text))\n    def f():\n        yield char * (w + 4)\n        for line in text:\n            yield f'{char} {line:<{w}} {char}'\n        yield char * (w + 4)\n    return '\\n'.join(f())"]