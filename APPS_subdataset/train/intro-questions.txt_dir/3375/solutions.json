["def going(n):  \n    s = 1.0\n    for i in range(2, n + 1):\n        s = s/i + 1\n    return int(s * 1e6) / 1e6", "def going(n):\n    factor = 1.0\n    acc = 1.0\n    for i in range(n, 1, -1):\n        factor *= 1.0 / i\n        acc += factor\n    return int(acc * 1e6) / 1e6", "def going(n):\n    a = 1.\n    for i in range(2, n+1):\n        a/=i\n        a+=1\n    return float(str(a)[:8])", "from itertools import accumulate as acc\nfrom math import floor\n\ndef going(n):\n    return floor(1e6*(1 + sum(1/x for x in acc(range(n, 1, -1), lambda a, b: a*b))))/1e6", "import math\nfrom functools import reduce\ndef going(n):\n    return math.floor(reduce(lambda r, i: r / float(i) + 1, range(1, n + 1), 0) * 1e6) / 1e6\n    #return round(reduce(lambda r, i: r / float(i) + 1, xrange(1, n + 1), 0), 6)\n", "# truncate to 6 decimals\ndef trunc(n):\n    return float(str(n)[:8])\n\ndef going(n):\n    sum = 1\n    fact = 1.0\n    for i in range(1,n):\n        fact = fact/(n-i+1)\n        sum += fact\n    return trunc(sum)", "from math import factorial, trunc\ndef going(n):\n    sum, past = 1, 1\n    for k in range(n, 1, -1):\n        past *= 1/k\n        sum += past\n    return (trunc(sum*10**6))/(10**6)"]