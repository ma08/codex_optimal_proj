["class Solution:\n     def isAnagram(self, s, t):\n         \"\"\"\n         :type s: str\n         :type t: str\n         :rtype: bool\n         \"\"\"\n         # dic = {}\n         # for item in s:\n         #     if item not in dic:\n         #         dic[item] = 1\n         #     else:\n         #         dic[item] += 1\n         # for i in t:\n         #     if i not in dic:\n         #         return False\n         #     else:\n         #         dic[i] -= 1\n         # return all(value == 0 for value in dic.values())\n         \n         # fastest way till now with reference to the others' submissions\n         if len(s) != len(t):\n             return False\n         if s == t:\n             return True\n         for i in map(chr, range(97, 123)):\n             if s.count(i) != t.count(i):\n                 return False\n         return True", "class Solution:\n     def isAnagram(self, s, t):\n         \"\"\"\n         :type s: str\n         :type t: str\n         :rtype: bool\n         \"\"\"\n         if len(s)!=len(t):\n             return False\n         ssort=sorted(list(s))\n         tsort=sorted(list(t))\n         return ssort==tsort\n", "class Solution:\n     def isAnagram(self, s, t):\n         \"\"\"\n         :type s: str\n         :type t: str\n         :rtype: bool\n         \"\"\"\n         if len(s) != len(t):\n             return False\n         \n         s_list = list(s)\n         t_list = list(t)\n         \n         s_list.sort()\n         t_list.sort()\n         \n         if s_list == t_list:\n             return True\n         \n         return False", "class Solution:\n     def isAnagram(self, s, t):\n         \"\"\"\n         :type s: str\n         :type t: str\n         :rtype: bool\n         \"\"\"\n         def cnt(S):\n             c={}\n             for i in S:\n                 if i in c:\n                     c[i] += 1\n                 else:\n                     c[i] = 1\n             return c\n         c1 = cnt(s)\n         c2 = cnt(t)\n         return c2 == c1", "class Solution:\n     def isAnagram(self, s, t):\n         \"\"\"\n         :type s: str\n         :type t: str\n         :rtype: bool\n         \"\"\"\n         memoS, memoT = {}, {}\n         \n         for c in s:\n             if c not in memoS:\n                 memoS[c] = 0\n             memoS[c] += 1\n         for c in t:\n             if c not in memoT:\n                 memoT[c] = 0\n             memoT[c] += 1\n             \n         for v in memoS:\n             if v not in memoT or memoT[v] != memoS[v]:\n                 return False\n         for v in memoT:\n             if v not in memoS or memoS[v] != memoT[v]:\n                 return False\n         return True", "class Solution:\n     def isAnagram(self, s, t):\n         \"\"\"\n         :type s: str\n         :type t: str\n         :rtype: bool\n         \"\"\"\n         if len(s) != len(t): return False\n         charMap = {}\n         for char in s:\n             if char in charMap:\n                 charMap[char] += 1\n             else:\n                 charMap[char] = 1\n         for char in t:\n             if char in charMap and charMap[char] > 0:\n                 charMap[char] -= 1\n             else:\n                 return False\n         return True", "class Solution:\n     def isAnagram(self, s, t):\n         \"\"\"\n         :type s: str\n         :type t: str\n         :rtype: bool\n         \"\"\"\n         S = set(s)\n         T = set(t)\n         if len(s) != len(t):\n             return False\n         for i in T:\n             if i in S:\n                 if s.count(i) != t.count(i):\n                     return False\n             else:\n                 return False\n         return True\n", "class Solution:\n     def isAnagram(self, s, t):\n         word = dict()\n         for i in s:\n             if i not in word:\n                 word[i] = 1\n             else:\n                 word[i] += 1\n         \n         for i in t:\n             if i not in word:\n                 return False\n             else:\n                 word[i] -= 1\n         \n         for i in word:\n             if word[i] != 0:\n                 return False\n         return True\n", "class Solution:\n     def isAnagram(self, s, t):\n         \"\"\"\n         :type s: str\n         :type t: str\n         :rtype: bool\n         \"\"\"\n         ls = self.makeDict(s)\n         lt = self.makeDict(t)\n         if len(list(ls.keys())) > len(list(lt.keys())):\n             for ks, vs in list(ls.items()):\n                 if not ((ks in lt) and (lt[ks] == vs)):\n                     return False\n             return True\n         else:\n             for kt, vt in list(lt.items()):\n                 if not ((kt in ls) and (ls[kt] == vt)):\n                     return False\n             return True\n         \n                \n     def makeDict(self, s):\n         ls = {}\n         for l in s:\n             if l in ls:\n                 ls[l] += 1\n             else:\n                 ls[l] = 1\n         return ls\n         \n"]