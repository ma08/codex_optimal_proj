["MOVES = {\"right\": (0,1), \"down\": (1,0), \"left\": (0,-1), \"up\": (-1,0)}\n\n\ndef get_password(grid, dirs):\n    x,y = next( (x,y) for x,r in enumerate(grid) for y,c in enumerate(r) if c=='x' )\n    pwd = []\n    for d in dirs:\n        dx,dy = MOVES[d.strip('T')]\n        x,y = x+dx,y+dy\n        if d.endswith('T'): pwd.append(grid[x][y])\n    return ''.join(pwd)", "def get_password(grid, directions):\n    r, c = [(r, c) for r in range(len(grid)) for c in range(len(grid[r])) if grid[r][c] == 'x'].pop()\n    p = ''\n    for d in directions:\n        r, c = (r + {'d':1, 'u':-1}.get(d[0], 0), c + {'r':1, 'l':-1}.get(d[0], 0))\n        if d[-1] == 'T': p += grid[r][c]\n    return p", "DIRS = {\n    'left': (0, -1),\n    'right': (0, 1),\n    'up': (-1, 0),\n    'down': (1, 0),\n}\n\ndef get_password(grid, directions):\n    i, j = next((i, j) for i, row in enumerate(grid) for j, x in enumerate(row) if x == 'x')\n    pw = ''\n    for d in directions:\n        take = d.endswith('T')\n        i_delta, j_delta = DIRS[d.rstrip('T')]\n        i += i_delta\n        j += j_delta\n        if take:\n            pw += grid[i][j]\n    return pw", "def get_password(grid,directions):\n    res = ''\n    for i in range(len(grid)):\n        if 'x' in grid[i]: pos =[i, grid[i].index('x')]\n    for i in directions:\n        if i[0] == 'l': pos[1]-=1\n        elif i[0] == 'd': pos[0]+=1\n        elif i[0] == 'r': pos[1]+=1\n        else: pos[0]-=1\n        if i[-1] == 'T': res += grid[pos[0]][pos[1]];\n    return res", "X, Y = {'l':-1, 'r':1}, {'u':-1, 'd':1}\n\ndef get_password(grid, directions):\n    result, (i, j) = [], next((i, j) for i,row in enumerate(grid) for j,c in enumerate(row) if c == 'x')\n    for d in directions:\n        i, j = i+Y.get(d[0], 0), j+X.get(d[0], 0)\n        if d[-1] == 'T': result.append(grid[i][j])\n    return ''.join(result)", "def get_password(grid,directions):\n    m_go = { 'left':(0,-1), 'right':(0,1), 'up':(-1,0), 'down':(1,0)  }\n    \n    x,y = next((i,j) for i, e in enumerate(grid) for j, l in enumerate(e) if l == 'x')\n                \n    password = ''\n    \n    for e in directions:\n        (x_,y_), end = m_go.get(e.strip('T')), e[-1]\n        x, y = x+x_, y+y_\n        if end is 'T':\n            password += grid[x][y]\n    \n    return password\n", "moves = {\"l\": (-1, 0), \"u\": (0, -1), \"d\": (0, 1), \"r\": (1, 0)}\n\n\ndef get_password(grid, directions):\n    pwd, (x, y) = \"\", next((row.index(\"x\"), j) for j, row in enumerate(grid) if \"x\" in row)\n    for d in directions:\n        x, y = x + moves[d[0]][0], y + moves[d[0]][1]\n        if d[-1] == \"T\":\n            pwd = f\"{pwd}{grid[y][x]}\"\n    return pwd", "def get_password(grid,directions):\n    axis={'left':-1,'leftT':-1,'right':+1, 'rightT':+1}\n    ordinate={'up':-1,'upT':-1,'down':+1, 'downT':+1}\n    pwd=''\n    for ele in grid:\n        if 'x' in ele:\n            row_index, column_index = grid.index(ele), ele.index('x')\n            break\n\n    for direction in directions:\n        if 't' in direction:\n            column_index += axis[direction]\n            if 'T' in direction:    pwd += grid[row_index][column_index]\n        else:\n            row_index += ordinate[direction]\n            if 'T' in direction:    pwd += grid[row_index][column_index]\n    return pwd", "def get_password(grid,directions):\n    #generate start point\n    start = [[k,x] for k,v in enumerate(grid) for x,y in enumerate(v) if y=='x'][0]\n    curr = start\n    a = ''\n    for i in directions:\n        if i[-1] == 'T':\n            if i == 'leftT':\n                curr[1] -= 1\n                a+= grid[curr[0]][curr[1]]\n            if i == 'rightT':\n                curr[1] += 1\n                a+= grid[curr[0]][curr[1]]\n            if i == 'upT':\n                curr[0] -= 1\n                a+= grid[curr[0]][curr[1]]\n            if i == 'downT':\n                curr[0] += 1 \n                a+= grid[curr[0]][curr[1]]\n        if i[-1] != 'T':\n            if i == 'left':\n                curr[1] -= 1\n            if i == 'right':\n                curr[1] += 1\n            if i == 'up':\n                curr[0] -= 1\n            if i == 'down':\n                curr[0] += 1\n    return a    \n\n    \n                \n", "def get_password(grid,directions):\n    for each in grid:\n        if \"x\" in each:\n            x = int([grid.index(each)][0])\n            y = int([each.index(\"x\")][0])\n            break\n    res = \"\"\n    for each in directions:\n        if each[0:2] == \"ri\":\n            y += 1\n            if each[-1:] == \"T\":\n                res += grid[x][y]\n        elif each[0:2] == \"le\":\n            y -= 1\n            if each[-1:] == \"T\":\n                res += grid[x][y]\n        elif each[0:2] == \"up\":\n            x -= 1\n            if each[-1:] == \"T\":\n                res += grid[x][y]\n        elif each[0:2] == \"do\":\n            x += 1\n            if each[-1:] == \"T\":\n                res += grid[x][y]\n    return res"]