["from operator import add, sub, mul, truediv\nD = {'+':add, '-':sub, '*':mul, '/':truediv}\n\ndef calculate(a, o, b):\n    try: return D[o](a, b)\n    except: pass", "def calculate(a, o, b):\n    result = 0\n    if(o == \"+\"):\n        return a + b\n    elif(o == \"-\"):\n        return a - b\n    elif(o == \"/\" and b == 0):\n        return None\n    elif(o == \"/\"):\n        return a / b\n    elif(o == \"*\" and b == 0):\n        return b\n    elif(o == \"*\"):\n        return a * b\n    else:\n        return None\n    return result\n", "def calculate(a, o, b):\n    if a==b==0 and o=='**':return\n    try:    return eval(f'{a}{o}{b}')\n    except: return", "calculate = lambda a,o,b, m=__import__(\"operator\"): None if o not in \"+-*/\" or o=='/' and not b else {\"+\":m.__add__, \"-\":m.__sub__, \"*\":m.__mul__, \"/\":m.__truediv__}[o](a, b)", "def calculate(a, o, b):\n    if o == \"+\":\n        return a + b\n    if o == \"-\":\n        return a - b\n    if o == \"*\":\n        return a * b\n    if o == \"/\" and b != 0:\n        return a / b\n\n\n# one-liner\n#    return [a+b, a-b, a*b, a/b if b else None, None][\"+-*/\".find(o)]\n", "def calculate(a, o, b):\n    if (o == \"+\"):\n        return a + b\n    elif (o == \"-\"):\n        return a - b\n    elif b != 0 and o == \"/\":\n        return a / b\n    elif (o == \"*\"):\n        return a * b\n    return None", "calculate=lambda a,o,b:eval(str(a)+o+str(b)) if o in '+-/*' and o+str(b)!='/0' else None"]