["def count_pairs_int(d, m):\n    return sum(1 for i in range(1, m - d) if divisors(i) == divisors(i + d))\n\ndef divisors(n):\n    return sum(1 + (n // k != k) for k in range(1, int(n**0.5) + 1) if n % k == 0)\n", "import numpy as np\n\nN = 100001\nxs = np.ones(N)\nxs[:2] = 0\nfor i in range(2, N//2):\n    xs[i*2::i] += 1\n\n\ndef count_pairs_int(diff, n_max):\n    return sum(\n        xs[i] == xs[i + diff]\n        for i in range(1, n_max - diff)\n    )", "TOP = 20000\nCNT = [1]*TOP\nfor i in range(2,TOP):\n    for j in range(i,TOP,i): CNT[j]+=1\n\n\ndef count_pairs_int(diff, n_max):\n    return sum(CNT[a]==CNT[a+diff] for a in range(1,n_max-diff))", "import math\ndef divisorGenerator(n):       #\u6c42\u6240\u6709\u9664\u6570\n    large_divisors = []\n    for i in range(1, int(math.sqrt(n) + 1)):\n        if n % i == 0:\n            yield i\n            if i*i != n:\n                large_divisors.append(n / i)\n    for divisor in reversed(large_divisors):\n        yield divisor\n        \ndef count_pairs_int(diff, n_max):\n    div_num = []\n    count = 0\n    for i in range(1,n_max+1):\n        div_num.append(len(list(divisorGenerator(i))))\n    print(div_num,len(div_num))\n    for j in range(diff,len(div_num)-1):\n        #print(j,':','div_num[',j+1,']=',div_num[j+1],'div_num[',j,']=',div_num[j],'diff=',div_num[j+1]-div_num[j])\n        if div_num[j] == div_num[j-diff]:\n            count += 1\n    return count", "def count_pairs_int(d,n):\n    def divs(n):\n        x = set()\n        for i in range(1,int(n**.5)+1):\n            if not n%i:\n                x |= {i,n//i}\n        return len(x)\n        \n    c = 0\n    for i in range(1,n-d):\n        if divs(i) == divs(i+d):\n            c += 1\n    \n    return c", "def diviseurs_stricts(nombre):\n    diviseurs = [1, nombre]\n    candidat = 2\n    while candidat < nombre // candidat:\n        if nombre % candidat == 0:   # candidat est un diviseur de nombre\n            diviseurs.append(candidat)\n            diviseurs.append(nombre // candidat)\n        candidat += 1\n    if candidat * candidat == nombre: # nombre est un carr\u00e9\n        diviseurs.append(candidat)\n    return len(diviseurs)\n\ndef count_pairs_int(difference, limit):\n    ok_list = []\n    for number in range(2,limit-difference):\n        if diviseurs_stricts(number) == diviseurs_stricts(number + difference):\n            ok_list.append([number, number+difference])\n    return len(ok_list)", "def count_pairs_int(dif, n_max):\n    _c=((range(1,n_max)[i],range(1,n_max)[i+dif]) for i in range(0,len(range(1,n_max))-dif))\n    def v(x):\n        _s=[]\n        for k in range(1,int(x**0.5)+1):\n            if x%k==0:\n                _s.append(k)\n                _s.append(x/k)\n        return len(set(_s))\n    return len([i for i in _c if v(i[0])==v(i[1])])", "import math\ndef divisors(n) : \n    ans = 0\n    for i in range(1, (int)(math.sqrt(n)) + 1) : \n        if n % i == 0: \n            if n / i == i: \n                ans += 1\n            else:\n                ans += 2                  \n    return ans \n\ndef count_pairs_int(diff, nmax):\n    ans = 0\n    for val in range(2, nmax-diff):\n        if divisors(val) == divisors(val+diff):\n            ans += 1\n    return ans ", "def count_pairs_int(diff, below):\n    nds = [0] * below\n    for i in range(1, below):\n        for j in range(i, below, i):\n            nds[j] += 1\n    return sum(x == y for x, y in zip(nds, nds[diff:]))", "import math\n\ndef getDivisors(n):\n    divisors = set()\n    e = 1\n    while e <= math.sqrt(n):\n        if n % e == 0: \n            divisors.update([e,n/e])\n        e += 1\n    return divisors\n            \ndef buildDict(n_max):\n    res = {}\n    for i in range(1,n_max):\n        res[i] = len( getDivisors(i) ) \n    return res        \n\ndef count_pairs_int(diff, n_max):\n    d = buildDict(n_max)\n    x = 0\n    for n in range(n_max):\n        if d.get(n, 0) == d.get(n+diff, 0):  \n            x += 1            \n    return x "]