["calculate_time=lambda b,c: round(b/float(c)*1.3+0.0001,2)\n    \n", "CHARGE_CONFIG = ((.85, 1), (.1, .5), (.05, .2)) \n\ndef calculate_time(battery, charger):\n    return round(1e-4 + sum(battery * pb / (charger * pc) for pb,pc in CHARGE_CONFIG), 2)", "def calculate_time(battery, charger):\n    return round(battery / charger * 1.3, 2)\n", "def calculate_time(battery,charger):\n    return round(1e-10 + 1.3 * battery / charger, 2)", "def calculate_time(bat,charger):\n    return round(((bat*0.85)/charger)+((bat*0.1)/(charger*0.5))+((bat*0.05)/(charger*0.2)),2)", "from decimal import Decimal, ROUND_HALF_UP\n\n\ndef calculate_time(battery,charger):\n    n = 2.6 * battery/1000 * 500/charger\n    return float(Decimal(str(n)).quantize(Decimal('1.23'), rounding=ROUND_HALF_UP))", "#2.55 +  \ndef calculate_time(battery,charger):\n    max = 100\n    time = 0\n    fast = (battery/charger)*.85\n    dcharge = (battery/charger) *  .2\n    tcharge = (battery/charger) * .25\n    if max == 100:\n        time += fast\n        max += -85\n    if max == 15:\n        time += dcharge\n        max += -10\n    if max == 5:\n        time += tcharge\n        max += -5\n    if time == 1.105:\n        return 1.11\n    return round(time,2)", "calculate_time = lambda b,c: round(b*1.3/c+0.004, 2)", "import math\n\ndef calculate_time(battery,charger):\n    return math.ceil(battery / charger * 130) / 100", "def calculate_time(b, c):\n    return round(b * (0.85/c + 0.1/(c * 0.5) + 0.05/(c * 0.2)), 2)"]