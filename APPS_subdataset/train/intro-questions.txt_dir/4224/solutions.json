["def dont_give_me_five(start, end):\n    return sum('5' not in str(i) for i in range(start, end + 1))", "def dont_give_me_five(start,end):\n    return len([num for num in range(start, end+1) if '5' not in str(num)])", "def dont_give_me_five(start,end):\n    tick = 0\n    for x in range(start, end+1):\n        if '5' not in str(x):\n            tick += 1\n    return tick", "# Fast algorithm.\n# Execution time: dont_give_me_five(1, 123456789) ~ 0.01 ms\ndef dont_give_me_five(start, end):\n    def goo(n):\n            result = 0\n            pos9 = 1\n            while n > 0:\n                digit = n % 10\n                effective_digit = digit\n                if digit > 5:\n                    effective_digit -= 1\n                to_add = effective_digit * pos9\n                if digit == 5:\n                    result = -1\n                result += to_add\n                n //= 10\n                pos9 *= 9\n            return result\n    if (end >= 0 and start >= 0) or (end < 0 and start < 0):\n        return goo(max(abs(end), abs(start))) - goo(min(abs(start), abs(end)) - 1)\n    else:\n        return goo(abs(end)) + goo(abs(start)) + 1", "def dont_give_me_five(start, end):\n    return sum(1 for i in range(start, end+1) if '5' not in str(i))", "def dont_give_me_five(start,end):\n    return len([i for i in range(start, end+1) if '5' not in str(i)])", "def dont_give_me_five(start,end):\n    return len(tuple(n for n in range(start,end+1) if '5'not in str(n)))", "dont_give_me_five = lambda s,e: sum('5' not in str(e) for e in range(s,e+1))", "def dont_give_me_five(start,end):\n    n = []\n    i = start\n    while i <= end:\n        m = str(i)\n        if \"5\" in m:\n            i += 1\n        if \"5\" not in m:\n            n.append(m)\n            i += 1\n    x = len(n)\n    return x", "def dont_give_me_five(start,end):\n    count = 0\n    for i in range(start,end+1):\n        if '5' not in str(i):\n            count += 1\n    return count", "def dont_give_me_five(start, end):\n    return sum(1 for n in range(start, end + 1) if '5' not in str(n))", "def dont_give_me_five(start, end):\n    return len([x for x in range(start, end + 1) if '5' not in str(x)])", "def dont_give_me_five(start,end):\n    n = 0\n    for j in range(start, end + 1):\n        i = abs(j)\n        n += 1\n        while i // 5 > 0:\n            if i % 5 == 0 and i % 10 != 0:\n                n -= 1\n                break\n            i = i // 10      \n    return n", "def dont_give_me_five(start, end):\n    # your code here\n    n = end - start + 1\n    for i in range(start, end+1):\n        if '5' in str(i):\n            n -= 1\n    return n", "dont_give_me_five = lambda s,e: len([i for i in range(s, e+1) if '5' not in str(i)])\n#loops through each number in start, end, converting each number to a string and checking if '5' is contained within, if it isn't present, it is added to a list, the length of the list is calculated and returned as the result.\n", "def dont_give_me_five(start,end):\n    return sum([(1,0)['5' in str(x)] for x in range(start,end+1)])", "dont_give_me_five = lambda s, e: sum('5' not in str(i) for i in range(s, e+1))", "def dont_give_me_five(start,end):\n    return len([i for i in list(map(str, range(start, end + 1))) if \"5\" not in i])", "def dont_give_me_five(start,end):\n    n_list = [i for i in range(start, end + 1)]\n    n = 0\n    for i in n_list:\n        if '5' in str(i):\n            continue\n        n += 1\n    return n   # amount of numbers", "def dont_give_me_five(start, end):\n    rez = []\n    for i in list(range(start, end + 1)):\n        if \"5\" in list(str(i)):\n            print(i)\n        else:\n            rez.append(i)\n    return len(rez)", "def dont_give_me_five(start,end):\n    return len((list(filter(lambda i: not \"5\" in str(i), range(start, end + 1)))))", "def dont_give_me_five(start,end):\n    array = list(range(start,end + 1))\n    out = [num  for num in array if (not (\"5\" in str(num)))]\n    return len(out)", "def dont_give_me_five(start,end):\n    arr = []\n    for x in range(start, end + 1):\n        if \"5\" not in str(x):\n            arr.append(x)\n    return len(arr)", "def dont_give_me_five(start,end):\n    z=0\n    for i in range(start, end+1):\n        if str(i).find('5')==-1:\n            z+=1\n    return(z)", "def dont_give_me_five(start,end):\n    # your code here\n    k = [str(i) for i in range(start, end + 1)]\n    return len([i for i in k if '5' not in i])", "def dont_give_me_five(start: int, end: int) -> int:\n    \"\"\"This function returns the count of all numbers except numbers with a 5.\"\"\"\n    count = 0\n    for item in range(start, end+1):\n        if '5' not in str(item):\n            #print (item)\n            count += 1\n    return count", "def dont_give_me_five(start,end):\n    nums = [str(number) for number in range(start, end + 1) if '5' not in str(number)]\n    return len(nums)", "def dont_give_me_five(start,end):\n    \n    n =0\n    for x in range(start,end+1) :\n        if '5' in str(x):\n            continue   \n        n = n+1\n    return n", "def dont_give_me_five(start, end):\n    arr = []\n    for i in range(start, end + 1):\n        arr.append(i)\n    count = 0\n    for i in arr:\n        if \"5\" in str(i):\n            count += 1\n    return len(arr) - count", "def dont_give_me_five(start,end):\n    # Set position and create list\n    position = start\n    count = []\n    \n    # Check if numbers have a 5 in them and skip\n    # append all other numbers to list\n    while position <= end:\n        if '5' in str(position):\n            position += 1\n        else:\n            count.append(position)\n            position += 1\n    \n    # Return length of list\n    return len(count)", "def dont_give_me_five(start, end):\n    # your code here\n\n    l = list(range(start, end + 1))\n    new_l = []\n\n    for i in l:\n        if not '5' in str(i):\n            new_l.append(i)\n    return len(new_l)\n", "def dont_give_me_five(start,end):\n    return len([elem for elem in range(start,end+1) if '5' not in str(elem) ])", "def dont_give_me_five(start,end):\n    count = 0\n\n    \n    for i in range(start, end+1):\n        valid = True\n        for j in str(i):\n            if j == \"5\":\n                valid = False\n        if valid:\n            count += 1\n\n    return count   # amount of numbers", "def dont_give_me_five(start,end):\n    tick = 0\n    for x in range (start,end+1):\n        if \"5\" not in str(x):\n            tick +=1\n    return  tick # amount of numbers", "def dont_give_me_five(start, end):\n    answer = 0\n    for i in range(start, end + 1):\n        if '5' in str(i):\n            pass\n        else:\n            answer += 1\n    return answer", "def dont_give_me_five(start,end):\n    l = []\n    for x in range(start, end+1):\n        if '5' not in str(x):\n            l.append(x)\n    return len(l)", "def dont_give_me_five(start,end):\n    def has_five(n):\n        x = False\n        for i in str(n):\n            if i == '5':\n                x = True\n        return x\n    y = 0\n    for i in range(start, end + 1):\n        if not has_five(i):\n            y = y + 1\n    return y", "def dont_give_me_five(start,end):\n    array = list(range(start,end+1))\n    array_str = [str(num) for num in array]\n    array_with_5 = [num for num in array_str if '5' in num]\n    \n    count_withno5 = len(array_str) - len(array_with_5)\n    return count_withno5   # amount of numbers", "def dont_give_me_five(start,end):\n    answer = 0\n    for i in range(start,end +1):\n        if not(\"5\" in str(i)):\n            answer += 1\n    return answer  # amount of numbers", "def dont_give_me_five(start,end):\n    return len([n for n in range(start, end+1) if not ((n % 5 == 0) & (n % 2 != 0)) | (n in range(50,60)) | (n in range(150,160))])", "def dont_give_me_five(start,end):\n    for i in range(end,start-1,-1) : end-=('5' in str(i))\n    return end-start+1", "def dont_give_me_five(start,end):\n    print(start,end)\n    l= []\n    for x in range(start,end+1):\n        if str(5) not in str(x):\n            l.append(x)\n    return len(l)", "def dont_give_me_five(start,end):\n    # your code here\n    countnotfive = 0\n    for scanner in range(start,end+1):\n        if '5' not in str(scanner):\n            countnotfive += 1\n        \n    return countnotfive # amount of numbers\n\nprint(dont_give_me_five(52,106))", "def dont_give_me_five(start,end):\n    startlist=list(range(start,end+1))\n    newlist=[]\n    for item in startlist:\n        if '5' not in str(item):\n            newlist.append(item)\n    return len(newlist)   # amount of numbers", "def dont_give_me_five(start,end):\n    count = 0\n    for i in range(start,end+1):\n        if str(i).__contains__(\"5\"):\n            continue\n        else:\n            count+=1\n    return count", "# create a count variable and set to 0\n# iterate through start and end + 1:\n#   if '5' is in str(num): pass \n#   else: count += 1\n# return the count\n\n\ndef dont_give_me_five(start,end):\n    \"\"\" function that returns the count of numbers between start and end (inclusive), \n        except for those containing 5 \"\"\"\n    count = 0  # number of numbers between start and end+1, excluding 5's\n    for i in range(start, end+1):\n        if '5' in str(i):    # does not count numbers with '5'\n            pass\n        else:\n            count += 1\n    return count   # returns int ", "def dont_give_me_five(start,end):\n    n=[]\n    for i in range (start,end+1):\n        if i % 5 != 0 or i % 10 == 0  :\n            if not 50 <= i <= 59 :\n                if not 150 <= i <=159:\n                    n.append(i)\n        \n    return len(n)   # amount of numbers", "def dont_give_me_five(start: int, end: int):\n    \n    list_of_numbers = range(start, end+1)\n    \n    range_without_fives = []\n    \n    for number in list_of_numbers:\n        digits_list = list(str(number))\n        if '5' not in digits_list:\n            range_without_fives.append(int(''.join(str(digit) for digit in digits_list)))\n    \n    return len(range_without_fives)", "def dont_give_me_five(start,end):\n    num_list=[str(i) for i in range(start,end+1) if '5' not in str(i)]\n    return len(num_list)   # amount of numbers\n", "def dont_give_me_five(start,end):\n    return len([i for i in range(start, end+1) if not '5' in str(i)])\n    \n    # numbers_list = []\n    # for i in range(start, end+1):\n    #     if not '5' in str(i):\n    #         numbers_list.append(i)\n    # return len(numbers_list)\n", "def dont_give_me_five(start, end):\n    return len(list(i for i in list(range(start, end+1)) if not \"5\" in str(i)))", "def dont_give_me_five(start,end):\n    numbers = list(range(start,end + 1))\n    n = 0\n    for i in numbers:\n        s = str(i)\n        if \"5\" not in s:\n            n += 1\n    return n   # amount of numbers", "def dont_give_me_five(start,end):\n    m = (end-start)+1\n    for i in range(start, (end + 1)):\n        if \"5\" in str(i):\n            m -= 1\n    return m\n    \n    \n    \n        \n", "def dont_give_me_five(start,end):\n    counts = 0\n    for num in range(start, end + 1):\n        if '5' not in str(num):\n            counts = counts + 1\n        else:\n            continue\n    return counts", "def dont_give_me_five(start,end):\n    rc = 0\n    for ing in range(start, end + 1):\n        if '5' in list(str(ing)):\n            pass\n        else:\n            # print(ing)\n            rc += 1\n    return rc", "def dont_give_me_five(start,end):\n    arr = list(range(start, end + 1))\n    filter = []\n    for el in arr:\n        if str(el).find('5') == -1: filter.append(el)\n    print(filter)\n    return len(filter)", "def dont_give_me_five(start,end):\n    c=list(range(start,end+1))\n    v=[]\n    for t in c:\n        if '5' not in str(t):\n            v.append(t)\n    n=len(v)\n    return n  ", "def dont_give_me_five(start,end):\n    return sum([1 for i in range(min(start, end), max(start, end) + 1) if testFive(i)])\n    \n    \ndef testFive(num):\n    if num < 0:\n        num = abs(num)\n    while num > 0:\n        if num % 10 == 5:\n            return False\n        num //= 10\n    \n    return True\n", "def dont_give_me_five(start,end):\n    count = 0\n    numbers = [str(x) for x in range(start, end+1)]\n    for number in numbers:\n        if \"5\" not in number:\n            count+=1\n    return count", "def dont_give_me_five(start,end):\n    x = start\n    total = 0\n    while x < end+1:\n        if \"5\" not in str(x):\n            total += 1\n        x += 1\n    return total", "def dont_give_me_five(start,end):\n    res = 0\n    for n in range(start, end+1):\n        if not '5' in str(n):\n            res+=1\n    return res", "def dont_give_me_five(start,end):\n    n = [i for i in range(start, end + 1) if str(i).count('5') == 0]\n    return len(n)", "def dont_give_me_five(start,end):\n    a = [i for i in range(start, end+1)if'5' not in  str(i)]\n    \n    return len(a)", "def dont_give_me_five(s,e):\n    return len([x for x in range(s,e+1) if not str(x).count('5')])", "def dont_give_me_five(start,end):\n    # your code here\n    m = [i for i in range(start, end+1) if \"5\" not in str(i)]\n    return len(m)   # amount of numbers", "def dont_give_me_five(start,end):\n    count = 0\n    for i in range(start,end+1):\n        if str(i).find('5') == -1:\n            count += 1\n    return count  # amount of numbers", "def dont_give_me_five(s,e):\n    return len([i for i in range(s, 1+e) if '5' not in str(i)])", "def dont_give_me_five(start,end):\n    s = [str(x) for x in range(start,end + 1)]\n    d = \"-\".join(s).replace(\"5\",\"!\")\n    f = d.split(\"-\")\n    result = []\n    for x in f:\n        if x.isdigit() == True:\n            result.append(x)\n    return len(result)\n    \n", "def dont_give_me_five(start,end):\n    # your code here\n    return sum(1 for i in range(start,end+1) if \"5\" not in str(i))   # amount of numbers", "def dont_give_me_five(start,end):\n    \n    end = end + 1\n    nofives = 0\n    for i in range(start,end):\n        if '5' not in str(i):\n            nofives += 1\n        else:\n            pass\n    return nofives", "import re\n\ndef dont_give_me_five(start,end):\n    n = 0\n    for i in range(start, end + 1):\n        if re.match('(.*)[5](.*)', str(i)):\n            continue\n        n += 1 \n    return n", "def dont_give_me_five(start, end):\n    if start < 0 and end < 0:\n        return nums_without_five(-start + 1) - nums_without_five(-end)\n    elif start < 0 and end >= 0:\n        return nums_without_five(-start + 1) + nums_without_five(end + 1) - 1\n    return nums_without_five(end + 1) - nums_without_five(start)\n\ndef nums_without_five(n):\n    cnt = 0\n    fct = 1\n    \n    while n:\n        dig = n % 10\n        if dig == 5:\n            cnt = 0\n        cnt += (dig - (dig > 5)) * fct\n        fct *= 9\n        n //= 10\n        \n    return cnt", "def dont_give_me_five(start,end):\n    # your code here\n        num = list(range(start, end + 1))\n        count = 0\n        for i in num:\n            if \"5\" in str(i):\n                pass\n            else:\n                count += 1\n        return count\n                \n        \n            \n", "def dont_give_me_five(start,end):\n    return sum([1 if '5' not in str(i) else 0 for i in [loop for loop in range(start, end + 1)]])", "def dont_give_me_five(start,end):\n    count = 0\n    for i in list(range(start, end + 1)):\n        if '5' not in str(i):\n            count += 1\n    return count", "def dont_give_me_five(start,end):\n    \n    c = 0\n\n\n    for i in range(start,end+1):\n        \n        \n        d = [int(x) for x in str(abs(i))]\n    \n        if not 5 in d :\n        \n            c+= 1\n        \n    return c\n    \n", "def dont_give_me_five(start,end):\n    l = (end + 1 - start) - sum([1 for i in range(start, end + 1) if \"5\" in str(i)])\n    return l    ", "def dont_give_me_five(start,end):\n    arr = []\n    ran = []\n    \n    for i in range(start,end+1):\n        ran.append(i)\n    \n    for i in ran:\n        s = str(i)\n        if '5' in s:\n            continue\n        else:\n            arr.append(s)\n                \n    n = len(arr)\n    \n    return n", "def dont_give_me_five(start,end):\n    # your code here\n    return sum ('5' not in str(i) for i in range(start, end + 1))  # amount of number", "def dont_give_me_five(start,end):\n    count = 0\n    while start <= end:\n        if str(start).find('5') == -1:\n            count+=1\n        start+=1\n            \n    return count", "def dont_give_me_five(s, e):\n    return len([x for x in range(s, e + 1) if str(5) not in str(x)])\n", "def dont_give_me_five(s, e):\n    count = 0\n    for x in range(s, e + 1):\n        if str(5) not in str(x):\n            count += 1\n    return count", "def dont_give_me_five(start,end):\n    list = []\n    for i in range(start, end+1):\n        if str(i).count('5') == 0:\n            list.append(i)\n    \n    return len(list)\n    \n\n", "def dont_give_me_five(start,end):\n    count = 0\n    for number in range(start, (end + 1)):\n        number_as_str = str(number)\n        if \"5\" not in number_as_str:\n            count += 1\n\n    return count", "def dont_give_me_five(start,end):\n    # your code here\n    return len([t for t in range(start,end+1) if str(t).find(\"5\") == -1])", "def dont_give_me_five(start,end):\n    numbers=[]\n    \n    for i in range(start, end+1):\n        if '5'in str(i):\n            continue\n        else:\n            numbers.append(i)\n                \n    return len(numbers)# amount of numbers", "def dont_give_me_five(start,end):\n    n = 0\n    for i in range(start, 1+end):\n        if \"5\" not in str(i):\n            n+=1\n    return n   # amount of numbers", "def dont_give_me_five(start,end):\n    mylist = [str(i) for i in range(start, end+1)]\n    mylist = [i for i in mylist if '5' not in i]\n    return len(mylist)", "def dont_give_me_five(start,end):\n    count = 0\n    for i in range(start, end+1):\n        temp = str(i)\n        if '5' not in temp:\n            count += 1\n        \n            \n    return count", "def dont_give_me_five(x,y):\n    return len([i for i in range(x,y+1) if '5' not in str(i)])", "def dont_give_me_five(start,end):\n    count=0\n    for n in range(start,end+1):\n        if \"5\" not in str(n   ):\n            count=count+1\n    return count", "def dont_give_me_five(start,end):\n    n = 0\n    five = '5'\n    for i in range(start, end+1):\n        i = str(i)\n        if five in i:\n            continue\n        else:\n            n+=1\n    return n   # amount of numbers", "def dont_give_me_five(start,end):\n    x = [i for i in range(start, end+1) if '5' not in str(i)]\n    return len(x)", "def dont_give_me_five(start,end):\n    itr = 0\n    while start <= end:\n        strNum = str(start)\n        if \"5\" not in strNum:\n            itr+=1\n        start += 1\n    return itr   # amount of numbers", "def dont_give_me_five(s, e):\n    cnt = 0\n    for i in range(s, e + 1):\n        if \"5\" not in str(i):\n            cnt += 1\n    return cnt", "def dont_give_me_five(start,end):\n    # your code here\n    l=[]\n    for i in range(start,end+1):\n        if '5' not in str(i) :\n            l.append(i)\n\n \n    for j in l:\n        if '5' in str(j):\n            l.remove(j)\n    print(l)\n    return len(l)\n\n\n\n                \n                \n            \n", "def dont_give_me_five(start,end):\n    no_fives = [str(x) for x in range(start, end+1) if \"5\" not in str(x)]\n    return len(no_fives) ", "def dont_give_me_five(start,end):\n    '''\n    returns the number of numbers in the range of starts -> end \n    that dont include a 5\n    input: int,int\n    output: int\n    >>> dont_give_me_five(-11,10)\n    >>> 20\n    '''\n    # list comprehension\n    # sum( all of the trues which turn into 1's)\n    return sum('5' not in str(i) for i in range(start,end+1))", "def dont_give_me_five(start,end):\n    '''\n    returns the number of numbers in the range of starts -> end \n    that dont include a 5\n    input: int,int\n    output: int\n    >>> dont_give_me_five(-11,10)\n    >>> 20\n    '''\n    # initialize return n \n    n = 0 \n    \n    # iterate through numbers\n    for i in range(start, end+1):\n        \n        # check for '5' in str(int)\n        if '5' not in str(i):\n            n += 1 \n        \n    return n   # amount of numbers"]