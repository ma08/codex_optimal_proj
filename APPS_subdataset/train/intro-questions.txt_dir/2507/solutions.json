["class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        d={}\n        for i in chars:\n            if i in d:\n                d[i]+=1\n            else:\n                d[i]=1\n        l=0\n        for i in words:\n            flag = True\n            for j in i:\n                if j in d:\n                    if i.count(j)>d[j]:\n                        flag=False\n                        break\n                else:\n                    flag = False\n                    break\n            if flag:\n                l+=len(i)\n        return l", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        \n        d={}\n        for i in chars:\n            if i in d:\n                d[i]+=1\n            else:\n                d[i] =1\n                \n        c=0\n        \n        for i in words:\n            flag = True\n            for j in i:\n                if j in d:\n                    if(i.count(j) > d[j]):\n                        flag = False  \n                        break\n                else:\n                    flag = False\n                    break\n            if(flag):\n                c+=len(i)\n                \n        print(c)\n        return c\n                    \n                        \n                    \n", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        charBins = {char:chars.count(char) for char in chars}\n        total = 0\n\n        for word in words:\n            if (len(word) > len(chars)):\n                continue\n                \n            if not set(word).issubset(chars):\n                continue\n\n            letterBins = {letter:word.count(letter) for letter in word}\n\n            goodWord = True\n            for letter in letterBins:\n                if letterBins[letter] > charBins[letter]:\n                    goodWord = False\n\n            if (goodWord):\n                total += len(word)\n\n        return total", "from collections import Counter\nclass Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        c = Counter(chars)\n        ret = 0\n        for word in words:\n            if Counter(word) - c == Counter():\n                ret += len(word)\n        \n        return ret\n", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        return sum(len(word) for word in words if collections.Counter(word)&collections.Counter(chars)==collections.Counter(word))", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        count = 0\n        chars_map = collections.Counter(chars)\n        for word in words:\n            if collections.Counter(word) == (collections.Counter(word) & chars_map):\n                count += len(word)\n        return count\n", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        num=0\n\n        for word in words:\n            letter = str()\n            counter = Counter(chars)        \n            for i in word:\n                if i in list(counter.keys()) and counter[i]>0:\n                    letter+=i\n                    counter[i]-=1\n                    \n\n\n            if letter == word:\n                print(letter)\n                num += len(word)\n        return num\n                    \n", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        sum = 0\n        for i in words:\n            check = True\n            for s in i:\n                if i.count(s) > chars.count(s):\n                    check = False\n            if check == True:\n                sum = sum + len(i)\n        return sum", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        op = 0\n        for ele in words:\n            count=0\n            for i in ele:\n                if chars.count(i)>=ele.count(i):\n                    count+=1\n            if count==len(ele):\n                op+=len(ele)\n        return (op)\n            \n                \n", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        charsums = 0\n        chars = sorted(chars)\n        \n        for word in words:\n            wordsize = len(word)\n            word = sorted(word)\n            charcounter = 0\n            \n            while len(word) > 0 and charcounter < len(chars):\n                if word[0] == chars[charcounter]:\n                    word.remove(word[0])\n                    charcounter += 1\n                else:\n                    charcounter += 1\n            \n            if len(word) == 0:\n                charsums += wordsize\n        \n        return charsums", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        count=0\n        f=1\n        for s in words:\n            f=1\n            for c in s:\n                if s.count(c) > chars.count(c):\n                    f=0\n            if f:\n                print (s)\n                count+=len(s)\n        return count", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        output = 0\n        add = True\n        for word in words:\n            for c in word:\n                if(word.count(c) > chars.count(c)):\n                    add = False\n            if add:\n                output += len(word)\n            else:\n                add = True\n        return output\n", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        count = 0\n        n = len(chars)\n        for word in words:\n            ok_word = True\n            copy = chars\n            visit = []\n            for i in range(n):\n                visit.append(0)\n            for letter in word:\n                ok_letter = False\n                for i in range(n):\n                    if visit[i] == 0 and letter == copy[i]:\n                        ok_letter = True\n                        visit[i] = 1\n                        break\n                if not ok_letter:\n                    ok_word = False\n                    break;\n            if ok_word:\n                count += len(word)\n        return count", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        charBins = {char:chars.count(char) for char in chars}\n        goodWords = []\n\n        for word in words:\n            if (len(word) > len(chars)):\n                continue\n                \n            if not set(word).issubset(chars):\n                continue\n\n            letterBins = {letter:word.count(letter) for letter in word}\n\n            goodWord = True\n            for letter in letterBins:\n                if letterBins[letter] > charBins[letter]:\n                    goodWord = False\n\n            if (goodWord):\n                goodWords.append(word)\n\n        return sum(len(word) for word in goodWords)", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        from collections import Counter\n        res = 0\n        for j in words:\n            tmp = Counter(j) & Counter(chars)\n            if tmp==Counter(j):\n                res+= len(j)\n        return(res)\n            \n            \n            \n           \n\n    \n", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        \n        # go through each word:\n        goodCount = 0\n        for word in words:\n            # go through each letter in each word:\n            wordLen = len(word)\n            letterCount = 0\n            chars_list = list(chars)\n            for letter in word:\n                if letter in chars_list:\n                    letterCount += 1\n                    chars_list.remove(letter)\n            if letterCount == wordLen:\n                goodCount +=letterCount\n        return goodCount\n", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        op = 0\n        for ele in words:\n            count=0\n            for i in set(ele):\n                if chars.count(i)>=ele.count(i):\n                    count+=1\n            if count==len(set(ele)):\n                op+=len(ele)\n        return (op)\n            \n                \n", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        suma =0\n        for word in words:\n            cur_word = list(word)\n            cur_len = len(word)\n            for c in chars:\n                if c in cur_word:\n                    cur_word.remove(c)\n            if len(cur_word)==0:\n                suma+=cur_len\n        return suma", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        ans=0\n        from collections import Counter\n        cd =Counter(chars)\n        for w in words:\n            wd=Counter(w)\n            # print(wd & cd)\n            if len(wd & cd) and len(list((wd & cd).elements())) == len(w):\n                # print(list((wd & cd).elements())) \n                # print(w)\n                ans+=len(w)\n                \n        return ans\n            \n", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        start = 0\n        for i in words:\n            count = 0\n            t = list(chars)\n            for j in i:\n                if j in t:\n                    count+=1\n                    t.remove(j)\n            if count == len(i):\n                start+=count\n        return start", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        \n        total = 0\n        for word in words:\n            mod_chars = list(chars)\n            found = 0\n            for c in word:\n                if c in mod_chars:\n                    p = mod_chars.index(c)\n                    del mod_chars[p]\n                    found += 1\n            if found == len(word):\n                total += found\n            \n        return total", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        \n        # go through each word:\n        goodCount = 0\n        for word in words:\n            # go through each letter in each word:\n            wordLen = len(word)\n            letterCount = 0\n            chars_list = list(chars)\n            for letter in word:\n                if letter in chars_list:\n                    letterCount += 1\n                    chars_list.remove(letter)\n                    if letterCount == wordLen:\n                        goodCount +=letterCount\n        return goodCount\n", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        charBins = {char:chars.count(char) for char in chars}\n        goodWords = []\n\n        for word in words:\n            if (len(word) > len(chars)) or not set(word).issubset(chars):\n                continue\n                \n            letterBins = {letter:word.count(letter) for letter in word}\n\n            goodWord = True\n            for letter in letterBins:\n                if letterBins[letter] > charBins[letter]:\n                    goodWord = False\n\n            if (goodWord):\n                goodWords.append(word)\n\n        return sum(len(word) for word in goodWords)", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        \n        total = 0\n        for word in words:\n            mod_chars = list(chars)\n            found = 0\n            for c in word:\n                if c in mod_chars:\n                    del mod_chars[mod_chars.index(c)]\n                    found += 1\n            if found == len(word):\n                total += found\n            \n        return total", "class Solution:\n    def countCharacters(self, words, chars: str) -> int:\n        myd = {}\n        for i in chars:\n            if hash(i) in list(myd.keys()):\n                myd[hash(i)] +=1\n            else:\n                myd[hash(i)]= 1\n        wdata = []\n        for i in range(0,len(words)):\n            x = dict()\n            for letter in words[i]:\n                if hash(letter) in list(x.keys()):\n                    x[hash(letter)]+=1\n                else:\n                    x[hash(letter)]=1\n            wdata.append(x)\n        count = 0\n        for data in wdata:\n            allin = True\n            lcount = 0\n            for letter in list(data.keys()):\n                if letter in list(myd.keys()):\n                    if data[letter] > myd[letter]:\n                        allin = False\n                    else:\n                        lcount+=data[letter]\n                else:\n                    allin = False\n            if allin == True:\n                count+= lcount\n        return count\n        \n        \n#     def countCharacters(self, words: List[str], chars: str) -> int:\n#         myd = {}\n#         count = 0\n#         for i in chars:\n#             if i in myd.keys():\n#                 myd[i] +=1\n#             else:\n#                 myd[i]= 1\n        \n#         for word in words:\n#             allin = True\n\n#             for letter in word:\n#                 if letter in myd.keys():\n#                     if word.count(letter) > myd[letter]:\n#                         allin = False\n#                 else:\n#                     allin = False\n#             if allin==True:\n#                 count+=len(word)\n#         return count\n", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        \n        ans = 0\n        for word in words:\n            \n            charscopy = [i for i in chars]\n            length = 0\n            for char in word:\n                if char in charscopy:\n                    length+=1\n                    charscopy.remove(char)\n            \n            if length == len(word):\n                ans += length\n        \n        return ans\n", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        char_counter = Counter(chars)\n        return sum([len(word) for word in words if len(char_counter - Counter(word)) > 1 and len(Counter(word) - char_counter) == 0])", "from collections import Counter\nclass Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        d = Counter(chars)\n        ans = 0\n        for word in words:\n            cur = Counter(word)\n            if cur == cur & d:\n                ans += len(word)\n        return ans", "import copy\nclass Solution:\n    def countCharacters(self, w: List[str], c: str) -> int:\n        \n        d = {}\n        \n        for i in c:\n            d[i] = d.get(i, 0)+1\n        ans = 0\n        for i in range(len(w)):\n            x = copy.deepcopy(d)\n            f = True\n            for j in w[i]:\n                if j in x and x[j]>0:\n                    x[j] -= 1\n                else:\n                    f = False\n                    break\n            if f:\n                ans += len(w[i])\n        return ans\n                    \n                \n", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        r=0\n        a=list(chars)\n        #print(a)\n        for i in words:\n            b=a.copy()\n            s=False\n            for j in i:\n                if j not in b:\n                    s=True\n                else:\n                    b.remove(j)    \n            \n            if s!=True:\n                r+=len(i)\n                #print(s,r,b,a)\n        return r", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        char_set = collections.Counter(chars)\n        N = len(chars)\n        result = 0\n        for i in words:\n            if len(i) <= N and self.check(char_set,i):\n                result += len(i)\n        return result\n    def check(self, char_ctr, S):\n        S_ctr = collections.Counter(S)\n        for i in S_ctr:\n            if i not in char_ctr or S_ctr[i] > char_ctr[i] :\n                return False\n        return True\n        \n                \n        \n", "import copy\n\nclass Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        charmap = dict()\n        \n        for c in chars:\n            if c in charmap:\n                charmap[c] += 1\n            else:\n                charmap[c] = 1\n        size = 0\n        for word in words:\n            temp = copy.deepcopy(charmap)\n            flag = True\n            for c in word:\n                if c in temp and temp[c] > 0:\n                    temp[c] -= 1\n                else:\n                    flag = False\n                    break\n            if flag:\n                size += len(word)\n        return size\n                \n                \n", "import copy\nclass Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        tracker = dict()\n        result = 0\n        \n        for s in chars:\n            tracker.setdefault(s, 0)\n            tracker[s] += 1\n        \n        for word in words:\n            _temp = copy.deepcopy(tracker)\n            for ch in word:\n                if ch not in _temp:\n                    break\n                if _temp[ch] <= 0:\n                    break\n                \n                _temp[ch] -= 1\n            else:\n                result += len(word)\n        \n        return result\n                    \n        \n        \n        \n", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        \n        \n        ans = 0\n        \n        for word in words:\n            charscopy = [i for i in chars]\n            count = 0\n            for char in word:\n                if char in charscopy:\n                    count+=1\n                    charscopy.remove(char)\n            if count==len(word):\n                ans+=len(word)\n                \n        return ans", "import copy\n\nclass Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        s = dict()\n        for c in chars:\n            if c not in s:\n                s[c] = 0\n            \n            s[c] += 1\n    \n        t = 0\n        for word in words:\n            s_copy = copy.deepcopy(s)\n            valid = True\n            for letter in word:\n                if letter not in s_copy:\n                    valid = False\n                    break\n                else:\n                    s_copy[letter] -= 1\n                    if s_copy[letter] == 0:\n                        del s_copy[letter]\n            if valid:\n                t += len(word)\n            \n        return t\n", "from collections import Counter\nclass Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        c1 = Counter(chars)\n        ans = 0\n        for i in words:\n            c2 = Counter(i)\n            print((c2 - c1))\n            if not c2 - c1:\n                ans += len(i)\n        return ans\n", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        import copy\n        total = 0\n        y = {}\n        for char in chars:\n            if char in y:\n                y[char] += 1\n            else:\n                y[char] = 1\n\n        for word in words:\n            x = copy.deepcopy(y)\n            temp = 0\n            for char in word:\n                if char in x and x[char] > 0:\n                    x[char] -= 1\n                    temp += 1\n                else:\n                    temp = 0\n                    break\n            total += temp\n\n        return (total)", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        out = 0\n        \n        for word in words:\n            good = True\n            \n            for char in word:\n                if word.count(char) > chars.count(char):\n                    good = False\n                    \n            if good:\n                out += len(word)\n                \n        return out", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        charBins = {char:chars.count(char) for char in chars}\n        goodWords = []\n\n        for word in words:\n            if (len(word) > len(chars)):\n                continue\n                \n            if not set(word).issubset(chars):\n                continue\n\n            letterBins = {letter:word.count(letter) for letter in word}\n            if min([letterBins[letter] <= charBins[letter] for letter in letterBins]):\n                goodWords.append(word)\n\n        return sum(len(word) for word in goodWords)", "import collections\nclass Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        count = 0\n        for w in words:\n            letters = list(set(w))\n            isin = True\n            for l in letters:\n                if l not in chars or w.count(l) > chars.count(l):\n                    isin = False\n                    break\n            if isin:\n                count += len(w)\n        return count", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        a=0\n        for word in words:\n            res=True\n            for i in word:\n                if word.count(i)>chars.count(i):\n                    res=False\n                    break\n            if res:\n                a+=len(word)\n        return a\n", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        res = 0\n        dtar = Counter(chars)\n        for i in range(len(words)):\n            for j in words[i]:\n                if j not in chars:\n                    break\n                if words[i].count(j) > 1:\n                    if words[i].count(j) > dtar[j]:\n                        break\n            else:\n                res += len(words[i])\n        return res", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        d=Counter(chars)\n        ans=0\n        for w in words:\n            temp=d.copy()\n            b=True\n            for i in w:\n                try:\n                    if temp[i]!=0:\n                        temp[i]-=1\n                    else:\n                        b=False\n                        break\n                    \n                except:\n                    b=False\n                    break\n            if b:\n                ans+=len(w)\n        return ans", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        count = 0\n        freq = {}\n        for n in range(len(chars)):\n            if chars[n] not in freq.keys():\n                freq[chars[n]] = 1\n            else:\n                freq[chars[n]] += 1\n        \n        for word in words:\n            word_fq = {}\n            is_match = True\n            for m in range(len(word)):\n                if word[m] not in freq.keys():\n                    is_match = False\n                    break\n                if word[m] not in word_fq.keys():\n                    word_fq[word[m]] = 1\n                else:\n                    word_fq[word[m]] += 1\n            \n            if is_match:\n                is_fit = True\n                for key in word_fq.keys():\n                    if key not in freq.keys():\n                        is_fit = False\n                        break\n                    if word_fq[key] > freq[key]:\n                        is_fit = False\n                        break\n                if is_fit:\n                    count += len(word)\n                \n        return count", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        c=collections.Counter(chars)\n        res=0\n        \n        def valid(word):\n            s=collections.Counter(word)\n            for ch in s:\n                if ch not in c or s[ch]>c[ch]:\n                    return False\n            return True\n        \n        for word in words:\n            if valid(word):\n                res+=len(word)\n        return res\n", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        ans = 0\n        \n        mp = Counter(chars)\n        for word in words:\n            ok = True\n            mp_word = Counter(word)\n            for ch, f in mp_word.items():\n                if ch not in mp or mp_word[ch] > mp[ch]:\n                    ok = False\n                    break\n                    \n            if ok:\n                ans += len(word)\n        \n        return ans", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        from collections import Counter\n        ans = 0\n        chars_set = set(chars)\n        count0 = Counter(chars)\n        for word in words:\n            count = Counter(word)\n            if all((s in chars_set and count[s] <= count0[s]) for s in word):\n                ans += len(word)\n        return ans", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        d_chars = Counter(chars)\n        ans = 0\n        for w in words:\n            d_w = Counter(w)\n            for k, v in d_w.items():\n                if d_chars[k] < v:\n                    break\n            else:\n                ans += len(w)\n        \n        return ans", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        from collections import Counter\n        ans = 0\n        chars_set = set(chars)\n        count0 = Counter(chars)\n        for word in words:\n            count = Counter(word)\n            if all((s in chars_set and count[s] <= count0[s]) for s in word):\n                ans += len(word)\n                print(word)\n        return ans", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        sum, ct = 0, collections.Counter\n        chars_counter = ct(chars)\n        for word in words:\n            word_counter = ct(word)\n            if all(word_counter[c] <= chars_counter[c] for c in word_counter):\n                sum += len(word)\n        return sum\n", "from collections import Counter\nclass Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        c_dict = dict(Counter(chars))\n        \n        count = 0\n        \n        for word in words:\n            word_d = dict(Counter(word))\n            match = True\n            for k,v in list(word_d.items()):\n                if(k not in c_dict or v>c_dict[k]):\n                    match = False\n                    break\n            if(match):\n                count+=len(word)\n        return count\n", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        res = 0\n        dtar = Counter(chars)\n        for i in range(len(words)):\n            for j in words[i]:\n                if j not in dtar:\n                    break\n                if words[i].count(j) > 1:\n                    if words[i].count(j) > dtar[j]:\n                        break\n            else:\n                res += len(words[i])\n        return res", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        char_sum = 0\n        \n        def isValid(word, chars):\n            for letter in word:\n                if chars[letter] > 0:\n                    chars[letter] -= 1\n                else:\n                    return False\n            return True\n        \n        for word in words:\n            counter = Counter(chars)\n            if isValid(word, counter):\n                char_sum += len(word)\n        \n        return char_sum\n        \n        \n    \n", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        tot = 0\n        for w in words:\n            d = {}\n            for c in chars:\n                if c in d: d[c] += 1\n                else: d[c] = 1\n            temp = 0\n            for l in w:\n                if l in d and d[l] > 0:\n                    d[l] -= 1 \n                    temp += 1\n                else:\n                    temp = 0\n                    break\n                    \n            tot += temp\n            \n        return tot", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        \n#         ans = 0\n#         for word in words:\n            \n#             charscopy = [i for i in chars]\n#             length = 0\n#             for char in word:\n#                 if char in charscopy:\n#                     length+=1\n#                     charscopy.remove(char)\n            \n#             if length == len(word):\n#                 ans += length\n        \n#         return ans\n        ans = 0\n        for word in words:\n            \n            charscopy = [i for i in chars]\n            length = 0\n            for char in word:\n                if char not in charscopy:\n                    break\n                charscopy.remove(char)\n            else:\n                ans += len(word)\n        \n        return ans\n", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        ans=0\n        for w in words:\n            tc=chars\n            flag=True\n            for l in w:\n                if l in tc:\n                    tc = tc.replace(l,'',1)\n                else:\n                    flag=False\n            if flag:\n                ans+=len(w)\n        return ans", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        d={}\n        c=0\n        for i in chars:\n            if i in d:\n                d[i]+=1\n            else:\n                d[i]=1\n        for i in words:\n            dd={}\n            for j in i:\n                if j in dd:\n                    dd[j]+=1\n                else:\n                    dd[j]=1\n            c1=0\n            for x in dd.keys():\n                if x in d:\n                    if d[x]>=dd[x]:\n                        c1+=dd[x]\n                    else:\n                        c1=0\n                        break\n                else:\n                    c1=0\n                    break\n            c+=c1\n        return c", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        '''\n        # first solution\n        register = {}\n        for char in chars: register[char] = register.get(char, 0) + 1\n        result = 0\n        for word in words:\n            temp = {}\n            for char in word: temp[char] = temp.get(char, 0) + 1\n            for char, num in temp.items():\n                if temp[char] > register.get(char, 0):\n                    break\n            else:\n                result+=len(word)\n        return result\n        '''\n        # second solution\n        tot = 0\n        for w in words:\n            d = {}\n            for c in chars:\n                if c in d: d[c] += 1\n                else: d[c] = 1\n             \n            temp = 0\n            for l in w:\n                if l in d and d[l] > 0:\n                    d[l] -= 1 \n                    temp += 1\n                else:\n                    temp = 0\n                    break\n                    \n            tot += temp\n            \n        return tot        \n", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        charsDict = {}\n        for char in chars:\n            if char not in charsDict:\n                charsDict[char] = 0\n            charsDict[char] += 1\n        \n        ans = 0\n        \n        for word in words:\n            tempDict = charsDict.copy()\n            isGood = True\n            for char in word:\n                if char not in tempDict:\n                    isGood = False\n                    continue\n                else:\n                    if tempDict[char] == 0:\n                        isGood = False\n                        continue\n                        \n                    else:\n                        tempDict[char] -= 1\n        \n            if isGood:\n                ans += len(word)\n            \n        \n        return ans\n        \n", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        cCounter = collections.Counter(chars)\n        sum = 0\n        for word in words:\n            wCounter = collections.Counter(word)\n            match = True\n            for k,v in wCounter.items():\n                if cCounter[k] < v:\n                    match = False\n            if match:\n                sum += len(word)\n        return sum", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        c1 = [0] * 256\n        for c in chars:\n            c1[ord(c)] += 1\n            \n        res = 0\n        for word in words:\n            if len(chars) < len(word):\n                continue\n            c2 = [0] * 256\n            for c in word:\n                c2[ord(c)] += 1\n            \n            goodStr = True\n            for i in range(256):\n                if c1[i] < c2[i]:\n                    goodStr = False\n                    break\n            \n            if goodStr:\n                res += len(word)\n        return res", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        \n        def get_freq(input):\n            freq = {}\n            for c in input:\n                if c not in freq:\n                    freq[c] = 0\n                freq[c] += 1\n            return freq\n        \n        def can_contain(freq_source, freq_word):\n            for key, item in freq_word.items():\n                if key not in freq_source or freq_source[key] < item:\n                    return False\n                \n            return True\n        \n        total_length = 0\n        freq_source = get_freq(chars)\n        for word in words:\n            freq_word = get_freq(word)\n            if can_contain(freq_source, freq_word):\n                total_length += len(word)\n                \n        return total_length", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        charsDict = {}\n        for char in chars:\n            if char not in charsDict:\n                charsDict[char] = 0\n            charsDict[char] += 1\n        \n        ans = 0\n        \n        for word in words:\n            wordDict = {}\n            for char in word:\n                if char not in wordDict:\n                    wordDict[char] = 0\n                wordDict[char] += 1\n            \n           \n            isGood = True\n            for key, val in list(wordDict.items()):\n\n                if key not in charsDict:\n                    isGood = False\n                    break\n                elif val > charsDict[key]:\n                    isGood = False\n                    break                  \n            \n            if isGood:\n                ans += len(word)\n            \n        \n        return ans\n        \n", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        res = 0\n        d = dict()\n        for char in chars:\n            d[char] = d.get(char,0) + 1\n        for word in words:\n            c = dict()\n            for char in word:\n                c[char] = c.get(char,0) + 1\n            bad = False\n            while c and not bad:\n                char = c.popitem()\n                if char[0] in d and d[char[0]] >= char[1]:\n                    continue\n                else:\n                    bad = True\n            if not bad:\n                res += len(word)\n        return res", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        out=0\n        chars=list(chars)\n        for i in words:\n            f=0\n            temp=chars[:]\n            for j in i:\n                if j in temp:\n                    temp.remove(j)\n                else:\n                    f=1\n                    break\n            if f==0:\n                out+=len(i)\n        return out", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        # first solution\n        register = {}\n        for char in chars: register[char] = register.get(char, 0) + 1\n        result = 0\n        for word in words:\n            temp = {}\n            for char in word: temp[char] = temp.get(char, 0) + 1\n            for char, num in list(temp.items()):\n                if temp[char] > register.get(char, 0):\n                    break\n            else:\n                result+=len(word)\n        return result\n", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        charChars = Counter(chars)\n        counter = 0\n        for word in words:\n            countC = Counter(word)\n            count = 0\n            for letter in countC.items():\n                if letter[0] in charChars and charChars[letter[0]] >= letter[1]:\n                    count += 1\n                    \n            if count == len(countC):\n                counter += len(word)\n        return counter", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        dic_char = {}\n        for i in chars:\n            if i not in dic_char:\n                dic_char[i] = 1\n            else:\n                dic_char[i] += 1\n        \n        cnt = 0\n        \n        for i in words:\n            dic_word = {}\n            for j in i:\n                if j not in dic_word:\n                    dic_word[j] = 1\n                else:\n                    dic_word[j] += 1\n            print(dic_word)\n            for k, v in dic_word.items():\n                if k not in dic_char or dic_char[k] < v:\n                    break\n            else:\n                cnt += len(i)  \n        \n        return cnt", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        charsDict = {}\n        for char in chars:\n            if char not in charsDict:\n                charsDict[char] = 0\n            charsDict[char] += 1\n        \n        ans = 0\n        \n        for word in words:\n            wordDict = {}\n            for char in word:\n                if char not in wordDict:\n                    wordDict[char] = 0\n                wordDict[char] += 1\n            \n           \n            isGood = True\n            for key, val in list(wordDict.items()):\n\n                if key not in charsDict:\n                    isGood = False\n                    continue\n                elif val > charsDict[key]:\n                    isGood = False\n                    continue                  \n            \n            if isGood:\n                ans += len(word)\n            \n        \n        return ans\n        \n", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        def strToList(word):\n            return [char for char in word]\n        \n        def canForm(word, bank):\n            tmp = word\n            while(tmp != []):\n                x = tmp[0]\n                tmp.remove(tmp[0])\n                if(x in bank):\n                    bank.remove(x)\n                else:\n                    return False\n            return True\n        \n        totalLen = 0\n        for word in words:\n            bank = strToList(chars)\n            wordAsList = strToList(word)\n            if(canForm(wordAsList, bank)):\n                totalLen += len(word)\n        return totalLen", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        setChars = set(chars)\n        counts = [0] * len(setChars)\n        map = {}\n        res = 0\n        for i, val in enumerate(setChars):\n            map[val] = i\n        for i, val in enumerate(chars):\n            counts[map.get(val)] += 1\n        for word in words:\n            tempCounts = counts[:]\n            flag = 1\n            for char in word:\n                index = map.get(char, -1)\n                if index == -1:\n                    flag = 0\n                    continue\n                tempCounts[index] -= 1\n                if tempCounts[index] < 0:\n                    flag = 0\n                    continue\n            if flag:\n                res += len(word)\n        return res\n                \n        \n", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        d = {}\n        for i in range(len(chars)):\n            if(chars[i] not in d):\n                d[chars[i]] = 1\n            else:\n                d[chars[i]]+=1\n        c = 0\n        for i in range(len(words)):\n            di = {}\n            for j in range(len(words[i])):\n                if(words[i][j] not in di):\n                    di[words[i][j]]  = 1\n                else:\n                    di[words[i][j]]  += 1\n            l = list(di.keys())\n            temp = 0\n            for j in range(len(l)):\n                if(l[j] not in d):\n                    temp = 1\n                    break\n                else:\n                    if(di[l[j]] > d[l[j]]):\n                        temp = 1\n                        break\n                    else:\n                        temp = 0\n            if(temp==0):\n                c+=len(words[i])\n        return c       \n", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        count = 0\n        freq = {}\n        for n in range(len(chars)):\n            if chars[n] not in freq.keys():\n                freq[chars[n]] = 1\n            else:\n                freq[chars[n]] += 1\n        for word in words:\n            word_fq = {}\n            for m in range(len(word)):                    \n                if word[m] not in word_fq.keys():\n                    word_fq[word[m]] = 1\n                else:\n                    word_fq[word[m]] += 1\n            \n            is_fit = True\n            for key in word_fq.keys():\n                if key not in freq.keys():\n                    is_fit = False\n                    break\n                if word_fq[key] > freq[key]:\n                    is_fit = False\n                    break\n            if is_fit:\n                count += len(word)\n                \n        return count", "class Solution:\n    def countCharacters(self, words, chars):\n        sum = 0\n        count = {}\n        for c in chars:\n            if c in count:\n                count[c] += 1\n            else:\n                count[c] = 1\n        for word in words:\n            seen = {}\n            validWord = True\n            for c in word:\n                if c in seen:\n                    seen[c] += 1\n                else:\n                    seen[c] = 1\n                if c not in count or seen[c] > count[c]:\n                    validWord = False\n            if validWord:\n                sum += len(word)\n        return sum", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n      return bruteforce_with_counter(words, chars)\n\n# words=[\\\"cat\\\", \\\"bat\\\", \\\"mat\\\", \\\"battle\\\"], chars=[\\\"catbtle\\\"]      \n# cat vs catbtle\n# mat vs catbtle\n\nfrom collections import Counter\ndef bruteforce_with_counter(words, chars):\n  counter = Counter(chars)\n  # BUG. SHIT.\n  #return sum(len(w) for w in words if min((counter - Counter(w)).values()) >= 0)\n  #return sum(len(w) for w in words if max((Counter(w)-counter).values()) <= 0)\n  return sum(len(w) for w in words if not (Counter(w)-counter))", "from collections import Counter as di\n\n\nclass Solution:\n    def countCharacters(self, a: List[str], c: str) -> int:\n        d = di(c)\n        ans = 0\n        for i in a:\n            d1 = di(i)\n            if len(d1 - d) == 0:\n                ans += sum(d1.values())\n        return ans\n", "from collections import Counter\nclass Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        letters = Counter(chars)\n        out = 0\n        for word in words:\n            length = len(word)\n            if not(Counter(word)-letters):\n                out += length\n        return out", "from collections import Counter\n\nclass Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        def issubset(wc, cc):\n            for x in wc.keys():\n                cc[x]=cc.get(x,0)-wc[x]\n            for x in cc.keys():\n                if cc[x]<0:\n                    return False\n            return True\n        res=0\n        cc=Counter(chars)\n        for word in words:\n            wc=Counter(word)\n            if issubset(wc, cc.copy()):\n                res+=len(word)\n        return res", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        \n        char_count = collections.Counter(chars)\n        total = 0\n        for word in words:\n            if not collections.Counter(word) - char_count:\n                total += len(word)\n                \n        return total", "from collections import Counter\nclass Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        d = Counter(chars)\n        cnt = [Counter(w) for w in words]\n        ans = 0\n        for i, x in enumerate(cnt):\n            found = True\n            print(x)\n            for k in x:\n                if k not in d or x[k] > d[k]:\n                    found = False\n                    break\n            if found:\n                ans += len(words[i])\n        return ans", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        chars = Counter(chars)\n        return sum(len(w) for w in words if not Counter(w) - chars)\n                \n", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        count = Counter(chars)\n        out = 0\n        \n        for word in words:\n            curr = Counter(word)\n            if not curr-count:\n                out += len(word)\n        return out\n", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        chars = Counter(chars)\n        return sum(len(word) for word in words if not (Counter(word) - chars))\n", "from collections import Counter\n\nclass Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        c_c = Counter(chars)\n        good_w = []\n        for w in words:\n            w_c = Counter(w)\n            sampled_w = ''.join([c for c in w if c_c[c] >= w_c[c]])\n            if w == sampled_w:\n                good_w.append(w)\n        return sum(len(w) for w in good_w)", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        char_map = {c:chars.count(c) for c in set(chars)}\n        count = 0\n        for w in words:\n            good = True\n            for c in w:\n                if c not in char_map.keys() or w.count(c) > char_map[c]:\n                    good = False\n            if good:\n                count += len(w)\n        return count", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        \n        ### Method 1:\n        letters = {}\n        for char in chars:\n            letters[char] = letters.get(char, 0) + 1\n        \n        count = 0\n        for word in words:\n            tmp = letters.copy()\n            flag = 1\n            for char in word:\n                if char in tmp and tmp[char] >= 1:\n                    tmp[char] -= 1\n                else:\n                    flag = 0\n                    break\n            if flag:\n                count += len(word)\n        return count \n", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        d={}\n        for i in chars:\n            if i in d:\n                d[i]+=1\n            else:\n                d[i]=1\n        l=0\n        for i in words:\n            flag = True\n            for j in i:\n                if j in d:\n                    if i.count(j)>d[j]:\n                        flag=False\n                else:\n                    flag = False\n            if flag:\n                l+=len(i)\n        return l", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        ans = 0\n        \n        for word in words:\n            c = collections.Counter(chars)\n            add = True\n            \n            for letter in word:\n                if c[letter] > 0:\n                    c[letter] -= 1\n                else:\n                    add = False\n            \n            if add == True:\n                ans += len(word)\n            \n        return ans\n", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        ans = 0\n        cmap = {ch:chars.count(ch) for ch in chars}\n        for word in words:\n            wmap = {ch:word.count(ch) for ch in word}\n            count_me_in = True\n            \n            for k,v in wmap.items():\n                try:\n                    v1 = cmap[k]\n                    if v1 < v:\n                        raise Exception('Frequency not enough!')\n                except:\n                    count_me_in = False\n                    break\n            \n            if count_me_in:\n                \n                ans += len(word)\n        return ans", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        char_count = collections.Counter(chars)\n        \n        good_str_len = 0\n        \n        for word in words:\n            temp = char_count.copy()\n            temp_str_len = 0\n            for ch in word:\n                if ch in temp and temp[ch] > 0:\n                    temp_str_len += 1\n                    temp[ch] -= 1\n            if temp_str_len == len(word):\n                good_str_len += len(word)\n                \n                \n        return good_str_len\n", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        c1 = [0] * 256\n        for c in chars:\n            c1[ord(c)] += 1\n            \n        res = 0\n        for word in words:\n            c2 = [0] * 256\n            for c in word:\n                c2[ord(c)] += 1\n            \n            goodStr = True\n            for i in range(256):\n                if c1[i] < c2[i]:\n                    goodStr = False\n                    break\n            \n            if goodStr:\n                res += len(word)\n        return res", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        if(len(chars) == 0 or len(words) == 0):\n            return 0\n        \n        # Go through the valid characters and store the counts in a hash table\n        letterCounts = {}\n        for c in chars:\n            if(str(c) in letterCounts):\n                letterCounts[str(c)]+=1\n            else:\n                letterCounts[str(c)] = 1\n                \n        totalLength = 0\n        for word in words:\n            currentLetterCounts = {}\n            for letter in word:\n                if(str(letter) in currentLetterCounts):\n                    currentLetterCounts[str(letter)]+=1\n                else:\n                    currentLetterCounts[str(letter)] = 1\n           \n            valid = True\n            for key, value in currentLetterCounts.items():\n                if(key not in letterCounts):\n                    valid=False\n                    break\n                \n                if(letterCounts[key] < value):\n                    valid=False\n                    break\n            if(valid):\n                totalLength+=len(word)\n        \n        return totalLength", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        ans = 0\n        chars_number = collections.Counter(chars)\n        for w in words:\n            word_number = collections.Counter(w)\n            print(word_number)\n            for i in word_number:\n                print(word_number[i])\n                if word_number[i] > chars_number[i]:\n                    \n                    break\n            else:\n                ans+=len(w)\n        return ans", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        flag = [0 for i in range(len(words))]\n        total = 0\n        \n        \n        for word in words :\n            \n            dic = {}\n            \n            for char in word :\n                if char in dic :    \n                    dic[char] += 1 \n                else :\n                    dic[char] = 1 \n                        \n            count = 0 \n                    \n            for i in range(len(chars)) :\n                if chars[i] in dic and dic[chars[i]] > 0:    \n                    dic[chars[i]] -= 1 \n                    count += 1\n                            \n            good = True\n            \n            for char in dic :\n                if dic[char] > 0 :\n                    good = False \n                    break\n                    \n            if good : \n                total += count\n        \n        return total\n                    \n", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        myd = {}\n        count = 0\n        for i in chars:\n            if i in myd.keys():\n                myd[i] +=1\n            else:\n                myd[i]= 1\n        \n        for word in words:\n            allin = True\n\n            for letter in word:\n                if letter in myd.keys():\n                    if word.count(letter) > myd[letter]:\n                        allin = False\n                else:\n                    allin = False\n            if allin==True:\n                count+=len(word)\n        return count", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        good_words_len_sum = 0\n        counter = {}\n        for char in chars:\n            if not char in counter:\n                counter[char] = 1\n            else:\n                counter[char] += 1\n        for word in words:\n            my_counter = counter.copy()\n            for char in word:\n                if my_counter.get(char, 0) > 0:\n                    my_counter[char] -= 1\n                else:\n                    break\n            else:\n                good_words_len_sum += len(word)\n        return good_words_len_sum", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n\n        return sum([len(word) for word in words if(len(collections.Counter(word) - collections.Counter(chars)) == 0)])", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        \n        length=0\n        \n        m=Counter(chars)\n        \n        for word in words:\n            \n            passed=True\n            \n            for char in word:\n                \n                if m[char]<word.count(char):\n                    \n                    passed=False\n                    \n            if passed:\n                \n                length+=len(word)\n                \n                \n        return length\n                \n                \n                    \n        \n       \n", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        from collections import Counter as cnt\n        return sum([not cnt(word)-cnt(chars) and len(word) for word in words])", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        count = 0\n        dic = collections.Counter(chars)\n        for word in words:\n            passed = True\n            for ch in word:\n                if dic[ch] < word.count(ch):\n                    passed = False\n            if passed:\n                count += len(word)\n        return count", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n                return sum( len(w) for w in words if not Counter(w) - Counter(chars))\n", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        counter = 0\n        for i in words:\n            a = i\n            for j in chars:\n                if j in a:\n                    a = a[:a.index(j)] + a[a.index(j)+1:]\n            if len(a) == 0:\n                counter += len(i)\n        return counter\n                \n", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        return sum(not Counter(w) - Counter(chars) and len(w) for w in words)", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        \n        words = [collections.Counter(word) for word in words]\n        \n        c = collections.Counter(chars)\n        \n        print(words)\n        print(c)\n        \n        return sum([sum(list(w.values())) for w in words if all([c[i] >= w[i] for i in w])])", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        freq = defaultdict(int)\n        \n        for l in chars:\n            freq[l] += 1\n        \n        count = 0\n        for word in words:\n            testFreq = freq.copy()\n            match = True\n            for letter in word:\n                if testFreq[letter] <= 0:\n                    match = False\n                    break\n                testFreq[letter] -= 1\n            if match:\n                count += len(word)\n            \n        return count", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        tot = 0\n        totchars = {}\n        for char in chars:\n            if char in totchars:\n                totchars[char] += 1\n            else:\n                totchars[char] = 1\n        for word in words:\n            word = sorted(word)\n            works = True\n            i = 0\n            while i < len(word):\n                count = 0\n                while word[i + count] == word[i]:\n                    count += 1\n                    if i + count == len(word):\n                        break\n                if word[i] in totchars:\n                    if count > totchars[word[i]]:\n                        works = False\n                else:\n                    works = False\n                i += count\n            if works:\n                tot += len(word)\n                \n        return tot", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        sum=0\n        p=0\n        for th in words:\n            for i in range(len(th)):\n                if th[i] in chars:\n                    if th.count(th[i])<=chars.count(th[i]):\n                      p=p+1\n            if p==len(th):\n                sum=sum+p\n            p=0\n        return sum", "from collections import Counter\nclass Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        ans = 0\n        for i in range(len(words)):\n            if Counter(words[i]) & Counter(chars) == Counter(words[i]):\n                ans += len(words[i])\n                \n        return ans\n", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        from collections import Counter\n        sum_=0\n        for word in words:\n            s=Counter(chars)\n            flag=0\n            for letter in word:\n                if letter in list(s.keys()) and s[letter]!=0:\n                    s[letter]-=1\n                else:\n                    flag=1\n            if flag==0:\n                sum_+=len(word)\n        return sum_\n", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        out = 0 \n        \n        for word in words:\n            cnt = 0\n            for letter in word:\n                if letter in chars and word.count(letter) <= chars.count(letter):\n                    cnt += 1\n            if cnt == len(word):\n                out += len(word)\n        return out \n            \n            \n            \n            \n            \n            \n            \n", "from collections import Counter\nclass Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        letters = Counter(chars)\n        \n        c = 0\n        \n        for w in words:\n            if Counter(chars) & Counter(w) == Counter(w):\n                c += len(w)\n        \n        \n        return c", "import collections\nclass Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        n = 0\n        for word in words:\n            count = 0\n            for letter in word:\n                if letter in chars and word.count(letter) <= chars.count(letter):\n                    count += 1\n            if count == len(word):\n                n += len(word)\n        return n \n                    \n", "class Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        res = []\n        for word in words:\n            count = 0\n            for char in word:\n                if char in chars and word.count(char)<=chars.count(char):\n                    count+=1\n            if count==len(word):\n                res.append(count)\n                \n        return sum(res)\n                    \n            \n", "from collections import Counter\n\nclass Solution:\n    def countCharacters(self, words: List[str], chars: str) -> int:\n        r = Counter(chars)\n        return sum([len(word) if Counter(word) - r == Counter() else 0 for word in words])"]