["def finding_k(arr):\n    for n in range(max(arr)-1, 0, -1):\n        if len({ x%n for x in arr }) == 1: return n\n    return -1", "from itertools import repeat\nfrom functools import reduce\nfrom operator import sub\nfrom math import gcd\n\ndef finding_k(arr):\n    return reduce(gcd, filter(None, map(sub, set(arr), repeat(min(arr)))), 0) or -1", "def finding_k(arr):\n    s = set(arr)\n    if s == {1}:\n        return -1\n    for k in range(max(s), 0, -1):\n        r = arr[0] % k\n        if all(x % k == r for x in s):\n            return k\n    return -1\n    \n", "finding_k=lambda a: max([k for k in range(1, max(a)) if eval('=='.join([str(z)+'%'+str(k) for z in a]))], default=-1)", "def finding_k(arr):\n    for i in range(max(arr)-1, 0, -1):\n        if len({j%i for j in arr}) == 1: return i\n    return -1", "finding_k=lambda a:next((i for i in range(max(a)-1,0,-1)if len(set([j%i for j in a]))==1),-1)", "from fractions import gcd\nfrom functools import reduce\n\ndef finding_k(arr):\n    fr = [x-min(arr) for x in arr]\n    if all(v == 0 for v in fr):\n        return -1\n    else:\n        return  reduce(lambda x,y:gcd(x,y),fr)", "def finding_k(arr):\n    #your code here\n    maxValue = max(arr) - min(arr)\n    k = 0\n    while maxValue>0:\n        if len(set(map(lambda x:x%maxValue,arr))) == 1:\n            k = maxValue\n            break\n        maxValue -= 1\n    if k:\n        return k\n    else:\n        return -1", "from functools import reduce; gcd=lambda a,b: gcd(b,a%b) if b else a; finding_k=lambda arr: reduce(lambda a,b: gcd(a,b), [abs(e-arr[0]) for e in arr]) or -1", "def finding_k(arr):\n    ans=[]\n    for i in range(1,101):\n        if len({j%i for j in arr})==1:\n            ans.append(i)\n    return max(ans) if len(ans)<100 else -1"]