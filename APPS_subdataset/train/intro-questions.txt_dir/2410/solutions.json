["class Solution:\n    def isLongPressedName(self, name: str, typed: str) -> bool:\n        name=list(name)\n        typed= list(typed)\n        \n        while name:\n            i, j=0,0\n            n=name[0]\n            while name and name[0]==n:\n                i+=1\n                name.pop(0)\n            while typed and typed[0]==n:\n                j+=1\n                typed.pop(0)\n                \n            if j<i:\n                return False \n        if typed:\n            return False\n    \n        return True\n                \n                \n", "class Solution:\n    def isLongPressedName(self, name: str, typed: str) -> bool:\n        \n\n        if name == typed:\n            return True\n        if len(set(name)) != len(set(typed)):\n            return False\n        if len(typed) <= len(name):\n            return False\n        i=0\n        j=0\n        while j<len(typed) and i<len(name):\n            if name[i] == typed[j]:\n                i+=1\n                j+=1\n            else:\n                if typed[j] == typed[j-1] and j!=0:\n                    j+=1\n                else:\n                    return False\n                \n        if i == len(name):\n            i=i-1\n        if j== len(typed):\n            j=j-1\n        return name[i]==typed[j]\n", "class Solution:\n    def isLongPressedName(self, name: str, typed: str) -> bool:\n        i = j = 0\n        while i < len(name) or j < len(typed):\n            if i < len(name) and j < len(typed) and name[i] == typed[j]:\n                i, j = i + 1, j + 1\n            elif i > 0 and j < len(typed) and name[i-1] == typed[j]:\n                j += 1\n            else:\n                return False\n        if i == len(name) and j == len(typed):\n            return True\n        return False", "class Solution:\n    def isLongPressedName(self, name: str, typed: str) -> bool:\n        n = 0\n        t = 0\n        \n        while n < len(name) and t < len(typed):\n            if name[n] == typed[t]:\n                n += 1\n                t += 1\n            else:\n                if t and typed[t] == typed[t - 1]:\n                    t += 1\n                else:\n                    return False\n        \n        if n != len(name):\n            return False\n            \n        while t < len(typed):\n            if typed[t] == typed[t - 1]:\n                t += 1\n            else:\n                return False\n        \n        return True", "class Solution:\n    def isLongPressedName(self, name: str, typed: str) -> bool:\n        # as long as the current letter is a \n        name_len, typed_len = len(name), len(typed)\n        if name == typed:\n            return True\n        elif name_len >= typed_len:\n            return False\n        \n        t_left, t_right = 0, 1\n        n_left, n_right = 0, 1\n        \n        while n_left < name_len and t_left < typed_len:\n            # print(n_left)\n            while n_right < name_len and name[n_left] == name[n_right]:\n                n_right += 1\n            while t_right < typed_len and typed[t_left] == typed[t_right]:\n                t_right += 1\n               \n            # print(n_left, name[n_left])\n            # print(t_left, typed[t_left])\n            if name[n_left] != typed[t_left] or (n_right - n_left) > (t_right - t_left):\n                return False\n            else:\n                n_left, n_right = n_right, n_right + 1\n                t_left, t_right = t_right, t_right + 1\n        \n        return n_left == name_len and t_left == typed_len\n                \n        \n", "class Solution:\n    def isLongPressedName(self, name: str, typed: str) -> bool:\n        if name == typed:\n            return True\n        \n        i = j = 0\n        \n        while i < len(name) and j < len(typed):\n            cnt_i = cnt_j = 0\n            while i < len(name) - 1 and name[i] == name[i + 1]:\n                i += 1\n                cnt_i += 1\n            \n            while j < len(typed) - 1 and typed[j] == typed[j + 1]:\n                j += 1\n                cnt_j += 1\n            \n            if cnt_i > cnt_j:\n                return False\n            if name[i] != typed[j]:\n                return False\n            \n            i += 1\n            j += 1\n\n        if i != len(name) or j != len(typed):\n            return False\n        return True\n", "class Solution:\n    def isLongPressedName(self, name: str, typed: str) -> bool:\n        if (len(typed) < len(name)):\n            return False\n        \n        typed_index = 0\n        \n        \n        for i in range(len(name)):\n            if (typed_index >= len(typed)):\n                return False\n            elif (name[i] != typed[typed_index]):\n                if (typed_index == 0 or typed[typed_index - 1] != typed[typed_index]):\n                    return False\n                else:\n                    letter = typed[typed_index]\n                    \n                    \n                    while (typed_index < len(typed) and typed[typed_index] == letter):\n                        typed_index += 1\n                        \n                        \n                    if (typed_index == len(typed) or typed[typed_index] != name[i]):\n                        return False\n            else:\n                pass\n            \n            typed_index += 1\n            \n        \n        if (typed_index < len(typed) and (typed[typed_index - 1] != typed[typed_index] or typed[typed_index:].count(typed[typed_index]) != len(typed) - typed_index)):\n            return False\n        \n        return True", "class Solution:\n    def isLongPressedName(self, name: str, typed: str) -> bool:\n        if name is None or len(name) == 0:\n            return True\n        \n        index = 0\n        index2 = 0\n        \n        while index < len(name) and index2 < len(typed):\n            \n            if name[index] == typed[index2]:\n                index += 1\n                index2 += 1\n            elif name[index] != typed[index2] and index > 0 and name[index-1] == typed[index2]:\n                index2 += 1\n            else:\n                return False\n        \n        while index2 < len(typed):\n            if name[len(name)-1] == typed[index2]:\n                index2 += 1\n            else:\n                return False\n            \n        return index == len(name)", "class Solution:\n    def isLongPressedName(self, name: str, typed: str) -> bool:\n        l, r = 0, 0\n        n, m = len(name), len(typed)\n        last = None\n        while l < n and r < m:\n            if name[l] == typed[r]:\n                last = name[l]\n                l += 1\n                r += 1\n            else:\n                if last and typed[r] == last:\n                    r += 1\n                else:\n                    return False\n        if l == n:\n            while r < m:\n                if typed[r] == last:\n                    r += 1\n                else:\n                    return False\n            return True\n        return False", "\nclass Solution:\n    def isLongPressedName(self, name: str, typed: str) -> bool:\n        idx = 0\n        \n        name_len,typed_len = len(name), len(typed)\n        \n        for i,val in enumerate(typed):\n            if idx<name_len and name[idx] == val:\n                idx+=1\n                \n            elif i == 0 or typed[i] != typed[i-1]:\n# If first character mismatch, or it is not long-pressed repeated characters\n                return False\n   \n        return idx==name_len ", "class Solution:\n    def isLongPressedName(self, name: str, typed: str) -> bool:\n        t = self.count(name)\n        s = self.count(typed)\n        if len(t) != len(s):\n            return False\n        \n        for tt, ss in zip(t, s):\n            if tt[0] != ss[0]:\n                return False\n            \n            if tt[1] > ss[1]:\n                return False\n            \n        return True\n        \n        \n    def count(self, s):\n        res = []\n        prev = None\n        cnt = 0\n        for c in s:\n            if c == prev:\n                cnt += 1\n            elif cnt > 0:\n                res.append((c, cnt))\n                cnt = 1\n            else:\n                cnt = 1\n                \n            prev = c\n            \n        return res\n"]