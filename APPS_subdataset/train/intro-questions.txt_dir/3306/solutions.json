["from fnmatch import fnmatch\n\ndef solve(a, b):\n    return fnmatch(b, a)", "import re\ndef solve(a,b):\n    return bool(re.fullmatch(a.replace('*', '.*'), b))", "def solve(a,b):\n  if a == b: return True\n  if \"*\" not in a: return False\n  \n  sides = a.split(\"*\")\n  missing = b[len(sides[0]):len(b)-len(sides[1])]\n  c = a.replace(\"*\", missing)\n  return c == b\n", "solve=lambda Q,S:not __import__('re').sub(Q.replace('*','.*'),'',S)", "def solve(a,b):\n    s = a.find(\"*\")\n    if s == -1:\n        return a == b\n    else:\n        a = list(a)\n        b = list(b)\n        del b[s:s+1+len(b)-len(a)]\n        a.remove(\"*\")\n        return a == b", "import re\n\ndef solve(a, b):\n    return bool(re.match(f\"^{a.replace('*', '.*')}$\", b))\n\n\n# without re\n#\n#def solve(a, b):\n#    if \"*\" in a:\n#        s, e = a.split(\"*\")\n#        return b.startswith(s) and b.replace(s, \"\").endswith(e)\n#    else:\n#        return a == b\n", "import re\n\ndef solve(a,b):\n    pattern = a.replace(\"*\", \".*\")\n    return bool(re.fullmatch(pattern, b))", "import re\n\ndef solve(a,b):\n    pattern = f'^{a.replace(\"*\", \".*\")}$'\n    return bool(re.match(pattern, b))\n", "import re\ndef solve(a,b):\n    rx = '^' + '.*'.join(a.split('*')) + '$'\n    return bool(re.search(rx,b))", "solve=lambda a,b:a==b or('*'in a and(lambda l:not(l[0]==l[1]==b)and b.startswith(l[0])and b.endswith(l[1]))(a.split('*')))"]