["weight=lambda n,w,e=__import__('math').exp(-2):(1-3*e)/(1-e)/4*(1-e**n)*w", "# i0 = 0.14849853757254047\nfrom math import e\ndef weight(n, w):\n    total = 1\n    for i in range(1, n + 1): \n        total += e ** (-2 * i)\n    return w * 0.14849853757254047 * total\n", "def weight(n, w):\n    from math import e\n    i0 = 0.14849853757254047\n    an = (1 - e ** -(2 * n + 2)) / (1 - e ** -2)\n    return i0 * an * w\n", "def weight(n, w):\n    return 0.171741178625167*w", "weight=lambda *_:_[-1]/5.8227", "import decimal\n\ndef weight(n, w):\n    I0 = decimal.Decimal(0.14849853757254047)\n    OFFSET = decimal.Decimal(7.389056098930639)\n    return float((OFFSET - (1 / OFFSET ** n)) / (OFFSET - 1) * w * I0)", "i0 = 0.14849853757254047\nfrom math import exp\n\ndef weight(n, w):\n    area = i0 * sum([exp(-2*m) for m in range(n)])\n    return w*area", "# i0 = 0.14849853757254047\nimport math\n\ndef weight(n, w):\n    area=0\n    for n in range(0,n):\n        Bn=math.exp(-1-n)\n        Kn=math.exp(-n)\n        if(Kn<1e-300)or(Bn<1e-300):\n            n+=1\n        else:\n            aire=0.5*(n*Bn**2-n*Kn**2+(Kn**2-Bn**2)/2+Bn**2*math.log(Bn)-Kn**2*math.log(Kn))\n        area+=aire\n    return area*w", "from math import exp\ndef weight(n, w):\n    return w/4*(1-3*exp(-2))*(1-exp(-2*n-4))/(1-exp(-2))\n", "# i0 = 0.14849853757254047\ndef weight(n, w):\n    i0 = 0.14849853757254\n    eConst = 2.71828182845904\n    eInvConstSq = 1 / (eConst ** 2)\n    nPartialWeight = 0\n    nPartialSurface = i0\n    for iArch in range(1, n+1):\n        nPartialWeight = nPartialWeight + ( iArch * nPartialSurface * w * (1 - eInvConstSq))\n        nPartialSurface = nPartialSurface / (eConst ** 2)\n    return nPartialWeight\n", "import math\n\n\ndef weight(n, w):\n    x0 = math.exp(-1)\n    i0 = 0.14849853757254047\n    p = i0\n    for i in range(1, n+1):\n        x = math.exp(-i-1)\n        k = x/x0\n        p += i0*k*k\n    return p*w", "i0 = 0.14849853757254047\nr = 0.1353352832366127 #r is calculated from observation of different values of Cn, Geometric series is formed\ndef weight(n, w):\n    return w*i0*(1-pow(r,n))/(1-r)", "import math\ndef weight(n, w):\n    i0 = 0.14849853757254047\n    return i0 * w * (1- math.exp(-2*n))/(1-math.exp(-2))", "from math import e\ndef weight(n, w):\n    return -0.17174117862516716*(e**(-2*n) - 1)*w", "from math import exp\ndef weight(N, w):\n    return sum(.25*exp(-2*(n+1))*(exp(2)-3) for n in range(N))*w", "import math\nimport decimal\ndef weight(n, w):\n    weight = 0\n    i0 = 0.14849853757254047\n    \n    ##constant estimated by dividing two integrals\n    fundamental_constant_of_glass_windows = 0.135335283237\n    \n    while n >= 0:\n        weight += ((i0)*(fundamental_constant_of_glass_windows**n)) * w\n        n -= 1\n    return weight\n    \n    # if something is extremly dumb but it works, it isn't dumb\n", "# i0 = 0.14849853757254047\nimport math\ndef weight(n, w):\n    i0 = (1-3*math.exp(-2))/4\n    iScale = [math.exp(-2*k) for k in range(n+1)]\n    return w*i0*sum(iScale)\n", "from math import exp\nweight = lambda n, w: w * (1 - exp(-2 * n)) * 0.171741178625167174090959688267288041771996514689886836114\n", "from math import exp\n\ndef weight(n, w):\n    return w * (exp(2) - 3) * (1 - exp(-2*n)) / (4 * (exp(2) - 1))", "weight,H = lambda Q,S : (H - 3) * (1 - H ** -Q) / (H - 1) * S / 4,7.389"]