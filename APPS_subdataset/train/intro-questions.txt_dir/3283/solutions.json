["from math import ceil\n\ndef union_jack(n):\n    if not isinstance(n, (int, float)):\n        return False\n    n = max(7, ceil(n))\n    h, m = divmod(n-1, 2)\n    flag = [[\"X\" if len({i, n-j-1, j, h, h+m}) < 4+m else \"-\" for i in range(n)] for j in range(n)] \n    return \"\\n\".join(\"\".join(row) for row in flag)", "import math\ndef union_jack(n):\n    if type(n) not in [int, float]:\n        return False\n    if n < 7: n = 7\n    n = math.ceil(n)\n    x = \"-\"*(n//2-1)+\"XX\"+ \"-\"*(n//2-1) if n%2 == 0 else \"-\"*(n//2) + \"X\" + \"-\"*(n//2)\n    tmp = list(x)\n    ans, n1 = [], n//2 if n%2 != 0 else n//2-1\n    for i in range(n1):\n        t = tmp[:]\n        t[i] = 'X'\n        t[-i-1] = 'X'\n        ans.append(''.join(t))\n    center = \"X\"*n if n%2 != 0 else \"X\"*n + '\\n' + \"X\"*n\n    return '\\n'.join(ans + [center] + ans[::-1])", "import math\ndef union_jack(n):\n    if type(n) not in (int,float): \n        return False\n    n=max(7, math.ceil(n))\n    ans=[['-'] * n for i in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if i==j or i+j==n-1 or i in [n//2,(n-1)//2] or j in [n//2,(n-1)//2]:\n                ans[i][j]=\"X\"\n    return '\\n'.join(''.join(i) for i in ans)", "import math\n\ndef union_jack(n):\n    if not isinstance(n, int) and not isinstance(n, float):\n        return False\n    \n    n = max(7, math.ceil(n))\n    m = n // 2 - 1 if n % 2 == 0 else (n - 1) // 2\n    vertical = 'XX' if n % 2 == 0 else 'X'\n    horizontal = 'X' * n + '\\n' + 'X' * n if n % 2 == 0 else 'X' * n\n    \n    str = ''\n    \n    for i in range(m):\n        s = ''\n        for j in range(m):\n            s += 'X' if i == j else '-'\n        str += s + vertical + s[::-1] + '\\n'\n\n    return str + horizontal + str[::-1]", "def union_jack(n):\n    try:\n        n=-min(-7,int(-n//1))\n    except:return False\n    f=[['-X'[i==j or i==n-j-1 or (n-1)//2<=i<=n//2 or (n-1)//2<=j<=n//2]for i in range(n)]for j in range(n)]\n    return'\\n'.join(''.join(l)for l in f)", "from math import ceil\n\ndef union_jack(n):\n    if not isinstance(n, int) and not isinstance(n, float):\n        return False\n    n = max(7, ceil(n))\n    data = [['-'] * n for _ in range(n)]\n    for y in range(n):\n        data[y][y] = 'X'\n        data[y][n-y-1] = 'X'\n    col_row = [n // 2] if n % 2 else [n // 2 - 1, n // 2]\n    for cr in col_row:\n        data[cr] = ['X'] * n\n        for y in range(n):\n            data[y][cr] = 'X'\n    return '\\n'.join(''.join(d) for d in data)", "from math import ceil\n\ndef union_jack(size):\n    if isinstance(size, int) or isinstance(size, float):\n        n = max(ceil(float(size)), 7)\n    else:\n        return False\n    jack = []\n    for i in range(n):\n        row = ['-'] * n \n        row[(n - 1 + (not n % 2))//2] = row[(n-1)//2] = row[i] = row[n-1-i] = 'X'\n        jack.append(''.join(row))\n    jack[(n-1)//2] = jack[(n - 1 + (not n % 2))//2] = 'X' * n \n    return '\\n'.join(jack)      "]