["def century(year):\n    return (year + 99) // 100", "import math\n\ndef century(year):\n    return math.ceil(year / 100)", "def century(year):\n    return (year / 100) if year % 100 == 0 else year // 100 + 1", "def century(year):\n    if year%100==0:\n        return year//100\n    else:\n        return year//100+1", "def century(year):\n    return (year - 1) // 100 + 1", "from math import ceil\n\ndef century(year):\n    return ceil(year / 100)", "# From slowest to fastest.\n\nfrom math import ceil\n\ndef century(year):\n    centuries, remaining = divmod(year, 100)\n    return centuries + bool(remaining)\n\ndef century(year):\n    return ceil(year/100)\n\ndef century(year):\n    return year//100 + bool(year % 100)\n\ndef century(year):\n    return year//100 + (not not year % 100)\n    \ndef century(year):\n    return -(-year//100)\n\ndef century(year):\n    return (year + 99) // 100", "def century(year):\n\n    return 1 + (year - 1) // 100", "def century(year):\n    year=year//100+bool(year%100)\n    return year", "def century(year):\n    return -(-year//100)", "def century(year):\n    return int(year/100) if year % 100 == 0 else int(year / 100) + 1", "def century(year):\n    return year//100 + bool(year%100)", "century = lambda y: (y+99) // 100", "from math import ceil\ncentury = lambda _: ceil(_/100)", "def century(year):\n   for i in range(year):\n       if year in range((i*100)+1, (i+1)*100+1):\n           return i+1\n", "def century(year):\n    if year%100==0 :\n       return year/100\n    else :\n         return (year//100) +1  \n    # Finish this :)\n    return", "century = lambda y: y // 100 + 1 if y % 100 else y //100", "def century(year):\n    value, remainder = divmod(year, 100)\n    return value + 1 if remainder else value", "import math\ndef century(year):\n    result = year / 100\n    return math.ceil(result)\n    print (result)", "def century(year):\n    q, r = divmod(year, 100)\n    return q + bool(r)\n", "century = lambda year: (year + 99) // 100", "def century(year):\n    # Finish this :)\n    return year // 100 if year % 100 == 0 else (year // 100 + 1)", "def century(year):\n    # Finish this :)\n    return int((year-1)/100) + 1", "def century(year):\n    year = str(year)\n    if len(year) < 3:\n        return(1)\n    elif len(year) == 3 and len(year) < 4:\n        x = int(year[1] + year[2])\n        if x >= 1 and x <= 99:\n            return(int(year[0]) + 1)\n        else:\n            return(int(year[0]))\n    elif len(year) == 4 and len(year) < 5:\n        x = int(year[2] + year[3])\n        if x >= 1 and x <= 99:\n            return(int(year[0] + year[1]) + 1)\n        else:\n            return(int(year[0] + year[1]))\n    elif len(year) == 5 and len(year) < 6:\n        x = int(year[3] + year[4])\n        if x >= 1 and x <= 99:\n            return(int(year[0] + year[1] + year[2]) + 1)\n        else:\n            return(int(year[0] + year[1] + year[2]))\n    elif len(year) == 6 and len(year) < 7:\n        x = int(year[4] + year[5])\n        if x >= 1 and x <= 99:\n            return(int(year[0] + year[1] + year[2] + year[3]) + 1)\n        else:\n            return(int(year[0] + year[1] + year[2] + year[3]))\n    elif len(year) == 7 and len(year) < 8:\n        x = int(year[5] + year[6])\n        if x >= 1 and x <= 99:\n            return(int(year[0] + year[1] + year[2] + year[3] + year[4]) + 1)\n        else:\n            return(int(year[0] + year[1] + year[2] + year[3] + year[4]))\n    elif len(year) == 8 and len(year) < 9:\n        x = int(year[6] + year[7])\n        if x >= 1 and x <= 99:\n            return(int(year[0] + year[1] + year[2] + year[3] + year[4] + year[5]) + 1)\n        else:\n            return(int(year[0] + year[1] + year[2] + year[3] + year[4] + year[5]))", "century=lambda y:0-y//-100", "def century(year):\n    return round((year/100.)+.495)", "def century(year):\n    return int(year/100) + int(bool(year%100))", "def century(year):\n    if year % 100 == 0:\n        return year / 100\n    else:\n        return year // 100 + 1", "def century(year):\n    remainder = year % 100\n    year = int(year/100) \n    if remainder > 0: \n        year += 1\n    return year", "def century(year):\n    counter = 0\n    while year >= 1:\n        year = year - 100\n        counter = counter + 1\n    return counter", "from math import ceil\ndef century(year):\n    return (100 * ceil(year/100)) / 100\n", "def century(year):\n    s = str(year)\n    if year <= 100:\n        return 1\n    else:\n        if year %100 == 0:\n            return int(s[:-2])\n        else:\n            return 1 + int(s[:-2])", "def century(year):\n    S = str(year)\n    L = len(str(year))\n    if L == 2:\n        return L - 1\n    elif L == 3:\n        return int(S[0]) + 1\n    else:\n        return int(S[:-2]) if S[-2:] == '00' else int(S[:-2]) + 1", "century = lambda year: -((-1*year)//100)", "def century(year):\n    century = (year - (year % 100)) / 100 \n    if (year % 100 == 0):\n        return century\n    else:\n        return century + 1\n", "def century(year):\n    if year < 101:\n        m = 1\n    else:\n        y = str(year)\n        m = int(y[:-2])\n        n = int(y[-2:])\n        if n != 0:\n            m += 1\n    #print(m)\n    return m", "def century(year):\n    if year >= 100 and year%100 == 0:\n        return int(year/100)\n    elif year>=100:\n        return int(year/100)+1\n    else:\n        return 1", "def century(year):\n    if year > 99:\n        if int(str(year)[2:]) > 0:\n            return int(str(year)[:-2]) + 1\n        else:\n            return int(str(year)[:-2])\n    else:\n        if year > 0:\n            return 1\n        else:\n            return 0", "def century(year):\n    digits = list(str(year).zfill(6))\n    century = int(\"\".join(digits[0:4]))\n    years = \"\".join(digits[4:7])\n    if years == \"00\":\n        return century\n    else:\n        return century + 1\n\n", "def century(year):\n    if year < 100:\n        return 1;\n    if str(year)[-2:] == '00':\n        return int(str(year)[:-2])\n    return int(str(year)[:-2])+1", "def century(year):\n    if year%100 == 0:\n        return int(year/100)\n    else:\n        return (int(year/100)+1)\nans=century(89)", "def century(year):\n    if year/100 > year//100:\n        return (year//100)+1\n    else:\n        return year//100\n    return", "def century(year):\n    century = 0\n    \n    # For every 100 years, increment century by 1\n    for interval in range(0, year, 100): \n        century += 1  \n    return century", "def century(year):\n    return int(str(year + 99)[:-2])", "def century(year):\n    if (year/100).is_integer():\n        return year/100\n    else:\n        return int(year/100) + 1    ", "def century(year):\n    (a,b) = divmod(year, 100)\n    return a + 2*b // (b+1)", "def century(year):\n    a, b = divmod(year, 100)\n    return (a + 1) - (not b)", "def century(year):\n    return year // 100 + 1 if year % 100 != 0 else year // 100", "def century(year):\n    return year // 100 + 1 if year % 100 else year // 100", "def century(year):\n    import math\n    return math.ceil(year/100.)\n    \n", "def century(year):\n    anul = int(year)\n    secol = int((anul / 100) + 1)\n    if anul % 100 == 0:\n        secol_1 = secol - 1\n        return secol_1\n    else:\n        return secol", "def century(year):\n    x = (year - 1)/100\n    y = x + 1\n    y = int(y)\n    return y", "def century(year):\n    div = year // 100\n    rest = year % 100\n    if rest == 0:\n        return div\n    else:\n        return div + 1", "def century(year):\n    if year < 101:\n        return 1\n    if str(year)[-2:] == \"00\":\n        return int(str(year)[:-2])\n    return (int(str(year)[:-2]) +1)\n", "def century(year):\n    if year < 100:\n        return 1\n    elif year < 1000:\n        return int(str(year)[0]) + 1\n    else:\n        return int(str(year)[:-2]) + 1 if year % 100 != 0 else int(str(year)[:-2])", "def century(year):\n    century = 0\n    if year % 100 == 0:\n        return year // 100\n    else:\n        return year // 100 +1\n", "def century(year):\n    century = year/100\n    if century.is_integer() == False:\n        century = int(century) + 1\n    return century", "# import math\ndef century(year):\n    # return math.ceil(year / 100)\n    return (year + 99) // 100", "import math\ndef century(year):\n    return math.ceil(year/ 100) # \u043e\u043a\u0440\u0443\u0433\u043b\u0435\u043d\u0438\u0435 \u0432\u0432\u0435\u0440\u0445\n    \n", "\ndef century(year):\n    sonuc=0\n    if (year%100 == 0):\n        sonuc=year/100\n    else:\n        sonuc=(year/100)+1\n    \n    return int(sonuc);", "def century(year):\n    x = 0\n    count = 0\n    while year > x:\n        x = x + 100\n        count = count + 1\n    return count    ", "import math\ndef century(year):\n    float_century = year / 100\n\n    return math.ceil(float_century)\n", "def century(year):\n    if year/100 <= 0:\n        return 1\n    elif year%100 == 0:\n        return int(year/100)\n    else:\n        return int((year/100)+1)\n", "from math import *\n\ndef century(year):\n    if str(year)[-2:] == \"00\":\n        year = year-1\n    return floor(year/100) + 1\n\ndate = 1900\nprint(century(date))", "def century(y):\n    \n    p=y%100\n    \n    if p==0:  \n        x=y//100\n    else:\n        x=y//100\n        x=x+1\n    \n    \n    return x", "def century(year):\n    \n    yearOne = str(year)\n    length = len(yearOne)\n    lastTwo = int(yearOne[length - 2: length])\n    \n    if lastTwo > 0:\n        century = int(((year - lastTwo) + 100) / 100)\n    else:\n        century = int((year - lastTwo) / 100 )\n\n    return century", "century=lambda y:(y//100)+(y%100!=0)", "import math\ndef century(year):\n    return math.floor(year / 100) + (year % 100 and 1)", "def century(year):\n    if year < 100:\n        return 1;\n    elif year < 1000:\n        if year % 100 == 0:\n            return year // 100\n        else:\n            return year // 100 + 1\n    else:\n        if year % 10 == 0 and year // 10 % 10 == 0:\n            return int(str(year)[:len(str(year)) - 2])\n        else:\n            return int(str(year)[:len(str(year)) - 2]) + 1\n", "def century(year):\n    year = int((year - 1) / 100) + 1\n    return year", "def century(year):\n    year = year / 100\n    if year.is_integer():\n        return (int(year))\n    elif isinstance(year, float):\n        years = year + 1\n        return (int(years))\n    # Finish this :)\n", "def century(year):\n    if year >= 0 and year <= 100:\n        return 1\n    else:\n        if year % 100 == 0:\n            return year/100\n        else:\n            return int(year/100 +1)", "def century(year):\n    century = 1\n    yearCount = 100\n    \n    if year < 101:\n        return 1\n    else:\n        while yearCount < year:\n            yearCount = yearCount + 100\n            century = century + 1\n\n    return century\n            \n        \n    # Finish this :)\n    return", "def century(year):\n    year1 = year - 1 if str(year).endswith('00') else year\n    return int(str(year1 + 100)[:-2])", "def century(year):\n    siglo = 0;\n    if year < 100:\n        siglo = 1\n    else:\n        siglo = year // 100\n        uno = year % 100\n        if uno >=1:\n            siglo+=1\n    \n    return siglo\n", "def century(year: int) -> int:\n    \"\"\"This function returns the century by year.\"\"\"\n    if year % 100 == 0:\n        year //= 100\n        return year\n    else:\n        year //= 100\n        return year + 1", "def century(year):\n    centuryCount = 0\n    while year > 0:\n        year -= 100;\n        centuryCount = centuryCount + 1\n    return centuryCount", "def century(year):\n    cent = year//100\n    ost = year%100\n    if ost >= 0.01:\n        cent1 = cent + 1\n    else: \n        cent1 = cent\n    return cent1", "import math\ndef century(year):\n    # Finish this :)\n    # if no remainder when dividing by 100, return result of division\n    if year%100==0:\n        return year/100\n    # if remainder when dividing by 100, return result of division rounded up to nearest whole number\n    else:\n        return math.ceil(year/100)\n    return", "def century(year):\n    century = year // 100\n    decade = year % 100\n    \n    if decade > 0:\n        return century + 1 \n    \n    else:\n        return century", "from math import *\ndef century(year):\n    x = 0\n    if year % 100 == 0:\n        x = floor(int((year + 1) / 100))\n    else:\n        x = floor(int(year / 100 + 1))\n    return x\n\n\nprint(century(1249))", "def century(year):\n    count = 0\n    while(year > 0):\n        count += 1\n        year = year-100\n    return count\n", "def century(year):\n    return int(-(-year // 100))\n\n#             OR\n#import math\n#def century(year):\n#   return math.ceil(year / 100)\n", "def century(year):\n    # Finish this :)\n    return 1 + year//100 if year%100!=0 else year/100", "import math\n\ndef century(year):\n    # year is divisible by 100\n    if year % 100 == 0:\n        what_century = year / 100\n    # the year is not divisible by 100\n    else:\n        what_century = math.floor(year / 100) + 1\n            \n    return what_century\n", "def century(year):\n    if year >= 10000:\n        return int(year/100)+1 if year%10 == 0 else int(year/100)+1\n    else:\n        return int(year/100) if year%10 == 0 else int(year/100)+1", "def century(year):\n    if year <100:\n        return 1\n    elif year%100 == 0:\n        return year//100\n    else:\n        x = year // 100\n        return x+1", "def century(year):\n    if year % 100 == 0:\n        return int(str(year)[:-2])\n    elif year < 100:\n        return 1\n    return int(str(int(str(year)[:-2])+1))", "import math\n\ndef century(year):\n    if 100 >= year >= 1:\n        return 1\n    elif year % 2 == 0:\n        return math.ceil(year / 100)\n    else:\n        return year // 100 + 1", "def century(year):\n    if len(str(year)) > 3:\n        print(str(year)[len(str(year))-1])\n         \n        if str(year)[len(str(year))-1] ==\"0\" and str(year)[len(str(year))-2]==\"0\":\n            return(int(str(year)[:len(str(year))-2]))\n        else:\n            return(int(str(year)[:len(str(year))-2])+1)\n        \n    elif len(str(year)) == 3:\n        return(int(str(year)[0])+1)\n    else:\n        return 1", "def century(year):\n    workshop = list(str(year))\n    if len(workshop) > 2:\n        if year % 100 == 0:\n            return int(\"\".join(workshop[:-2]))\n        else:\n            return int(\"\".join(workshop[:-2])) + 1\n    else:\n        return 1", "def century(year):\n    return (year // 100) if (year / 100 % 1 == 0) else (year // 100 + 1)", "def century(year):\n    if year % 100 == 0:\n        return year // 100\n    else:\n        year = year // 100 \n        return year + 1", "def century(year):\n    if year < 100:\n        return 1\n    return int(str(year)[:-2]) + 1 if str(year)[-2:] > '00' else int(str(year)[:-2])\n", "def century(year):\n    result=0\n    if year%100== 0:\n        cent= year//100\n    else:\n        cent=year//100 + 1\n    return cent", "def century(year):\n    if year %100 == 0:\n        return year/100\n    else:\n    \n        return round((year+50)/100)", "def century(year):\n    \n    return  int(year / 100) +1 if not year % 100 ==0 else int (year/100) ", "def century(year):\n    if year <= 100:\n        return 1\n    elif year % 100 != 0:\n        return (year // 100) + 1 \n    else:\n        return year // 100\n    return", "def century(year):\n   \n    \n    if (year <= 0):\n        return (\"0 and negative is not allow for a year\")\n         \n    \n    \n    elif (year <= 100):\n        return (1)\n    elif (year % 100 == 0):\n        return (year // 100)\n    else:\n        return (year // 100 + 1)"]