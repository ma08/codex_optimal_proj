["def repeat_it(string,n):\n    return string * n if isinstance(string,str) else 'Not a string'", "def repeat_it(string,n):\n    if type(string) is not str:\n        return 'Not a string'\n    return string * n", "repeat_it = lambda s, m: s*m if type(s) is str else \"Not a string\"", "def repeat_it(s, n):\n    return s * n if isinstance(s, str) else 'Not a string'", "repeat_it = lambda s, m: s*m if isinstance(s, str) else \"Not a string\"", "def repeat_it(string, n):\n    return string*n if isinstance(string, type(\"\")) else \"Not a string\"", "def repeat_it(string,n):\n    return n * string if isinstance(string, str) else \"Not a string\"", "def repeat_it(string,n):\n    if isinstance(string,str): \n        return n*string\n    else:\n        return \"Not a string\"", "def repeat_it(string,n):\n    if type(string) is str:\n        return string*n\n    return \"Not a string\"", "def repeat_it(string,n):\n    return string * n if type(string) == type('1') else 'Not a string'", "def repeat_it(string: str, n: int) -> str:\n    \"\"\" Get string that repeats the input string `n` number of time. \"\"\"\n    if type(string) is str:\n        return string * n\n    else:\n        return \"Not a string\"", "def repeat_it(string,n):\n    return ''.join(string for i in range(n)) if type(string) == str else 'Not a string'", "def repeat_it(string,n):\n    print( string)\n    if type(string) == str:\n        return string * n\n        print(string*n)\n    else:\n        return 'Not a string'", "def repeat_it(string,n):\n  print(type(string))\n  return string*n if type(string) is str else 'Not a string'", "def repeat_it(string,n):\n    if type(string) is not str:\n        return \"Not a string\"#bitch\n    return string * n", "def repeat_it(string,n):\n    if (n == 0):\n        return ''\n    return string * n if type(string) == str else 'Not a string'", "def repeat_it(string: str, n: int) -> str:\n    return string * n if isinstance(string, str) else \"Not a string\"\n", "repeat_it=lambda string,n: string*n if type(string)==str else \"Not a string\"", "def repeat_it(string,n):\n     return \"Not a string\" if type(string) != str else ''.join([string for i in range (1, n + 1)])", "def repeat_it(string,n):\n    return (string + repeat_it(string,n - 1) if n > 0 else \"\") if type(string) is str else \"Not a string\"", "repeat_it = lambda string, n: string * n if string and type(string) == type('') else 'Not a string'", "def repeat_it(string,n):\n    return (''.join([string for x in range(n)]) if type(string) is str else 'Not a string')", "def repeat_it(string,n):\n    if not isinstance(string, str):\n         return \"Not a string\"\n    s = \"\"     \n    for i in range(n):\n      s += string\n    return s\n", "def repeat_it(string,n):\n    try:\n        if str(string) == string:\n            return string * n\n        else: return \"Not a string\"\n    except ValueError:\n        return string * n", "def repeat_it(st,n):\n    return st * n if type(st) == str else \"Not a string\"", "def repeat_it(string,n):\n    if string==[] or string=={}:\n        return 'Not a string'\n    if isinstance(string,int):\n       return 'Not a string'\n    print(string)\n    return string*n ", "def repeat_it(string,n):\n    return string*n if type(string) == type('SSS') else \"Not a string\"", "def repeat_it(string,n):\n     if type(string)==str:\n        return string*n\n     elif type(string)!=str:\n        return \"Not a string\"", "def repeat_it(k,n):\n    return k*n if isinstance(k ,str) else 'Not a string'", "def repeat_it(string,n):\n    if type(string) == str:\n        res = string * n\n    else:\n        res = 'Not a string'\n    return res", "def repeat_it(string,n):\n    return n * string if type(string) == type(\"a\") else \"Not a string\"", "def repeat_it(strng,n):\n    if type(strng) != type(\"\"):\n        return \"Not a string\"\n    return strng * n", "def repeat_it(string,n):\n    a = \"\"\n    if isinstance(string, str):\n        for i in range(0, n):\n            a = a + string\n    else:\n        return \"Not a string\"\n    return a", "def repeat_it(string,n):\n    if isinstance(string, str):\n        a = \"\"\n        for i in range (1, n + 1):\n            a += string\n        return a\n    else:\n        return \"Not a string\"", "def repeat_it(a,n):\n    if isinstance(a, str):\n        return n*a\n    else:\n        return \"Not a string\"", "def repeat_it(string,n):\n    return string * n if str(n).isdigit() and isinstance(string, str) else \"Not a string\"", "def repeat_it(strng, n):\n    return strng*n if type(strng) == str else \"Not a string\"", "def repeat_it(string,n):\n    if type(string) != type('aring'):\n        return 'Not a string'\n    return n * string\n", "def repeat_it(string,n):\n    if not string or isinstance(string, int):\n        return \"Not a string\"\n    else: \n        return string * n", "def repeat_it(string,n):\n    return string*n if str(type(string)) == \"<class 'str'>\" else \"Not a string\"", "def repeat_it(string,n):\n    str = ''\n    bool = False\n    for i in range(n):\n        try:\n            str += string\n        except: \n            bool = True\n            return 'Not a string'\n    if bool == False:\n        return str", "repeat_it=lambda s,n:s*n if type(s) is str else 'Not a string'", "def repeat_it(string,n):\n    if string == str(string):\n        return str(string * n)\n    else:\n        return \"Not a string\"", "def repeat_it(string,n):\n    if not str(string) == string:\n        return 'Not a string'\n    return string * n", "def repeat_it(string,n):\n    if type(string) != str: return \"Not a string\" \n    return_string = []\n    for i in range(n):\n        return_string.append(string)\n    return \"\".join(return_string)\n", "repeat_it = lambda s, n: 'Not a string' if type(s) is not str else s * n", "def repeat_it(string,n):\n    return string*n if (string !=[] and type(string)==str) else 'Not a string'", "def repeat_it(xs,n):\n    if not isinstance(xs,str):\n        return \"Not a string\"\n    else:\n        return xs * n", "def repeat_it(string,n):\n    print(string,n)\n    if string == str(string):\n        return string*n if string else 'Not a string'\n    else:\n        return 'Not a string'", "def repeat_it(string,n):\n    result = \"\"\n    if type(string) != type('string'):\n        return \"Not a string\"\n    else:\n        result += string * n\n    return result", "repeat_it=lambda s, n: 'Not a string' if type(s)!=str else s*n", "def repeat_it(string,n):\n    #your code here\n    try:\n        a = string.lower()\n        return string*n\n    except:\n        return 'Not a string'", "def repeat_it(string,n):\n    if not isinstance(string, str): return \"Not a string\"\n    result = ''\n    for s in range(0, n): result += string\n    return result", "def repeat_it(s,n):\n    return \"Not a string\" if s!=str(s) else s*n", "def repeat_it(m,n):\n    if m == str(m):\n      return  m * n\n    else:\n        return \"Not a string\"", "def repeat_it(s,n):\n    return s*n if s == str(s) else 'Not a string'", "def repeat_it(string,n):\n    if n==0:    \n        return ''\n    for i in range(n):\n        if isinstance(string, str)==True:\n            return string*n\n      \n        else:    \n            return \"Not a string\"\n", "def repeat_it(string,n):\n    return 'Not a string' if type(string)==int\\\n    or not string or string==False or string==True else n*string", "def repeat_it(s,n):\n    return n*s if type(s)==str else \"Not a string\"", "def repeat_it(s,n):\n    t = s\n    if isinstance(s,str) and n != 0:\n        for i in range(n-1):\n            s += t\n        return s\n    if n == 0:\n        return ''\n    return 'Not a string'", "def repeat_it(string,n):\n    return string * n if string.__class__ == str else 'Not a string'", "def repeat_it(sz, n):\n    if type(sz) != str:\n        return 'Not a string'\n    else:\n        return sz * n", "def repeat_it(string,n):\n    if type(string) != type(\"\"):\n         return \"Not a string\"\n    else:\n        return string*n", "def repeat_it(string,n):\n    if type(string)==int:\n        return 'Not a string'\n    elif not string:\n        return 'Not a string'\n    try:\n        for char in string:\n            if char=='2':\n                return string*n\n            elif char.isdigit():\n                return 'Not a string'\n        return string*n\n    except:\n        return 'Not a string'\n", "def repeat_it(strng,n):\n    return strng * n if type(strng) is str else 'Not a string'", "def repeat_it(string,n):\n    try:\n        if type(string) == str: return string * n\n        else: return \"Not a string\"\n    except:\n        return \"Not a string\"", "def repeat_it(string,n):\n    if type(string) == int or string == {} or string == [] or string == 1:\n        return 'Not a string'\n    else:\n        return string * n", "def repeat_it(string,n):\n    if type(string) == str:\n        newString = \"\"\n        for i in range (n):\n            newString += string\n        \n        return newString\n    else:\n        return \"Not a string\"", "def repeat_it(string,n):\n    if type(string) == str:\n        return string*n\n    else:\n        return \"Not a string\"\n\nprint((repeat_it(1234, 2)))\n", "def repeat_it(string,n):\n    if not isinstance(string, str):\n        return \"Not a string\"\n    return ''.join(string for i in range(n))", "def repeat_it(string,n):\n    if isinstance(string, str):\n        final = \"\"\n        for i in range(n):\n            final += string\n        return final\n    else:\n        return \"Not a string\"\n", "def repeat_it(string, n):\n    print(string, n)\n    return string * n if type(string) == str else \"Not a string\"", "def repeat_it(string,n):\n    try:\n        string + \" \"\n    except:\n        return \"Not a string\"\n    \n    return string * n", "def repeat_it(string, n):\n#     print(string, n)\n    if isinstance(string, str):\n        return string * n\n    else:\n        return \"Not a string\"", "def repeat_it(s,n):\n    if type(s) == str:\n        return s * n\n    else:\n        return \"Not a string\"", "def repeat_it(string,n):\n    if type(string) is not str : return \"Not a string\"\n    result = \"\"\n    for _ in range(0, n):    \n        result += string\n    return result", "def repeat_it(string,n):\n    #your code here\n    return \"Not a string\" if type(string) is not str else string * n \n    \nprint(repeat_it(\"abc\", 3))", "def repeat_it(s,n):\n    return s*n if type(s)==type(str(s)) else \"Not a string\"", "def repeat_it(s, n):\n    if isinstance(s, str) and s: return s * n\n    else: return 'Not a string'", "repeat_it = lambda x,y: x*y if type(x) == str else 'Not a string'", "def repeat_it(string,n):\n    str_ = ''\n    \n    if not isinstance(string, str):\n        return \"Not a string\"\n        \n    for i in range(n):\n        str_ = str_+string\n    \n    return str_", "def repeat_it(s,n):\n    if type(s)==str: return s*n\n    return 'Not a string'", "def repeat_it(string,n):\n    #your code her\n    return n*string if type(string)==type('=') else \"Not a string\"", "def repeat_it(string: str,n: int) -> str:\n    if not isinstance(string, str):\n        return 'Not a string'\n    return string * n", "def repeat_it(a,b):\n    if type(a)==str and type(b)==int:\n        return(a*b)\n    else:\n        return(\"Not a string\")", "def repeat_it(string,n):\n    return str(string*n if isinstance(string, str) else 'Not a string')", "def repeat_it(string,n):\n    if isinstance(string, int) or isinstance(string, float) or isinstance(string, dict) or isinstance(string, list):\n        return \"Not a string\"\n    return string * n", "def repeat_it(string,n):\n    if type(string) is str:\n        return n * string\n    else:\n        return 'Not a string'", "def repeat_it(s,n):\n    if type(s) == str:\n        x=1\n        st=''\n        while x<=n:\n            st += s\n            x += 1\n        return st\n    else:\n        return \"Not a string\"\n#Completed by Ammar on 25/8/2019 at 12:07AM.\n", "def repeat_it(string,n):\n    return string*n if isinstance(string,str) else 'Not a string' #I solved this Kata on  8/23/2019  01:11 AM...#Hussam'sCodingDiary", "def repeat_it(string,n):\n    tipus = type(string)\n    print((\"==>> \",string,n,tipus))\n    if tipus == str:\n        output = string * n\n        return output\n    else:\n        return \"Not a string\"\n\n", "def repeat_it(string,n):\n    try:\n        if string*n == str(string)*n:\n            return string*n\n        else:\n            return \"Not a string\"\n    except:\n        return \"Not a string\"", "def repeat_it(string,n):\n    try:\n        if len(string) > 0:\n            return string * n\n        else:\n            return 'Not a string'\n    except TypeError:\n        return 'Not a string'", "def repeat_it(string,n):\n    if type(string) is not str:\n        return \"Not a string\"\n    text = \"\"\n    for i in range(n):\n        text += string\n    return text", "def repeat_it(string,n):\n    if string.__class__()!='':\n        return 'Not a string'\n    return string*n", "def repeat_it(string,n):\n    if string != str(string):\n        return \"Not a string\"\n    return string*n", "def repeat_it(string,n):\n    return \"Not a string\" if not isinstance(string, str) else string + repeat_it(string,n-1) if n else \"\" "]