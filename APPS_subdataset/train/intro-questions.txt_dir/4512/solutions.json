["masks = [0] * 10\nfor i in range(10 ** 4):\n    for c in str(i):\n        masks[int(c)] |= 1 << i\n\ndef find_num(n):\n    seq, x = 1, 0\n    for j in range(n):\n        M = seq\n        for m in masks:\n            if x & m:\n                M |= m\n        x = ~M & (M+1)\n        seq |= x\n    return x.bit_length() - 1", "M = [0]\n\nwhile len(M) <= 500:\n        k, s = 0, {c for c in str(M[-1])}\n        while k in M or {c for c in str(k)} & s:\n            k += 1\n        M.append(k)\n\nfind_num = lambda n: M[n]", "\ndef find_num(n):\n    c = 0\n    k = -1\n    mas = []\n    while len(mas) <= n:\n        k += 1\n        if  k > 10:\n            c = set(str(mas[len(mas)-1]))\n            if len(c) == len(set(str(mas[len(mas)-1]))-set(str(k))) and k not in mas:\n                mas.append(k)\n                k = 10    \n        else:\n            mas.append(k)\n    return mas[len(mas)-1]\n            \n        \n                    \n                    \n                    \n            \n", "def find_num(n):\n    seq = [0]\n    i = 0\n    while i < n:\n        a = seq[-1]\n        b = next(x for x in list(range(n*3))\n                 if all(y not in str(x) for y in list(str(a)))\n                 and x not in seq)\n        seq.append(b)\n        i += 1\n    return seq[-1]", "from itertools import count\n\ndef find_num(n):\n    a = [0,1,2,3,4,5,6,7,8,9,10,22,11,20]\n    while len(a) <= n:\n        for i in count(11):\n            if i in a: continue\n            if not set(str(i)) & set(str(a[-1])):\n                a.append(i)\n                break\n    return a[n]", "def find_num(n):\n    found, lastComplete, lastFound = {0}, 0, 0\n    while len(found) <= n:\n        lastDigits = set(str(lastFound))\n        curr = lastComplete+1\n        while curr in found or set(str(curr)) & lastDigits:\n            curr += 1\n        lastFound = curr\n        found.add(lastFound)\n        lastComplete += lastFound == lastComplete+1\n    return lastFound", "def find_num(n):\n    l  = [0]\n    while len(l) <= n:\n        m = 1\n        while m in l or any([x in str(l[-1]) for x in str(m)]):\n            m += 1\n            \n        l.append(m)\n\n    return l[n]", "numbers=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 22, 11, 20, 13, 24, 15, 23, 14, 25, 16, 27, 18, 26, 17, 28, 19, 30, 12, 33, \n         21, 34, 29, 31, 40, 32, 41, 35, 42, 36, 44, 37, 45, 38, 46, 39, 47, 50, 43, 51, 48, 52, 49, 53, 60, 54, 61, 55,\n         62, 57, 63, 58, 64, 59, 66, 70, 56, 71, 65, 72, 68, 73, 69, 74, 80, 67, 81, 75, 82, 76, 83, 77, 84, 79, 85, 90,\n         78, 91, 86, 92, 87, 93, 88, 94, 100, 89, 101, 95, 102, 96, 103, 97, 104, 98, 105, 99, 106, 222, 107, 223, 108, \n         224, 109, 225, 110, 226, 111, 200, 113, 202, 114, 203, 115, 204, 116, 205, 117, 206, 118, 207, 119, 208, 131,\n         209, 133, 220, 134, 227, 130, 228, 135, 229, 136, 240, 137, 242, 138, 244, 139, 245, 160, 232, 140, 233, 141, \n         230, 144, 235, 146, 237, 145, 236, 147, 238, 149, 250, 143, 252, 148, 239, 150, 234, 151, 243, 155, 246, 153, \n         247, 156, 248, 157, 249, 158, 260, 154, 262, 159, 263, 170, 253, 161, 254, 163, 255, 164, 257, 166, 258, 167, \n         259, 168, 270, 165, 272, 169, 273, 180, 256, 171, 264, 173, 265, 174, 266, 175, 268, 177, 269, 178, 290, 176, \n         280, 179, 282, 190, 267, 181, 274, 183, 275, 184, 276, 185, 277, 186, 279, 188, 292, 187, 293, 400, 112, 300, \n         121, 303, 122, 304, 125, 306, 124, 305, 126, 307, 128, 309, 127, 308, 129, 330, 142, 333, 120, 334, 152, 336,\n         172, 335, 162, 337, 182, 339, 201, 338, 191, 278, 193, 284, 195, 283, 194, 285, 196, 287, 199, 286, 197, 288, \n         301, 289, 310, 294, 311, 295, 313, 296, 314, 297, 315, 298, 316, 299, 317, 402, 189, 302, 198, 320, 411, 322, \n         401, 323, 404, 123, 405, 132, 406, 192, 340, 211, 343, 210, 344, 212, 345, 216, 347, 215, 346, 217, 348, 219,\n         350, 214, 353, 218, 349, 221, 354, 261, 355, 241, 356, 271, 358, 291, 357, 281, 359, 407, 213, 408, 231, 409, \n         251, 360, 412, 363, 410, 325, 414, 326, 415, 327, 416, 328, 417, 329, 418, 332, 419, 352, 440, 312, 444, 318, \n         420, 319, 422, 331, 424, 351, 426, 370, 421, 365, 427, 361, 425, 366, 428, 367, 429, 368, 441, 362, 445, 321, \n         446, 371, 442, 369, 447, 380, 449, 372, 448, 373, 450, 376, 451, 377, 452, 378, 454, 379, 455, 381, 456, 382, \n         457, 383, 459, 386, 470, 385, 460, 375, 461, 387, 462, 388, 464, 389, 465, 390, 458, 391, 466, 392, 467, 393, \n         468, 395, 471, 396, 472, 398, 474, 399, 475, 600, 324, 500, 341, 502, 364, 501, 342, 505, 374, 506, 384, 507, \n         394, 508, 397, 480, 511, 403, 512, 430, 515, 423, 509, 413, 520, 431, 522, 433, 510, 432, 516, 434, 517, 436, \n         518, 437, 519, 438, 521, 439, 525, 443, 526, 473, 528, 463, 527, 469, 503, 476]\ndef find_num(n):\n    return numbers[n]", "A,S,Z=list(range(1000)),set(),[]\nwhile len(Z)<501:\n    for i in A:\n        T=set(str(i))\n        if not T&S:\n            Z+=[i]\n            S=T\n            break\n    A.remove(Z[-1])\nfind_num=lambda n:Z[n]", "from itertools import count\nfrom functools import lru_cache\n\nL = list(range(11))\nS = set(L)\n\n@lru_cache(maxsize=None)\ndef to_set(x): return set(str(x))\n\ndef find_num(n):\n    while n >= len(L):\n        x = next(filter(lambda i: not (i in S or to_set(L[-1]) & to_set(i)), count()))\n        L.append(x)\n        S.add(x)\n    return L[n]"]