["def am_I_afraid(day,num):\n    return {\n        'Monday':  num == 12,\n        'Tuesday': num > 95,\n        'Wednesday': num == 34,\n        'Thursday': num == 0,\n        'Friday': num % 2 == 0,\n        'Saturday': num ==  56,\n        'Sunday': num == 666 or num == -666,\n    }[day]\n", "afraid = {\n    'Monday': lambda x: x == 12,\n    'Tuesday': lambda x: x > 95,\n    'Wednesday': lambda x: x == 34,\n    'Thursday': lambda x: x == 0,\n    'Friday': lambda x: x % 2 == 0,\n    'Saturday': lambda x: x == 56,\n    'Sunday': lambda x: abs(x) == 666,\n}\n\ndef am_I_afraid(day, num):\n    return afraid[day](num)", "def am_I_afraid(day, x):\n    return {'Mo': x       == 12,\n            'Tu': x       >  95,\n            'We': x       == 34,\n            'Th': x       ==  0,\n            'Fr': x % 2   ==  0,\n            'Sa': x       == 56,\n            'Su': abs(x)  == 666}[day[:2]]", "def am_I_afraid(day,num):\n    if day==\"Monday\": return num==12\n    if day==\"Tuesday\": return num>95\n    if day==\"Wednesday\": return num==34\n    if day==\"Thursday\": return num==0\n    if day==\"Friday\": return num%2==0\n    if day==\"Saturday\": return num==56\n    if day==\"Sunday\": return num==666 or num==-666", "FUNCS = dict(zip('Monday Tuesday Wednesday Thursday Friday Saturday Sunday'.split(),\n                (12..__eq__, \n                 95..__lt__,\n                 34..__eq__,\n                 0..__eq__, \n                 lambda n: not n%2,\n                 56..__eq__,\n                 lambda n: abs(n)==666)))\n\ndef am_I_afraid(day,n):\n    return FUNCS[day](n)", "def am_I_afraid(day,num):\n    #your code here\n    rep = False\n    lst1 = [('monday', 12), ('wednesday', 34), ('thursday', 0), ('saturday', 56),  ('sunday', 666), ('sunday', -666)]\n\n    input = (day.lower(), num) \n    \n    if input in lst1 or (input[0]=='tuesday' and input[1]>95) or (input[0]=='friday' and input[1]%2==0):\n        rep = True\n    return rep", "def am_I_afraid(day,num):\n    return {'Monday'    : num == 12, \n            'Tuesday'   : num > 95, \n            'Wednesday' : num == 34, \n            'Thursday'  : not num, \n            'Friday'    : not (num % 2), \n            'Saturday'  : num == 56, \n            'Sunday'    : num == 666 or num == -666\n           }[day]", "afraid = {\n    \"Monday\": lambda n: n == 12,\n    \"Tuesday\": lambda n: n > 95,\n    \"Wednesday\": lambda n: n == 34,\n    \"Thursday\": lambda n: n == 0,\n    \"Friday\": lambda n: n % 2 == 0,\n    \"Saturday\": lambda n: n == 56,\n    \"Sunday\": lambda n: abs(n) == 666,\n}\n\ndef am_I_afraid(day, num):\n    return afraid[day](num)", "def am_I_afraid(day, num):\n    return {\"Monday\": num == 12,\n            \"Tuesday\": num > 95,\n            \"Wednesday\": num == 34,\n            \"Thursday\": num == 0,\n            \"Friday\": num % 2 == 0,\n            \"Saturday\": num == 56,\n            \"Sunday\": abs(num) == 666\n            }[day]\n", "def am_I_afraid(day,num):\n    if day == \"Monday\" and num == 12:\n        return True\n    if day == \"Tuesday\" and num > 95:\n        return True\n    if day == \"Wednesday\" and num == 34:\n        return True\n    if day == \"Thursday\" and num == 0:\n        return True\n    if day == \"Friday\" and num % 2 == 0:\n        return True\n    if day == \"Saturday\" and num == 56:\n        return True\n    if day == \"Sunday\" and abs(num) == 666:\n        return True\n    return False"]