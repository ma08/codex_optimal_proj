["def sillycase(silly):\n    half = (len(silly) + 1) // 2\n    return silly[:half].lower() + silly[half:].upper()", "def sillycase(s):\n    l = len(s)\n    return s[:l//2+l%2].lower() + s[l//2+l%2:].upper()", "from math import ceil\ndef sillycase(silly):\n    return silly[:ceil(len(silly)/2)].lower() + silly[ceil(len(silly)/2):].upper()", "import math\n\ndef sillycase(silly):\n    t=int(math.ceil(len(silly)/2.0))\n    return silly[:t].lower() + silly[t:].upper()", "def sillycase(silly):\n    return silly[:(len(silly) + 1)// 2].lower() + silly[(len(silly) + 1)// 2:].upper()", "import math\ndef sillycase(s):\n  return s[:int(math.ceil(len(s)/2.0))].lower() + s[int(math.ceil(len(s)/2.0)):].upper()", "import math\ndef sillycase(silly):\n    first = silly[:math.ceil(len(silly) / 2)].lower()\n    last = silly[math.ceil(len(silly) / 2):].upper()\n    return first + last\n\n    \n", "def sillycase(silly):\n    n = len(silly)>>1\n    if ~len(silly)&1:\n        return silly[:n].lower() + silly[n:].upper()\n    return silly[:n+1].lower() + silly[n+1:].upper()", "import math\n\ndef sillycase(silly):\n    if len(silly) % 2 == 0:\n        even_half = len(silly) // 2\n        return silly[:even_half].lower() + silly[even_half:].upper()\n    else:\n        odd_half = math.ceil(len(silly) / 2)\n        return silly[:odd_half].lower() + silly[odd_half:].upper()", "def sillycase(silly):\n    output=''\n    for c in range(len(silly)):\n        if c <len(silly)/2:\n            output+=str.lower(silly[c]) \n        else:\n            output+=str.upper(silly[c]) \n    return output\n"]