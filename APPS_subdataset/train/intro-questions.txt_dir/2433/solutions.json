["class Solution:\n     def licenseKeyFormatting(self, S, K):\n         \"\"\"\n         :type S: str\n         :type K: int\n         :rtype: str\n         \"\"\"\n #         count_dash = 0\n #         for item in S:\n #             if item == '-':\n #                 count_dash += 1\n                 \n #         S_len = len(S) - count_dash\n         \n #         ans = ''\n #         second_from = 0\n         \n #         frist_group = S_len % K\n #         if frist_group != 0:\n #             count = 0\n #             for i in range(len(S)):\n #                 if S[i] != '-':\n #                     ans = ans + S[i].upper()\n #                     count += 1\n #                 if count == frist_group:\n #                     second_from = i + 1\n #                     ans += '-'\n #                     break\n #         count_k = 0\n #         for j in range(second_from,len(S)):\n #             if S[j] != '-':\n #                 ans = ans + S[j].upper()\n #                 count_k += 1\n #             if count_k == K:\n #                 ans = ans + '-'\n #                 count_k = 0\n         \n #         return ans[:-1]\n         S = S.replace('-', '')[::-1].upper()\n         return '-'.join([S[i:i+K] for i in range(0, len(S), K)])[::-1]\n", "class Solution:\n     def licenseKeyFormatting(self, S, K):\n         \"\"\"\n         :type S: str\n         :type K: int\n         :rtype: str\n         \"\"\"\n         S = S.upper().replace('-','')\n         size = len(S)\n         s1 = K if size%K==0 else size%K\n         res = S[:s1]\n         while s1<size:\n             res += '-'+S[s1:s1+K]\n             s1 += K\n         return res", "class Solution:\n     def licenseKeyFormatting(self, S, K):\n         \"\"\"\n         :type S: str\n         :type K: int\n         :rtype: str\n         \"\"\"\n         S = S.upper().replace(\"-\",\"\")\n         s1 = len(S) % K if len(S) % K else K\n         res = S[:s1]\n         while s1<len(S):\n             res +='-'+S[s1:s1+K]\n             s1+=K\n         return res", "class Solution:\n     def licenseKeyFormatting(self, S, K):\n         \"\"\"\n         :type S: str\n         :type K: int\n         :rtype: str\n         \"\"\"\n         S = S.upper().replace(\"-\",\"\")\n         i = 0\n         res = []\n         start = len(S) % K\n         if start:\n             res.append(S[:start])\n             i = start\n         \n         while i < len(S):\n             res.append(S[i:i+K])\n             i += K\n         \n         return \"-\".join(res)\n             \n             \n         \n         \n", "class Solution:\n     def licenseKeyFormatting(self, S, K):\n         \"\"\"\n         :type S: str\n         :type K: int\n         :rtype: str\n         \"\"\"\n         s = list(''.join(S.split('-')))\n         tmp = [''.join(s[:len(s) % K])] + [''.join(s[i:i+K]) for i in range(len(s) % K, len(s), K)] \n         return '-'.join(filter(None, tmp)).upper()", "class Solution:\n     def licenseKeyFormatting(self, S, K):\n         \"\"\"\n         :type S: str\n         :type K: int\n         :rtype: str\n         \"\"\"\n         char_list = self.getChars(S)\n         num_groups = len(char_list) // K\n         group_1_cnt = len(char_list) % K\n         \n         output = \"\"\n         if group_1_cnt > 0:\n             output += char_list[0:group_1_cnt]\n             if num_groups > 0:\n                 output += \"-\"\n             \n         for i in range(1, num_groups + 1):\n             start = i * K + group_1_cnt - K\n             finish = start + K\n             output += char_list[start:finish]\n             if i != num_groups:\n                 output += \"-\"\n                 \n         return output\n         \n     def getChars(self, S):\n         char_list = \"\"\n         \n         for char in S:\n             if char != \"-\":\n                 char_list += char.upper()\n         \n         return char_list\n", "class Solution:\n     def licenseKeyFormatting(self, S, K):\n         \"\"\"\n         :type S: str\n         :type K: int\n         :rtype: str\n         \"\"\"\n         key = list(S.replace('-', '').upper())\n         offset = len(key) % K\n         if offset == 0:\n             offset = K\n         new_key = []\n         i = 0\n         while i < len(key):\n             if i == 0:\n                 new_key.extend(key[:offset])\n                 i = offset\n             else:\n                 new_key.append('-')\n                 new_key.extend(key[i:i + K])\n                 i = i + K\n         return ''.join(new_key)\n", "class Solution:\n     def licenseKeyFormatting(self, S, K):\n         \"\"\"\n         :type S: str\n         :type K: int\n         :rtype: str\n         \"\"\"\n         S = S.upper().replace('-', '')\n         first = len(S) % K\n         if first == 0:\n             first = K\n         blocks = [S[:first]]\n         pos = first\n         for k in range(len(S) // K):\n             block = S[pos:pos+K]\n             if len(block) > 0:\n                 blocks.append(block)\n             pos += K\n         return '-'.join(blocks)", "class Solution:\n     def licenseKeyFormatting(self, S, K):\n         \"\"\"\n         :type S: str\n         :type K: int\n         :rtype: str\n         \"\"\"\n         S = S.upper().replace('-', '')\n         index = K if len(S) % K == 0 and len(S) > 0 else len(S) % K\n         result = S[:index]\n         while index < len(S):\n             result += '-' + S[index : index + K]\n             index += K\n         return result", "class Solution:\n     def licenseKeyFormatting(self, S, K):\n         \"\"\"\n         :type S: str\n         :type K: int\n         :rtype: str\n         \"\"\"\n         S = S.replace(\"-\", \"\")\n         l = len(S)\n         res = l % K\n         if res == 0:\n             return \"-\".join([S[i*K: (i+1)*K].upper() for i in range(l//K)])\n         else:\n             lst = [S[0:res].upper()]\n             return \"-\".join(lst + [S[i*K + res: (i+1)*K + res].upper() for i in range(l//K)])\n         \n", "class Solution:\n     def licenseKeyFormatting(self, S, K):\n         \"\"\"\n         :type S: str\n         :type K: int\n         :rtype: str\n         \"\"\"\n         S = \"\".join(S.split(\"-\")) # remove dash\n         S = S.upper() # change to upper character\n         num_group = len(S) // K\n         start_idx = len(S) % K\n \n         ans = \"\" if start_idx == 0 else S[:start_idx]\n         for i in range(num_group):\n             end_idx = start_idx + K\n             if start_idx > 0:\n                 ans += \"-\"\n             ans += S[start_idx:end_idx]\n             start_idx = end_idx\n         return ans\n", "class Solution:\n     def licenseKeyFormatting(self, S, K):\n         \"\"\"\n         :type S: str\n         :type K: int\n         :rtype: str\n         \"\"\"\n         \n         s = list(S.upper())\n         s = [c for c in s if c != '-']\n         \n         groups = []\n         while s:\n             group = s[-K:]\n             groups.append(''.join(group))\n             s[-K:] = []\n             \n         groups.reverse()\n         return '-'.join(groups)\n", "class Solution:\n     def licenseKeyFormatting(self, S, K):\n         \"\"\"\n         :type S: str\n         :type K: int\n         :rtype: str\n         \"\"\"\n      \n         if(len(S)<=1):\n             return S.upper().strip('-')\n         S = S.upper()\n         n_dash = S.count('-')\n         n = len(S)-n_dash\n         form_S = \"\"\n         if(n%K == 0):\n             begin_at = K-1\n         else:\n             left = n%K\n             begin_at = left-1\n         steps = 0 \n         abs_ind = 0\n         norm_ind = 0\n         \n         while(abs_ind <=begin_at and norm_ind < len(S)):\n             if(S[norm_ind]=='-'):\n                 norm_ind +=1\n                 continue\n             form_S += S[norm_ind]\n             abs_ind +=1\n             norm_ind +=1\n         form_S += '-'\n         for char_ind in range(norm_ind, len(S)):\n             if(S[char_ind] ==\"-\"):\n                 continue\n                 \n             elif(steps == K-1 and abs_ind > begin_at):\n                 form_S += S[char_ind]+'-'\n                 steps =0\n             else:\n                 form_S += S[char_ind]\n                 steps += 1\n \n             abs_ind += 1\n         \n     \n         return form_S.strip('-')"]