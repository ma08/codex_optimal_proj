["class Solution:\n     def thirdMax(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         nums = sorted(list(set(nums)))\n         if len(nums)<3:\n             return max(nums)\n         else:\n             return nums[-3]\n \n             \n", "class Solution:\n     def thirdMax(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         v = [float('-inf'), float('-inf'), float('-inf')]\n         for num in nums:\n             if num not in v:\n                if num > v[0]:\n                    v = [num, v[0], v[1]]\n \n                elif num > v[1]:\n                    v = [v[0], num, v[1]]\n \n                elif num > v[2]:\n                    v = [v[0], v[1], num]\n \n         return max(nums) if float('-inf') in v else v[2]\n \n", "class Solution:\n     def thirdMax(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         max3 = [nums[0], None, None]\n         for i in range(1, len(nums)):\n             if nums[i] in max3: continue\n             if nums[i] > max3[0]:\n                 max3[2] = max3[1]\n                 max3[1] = max3[0]\n                 max3[0] = nums[i]\n             elif max3[1] is None or nums[i] > max3[1]:\n                 max3[2] = max3[1]\n                 max3[1] = nums[i]\n             elif max3[2] is None or nums[i] > max3[2]:\n                 max3[2] = nums[i]\n             else: continue\n         if None in max3: return max3[0]\n         else: return max3[2]\n                 \n", "class Solution:\n     def thirdMax(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         n = len(nums)\n         m3 = [nums[0]]\n         for y in nums[1:]:\n             if m3[0] != y:\n                 if len(m3) == 1:\n                     if m3[0] > y:\n                         m3.append(y)\n                     else:\n                         m3.insert(0, y)\n                 elif m3[1] != y:\n                     if m3[0] < y:\n                         m3.insert(0, y)\n                     elif m3[1] < y:\n                         m3.insert(1, y)\n                     else:\n                         m3.append(y)\n                     break\n \n         if len(m3) < 3:\n             return max(m3)\n \n         for y in nums[3:]:\n             if y==m3[0] or y==m3[1] or y<=m3[2]:\n                 continue\n             m3.pop()\n             if y > m3[0]:\n                 m3.insert(0, y)\n             elif y > m3[1]:\n                 m3.insert(1, y)\n             else:\n                 m3.append(y)\n         return m3[2]", "class Solution:\n     def thirdMax(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         max3, max2, max1 = float(\"inf\"), float(\"inf\"), float(\"inf\")\n         \n         for num in nums:\n             carry = num\n             \n             if max3 == carry or max2 == carry or max1 == carry: continue\n             \n             if max3 == float(\"inf\"):\n                 max3 = carry\n                 continue\n             else:\n                 if max3 < carry:\n                     max3, carry = carry, max3\n                 # else:\n                 #     continue\n                     \n             if max2 == float(\"inf\"):\n                 max2 = carry\n                 continue\n             else:\n                 if max2 < carry:\n                     max2, carry = carry, max2\n                 # else:\n                 #     continue\n             \n             if max1 == float(\"inf\"):\n                 max1 = carry\n                 continue\n             else:\n                 if max1 < carry:\n                     max1 = carry\n             \n         print((max3, max2, max1))\n         \n         return max1 if max1 != float(\"inf\") else max3\n             \n             \n", "class Solution:\n     def thirdMax(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if len(nums) < 3:\n             return max(nums)\n         m1 = m2 = m3 = -2 ** 32\n         for v in nums:\n             if v == m1 or v == m2 or v == m3:\n                 continue\n             if v > m1:\n                 m1, m2, m3 = v, m1, m2\n             elif v == m1 or v > m2:\n                 m2, m3 = v, m2\n             elif v == m2 or v > m3:\n                 m3 = v\n         return m3 if m3 > -2 ** 32 else max(nums)", "class Solution:\n     def thirdMax(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         max3 = [nums[0], None, None]\n         for i in range(1, len(nums)):\n             if nums[i] in max3: continue\n             if nums[i] > max3[0]:\n                 max3 = [nums[i], max3[0],max3[1]]\n             elif max3[1] is None or nums[i] > max3[1]:\n                 max3 = [ max3[0],nums[i],max3[1]]\n             elif max3[2] is None or nums[i] > max3[2]:\n                 max3 = [ max3[0],max3[1], nums[i]]\n             else: continue\n         if None in max3: return max3[0]\n         else: return max3[2]\n                 \n", "class Solution:\n     def thirdMax(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if not nums:\n             return None\n         \n         seen = set([])\n         import heapq\n         \n         min_heap = []\n         max_number = nums[0]\n         \n         for num in nums:\n             if num not in seen:\n                 max_number = max(max_number, num)\n                 seen.add(num)\n                 if len(min_heap) == 3:\n                     if min_heap[0] < num:\n                         heapq.heappop(min_heap)\n                     else:\n                         continue\n                 heapq.heappush(min_heap, num)\n                     \n \n         if len(min_heap) < 3:\n             return max_number\n         \n         return heapq.heappop(min_heap)", "class Solution:\n     def thirdMax(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         \n         \"\"\"\n         if len(nums) == 2 or len(nums) == 1:\n             return max(nums)\n         \n         maxes = [nums[0], nums[1], nums[2]]\n         maxes.sort() # ascending\n         \n         for i in range(3, len(nums)):\n             pos = self.findPos(nums[i], maxes)\n             if pos != None:\n                 maxes[pos] = nums[i]\n                 \n         if maxes[0] == maxes[1] or maxes[1] == maxes[2]:\n             return maxes[2]\n         else:\n             return maxes[0]\n                 \n     \n     def findPos(self, val, maxes):\n         maxPos = None\n         for ind, aMax in enumerate(maxes):\n             if val > aMax:\n                 maxPos = ind\n             \n         return maxPos\n         \"\"\"\n         \n         maxes = []\n         \n         for i in nums:\n             if self.isNew(i, maxes):\n                 if len(maxes) < 3:\n                     maxes.append(i)\n                     maxes.sort() # ascending\n                 else:\n                     pos = self.findPos(i, maxes)\n                     if pos != None:\n                         maxes[pos] = i\n                         maxes.sort()\n         \n         if len(maxes) == 3:\n             return maxes[0]\n         else:\n             return maxes[-1]\n                 \n     \n     def isNew(self, val, maxes):\n         isNew = True\n         for i in maxes:\n             if val == i:\n                 isNew = False\n         return isNew\n     \n     def findPos(self, val, maxes):\n         for ind, aMax in enumerate(maxes):\n             if val > aMax:\n                 return ind\n             \n         return None", "class Solution:\n     def thirdMax(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         stack = [float('-inf'), float('-inf'), float('-inf')]\n         \n         for num in nums:\n             if num > stack[0]:\n                 stack = [num, stack[0], stack[1]]\n             elif num < stack[0]:\n                 if num > stack[1]:\n                     stack = [stack[0], num, stack[1]]\n                 elif num < stack[1]:\n                     if num > stack[2]:\n                         stack = [stack[0], stack[1], num]\n         \n         if stack[-1] == float('-inf'):\n             return stack[0]\n         return stack[-1]", "class Solution:\n     def thirdMax(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         max_list = [None]*3\n         max_list[0] = nums[0]\n         for num in nums[1:]:\n             print(max_list)\n             if num > max_list[0]:\n                 max_list[2] = max_list[1]\n                 max_list[1] = max_list[0]\n                 max_list[0] = num\n             if max_list[1]:\n                 if max_list[0] > num > max_list[1]:\n                     max_list[2] = max_list[1]\n                     max_list[1] = num\n                 if max_list[2]:\n                     if max_list[1] > num > max_list[2]:\n                         max_list[2] = num   \n                 elif max_list[1] > num:\n                     max_list[2] = num\n             elif max_list[0] > num:\n                 max_list[1] = num\n         return max_list[2] if max_list[2] is not None else max_list[0]", "class Solution:\n     def thirdMax(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         R = []\n \n         for n in nums:\n             if n not in R:\n                 if len(R) < 3:\n                     R.append(n)\n                 elif min(R) < n:\n                     R.remove(min(R))\n                     R.append(n)\n                 R = sorted(R)\n         return R[0] if len(R) == 3 else max(R)\n", "class Solution:\n     def thirdMax(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if not nums:\n             return None\n         nums = set(nums)\n         if len(nums)<3:\n             return max(nums)\n         max3 = [-float('inf'),-float('inf'),-float('inf')]\n         for n in nums:\n             if n > max3[0]:\n                 max3[0],max3[1],max3[2] = n,max3[0],max3[1]\n             elif n > max3[1]:\n                 max3[1],max3[2] = n, max3[1]\n             elif n > max3[2]:\n                 max3[2] = n\n         return max3[2]\n", "class Solution:\n     def thirdMax(self, nums):\n         a = b = c = -9999999999\n         for n in nums:\n             if n > c and n != b and n != a:\n                 c = n\n                 if c > b:\n                     b,c = c,b\n                 if b > a:\n                     a,b = b,a\n         if c == -9999999999:\n             return a\n         return c\n         \n"]