["from itertools import combinations\ndef find_zero_sum_groups(arr, n):\n    combos = sorted(sorted(c) for c in combinations(set(arr), n) if sum(c) == 0)\n    return combos if len(combos) > 1 else combos[0] if combos else \"No combinations\" if arr else \"No elements to combine\"", "from itertools import combinations as comb\n\ndef find_zero_sum_groups(arr, n):\n    if not arr: return \"No elements to combine\"\n    \n    arr = list(set(arr))\n    result = sorted(sorted(x) for x in set(comb(arr, n)) if sum(x) == 0)\n    result = sorted(list(x) for x in set(map(tuple, result)))\n    \n    if not result: return \"No combinations\"\n    \n    return result[0] if len(result) == 1 else result\n", "from itertools import combinations\n\ndef find_zero_sum_groups(lst, n):\n    if not lst:\n        return \"No elements to combine\"\n    result = [list(c) for c in combinations(sorted(set(lst)), n) if sum(c) == 0]\n    return (result[0] if len(result) == 1 else result) or \"No combinations\"\n", "from itertools import combinations\ndef find_zero_sum_groups(a, n):\n    li = sorted(map(sorted,filter(lambda x:sum(x)==0,combinations(set(a),n))))\n    return li if len(li)>1 else li[0] if li else \"No combinations\" if a else \"No elements to combine\"", "from itertools import combinations as c\ndef find_zero_sum_groups(a,n):\n    if not len(a):return 'No elements to combine'\n    r=[sorted(x) for x in c(sorted(set(a)),n) if sum(x)==0]\n    return sorted(r) if len(r)>1 else r[0] if len(r) else 'No combinations'", "from itertools import combinations\n\ndef find_zero_sum_groups(arr, n):\n    if not arr: return \"No elements to combine\"\n    res = [list(c) for c in combinations(sorted(set(arr)), n) if not sum(c)]\n    if not res: return \"No combinations\"\n    if not res[1:]: return res[0]\n    return res", "from itertools import combinations\n\n\ndef find_zero_sum_groups(arr, n):\n    if not arr: return \"No elements to combine\"\n    res = {c for c in combinations(set(arr), n) if not sum(c)}\n    if len(res) == 1: return sorted(res.pop())\n    return sorted(map(sorted, res)) if res else \"No combinations\"", "from itertools import combinations\ndef find_zero_sum_groups(arr, n):\n    if not arr:\n        return \"No elements to combine\"\n        \n    else:\n        results = [list(x) for x in combinations(sorted(set(arr)), n) if sum(x)==0]\n        if not results:\n            return \"No combinations\"\n        elif len(results)==1:\n            return results[0]\n        else: \n            return results", "from itertools import combinations\ndef find_zero_sum_groups(my_list,n):\n    my_list=list(set(my_list))\n    if len(my_list)==0:\n        return \"No elements to combine\"\n    subs = []\n    sumsubs=[]\n    for i in range(n, n+1):\n#         print(list(combinations(my_list, i)))\n        temp = [list(x) for x in combinations(my_list, i)]\n        if len(temp)>0:\n            subs.extend(temp)\n    subs.sort()\n    for x in subs:\n        x.sort()\n#         x.sort(key=lambda x: x[0])\n            \n#         print(x)\n        if sum(x)==0 and x not in sumsubs:\n            sumsubs.append(x)\n    for x in sumsubs:\n        x.sort()\n    sumsubs.sort(key=lambda x: x[0])\n    sumsubs.sort()   \n    if len(sumsubs)==1:\n        return (sumsubs[0])\n\n    if len(sumsubs)>1:\n        return (sumsubs)\n    else:\n        return 'No combinations'", "from itertools import combinations as c\ndef find_zero_sum_groups(arr, n):\n    a=sorted(set(arr))\n    ans=[]\n    for i in c(a,n):\n        if sum(i)==0:\n            ans.append(list(i))\n    if not arr: return 'No elements to combine'\n    if not ans: return 'No combinations'\n    if len(ans)==1: return ans[0]\n    return ans"]