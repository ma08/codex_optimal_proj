["from itertools import combinations\n\ndef digits(num):\n    return list(map(sum, combinations(map(int,str(num)),2)))", "# Solution 1\ndef digits(num):\n    return [int(a)+int(b) for i,a in enumerate(str(num)) for b in str(num)[(i+1):]]\n    \n    \n# Solution 2\ndef digits(num):\n    from itertools import combinations\n    return [int(a)+int(b) for a,b in combinations(str(num), 2)]", "from itertools import combinations\n\ndef digits(num):\n    return [int(a) + int(b) for a, b in combinations(str(num), 2)]", "from itertools import combinations\n\ndef digits(num):\n    return [sum(pair) for pair in combinations([int(d) for d in str(num)], 2)]\n", "from itertools import combinations\n\ndef digits(num):\n    ns = list(map(int, str(num)))\n    return [a+b for a, b in combinations(ns, 2)]", "def digits(num):\n    num = str(num)\n    return [int(x)+int(y) for n, x in enumerate(num,1) for y in num[n:]]\n", "def digits(num):\n  return [int(x)+int(y) for i, x in enumerate(str(num)) for j, y in enumerate(str(num)) if j > i]", "def digits(num):\n    ints = [int(i) for i in str(num)]\n    sums = []\n    for i in range(len(ints)-1):\n        for j in ints[i+1:]:\n            sums.append(ints[i] + j)\n    return sums", "from itertools import combinations\n\ndef digits(num):\n    lst = list(map(int, str(num)))\n    return [a + b for a, b in combinations(lst, 2)]", "def digits(num):\n    parse = lambda s: [int(s[0]) + int(x) for x in s[1:]] + (digits(s[1:]) if len(s) > 2 else [])\n    return parse(str(num))\n"]