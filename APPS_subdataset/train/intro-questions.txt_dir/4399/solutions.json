["def fold_cube(nums):\n    return expand(nums.pop(), set(nums), 1, 2, 3) == {1, 2, 3, -1, -2, -3}\n\n\ndef expand(val, nums, x, y, z):\n    dirs = {z}\n    for num in nums.copy():\n        if abs(val - num) not in (1, 5) or {val % 5, num % 5} == {0, 1}:\n            continue\n\n        nums.discard(num)\n        diff = val - num\n        sign = diff // abs(diff)\n        nx, ny, nz = (x, z * sign, -y * sign) if abs(diff) == 1 else (-z * sign, y, x * sign)\n        dirs |= expand(num, nums, nx, ny, nz)\n    return dirs", "def fold_cube(nums):\n    stack = [nums[0]]\n    for _ in range(6):\n        for i in range(len(stack)):\n            if ((stack[i]-1) % 5 > 0) and ((stack[i] - 1) in nums) and ((stack[i] - 1) not in stack):\n                stack.append(stack[i] - 1)\n            if ((stack[i]-1) % 5 < 4) and ((stack[i] + 1) in nums) and ((stack[i] + 1) not in stack):\n                stack.append(stack[i] + 1)\n            if ((stack[i]-1) > 5) and ((stack[i] - 5) in nums) and ((stack[i] - 5) not in stack):\n                stack.append(stack[i] - 5)\n            if ((stack[i]-1) < 21) and ((stack[i] + 5) in nums) and ((stack[i] + 5) not in stack):\n                stack.append(stack[i] + 5)\n    print(stack)\n    print(nums)\n    \n    \n    if len(stack) != 6:\n        return False\n    cols = []\n    for n in stack:\n        if ((n-1) % 5) not in cols:\n            cols.append((n-1) % 5)\n    rows = []\n    for n in stack:\n        if (int((n-1) / 5)) not in rows:\n            rows.append(int((n-1) / 5))\n#     print()\n#     print(rows)\n#     print()\n#     print(cols)\n    if len(rows) + len(cols) != 7:\n        return False\n    if len(rows) == 2:\n        if (sum(rows)+1)/2*5+ sum(cols)/5+1 not in stack or (sum(rows)-1)/2*5+ sum(cols)/5+1 not in stack:\n            return False\n    if len(rows) == 3:\n        if sum(rows)/3*5+(sum(cols)+2)/4+1 not in stack or sum(rows)/3*5+(sum(cols)-2)/4+1 not in stack:\n            print((3))\n            return False\n    if len(rows) == 4:\n        if (sum(rows)+2)/4*5+sum(cols)/3+1 not in stack or (sum(rows)-2)/4*5+sum(cols)/3+1 not in stack:\n            print((4))\n            return False\n    if len(rows) == 5:\n        if sum(rows)+ (sum(cols)+1)/2+1 not in stack or sum(rows)+ (sum(cols)-1)/2+1 not in stack:\n            print((5))\n            return False\n    if len(rows) == 2:\n        if sum(stack)%30 != 3:\n            return False\n    if len(rows) == 5:\n        if sum(stack)%6 != 3:\n            return False\n    print(True)\n    return True\n            \n        \n        \n    \n", "# Today I shall be mostly using geometry, group theory, and massive overkill to solve a problem... \n\n# These are the archetypes of the nets from a cube\nnets = [\n    [\n        [1, 0, 0, 0],\n        [1, 1, 1, 1],\n        [1, 0, 0, 0],\n    ],\n    [\n        [1, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 0, 0],\n    ],\n    [\n        [1, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 0, 1, 0],\n    ],\n    [\n        [1, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 0, 0, 1],\n    ],\n    [\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n        [0, 0, 1, 0],\n    ],\n    [\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 0, 0],\n    ],\n    [\n        [1, 1, 0, 0],\n        [0, 1, 1, 1],\n        [0, 1, 0, 0],\n    ],\n    [\n        [1, 1, 0, 0],\n        [0, 1, 1, 1],\n        [0, 0, 1, 0],\n    ],\n    [\n        [1, 0, 0, 0],\n        [1, 1, 1, 0],\n        [0, 0, 1, 1],\n    ],\n    [\n        [1, 1, 0, 0],\n        [0, 1, 1, 0],\n        [0, 0, 1, 1],\n    ],\n    [\n        [1, 1, 1, 0, 0],\n        [0, 0, 1, 1, 1],\n    ],\n]\n\n# Various transformations we can apply to the nets...\ndef h_mirror(m):\n    # Mirror a matrix horizontally\n    return m[::-1]\n\ndef v_mirror(m):\n    # Mirror a matrix vertically\n    return [r[::-1] for r in m]\n    \ndef transpose(m):\n    # Transpose a matrix\n    return list(map(list, zip(*m)))\n\ndef rotate_cw(m):\n    # Rotate a matrix clock-wise\n    coords = [(x, y) for y, row in enumerate(m) for x, v in enumerate(row) if v == 1]\n    new_coords = normalise([(y, -x) for x, y in coords])\n    result = [[0 for _ in range(len(m))] for _ in range(len(m[0]))]\n    for x, y in new_coords:\n        result[y][x] = 1\n    return result\n\ndef rotate_ccw(m):\n    # Rotate a matrix counter lock-wise\n    coords = [(x, y) for y, row in enumerate(m) for x, v in enumerate(row) if v == 1]\n    new_coords = normalise([(-y, x) for x, y in coords])\n    result = [[0 for _ in range(len(m))] for _ in range(len(m[0]))]\n    for x, y in new_coords:\n        result[y][x] = 1\n    return result\n\ndef identity(coords):\n    # No transformation\n    return coords\n\ndef normalise(coords):\n    # Translate all coordinates to that all x>=0 and y>=0\n    min_x = min(x for x, y in coords)\n    min_y = min(y for x, y in coords)\n    return tuple([(x - min_x, y - min_y) for x, y in coords])\n\ndef compose(*fns):\n    # Compose transformations\n    def apply(*args, **kwargs):\n        result = fns[0](*args, **kwargs)\n        for fn in fns[1:]: \n            result = fn(result)\n        return result\n    return apply\n\n# Transformations needed to generate all the symmetries of the nets\ncompositions = [\n    identity,\n    h_mirror,\n    v_mirror,\n    transpose,\n    rotate_cw,\n    rotate_ccw,\n    compose(rotate_cw, rotate_cw),\n    compose(rotate_cw, rotate_cw, transpose),\n]\n\n# Build all possible transformations of each net\nsolutions = []\nfor net in nets:\n    for composition in compositions:\n        net_prime = composition(net)\n        if net_prime not in solutions:\n            solutions.append(net_prime)\n\ndef to_relative(m):\n    # Find the coordinates of the 1s in the supplied matrix\n    return tuple(sorted([(x, y) for y, row in enumerate(m) for x, v in enumerate(row) if v == 1]))\n\n# All possible solutions using a relative coordinate system\nrelative_coordinate_solutions = set(to_relative(s) for s in solutions)\n\ndef fold_cube(number_list):\n    # Convert from numbered cells to relative coordinates\n    relative_coordinates = normalise(sorted([((n - 1) // 5, (n - 1) % 5) for n in number_list]))\n    # See if we have a known solution\n    return relative_coordinates in relative_coordinate_solutions", "# number the cube faces like a dice 1-6\ndef folding(grid,face,list_on_face,remain_list):\n    faces=[face]\n    dirs=[1,-1,5,-5]\n    if list_on_face % 5==1:\n        dirs.remove(-1)\n    if list_on_face % 5 ==0:\n        dirs.remove(1)\n    goto_dirs=[]\n    print(remain_list)\n    for direction in dirs:\n        goto_cell=direction+list_on_face\n        print((goto_cell,remain_list))\n        if goto_cell in remain_list:\n            remain_list.remove(goto_cell)\n            goto_dirs.append(direction)\n    print((\"face\",face,\"grid\",grid,\"listCELL\",list_on_face,\"to\",goto_dirs))\n    for direction in goto_dirs:\n        faces.extend(folding(\n            grid=new_grid(face,direction,grid),\n            face=new_face(grid, direction),\n            list_on_face=list_on_face+direction,\n            remain_list=remain_list\n        ))\n    return faces\n\ndef new_face(grid,direction):\n    return grid[[1,-1,5,-5].index(direction)]\n\ndef new_grid(face, direction, grid):\n    opposite_face={1:6,2:4,6:1,4:2,5:3,3:5}\n    dir_index={1:0,-1:1,5:2,-5:3}\n    newgrid=grid.copy()\n    newgrid[dir_index[-direction]]=face\n    newgrid[dir_index[direction]]=opposite_face[face]\n    return newgrid\n\ndef fold_cube(number_list):\n    faces=folding(grid=[3,5,2,4], #in dir [1,-1,5,-5]\n            face=1,\n            list_on_face=number_list[0],\n            remain_list=number_list[1:])\n    return sorted(faces)==list(range(1,7))\n    #return True or False\n", "BASE = {'  x\\nxxx\\n x \\n x ', ' x\\n x\\nxx\\nx \\nx ', ' x \\n xx\\nxx \\n x ', 'xx \\n xx\\n x \\n x ', ' x \\n xx\\nxx \\nx  ', 'xxx\\n x \\n x \\n x ', 'xx \\n x \\n xx\\n x ', 'xx \\n x \\n xx\\n  x', 'xx \\n x \\n x \\n xx', '  xx\\n xx \\nxx  ', ' x \\nxxx\\n x \\n x '}\n\ndef reflect(s):\n    return '\\n'.join(r[::-1] for r in s.split('\\n'))\n\ndef rotate(s):\n    return '\\n'.join(''.join(c[::-1]) for c in zip(*s.split('\\n')))\n\ndef fold_cube(arr):\n    table = [[' '] * 5 for _ in range(5)]\n    x0, y0, x1, y1 = 4, 4, 0, 0\n    for p in arr:\n        x, y = divmod(p - 1, 5)\n        table[x][y] = 'x'\n        x0, y0 = min(x, x0), min(y, y0)\n        x1, y1 = max(x, x1), max(y, y1)\n    net = '\\n'.join(''.join(r[y0:y1 + 1]) for r in table[x0:x1 + 1])\n    net2 = reflect(net)\n    for i in range(4):\n        if net in BASE or net2 in BASE:\n            return True\n        net, net2 = rotate(net), rotate(net2)\n    return False", "db = [{9, 14, 18, 19, 20, 24}, {13, 14, 15, 16, 17, 18}, {2, 3, 8, 9, 10, 13}, {3, 6, 7, 8, 9, 12}, {4, 7, 8, 9, 10, 14}, {4, 6, 7, 8, 9, 13}, {8, 9, 13, 17, 18, 23}, {5, 10, 14, 15, 19, 24}, {3, 8, 12, 13, 18, 19}, {8, 12, 13, 14, 18, 23}, {7, 11, 12, 13, 17, 22}, {8, 13, 17, 18, 23, 24}, {8, 12, 13, 14, 18, 23}, {3, 8, 12, 13, 18, 19}, {13, 16, 17, 18, 19, 23}, {4, 9, 13, 14, 15, 19}, {2, 7, 8, 11, 12, 16}, {1, 6, 7, 8, 13, 14}, {13, 17, 18, 19, 20, 22}, {8, 12, 13, 14, 15, 18}, {15, 17, 18, 19, 20, 23}, {3, 6, 7, 8, 9, 12}, {8, 13, 17, 18, 19, 24}, {3, 4, 8, 13, 17, 18}, {6, 11, 12, 13, 14, 18}, {8, 12, 13, 18, 19, 24}, {2, 7, 8, 9, 10, 14}, {15, 17, 18, 19, 20, 25}, {10, 14, 15, 18, 19, 24}, {15, 17, 18, 19, 20, 24}, {11, 16, 17, 18, 19, 23}, {4, 8, 9, 14, 15, 19}, {5, 8, 9, 10, 14, 19}, {9, 13, 14, 19, 20, 24}, {8, 13, 14, 19, 20, 24}, {11, 16, 17, 18, 19, 22}, {2, 6, 7, 8, 13, 14}, {8, 12, 13, 18, 19, 23}, {8, 9, 14, 15, 19, 24}, {9, 13, 14, 19, 20, 24}, {3, 8, 12, 13, 14, 18}, {7, 12, 13, 17, 21, 22}, {7, 12, 16, 17, 18, 23}, {1, 2, 3, 7, 12, 17}, {9, 14, 18, 19, 24, 25}, {9, 11, 12, 13, 14, 16}, {14, 17, 18, 19, 20, 24}, {4, 9, 13, 14, 19, 20}, {2, 7, 8, 9, 14, 15}, {2, 3, 8, 9, 10, 13}, {6, 11, 12, 13, 17, 22}, {12, 16, 17, 18, 23, 24}, {7, 12, 16, 17, 18, 21}, {13, 14, 17, 18, 21, 22}, {4, 6, 7, 8, 9, 12}, {12, 17, 18, 19, 21, 22}, {8, 13, 18, 19, 22, 23}, {7, 12, 13, 18, 19, 23}, {1, 2, 7, 8, 9, 12}, {9, 14, 19, 20, 23, 24}, {11, 16, 17, 18, 19, 21}, {8, 13, 14, 17, 18, 23}, {9, 14, 15, 19, 23, 24}, {7, 12, 13, 14, 15, 19}, {6, 11, 12, 13, 17, 22}, {2, 6, 7, 8, 12, 17}, {3, 6, 7, 8, 9, 13}, {4, 5, 7, 8, 9, 12}, {3, 8, 9, 12, 13, 17}, {2, 3, 8, 9, 10, 15}, {6, 11, 12, 17, 22, 23}, {13, 17, 18, 19, 20, 24}, {8, 9, 14, 15, 19, 24}, {6, 7, 12, 13, 17, 22}, {9, 13, 14, 15, 17, 18}, {7, 12, 16, 17, 18, 22}, {8, 9, 14, 15, 19, 24}, {4, 9, 10, 14, 18, 19}, {8, 12, 13, 18, 19, 24}, {3, 4, 9, 10, 14, 19}, {8, 13, 14, 19, 24, 25}, {7, 12, 16, 17, 22, 23}, {8, 11, 12, 13, 17, 22}, {7, 12, 16, 17, 18, 22}, {2, 6, 7, 8, 13, 14}, {3, 4, 6, 7, 8, 12}, {3, 8, 9, 10, 14, 19}, {8, 13, 14, 15, 19, 24}, {4, 8, 9, 10, 12, 13}, {8, 13, 17, 18, 19, 23}, {2, 6, 7, 8, 9, 13}, {13, 16, 17, 18, 19, 23}, {3, 8, 12, 13, 14, 17}, {3, 7, 8, 9, 13, 18}, {9, 14, 15, 18, 19, 24}, {3, 6, 7, 8, 9, 12}, {11, 16, 17, 18, 19, 23}, {8, 9, 11, 12, 13, 18}, {7, 12, 13, 14, 15, 19}, {10, 12, 13, 14, 15, 18}, {8, 13, 17, 18, 23, 24}, {4, 9, 13, 14, 15, 19}, {13, 16, 17, 18, 23, 24}, {1, 2, 3, 7, 12, 17}, {9, 12, 13, 14, 15, 17}, {4, 9, 10, 14, 18, 19}, {12, 13, 18, 19, 24, 25}, {2, 7, 11, 12, 17, 18}, {2, 6, 7, 12, 13, 17}, {3, 7, 8, 9, 10, 13}, {1, 6, 7, 8, 9, 14}, {2, 7, 8, 9, 10, 12}, {3, 7, 8, 9, 10, 13}, {3, 7, 8, 13, 14, 19}, {5, 9, 10, 13, 14, 19}, {8, 13, 14, 17, 18, 23}, {4, 8, 9, 14, 15, 19}, {4, 8, 9, 14, 19, 20}, {3, 7, 8, 13, 14, 19}, {1, 2, 7, 8, 9, 12}, {7, 8, 13, 14, 19, 20}, {14, 15, 17, 18, 19, 23}, {8, 11, 12, 13, 17, 22}, {4, 8, 9, 12, 13, 18}, {4, 8, 9, 14, 19, 20}, {4, 9, 13, 14, 15, 18}, {7, 12, 13, 14, 15, 17}, {2, 7, 8, 11, 12, 16}, {1, 6, 7, 8, 9, 13}, {15, 17, 18, 19, 20, 24}, {8, 9, 10, 11, 12, 13}, {12, 16, 17, 18, 19, 21}, {9, 14, 18, 19, 20, 25}, {3, 4, 8, 12, 13, 18}, {9, 12, 13, 14, 15, 17}, {6, 7, 12, 13, 17, 22}, {10, 14, 15, 18, 19, 24}, {2, 3, 6, 7, 12, 17}, {4, 9, 13, 14, 15, 19}, {2, 7, 8, 9, 13, 18}, {3, 8, 13, 14, 17, 18}, {9, 10, 13, 14, 19, 24}, {3, 8, 9, 12, 13, 18}, {8, 12, 13, 14, 15, 18}, {14, 15, 18, 19, 22, 23}, {12, 16, 17, 18, 19, 21}, {7, 11, 12, 17, 18, 22}, {3, 6, 7, 8, 9, 11}, {7, 8, 12, 16, 17, 22}, {9, 13, 14, 15, 17, 18}, {6, 11, 12, 13, 14, 17}, {13, 17, 18, 19, 21, 22}, {12, 16, 17, 18, 19, 24}, {6, 11, 12, 13, 14, 18}, {14, 16, 17, 18, 19, 23}, {3, 7, 8, 9, 10, 13}, {4, 6, 7, 8, 9, 13}, {9, 12, 13, 14, 15, 20}, {2, 3, 6, 7, 12, 17}, {12, 13, 18, 19, 20, 23}, {8, 9, 10, 11, 12, 13}, {8, 13, 14, 17, 18, 23}, {4, 6, 7, 8, 9, 14}, {9, 12, 13, 14, 15, 19}, {3, 7, 8, 9, 11, 12}, {3, 8, 9, 12, 13, 18}, {9, 14, 15, 18, 19, 23}, {8, 12, 13, 14, 15, 18}, {3, 4, 9, 14, 15, 19}, {4, 8, 9, 14, 15, 20}, {7, 11, 12, 13, 14, 18}, {4, 9, 14, 18, 19, 20}, {2, 6, 7, 12, 13, 18}, {13, 16, 17, 18, 19, 23}, {9, 14, 19, 23, 24, 25}, {6, 11, 12, 13, 14, 18}, {7, 12, 16, 17, 18, 23}, {10, 12, 13, 14, 15, 19}, {4, 8, 9, 10, 14, 19}, {13, 16, 17, 18, 19, 22}, {4, 7, 8, 9, 10, 13}, {14, 17, 18, 19, 20, 23}, {12, 17, 18, 19, 20, 23}, {16, 17, 18, 23, 24, 25}, {8, 11, 12, 13, 14, 18}, {3, 8, 12, 13, 14, 18}, {9, 12, 13, 14, 15, 18}, {9, 13, 14, 19, 20, 25}, {7, 12, 13, 14, 15, 20}, {11, 12, 13, 18, 19, 20}, {7, 8, 13, 14, 18, 23}, {3, 6, 7, 8, 9, 12}, {10, 13, 14, 15, 17, 18}, {6, 7, 12, 13, 17, 22}, {4, 7, 8, 9, 10, 15}, {10, 13, 14, 15, 19, 24}, {8, 9, 11, 12, 13, 16}, {8, 12, 13, 14, 15, 20}, {11, 16, 17, 18, 19, 24}, {2, 7, 8, 9, 10, 12}, {13, 16, 17, 18, 19, 23}, {9, 12, 13, 14, 15, 19}, {4, 6, 7, 8, 9, 12}, {12, 16, 17, 18, 19, 22}, {2, 7, 11, 12, 13, 18}, {14, 15, 17, 18, 19, 22}, {3, 7, 8, 13, 18, 19}, {9, 11, 12, 13, 14, 16}, {9, 10, 12, 13, 14, 17}, {8, 12, 13, 14, 15, 18}, {12, 17, 18, 19, 20, 25}, {4, 7, 8, 9, 10, 14}, {8, 13, 18, 19, 22, 23}, {7, 8, 13, 14, 15, 20}, {12, 16, 17, 18, 19, 23}, {4, 7, 8, 9, 10, 15}, {1, 2, 7, 12, 17, 18}, {3, 7, 8, 13, 14, 18}, {4, 8, 9, 14, 15, 20}, {8, 12, 13, 14, 16, 17}, {4, 7, 8, 9, 10, 14}, {6, 7, 12, 13, 14, 19}, {12, 17, 18, 19, 20, 23}, {14, 17, 18, 19, 20, 23}, {8, 12, 13, 18, 19, 24}, {8, 12, 13, 18, 23, 24}, {8, 12, 13, 14, 15, 19}, {4, 5, 8, 9, 12, 13}, {6, 11, 12, 13, 17, 22}, {7, 11, 12, 13, 14, 19}, {8, 13, 17, 18, 19, 24}, {13, 16, 17, 18, 19, 23}, {2, 6, 7, 8, 12, 17}, {7, 12, 16, 17, 18, 22}, {14, 17, 18, 19, 20, 23}, {4, 8, 9, 10, 14, 19}, {6, 11, 12, 13, 14, 18}, {5, 8, 9, 10, 14, 19}, {9, 14, 18, 19, 20, 24}, {9, 13, 14, 15, 17, 18}, {6, 11, 12, 17, 18, 22}, {7, 11, 12, 17, 22, 23}, {7, 11, 12, 13, 14, 18}, {10, 13, 14, 15, 19, 24}, {12, 13, 18, 19, 20, 23}, {13, 16, 17, 18, 23, 24}, {8, 13, 17, 18, 19, 22}, {12, 16, 17, 18, 19, 23}, {11, 16, 17, 18, 19, 22}, {13, 16, 17, 18, 19, 23}, {14, 15, 17, 18, 19, 23}, {14, 17, 18, 19, 20, 24}, {6, 7, 12, 17, 22, 23}, {8, 11, 12, 13, 18, 19}, {8, 9, 11, 12, 13, 18}, {8, 13, 18, 19, 22, 23}, {18, 19, 20, 21, 22, 23}, {7, 12, 13, 14, 16, 17}, {7, 12, 16, 17, 18, 22}, {3, 4, 6, 7, 8, 13}, {2, 7, 8, 9, 10, 14}, {3, 8, 12, 13, 18, 19}, {9, 11, 12, 13, 14, 17}, {9, 13, 14, 17, 18, 23}, {7, 11, 12, 13, 18, 19}, {9, 11, 12, 13, 14, 16}, {10, 12, 13, 14, 15, 20}, {2, 7, 11, 12, 13, 16}, {14, 17, 18, 19, 20, 22}, {8, 12, 13, 14, 15, 18}, {15, 17, 18, 19, 20, 24}, {13, 17, 18, 19, 24, 25}, {12, 17, 18, 19, 20, 22}, {4, 5, 7, 8, 9, 14}, {9, 14, 18, 19, 24, 25}, {2, 7, 8, 11, 12, 17}, {12, 17, 18, 19, 20, 23}, {3, 8, 9, 13, 17, 18}, {6, 7, 12, 13, 14, 19}, {9, 14, 15, 18, 19, 24}, {10, 14, 15, 18, 19, 23}, {7, 12, 16, 17, 18, 22}, {12, 16, 17, 18, 19, 22}, {15, 17, 18, 19, 20, 22}, {3, 8, 13, 14, 17, 18}, {4, 8, 9, 12, 13, 18}, {7, 11, 12, 13, 18, 19}, {8, 11, 12, 13, 14, 17}, {7, 12, 16, 17, 18, 22}, {14, 17, 18, 19, 21, 22}, {1, 2, 7, 8, 13, 14}, {12, 16, 17, 18, 19, 23}, {2, 6, 7, 8, 9, 12}, {7, 11, 12, 13, 14, 19}, {5, 7, 8, 9, 10, 12}, {5, 7, 8, 9, 10, 15}, {4, 7, 8, 9, 14, 15}, {9, 12, 13, 14, 19, 20}, {3, 4, 9, 14, 15, 19}, {8, 13, 14, 17, 18, 23}, {2, 7, 8, 11, 12, 17}, {2, 7, 8, 13, 18, 19}, {8, 12, 13, 14, 18, 23}, {5, 10, 14, 15, 19, 24}, {4, 7, 8, 9, 10, 15}, {14, 15, 17, 18, 19, 23}, {8, 9, 14, 15, 19, 24}, {3, 7, 8, 9, 10, 13}, {9, 14, 15, 18, 19, 24}, {5, 7, 8, 9, 10, 15}, {7, 12, 17, 21, 22, 23}, {3, 8, 9, 14, 15, 20}, {12, 13, 18, 19, 20, 24}, {8, 13, 17, 18, 19, 23}, {7, 12, 13, 14, 16, 17}, {9, 13, 14, 19, 24, 25}, {8, 12, 13, 14, 16, 17}, {4, 9, 13, 14, 15, 18}, {1, 2, 7, 8, 12, 17}, {8, 9, 11, 12, 13, 16}, {9, 14, 18, 19, 20, 23}, {12, 17, 18, 19, 20, 24}, {3, 8, 12, 13, 17, 22}, {9, 14, 19, 20, 23, 24}, {2, 7, 8, 13, 14, 18}, {9, 14, 19, 23, 24, 25}, {8, 9, 11, 12, 13, 18}, {2, 7, 11, 12, 13, 17}, {1, 6, 11, 12, 17, 22}, {1, 6, 7, 12, 13, 17}, {7, 8, 12, 17, 21, 22}, {14, 16, 17, 18, 19, 24}, {12, 16, 17, 18, 19, 22}, {7, 12, 13, 16, 17, 22}, {8, 13, 14, 17, 18, 23}, {9, 13, 14, 19, 20, 24}, {2, 7, 8, 12, 16, 17}, {3, 4, 6, 7, 8, 13}, {4, 5, 7, 8, 9, 14}, {2, 6, 7, 8, 9, 13}, {7, 12, 16, 17, 22, 23}, {2, 6, 7, 8, 12, 17}, {7, 11, 12, 17, 18, 22}, {9, 10, 14, 18, 19, 23}, {8, 9, 13, 17, 18, 23}, {14, 16, 17, 18, 19, 23}, {7, 8, 12, 17, 21, 22}, {14, 16, 17, 18, 19, 23}, {10, 12, 13, 14, 15, 18}, {3, 6, 7, 8, 9, 12}, {6, 11, 12, 13, 17, 22}, {8, 11, 12, 13, 17, 22}, {8, 12, 13, 14, 15, 19}, {8, 9, 11, 12, 13, 16}, {7, 12, 16, 17, 18, 21}, {8, 11, 12, 13, 17, 22}, {8, 13, 14, 19, 24, 25}, {3, 8, 9, 10, 12, 13}, {6, 11, 12, 13, 17, 22}, {7, 12, 13, 14, 15, 17}, {14, 15, 17, 18, 19, 23}, {4, 9, 10, 13, 14, 18}, {8, 9, 10, 11, 12, 13}, {2, 7, 8, 13, 18, 19}, {3, 8, 12, 13, 18, 19}, {9, 13, 14, 19, 20, 24}, {2, 7, 12, 13, 18, 23}, {6, 11, 12, 17, 18, 23}, {4, 9, 14, 18, 19, 20}, {9, 12, 13, 14, 15, 17}, {6, 11, 12, 13, 14, 16}, {9, 13, 14, 15, 19, 24}, {14, 17, 18, 19, 20, 25}, {14, 17, 18, 19, 21, 22}, {7, 12, 13, 18, 19, 23}, {3, 4, 9, 14, 15, 20}, {2, 6, 7, 8, 9, 13}, {3, 4, 6, 7, 8, 13}, {8, 13, 14, 15, 19, 24}, {13, 16, 17, 18, 19, 22}, {8, 9, 11, 12, 13, 17}, {2, 6, 7, 12, 13, 17}, {1, 2, 7, 8, 9, 12}, {3, 8, 9, 12, 13, 17}, {2, 3, 8, 9, 10, 14}, {13, 16, 17, 18, 19, 23}, {8, 11, 12, 13, 14, 17}, {2, 7, 8, 11, 12, 16}, {6, 7, 12, 13, 14, 17}, {13, 18, 19, 20, 22, 23}, {10, 12, 13, 14, 15, 20}, {1, 6, 11, 12, 17, 22}, {2, 7, 8, 11, 12, 17}, {8, 9, 14, 19, 20, 25}, {2, 7, 11, 12, 17, 18}, {2, 6, 7, 12, 17, 18}, {8, 13, 18, 19, 22, 23}, {4, 8, 9, 10, 14, 19}, {9, 14, 18, 19, 20, 23}, {4, 6, 7, 8, 9, 12}, {14, 17, 18, 19, 20, 24}, {4, 8, 9, 10, 14, 19}, {2, 6, 7, 8, 9, 12}, {13, 17, 18, 19, 20, 25}, {7, 11, 12, 17, 22, 23}, {3, 6, 7, 8, 9, 13}, {7, 11, 12, 13, 14, 17}, {7, 11, 12, 13, 14, 19}, {4, 9, 13, 14, 18, 23}, {7, 12, 13, 16, 17, 22}, {4, 8, 9, 12, 13, 17}, {11, 12, 17, 18, 19, 23}, {12, 16, 17, 18, 19, 23}, {3, 8, 12, 13, 14, 19}, {1, 2, 3, 7, 12, 17}, {8, 9, 11, 12, 13, 18}, {7, 12, 13, 16, 17, 21}, {7, 11, 12, 13, 17, 22}, {2, 7, 11, 12, 13, 18}, {12, 16, 17, 18, 19, 23}, {7, 11, 12, 17, 18, 22}, {3, 8, 9, 10, 12, 13}, {7, 8, 9, 13, 18, 23}, {2, 7, 8, 9, 13, 18}, {11, 12, 13, 18, 19, 20}, {7, 12, 13, 14, 15, 20}, {4, 7, 8, 9, 10, 12}, {2, 7, 11, 12, 13, 17}, {9, 11, 12, 13, 14, 18}, {9, 11, 12, 13, 14, 17}, {9, 11, 12, 13, 14, 19}, {3, 8, 12, 13, 18, 19}, {4, 8, 9, 13, 17, 18}, {12, 13, 18, 19, 24, 25}, {7, 11, 12, 13, 17, 22}, {13, 18, 19, 20, 22, 23}, {6, 11, 12, 13, 17, 22}, {4, 5, 7, 8, 9, 13}, {8, 9, 10, 11, 12, 13}, {8, 9, 11, 12, 13, 17}, {8, 9, 10, 14, 19, 24}, {9, 14, 19, 23, 24, 25}, {13, 17, 18, 19, 20, 23}, {9, 14, 18, 19, 20, 24}, {11, 12, 17, 18, 19, 23}, {13, 16, 17, 18, 19, 23}, {7, 12, 16, 17, 18, 21}, {7, 8, 9, 13, 18, 23}, {5, 8, 9, 10, 12, 13}, {5, 7, 8, 9, 10, 12}, {2, 6, 7, 12, 13, 17}, {9, 12, 13, 14, 15, 19}, {14, 16, 17, 18, 19, 23}, {7, 12, 17, 18, 21, 22}, {16, 17, 18, 23, 24, 25}, {8, 12, 13, 14, 15, 17}, {8, 13, 17, 18, 19, 23}, {2, 3, 8, 9, 10, 14}, {4, 9, 14, 15, 18, 19}, {15, 17, 18, 19, 20, 25}, {4, 9, 10, 14, 18, 19}, {13, 16, 17, 18, 19, 23}, {7, 12, 13, 16, 17, 21}, {9, 11, 12, 13, 14, 19}, {3, 7, 8, 9, 10, 14}, {4, 8, 9, 14, 15, 19}, {2, 7, 12, 13, 16, 17}, {6, 7, 8, 13, 14, 15}, {7, 8, 12, 16, 17, 22}, {8, 9, 14, 15, 19, 24}, {3, 8, 13, 14, 17, 18}, {7, 12, 13, 14, 15, 19}, {15, 17, 18, 19, 20, 24}, {3, 6, 7, 8, 9, 11}, {3, 7, 8, 11, 12, 16}, {8, 12, 13, 16, 17, 22}, {6, 7, 8, 12, 17, 22}, {11, 16, 17, 18, 19, 21}, {8, 13, 14, 15, 19, 24}, {2, 6, 7, 12, 17, 18}, {7, 8, 13, 18, 23, 24}, {3, 6, 7, 8, 9, 13}, {4, 7, 8, 9, 13, 18}, {13, 17, 18, 19, 20, 24}, {3, 7, 8, 9, 10, 12}, {1, 6, 7, 12, 13, 17}, {3, 8, 9, 14, 15, 19}, {13, 16, 17, 18, 19, 22}, {12, 16, 17, 18, 19, 22}, {3, 7, 8, 9, 10, 14}, {14, 17, 18, 19, 20, 22}, {7, 11, 12, 17, 18, 22}, {1, 6, 7, 12, 13, 17}, {1, 6, 7, 8, 12, 17}, {2, 6, 7, 12, 17, 18}, {3, 7, 8, 9, 10, 15}, {7, 12, 13, 16, 17, 21}, {4, 6, 7, 8, 9, 13}, {1, 6, 7, 8, 9, 11}, {2, 7, 11, 12, 13, 17}, {13, 17, 18, 19, 20, 24}, {9, 13, 14, 15, 19, 24}, {8, 9, 13, 17, 18, 23}, {4, 9, 10, 13, 14, 19}, {1, 2, 3, 7, 12, 17},{9, 10, 14, 18, 19, 24}, {7, 12, 13, 14, 15, 18}, {4, 5, 9, 14, 18, 19}, {3, 4, 7, 8, 11, 12}, {8, 13, 18, 22, 23, 24}, {1, 6, 7, 12, 17, 18}, {2, 7, 8, 9, 10, 13}, {3, 6, 7, 8, 9, 14}, {8, 9, 14, 19, 20, 24}, {4, 6, 7, 8, 9, 11}, {9, 12, 13, 14, 18, 23}, {1, 2, 7, 8, 9, 13}, {8, 9, 13, 18, 22, 23}, {2, 3, 8, 13, 14, 18}, {1, 2, 7, 12, 13, 18}, {14, 16, 17, 18, 19, 22}, {1, 2, 7, 12, 13, 17}, {6, 7, 12, 13, 14, 18}, {3, 6, 7, 8, 12, 17}, {3, 7, 8, 11, 12, 17}, {1, 6, 7, 12, 13, 18}, {8, 12, 13, 17, 21, 22}, {4, 5, 8, 9, 14, 19}, {1, 6, 7, 8, 9, 12}, {7, 8, 11, 12, 17, 22}, {13, 16, 17, 18, 19, 21}, {6, 7, 12, 17, 18, 23}, {8, 11, 12, 13, 14, 19}, {2, 7, 11, 12, 16, 21}, {5, 9, 10, 14, 18, 19}, {4, 9, 14, 15, 20, 25}, {7, 8, 12, 16, 17, 21}, {9, 10, 12, 13, 14, 18}, {9, 10, 12, 13, 14, 19}, {2, 3, 7, 11, 12, 17}, {9, 13, 14, 17, 18, 22}, {7, 11, 12, 17, 18, 23}, {13, 14, 16, 17, 18, 23}, {14, 17, 18, 19, 24, 25}, {8, 13, 14, 15, 17, 18}, {7, 11, 12, 13, 14, 16}, {3, 8, 13, 14, 19, 24}, {2, 3, 8, 9, 13, 18}, {3, 4, 7, 8, 13, 18}, {4, 5, 9, 13, 14, 18}, {4, 9, 13, 14, 15, 20}, {2, 3, 8, 13, 14, 19}, {2, 7, 12, 16, 17, 18}, {10, 14, 15, 19, 23, 24}, {5, 7, 8, 9, 10, 14}, {3, 4, 6, 7, 8, 11}, {2, 7, 8, 13, 14, 19}, {3, 6, 7, 8, 13, 14}, {7, 12, 13, 14, 18, 23}, {7, 12, 13, 18, 23, 24}, {2, 3, 8, 13, 18, 19}, {14, 16, 17, 18, 19, 21}, {11, 12, 17, 18, 19, 22}, {8, 9, 12, 13, 18, 23}, {3, 4, 5, 6, 7, 8}, {4, 5, 9, 13, 14, 19}, {8, 9, 12, 13, 16, 17}, {8, 11, 12, 13, 14, 16}, {2, 7, 8, 9, 10, 15}, {4, 7, 8, 9, 11, 12}, {5, 9, 10, 13, 14, 18}, {13, 16, 17, 18, 19, 24}, {14, 18, 19, 20, 22, 23}, {8, 12, 13, 14, 19, 20}, {3, 8, 13, 17, 18, 19}, {3, 4, 9, 14, 19, 20}, {14, 15, 17, 18, 19, 24},{7, 8, 13, 18, 19, 23}, {2, 3, 8, 9, 14, 15}, {6, 7, 12, 17, 18, 22}, {3, 4, 8, 12, 13, 17}, {13, 14, 16, 17, 18, 21}, {2, 3, 7, 12, 16, 17}, {2, 6, 7, 8, 9, 14}, {13, 14, 16, 17, 18, 22}, {2, 3, 7, 11, 12, 16}, {2, 7, 8, 9, 11, 12}, {3, 4, 5, 9, 14, 19}, {8, 9, 13, 17, 18, 22}, {10, 12, 13, 14, 15, 17}, {7, 8, 13, 14, 15, 18}, {7, 12, 13, 14, 19, 20}, {2, 6, 7, 8, 9, 11}, {7, 8, 13, 18, 19, 24}, {3, 7, 8, 9, 14, 15}, {11, 16, 17, 18, 23, 24}, {7, 8, 13, 14, 15, 19}, {2, 3, 4, 8, 13, 18}, {8, 13, 14, 17, 18, 22}, {7, 12, 13, 18, 19, 24}, {9, 13, 14, 18, 22, 23}, {9, 10, 13, 14, 17, 18},{9, 10, 14, 19, 23, 24}, {12, 13, 18, 19, 20, 25}, {6, 11, 12, 13, 14, 19}, {8, 13, 14, 18, 22, 23}, {3, 7, 8, 12, 16, 17}, {1, 2, 7, 8, 9, 14}, {8, 12, 13, 16, 17, 21}, {6, 7, 12, 13, 18, 19}, {9, 12, 13, 14, 16, 17}, {15, 18, 19, 20, 22, 23}, {5, 7, 8, 9, 10, 13}, {6, 11, 12, 13, 18, 19}, {8, 13, 14, 19, 20, 25}, {8, 9, 14, 19, 24, 25}, {12, 17, 18, 19, 24, 25}, {1, 2, 3, 8, 9, 10}, {11, 12, 17, 18, 19, 24}, {3, 8, 9, 14, 19, 20}, {11, 12, 17, 18, 23, 24}]\ndef fold_cube(num_list): return set(num_list) in db\n'''\n\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\n\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\n\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff wait - that's illegal \u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\n\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\n\u28ff\u28ff\u28ff\u28ff\u28ff\u284f\u2809\u281b\u28bf\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u28ff\n\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2800\u2800\u2800\u2808\u281b\u28bf\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u283f\u281b\u2809\u2801\u2800\u28ff\n\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28e7\u2840\u2800\u2800\u2800\u2800\u2819\u283f\u283f\u283f\u283b\u283f\u283f\u281f\u283f\u281b\u2809\u2800\u2800\u2800\u2800\u2800\u28f8\u28ff\u28ff\n\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28f7\u28c4\u2800\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28f4\u28ff\u28ff\u28ff\u28ff\n\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u280f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2820\u28f4\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\n\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u285f\u2800\u2800\u28b0\u28f9\u2846\u2800\u2800\u2800\u2800\u2800\u2800\u28ed\u28f7\u2800\u2800\u2800\u2838\u28ff\u28ff\u28ff\u28ff\u28ff\n\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2803\u2800\u2800\u2808\u2809\u2800\u2800\u2824\u2804\u2800\u2800\u2800\u2809\u2801\u2800\u2800\u2800\u2800\u28bf\u28ff\u28ff\u28ff\u28ff\n\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28be\u28ff\u28f7\u2800\u2800\u2800\u2800\u2860\u2824\u2884\u2800\u2800\u2800\u2820\u28ff\u28ff\u28f7\u2800\u28b8\u28ff\u28ff\u28ff\u28ff\n\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2840\u2809\u2800\u2800\u2800\u2800\u2800\u2884\u2800\u2880\u2800\u2800\u2800\u2800\u2809\u2809\u2801\u2800\u2800\u28ff\u28ff\u28ff\u28ff\n\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28e7\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b9\u28ff\u28ff\u28ff\u28ff\n\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2803\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28ff\n'''", "U = 1\nF = 2\nR = 3\n\n\ndef fold_cube(num_list):\n    print(num_list)\n    nums = set(num_list)\n    faces = set()\n    print(nums)\n    try:\n        face = Face(nums.pop(), nums, faces)\n    except:\n        return False\n    faces.add(face)\n#     print(face.val)\n#     print(face.borders())\n#     for face in faces:\n#         print(face.val, face.z)\n#     return sum(f.z for f in faces) == 0\n    fs = set(f.z for f in faces)\n    return fs == {1, 2, 3, -1, -2, -3}\n\n\nclass Face:\n    def __init__(self, val, nums, faces, x=F, y=R, z=U):\n#         print(val, nums)\n        self.nums = nums\n        self.val = val\n        self.z = z\n        self.x = x\n        self.y = y\n\n        for num in self.borders():\n            self.nums.remove(num)\n            z, x, y = self.fold(num)\n#             print(z, x, y)\n            faces.add(Face(num, self.nums, faces, x=x, y=y, z=z))\n\n    def borders(self):\n        borders = []\n        ds = (self.val - 1) // 5\n        ms = (self.val - 1) % 5\n        for num in self.nums:\n            dn = (num - 1) // 5\n            mn = (num - 1) % 5\n#             print(ds, ms, dn, mn)\n            if ds - dn == 0 and abs(ms - mn) == 1 or ms - mn == 0 and abs(ds - dn) == 1:\n                borders.append(num)\n#             if abs(self.val - num) in [1, 5]:\n#                 borders.append(num)\n#         print(borders)\n        return borders\n\n    def fold(self, num):\n        relation = self.val - num\n        if relation == 5:\n            z = self.x\n            x = -self.z\n            y = self.y\n        elif relation == -5:\n            z = -self.x\n            x = self.z\n            y = self.y\n        elif relation == 1:\n            z = -self.y\n            x = self.x\n            y = self.z\n        elif relation == -1:\n            z = self.y\n            x = self.x\n            y = -self.z\n        return z, x, y\n\n    def __hash__(self):\n        return self.val\n\n    def __eq__(self, other):\n        return self.val == other.val\n", "def fold_cube(number_list):\n    print(number_list)\n    connections = 0\n    number_list.sort()\n\n    for i in range(len(number_list)):\n        if ((number_list[i] - 1) in number_list) and (number_list[i] not in [6, 11, 16, 21]): connections += 1\n    for j in range(len(number_list)):\n        if ((number_list[j] - 5) in number_list): connections += 1\n\n    # in cube 6 faces are connected by 5 edges\n    if connections != 5: return False\n\n    horizontal = [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 24, 25]]\n    vertical = [[1, 6, 11, 16, 21], [2, 7, 12, 17, 22], [3, 8, 13, 18, 23], [4, 9, 14, 19, 24], [5, 10, 15, 20, 25]]\n\n    lenghts_horizontal = []\n    height = 0\n\n    for h in horizontal:\n        lh = 1\n        any_in_row = False\n        for i in range(len(number_list)):\n            if number_list[i] in h:\n                any_in_row = True\n            if ((number_list[i] - 1) in number_list) and (number_list[i] in h) and (\n                    number_list[i] not in [6, 11, 16, 21]):\n                lh += 1\n        if lh > 1:\n            lenghts_horizontal.append(lh)\n        elif any_in_row:\n            lenghts_horizontal.append(1)\n        if any_in_row:\n            height += 1\n\n    if lenghts_horizontal[0] == 4 or lenghts_horizontal[-1] == 4:\n        return False\n\n    is_3_horizontal_fist = False\n    if lenghts_horizontal[0] == 3 or lenghts_horizontal[-1] == 3:\n        is_3_horizontal_fist = True\n\n    lenghts_horizontal.sort(reverse=True)\n\n    if lenghts_horizontal[0] > 4: return False\n\n    width = 0\n    lenghts_vertical = []\n\n    for v in vertical:\n        lv = 1\n        any_in_row = False\n        for i in range(len(number_list)):\n            if number_list[i] in v:\n                any_in_row = True\n            if ((number_list[i] - 5) in number_list) and (number_list[i] in v):\n                lv += 1\n        if lv > 1:\n            lenghts_vertical.append(lv)\n        elif any_in_row:\n            lenghts_vertical.append(1)\n        if any_in_row:\n            width += 1\n\n    if height == 3 and width == 3:\n        return False\n\n    if lenghts_vertical[0] == 4 or lenghts_vertical[-1] == 4:\n        return False\n\n    is_3_vertical_first = False\n    if (lenghts_vertical[0] == 3) or (lenghts_vertical[-1] == 3):\n        is_3_vertical_first = True\n\n    lenghts_vertical.sort(reverse=True)\n\n    if is_3_vertical_first and height == 4:\n        return False\n\n    if is_3_horizontal_fist and width == 4:\n        return False\n\n    if lenghts_vertical[0] > 4: return False\n\n    if (lenghts_vertical[0] == 3 and lenghts_vertical[1] == 3 and width == 2):\n        return True\n\n    if (lenghts_horizontal[0] == 3 and lenghts_horizontal[1] == 3 and height == 2):\n        return True\n\n    upper = False\n    upper_list = [1, 2, 3, 4, 5]\n    lower = False\n    lower_list = [21, 22, 23, 24, 25]\n    left = False\n    left_list = [1, 6, 11, 16, 21]\n    right = False\n    right_list = [5, 10, 15, 20, 25]\n\n    for n in number_list:\n        if n in upper_list:\n            upper = True\n        if n in lower_list:\n            lower = True\n        if n in left_list:\n            left = True\n        if n in right_list:\n            right = True\n\n    if upper and lower: return False\n    if right and left: return False\n\n    if lenghts_vertical == [2, 2, 1, 1] and lenghts_horizontal == [3, 2, 1] and width == 3 and height == 4:\n        return False\n\n    if ((lenghts_vertical[0] == 3 and width == 4 and height != 2) or (\n            lenghts_horizontal[0] == 3 and height == 4 and width != 2)) and (lenghts_vertical != [3, 1, 1, 1]):\n        return True\n\n    if (lenghts_vertical[0] == 4 and width == 3 and height != 2) or (\n            lenghts_horizontal[0] == 4 and height == 3 and width != 2):\n        return True\n\n    if (lenghts_vertical[0] == 3 and height == 4 and width != 2) or (\n            lenghts_horizontal[0] == 3 and width == 4 and height != 2):\n        return True\n\n    if (lenghts_vertical[0] == 4 and height == 3 and width != 2) or (\n            lenghts_horizontal[0] == 4 and width == 3 and height != 2):\n        return True\n\n    if lenghts_vertical == [2, 2, 2] and lenghts_horizontal == [2, 2, 1, 1]:\n        return True\n\n    if lenghts_horizontal == [2, 2, 2] and lenghts_vertical == [2, 2, 1, 1]:\n        return True\n\n    return False", "def fold_cube(number_list):\n    print(number_list)\n    connections = 0\n    number_list.sort()\n\n    for i in range(len(number_list)):\n        if ((number_list[i] - 1) in number_list) and (number_list[i] not in [6, 11, 16, 21]): connections += 1\n    for j in range(len(number_list)):\n        if ((number_list[j] - 5) in number_list): connections += 1\n\n    # in cube 6 faces are connected by 5 edges\n    if connections != 5: return False\n\n    horizontal = [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 24, 25]]\n    vertical = [[1, 6, 11, 16, 21], [2, 7, 12, 17, 22], [3, 8, 13, 18, 23], [4, 9, 14, 19, 24], [5, 10, 15, 20, 25]]\n\n    lenghts_horizontal = []\n    height = 0\n\n    for h in horizontal:\n        lh = 1\n        any_in_row = False\n        for i in range(len(number_list)):\n            if number_list[i] in h:\n                any_in_row = True\n            if ((number_list[i] - 1) in number_list) and (number_list[i] in h) and (\n                    number_list[i] not in [6, 11, 16, 21]):\n                lh += 1\n        if lh > 1:\n            lenghts_horizontal.append(lh)\n        elif any_in_row:\n            lenghts_horizontal.append(1)\n        if any_in_row:\n            height += 1\n\n    if lenghts_horizontal[0] == 4 or lenghts_horizontal[-1] == 4:\n        return False\n\n    # print(lenghts_horizontal)\n    is_3_horizontal_fist = False\n    if lenghts_horizontal[0] == 3 or lenghts_horizontal[-1] == 3:\n        is_3_horizontal_fist = True\n\n    lenghts_horizontal.sort(reverse=True)\n\n    if lenghts_horizontal[0] > 4: return False\n\n    width = 0\n    lenghts_vertical = []\n\n    for v in vertical:\n        lv = 1\n        any_in_row = False\n        for i in range(len(number_list)):\n            if number_list[i] in v:\n                any_in_row = True\n            if ((number_list[i] - 5) in number_list) and (number_list[i] in v):\n                lv += 1\n        if lv > 1:\n            lenghts_vertical.append(lv)\n        elif any_in_row:\n            lenghts_vertical.append(1)\n        if any_in_row:\n            width += 1\n\n    #    print(lenghts_vertical)\n    #    print(lenghts_horizontal)\n    #    print(height,width)\n\n    if height == 3 and width == 3:\n        return False\n\n    if lenghts_vertical[0] == 4 or lenghts_vertical[-1] == 4:\n        return False\n\n    is_3_vertical_first = False\n    if (lenghts_vertical[0] == 3) or (lenghts_vertical[-1] == 3):\n        is_3_vertical_first = True\n    # print(height)\n\n    #    print(lenghts_vertical)\n    #    print(lenghts_vertical[0])\n\n    lenghts_vertical.sort(reverse=True)\n\n    if is_3_vertical_first and height == 4:\n        return False\n\n    if is_3_horizontal_fist and width == 4:\n        return False\n\n    print((height, width))\n    print(lenghts_vertical)\n    print(lenghts_horizontal)\n\n    # print(is_3_vertical_first, is_3_horizontal_fist)\n\n    if lenghts_vertical[0] > 4: return False\n\n    # if (lenghts_vertical[0] == 3 and width == 3) or (lenghts_horizontal[0] == 3 and height == 3):\n    #    return True\n\n    # if (lenghts_vertical[0] == 3 and height == 3) or (lenghts_horizontal[0] == 3 and width == 3):\n    #    return True\n\n    if (lenghts_vertical[0] == 3 and lenghts_vertical[1] == 3 and width == 2):\n        return True\n\n    if (lenghts_horizontal[0] == 3 and lenghts_horizontal[1] == 3 and height == 2):\n        return True\n\n    upper = False\n    upper_list = [1, 2, 3, 4, 5]\n    lower = False\n    lower_list = [21, 22, 23, 24, 25]\n    left = False\n    left_list = [1, 6, 11, 16, 21]\n    right = False\n    right_list = [5, 10, 15, 20, 25]\n\n    for n in number_list:\n        if n in upper_list:\n            upper = True\n        if n in lower_list:\n            lower = True\n        if n in left_list:\n            left = True\n        if n in right_list:\n            right = True\n\n    if upper and lower: return False\n    if right and left: return False\n\n    if lenghts_vertical == [2, 2, 1, 1] and lenghts_horizontal == [3, 2, 1] and width == 3 and height == 4:\n        return False\n\n    if ((lenghts_vertical[0] == 3 and width == 4 and height != 2) or (\n            lenghts_horizontal[0] == 3 and height == 4 and width != 2)) and (lenghts_vertical != [3, 1, 1, 1]):\n        return True\n\n    if (lenghts_vertical[0] == 4 and width == 3 and height != 2) or (\n            lenghts_horizontal[0] == 4 and height == 3 and width != 2):\n        return True\n\n    if (lenghts_vertical[0] == 3 and height == 4 and width != 2) or (\n            lenghts_horizontal[0] == 3 and width == 4 and height != 2):\n        return True\n\n    if (lenghts_vertical[0] == 4 and height == 3 and width != 2) or (\n            lenghts_horizontal[0] == 4 and width == 3 and height != 2):\n        return True\n\n    if lenghts_vertical == [2, 2, 2] and lenghts_horizontal == [2, 2, 1, 1]:\n        return True\n\n    if lenghts_horizontal == [2, 2, 2] and lenghts_vertical == [2, 2, 1, 1]:\n        return True\n\n    return False\n\n"]