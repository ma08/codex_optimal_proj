["def digitize(n):\n    return [int(x) for x in str(n)[::-1]]", "def digitize(n):\n    return [int(x) for x in reversed(str(n))]", "def digitize(n):\n    result = []\n    while n >= 1:\n        result.append(n%10)\n        n //= 10\n    return result", "def digitize(n):\n    return [int(c) for c in str(n)[::-1]]", "def digitize(n):\n    return [int(x) for x in (str(n))][::-1]\n", "def digitize(n):\n    l = []\n    m = []\n    n = str(n)\n    n = n[::-1]\n    for i in range(len(n)):\n        l.append(int(n[i]))\n    return l", "def digitize(n):\n    return [int(i) for i in str(n)][::-1]\n", "def digitize(n):\n    return list(reversed([int(s) for s in str(n)]))", "def digitize(n):\n    mylist = [int(i) for i in str(n)]\n    mylist.reverse()\n    return mylist\n", "def digitize(n):\n    d, r = divmod(n, 10)\n    if d:\n        return [r] + digitize(d)\n    else:\n        return [r]", "def digitize(n):\n    new_list = list(int(x) for x in str(n))\n    return new_list[::-1]\n", "import re\n\ndef digitize(n):\n    answer = []\n    l= re.findall('\\d', str(n))\n    for i in l:\n         answer.append (int(i))\n    answer.reverse()\n    return answer", "def digitize(n):\n    num_array = [] # make empty array\n    for number in str(n): # make n into string to interate through \n        num_array.insert(0, int(number)) # insert number into 1st position (reverses it)\n    return num_array # return array", "def digitize(n):\n    result = []\n    while n > 0:\n        result.append(n % 10)\n        n = int(n/ 10)\n    return result", "digitize = lambda n: [int(e) for e in str(n)[::-1]]", "digitize = lambda n: [int(x) for x in str(n)][::-1]\n", "def digitize(n):\n    return list(int(x) for x in str(n)[::-1])", "def digitize(n):\n    n=str(n)\n    arr=[]\n    for u in n:\n        arr.append(int(u))\n    arr=arr[::-1]\n    return arr", "digitize = lambda n: [int(x) for x in reversed(str(n))]", "def digitize(n):\n    return [int(digit) for digit in str(n)[::-1]]", "def digitize(n):\n    return [int(d) for d in str(n)[::-1]]", "digitize = lambda n: list(reversed([int(i) for i in str(n)]))", "def digitize(n):\n    return [int(i) for i in reversed(str(n))]", "def digitize(n):\n    k = [int(num) for num in str(n)]\n    k.reverse()\n    return k", "def digitize(n):\n    b = []\n    for i in str(n):\n        b.append(int(i))\n    return b[::-1]", "def digitize(n):\n    output = []\n    for digit in str(n):\n        output.append(int(digit))\n    return(output[::-1])", "def digitize(n):\n    n = str(n)\n    n_list = list(map(int, str(n)))\n    n_list.reverse()\n    return n_list\n", "\ndef digitize(n):\n    return list(reversed([int(x) for x in str(n)])) #reversed(sequence),here sequence\n                                                    #is a list comprehension returns an \n                                                    #object which is accessed by using a list\n                                                    #which is in this case.\n", "def digitize(n):\n    n=str(n)\n    l=[]\n    c=list(n)\n    c.reverse()\n    for i in c:\n        l.append(int(i))\n    return l", "def digitize(n):\n    a=[]\n    while n!=0:\n        a.append(n%10)\n        n=n//10\n    return a", "def digitize(n):\n    arr = []\n    result = n\n    \n    shouldGo = True\n    \n    while shouldGo:\n        arr.append(result % 10)\n        \n        result = result // 10\n        \n        if result == 0:\n            shouldGo = False\n    \n    return arr", "def digitize(n):\n    arr = []\n    convertToString = str(n)\n    for num in  convertToString:\n        arr.append(int(num))\n    arr.reverse()\n    return arr", "def digitize(n):\n    return [int(i) for i in str(n)[::-1]]", "def digitize(n):\n    return list(map(int, str(n)))[::-1]", "def digitize(n):\n    d = [int(i) for i in str(n)]\n    p = d[::-1]\n    return p\n", "def digitize(n):\n    result = []\n    for d in str(n)[::-1]:\n        result.append(int(d))\n    return result", "def digitize(n): \n    lista = str(n)\n    listan = list(lista)\n    listan.reverse()\n    for i in range(0, len(listan)):\n        listan[i] = int(listan[i])\n    return listan\n\n", "def digitize(n):\n    n = str(n)\n    digits = [int(s) for s in n]\n    return digits[::-1]", "def digitize(n):\n    return [n % 10] + digitize(n//10) if n > 10 else [n % 10]", "def digitize(n):\n    ls = list(str(n))\n    a = ls[::-1]\n    return [int(x) for x in a]\n", "def digitize(n):\n    r = []\n    res = str(n)\n    for i in res:\n        r.append(int(i))\n        \n    return r[::-1]\n", "def digitize(n):\n    a =  [int(x) for x in str(n)]\n    b = a[::-1]\n    return b", "def digitize(n):\n    num = []\n    z = str(n)\n    for i in z:\n        num.append(int(i))\n    return num[::-1]", "def digitize(n):\n    x = str(n)\n    y = \"\"\n    lst = []\n    for char in x:\n        y = char + y\n    for char in y:\n        lst.append(int(char))\n    return lst", "def digitize(n):\n    \n    res=[int(i) for i in str(n)][::-1]\n    return res", "def digitize(n):\n    result = array = [int(x) for x in str(n)]\n    result = result[::-1]\n    return result ", "digitize = lambda input: [int(x) for x in str(input)][::-1]", "def digitize(n):\n    n = str(n)\n    n = n[::-1]\n    res = []\n    for i in n:\n        res.append(int(i))\n    \n    return res", "def digitize(n):\n    x = [int(i) for i in str(n)]\n    return [i for i in reversed(x)]", "def digitize(n):\n    rez = []\n    for i in list(str(n)[::-1]):\n        rez.append(int(i))\n    return rez", "def digitize(n):\n    x = ','.join(str(n))[::-1]\n    result=[]\n    for i in x.split(','):\n        result.append(int(i))\n    return result", "def digitize(n):\n    str_arr = list(str(n)[::-1])\n    int_arr = []\n    for i in str_arr:\n        int_arr.append(int(i))\n    return int_arr", "def digitize(num):\n    if len(str(num)) == 1:\n        return num\n    output = []\n    for n in reversed(str(num)):\n        output.append(int(n))\n    return output", "def digitize(n):\n    results = []\n    for num in str(n)[::-1]:\n        results.append(int(num))\n    return results", "def digitize(n):\n    results = []\n    for x in range(len(str(n))):\n        results.append(int(str(n)[len(str(n)) - x - 1]))\n    return results", "def digitize(n):\n    string_of_int = (str(n))\n    final_array = [int(x) for x in string_of_int]\n    return(final_array[::-1])", "def digitize(n):\n    list = []\n    while n>0:\n        list.append(int(n%10))\n        n = int(n/10)\n    return list", "def digitize(n):\n    n = str(n)\n    l = list()\n    n = n[::-1]\n    for s in n:\n        l.append(int(s))\n    return l\n", "def digitize(n):\n    num = [int(m) for m in str(n)]\n    return (num[::-1])", "def digitize(n):\n    mylist = []\n\n    a = list(str(n))\n    for i in a:\n         mylist.append(int(i))\n    \n    mylist.reverse()\n    return mylist", "def digitize(n):\n    d = [int (array) for array in list(str(n))]\n    d.reverse()\n    return d", "def digitize(n):\n    a = list(reversed(str(n)))\n    k = []\n    for i in a:\n        k.append(int(i)) \n    return k \n    \n        \n        \n    \n    \n    \n   \n        \n", "def digitize(n):\n    string_num = str(n)\n    digits = []\n    for digit in string_num:\n        digits.append(int(digit))\n    digits.reverse()\n    return digits", "def digitize(n):\n    n = str(n)\n    n = list(n)\n    n = list(map(conv, n))\n    n.reverse()\n    return n\n    \n\ndef conv(x):\n    return int(x)", "def digitize(n):\n    copy = []\n    array = list(str(n))\n    for num in array:\n        copy.append(int(num))\n    copy.reverse()\n    return copy", "def digitize(n):\n    lista = list(str(n))\n    lista.reverse()\n    int_list = []\n    for i in lista:\n        int_list.append(int(i))\n    \n    return int_list", "def digitize(n):\n    list_n = list(str(n))\n    list_n.reverse()\n    return list(map(int, list_n))", "def digitize(n):\n    string_num = str(n)\n    res = []\n    comp = [res.append(int(number)) for number in string_num]\n    res.reverse()\n    return res\n", "def digitize(n):\n    empty = []\n    n = str(n)\n    n = n[::-1]\n    for num in n:\n        empty.append(int(num))\n    return empty", "def digitize(n):\n    a = []\n    b = str(n)\n    for i in b:\n        a.append(int(i))\n    return a[::-1]", "def digitize(n):\n    s = list(reversed(str(n)))\n    a = [];\n    for x in s:\n        m = int(x)\n        a.append(m)\n    return a", "def digitize(n):\n    result = []\n    if(n == 0):\n        return [0]\n    while(n):\n        result.append(n % 10)\n        n //= 10\n    return result", "def digitize(n):\n    n = str(n)\n    n = n[::-1]\n    n = ' '.join(n)\n    return [int(i) for i in n.split()]", "def digitize(n):\n    x=list(str(n))\n    y=[]\n    for i in range(len(x)-1,-1,-1):\n        y.append(int(x[i]))\n    return y", "import numpy as np\n\ndef digitize(n):\n    return [int(i) for i in str(n)[::-1]]\n", "def digitize(n):\n    x = list(map(lambda x: int(x), list(str(n))))\n    x.reverse()\n    return x", "def digitize(n):\n    ls = []\n    for i in range(len(str(n))):\n        ls.append(n % 10)\n        n //= 10\n    return ls", "def digitize(n):\n    s=str(n)\n    a=[]\n    for i in range(1,len(s)+1):\n        a.append(s[-i])\n    for j in range(len(a)):\n        a[j]=int(a[j])\n    return a", "def digitize(n):\n    listn = []\n    for x in str(n):\n        listn.append(int(x))\n    revl = listn[::-1]\n    return revl", "def digitize(n):\n    arr = list(str(n))\n    rev = []\n    for i in arr:\n        rev.insert(0, int(i))\n    return rev", "def digitize(n):\n    result = list(int(x) for x in str(n))\n    return result[::-1]", "def digitize(n):\n    \n    lst = [int(i) for i in str(n)]\n    #lst = lst.reverse()\n    return lst[::-1]", "def digitize(n):\n    res = [int(i) for i in list(str(n))]\n    return res[::-1]", "def digitize(n):\n    num_list = list(str(n))\n    reversed_num_list = num_list.reverse()\n    reversed_num_list = list(map(int,num_list))\n    return reversed_num_list", "def digitize(n):\n    lst = []\n    n = str(n)\n    \n    for char in n:\n        lst.append(int(char))\n        \n    lst = lst[::-1]\n    \n    return lst", "def digitize(n):\n    \n    array = []\n    \n    n = str(n)\n    x = len(n) - 1\n    \n    while(x >= 0):\n        array.append(int(n[x]))\n        x -= 1\n    \n    return array", "def digitize(n):\n    n=str(n)\n    l=[]\n    for elem in n:\n        l.append(int(elem))  \n    l.reverse()\n    return l", "def digitize(n):\n    s=[int(i) for i in str(n)]\n    return s[::-1]", "digitize = lambda n : [int(digit) for digit in str(n)][::-1]", "def digitize(n):\n    n = list(str(n))\n    l = []\n    for i in n:\n        a = int(i)\n        l.append(a)\n    return l[::-1]", "def digitize(n):\n    \n    new=[]\n    for I in str(n):\n        new.append(int (I))\n    \n    return new[::-1]\n", "def digitize(n):\n    len_n = str(n)\n    list = []\n    for i in range(0,len(len_n)):\n        \n        a = n % 10\n        n = n//10\n        \n        list.append(a)\n    \n    return list"]