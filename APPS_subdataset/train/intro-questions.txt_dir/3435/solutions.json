["import re\n\npowers = {\n    'w': -4, 'p': -3, 'b': -2, 's': -1,\n    'm': +4, 'q': +3, 'd': +2, 'z': +1,\n}\n\ndef alphabet_war(fight):\n    fight = re.sub('.(?=\\*)|(?<=\\*).', '', fight)\n    result = sum(powers.get(c, 0) for c in fight)\n    if result < 0:\n        return 'Left side wins!'\n    elif result > 0:\n        return 'Right side wins!'\n    else:\n        return \"Let's fight again!\"", "def alphabet_war(fight):\n\n  s = 'wpbsszdqm'\n  alive = []\n\n  if '*' not in fight[:2]:\n    alive.append(fight[0])\n\n  for i, c  in enumerate(fight[1:], 1):\n    if '*' not in fight[i-1:i+2]:\n      alive.append(c)\n  \n  x = sum(4 - s.index(c) for c in alive if c in s)\n  return 'Let\\'s fight again!' if x==0 else ['Left','Right'][x<0] + ' side wins!'", "import re\n\ndef alphabet_war(fight):\n    pattern = re.compile(r\"(\\w)?\\*+(\\w)?\")\n    powers = pattern.sub(\"\", fight)\n    scores = \"mqdz*sbpw\" \n    score = sum(i * powers.count(p) for i, p in enumerate(scores, -4))\n    return [\"Let's fight again!\", \"Left side wins!\", \"Right side wins!\"][(score>0)-(score<0)]", "import re\n\nPOWERS  = {c:i for i,c in enumerate('wpbs zdqm',-4)}\nPATTERN = re.compile(r'(?<!\\*)([{}])(?!\\*)'.format(''.join(POWERS.keys()-{' '})))\n\ndef alphabet_war(fight):\n    s = sum(POWERS[c] for c in PATTERN.findall(fight))\n    return [\"Let's fight again!\", 'Left side wins!', 'Right side wins!'][ (s<0) - (s>0) ]", "import re \nle = {\"w\":4,\"p\":3,\"b\":2,\"s\":1}\nri = {\"m\":4,\"q\":3,\"d\":2,\"z\":1}\ndef alphabet_war(fight):\n    w = re.sub(r\"[a-z]\\*[a-z]|[a-z]\\*|\\*[a-z]\",\"\",fight)\n    l = sum([le.get(i,0) for i in w])\n    r = sum([ri.get(i,0) for i in w])\n    if l==r:\n        return \"Let's fight again!\"\n    return \"Right side wins!\" if r>l else \"Left side wins!\"", "import re\ndef alphabet_war(fight):\n    d = {a : c for c, a in enumerate('wpbs zdqm', -4) if c}\n    s = sum(d.get(a, 0) for a in re.sub(r'.?\\*+.?', '', fight))\n    return ['Left side wins!', \"Let's fight again!\", 'Right side wins!'][1 + min(max(s, -1), 1)]", "def alphabet_war(fight):\n\n    left_side = 'wpbs'\n    right_side = 'mqdz' \n    left_power = 0\n    right_power = 0\n    bombs = [ i for i in range(0,len(fight)) if fight[i] =='*']  \n    death = []\n    \n    for boom in bombs:\n        if 0<boom<len(fight)-1:\n            death.append(boom-1)\n            death.append(boom+1)\n        elif boom == 0:\n            death.append(boom+1)\n        elif boom ==len(fight)-1:\n            death.append(boom-1)\n                             \n    bombs_and_death = bombs + death\n    \n    after_fight = ''.join(fight[i] if i not in bombs_and_death else '' for i in range(0,len(fight)))\n      \n    for i in after_fight:\n        if i == 'w' or i =='m': \n            pow = 4 \n        elif i == 'p' or i =='q': \n            pow = 3 \n        elif i == 'b' or i =='d': \n            pow = 2 \n        elif i == 's' or i =='z': \n            pow = 1 \n        \n        if i in left_side:\n        # 'wpbs'\n            left_power+=pow\n        elif i in right_side:\n        # 'mqdz' \n            right_power+=pow\n    \n    if left_power>right_power:\n        return 'Left side wins!'\n    elif right_power>left_power:\n        return 'Right side wins!'\n    else:\n        return '''Let's fight again!'''", "from functools import partial\nfrom numpy import sign\nfrom re import compile\n\nremove = partial(compile(r\".?\\*+.?\").sub, \"\")\nmemo = {'w':4, 'p':3, 'b':2, 's':1, 'm':-4, 'q':-3, 'd':-2, 'z':-1}\nresult = (\"Let's fight again!\", \"Left side wins!\", \"Right side wins!\")\nvalue = lambda c: memo.get(c, 0)\n\ndef alphabet_war(fight):\n    return result[sign(sum(map(value, remove(fight))))]", "def alphabet_war(fight):\n    sides = { 'left':{ 'w':4,'p':3,'b':2,'s':1 }, 'right':{ 'm':4,'q':3,'d':2,'z':1 } }\n    \n    left, right = ['Left',0],['Right',0]\n    \n    fild = [' '] * (len(fight) +2)\n    \n    for i,e in enumerate(' '+fight+' '):\n        if e == '*':\n            fild[i-1:i+2] = ['_','_','_']\n        elif e != '*' and fild[i] != '_': \n            fild[i] = e \n\n    for e in fild:\n        left[1]  += sides['left' ].get( e, 0 )\n        right[1] += sides['right'].get( e, 0 )\n    \n    winer = max([left, right], key = lambda e:e[1] )\n    \n    return \"Let's fight again!\" if left[1] == right[1] else f'{winer[0]} side wins!'\n"]