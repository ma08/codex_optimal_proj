["def numberOfSteps(steps, m):\n    if (steps < m):\n        return -1\n  \n  \n    if (steps % 2 == 0 and (steps / 2) % m == 0):\n        return (steps / 2)\n  \n      \n    return (steps / 2) + m - ((steps / 2) % m)\n", "def numberOfSteps(steps, m):\n    return next((n for n in range((steps+1)//2, steps+1) if n % m == 0), -1)", "def numberOfSteps(steps, m):\n    if m > steps:\n        return -1\n    c = 1\n    while steps > 2*m*c:\n        c += 1\n    return m*c", "def numberOfSteps(steps, m):\n    if steps < m:\n        return -1\n    q, r = divmod(steps, 2)\n    q, r = divmod(q + r, m)\n    return (q + (r > 0)) * m", "def numberOfSteps(steps, m):\n  if m > steps:\n    return -1\n  abs_min_steps = int(steps / 2) + steps % 2\n  steps_dif = abs_min_steps % m\n  if (steps_dif):\n    return (m - steps_dif) + abs_min_steps\n  else:\n    return abs_min_steps", "from math import ceil;numberOfSteps=lambda s,m:next((i for i in range(ceil(s/2),s+1)if not i%m),-1)"]