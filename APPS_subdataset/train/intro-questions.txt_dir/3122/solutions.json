["def chess_triangle(n, m):\n    return sum( 8 * (n-x+1)*(m-y+1) for dims in {(3,4), (3,3), (2,4), (2,3)} for x,y in [dims, dims[::-1]] if x <= n and y <= m )\n", "def chess_triangle(n, m):\n    if n>m:\n        n,m=m,n\n    if m<=2 or n<2:\n        return 0\n    elif n==2:\n        return (m*2-5)*8\n    else:\n        return (((2*n-4)*(2*n-4)-1)+((m-n)*4*(n-2)))*16\n  #coding and coding..\n", "clamp  = lambda moves, w, h: {(x, y) for x, y in moves if 0 <= x < w and 0 <= y < h}\nknight = lambda x, y: {(x+u, y+v) for u in range(-2, 3) for v in range(-2, 3) if u*u + v*v == 5}\nrook   = lambda x, y, w, h: {(x, v) for v in range(h)} | {(u, y) for u in range(w)} - {(x, y)}\nbishop = lambda x, y, w, h: {(x+d*k, y+k) for d in (-1,1) for k in range(-max(x, y), max(w-x, h-y))} - {(x, y)}\n\ndef search_triangle(x, y, w, h):\n    return sum(\n        len(rook(x, y, w, h) & clamp(bishop(u, v, w, h), w, h)) +\n        len(rook(u, v, w, h) & clamp(bishop(x, y, w, h), w, h))\n        for u, v in clamp(knight(x, y), w, h)\n    )\n\ndef chess_triangle(h, w):\n    wm, hm = min(6, w), min(6, h)\n    return (\n        sum(search_triangle(min(x, wm-x-1), min(y, hm-y-1), w, h) for x in range(wm) for y in range(hm))\n        + max(0, w-6) * sum(search_triangle(3, min(y, hm-y-1), w, h) for y in range(hm))\n        + max(0, h-6) * sum(search_triangle(min(x, wm-x-1), 3, w, h) for x in range(wm))\n        + max(0, h-6) * max(0, w-6) * search_triangle(3, 3, w, h)\n    )", "def chess_triangle(n, m):\n    c = 0\n    for i in range(n - 1):\n        for j in range(m - 2):\n            c += 1 + (i - 1 >= 0) + (i + 3 < n) + (j + 3 < m)\n            c += 1 + (i + 1 < n and j - 1 >= 0) + (i + 2 < n) + (i - 2 >= 0)\n    for i in range(n - 2):\n        for j in range(m - 1):\n            c += 1 + (j - 1 >= 0) + (j + 3 < m) + (i + 3 < n)\n            c += 1 + (j + 1 < m and i - 1 >= 0) + (j + 2 < m) + (j - 2 >= 0)\n    return c * 4", "def chess_triangle(n, m):\n    if n < 2 or m < 2 or (n == 2 and m == 2):\n        return 0\n    else:\n        a = (max((n-1)*(m-2),0)+max((n-2)*(m-1),0)) #2x3\n        b = (max((n-1)*(m-3),0)+max((n-3)*(m-1),0))  #2x4\n        c = (max((n-2)*(m-2)*2,0)) #3x3\n        d = (max((n-2)*(m-3),0)+max((n-3)*(m-2),0)) #3x4\n        return (a+b+c+d)*8", "\nKNIGHTX=[1, 2, 2, 1, -1, -2, -2, -1]\nKNIGHTY=[2, 1, -1, -2, -2, -1, 1, 2]\n\ndef chess_triangle(n, m):\n    result=0\n    for bishopx, bishopy in zip(KNIGHTX, KNIGHTY):\n        for rookx, rooky in [(0, bishopx+bishopy), (0, bishopy-bishopx), (bishopx+bishopy, 0), (bishopx-bishopy, 0)]:\n            result+=max(0, n-(max(bishopx, rookx, 0)-min(bishopx, rookx, 0)))*max(0, m-(max(bishopy, rooky, 0)-min(bishopy, rooky, 0)))\n    for rookx, rooky in zip(KNIGHTX, KNIGHTY):\n        for bishopx, bishopy in [(rookx, rookx), (rookx, -rookx), (rooky, rooky), (-rooky, rooky)]:\n            result+=max(0, n-(max(bishopx, rookx, 0)-min(bishopx, rookx, 0)))*max(0, m-(max(bishopy, rooky, 0)-min(bishopy, rooky, 0)))\n    return result", "def chess_triangle(n, m):\n    x23 = max(0, n - 1) * max(0, m - 2) * 8;\n    x32 = max(0, n - 2) * max(0, m - 1) * 8;\n    x24 = max(0, n - 1) * max(0, m - 3) * 8;\n    x42 = max(0, n - 3) * max(0, m - 1) * 8;\n    x34 = max(0, n - 2) * max(0, m - 3) * 8;\n    x43 = max(0, n - 3) * max(0, m - 2) * 8;\n    x33 = max(0, n - 2) * max(0, m - 2) * 16;\n    return x23 + x32 + x24 + x42 + x34 + x43 + x33", "moves=[\n    [(-2,-1),[(-3,0),(-1,0),(0,-3),(0,1),(-2,-2),(-2,2),(-1,-1),(1,-1)]],\n    [(-1,-2),[(-3,0),(1,0),(0,-3),(0,-1),(-2,-2),(2,-2),(-1,-1),(-1,1)]],\n    [(1,-2),[(3,0),(-1,0),(0,-3),(0,-1),(-2,-2),(2,-2),(1,-1),(1,1)]],\n    [(2,-1),[(3,0),(1,0),(0,-3),(0,1),(2,-2),(2,2),(-1,-1),(1,-1)]],\n    [(-2,1),[(-3,0),(-1,0),(0,3),(0,-1),(-2,-2),(-2,2),(-1,1),(1,1)]],\n    [(-1,2),[(-3,0),(1,0),(0,3),(0,1),(-2,2),(2,2),(-1,-1),(-1,1)]],\n    [(1,2),[(3,0),(-1,0),(0,3),(0,1),(-2,2),(2,2),(1,-1),(1,1)]],\n    [(2,1),[(3,0),(1,0),(0,3),(0,-1),(2,-2),(2,2),(-1,1),(1,1)]]\n]\ndef chess_triangle(n, m):\n    r=0\n    for x in range(n):\n        for y in range(m):\n            for (dx,dy),move in moves:\n                if not (0<=x+dx<n and 0<=y+dy<m):\n                    continue\n                for mx,my in move:\n                    if 0<=x+mx<n and 0<=y+my<m:\n                        r+=1\n    return r", "def chess_triangle(n, m):\n  res = 0\n  # 3x2 / 2x2\n  n_,m_=n-1,m-2\n  if 0 < n_ and 0 < m_:\n      res += n_*m_*8\n  n_,m_=n-2,m-1\n  if 0 < n_ and 0 < m_:\n      res += n_*m_*8\n  # 4x2 / 2x4\n  n_,m_=n-1,m-3\n  if 0 < n_ and 0 < m_:\n      res += n_*m_*8\n  n_,m_=n-3,m-1\n  if 0 < n_ and 0 < m_:\n      res += n_*m_*8\n  # 4x3 / 3x4\n  n_,m_=n-2,m-3\n  if 0 < n_ and 0 < m_:\n      res += n_*m_*8\n  n_,m_=n-3,m-2\n  if 0 < n_ and 0 < m_:\n      res += n_*m_*8\n  # 3x3\n  n_,m_=n-2,m-2\n  if 0 < n_ and 0 < m_:\n      res += n_*m_*16\n  return res", "chess_triangle = lambda n, m: (lambda x, y: 0 if x<2 else max(0, 16*y-40) if x==2 else 240 + 64*y*(x-2) - 128*x)(*sorted([n, m]))"]