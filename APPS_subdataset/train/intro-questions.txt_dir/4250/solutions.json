["from hashlib import sha256\nfrom itertools import permutations\n\n\ndef sha256_cracker(hash, chars):\n    for p in permutations(chars, len(chars)):\n        current = ''.join(p)\n        if sha256(current.encode('utf-8')).hexdigest() == hash:\n            return current\n", "import hashlib\nimport itertools\n\ndef sha256_cracker(hash, chars):\n  for p in itertools.permutations(chars):\n    if(toSHA256(\"\".join(p)) == hash):\n      return \"\".join(p)\n  return None\n    \ndef toSHA256(s):   \n  m = hashlib.sha256()  \n  m.update(s.encode())\n  return m.hexdigest()", "from itertools import permutations\nfrom hashlib import sha256\ndef sha256_cracker(hash, chars):\n  return next(iter(''.join(p) for p in permutations(chars) if sha256(str.encode(''.join(p))).hexdigest() == hash), None)", "from hashlib import sha256\nfrom itertools import permutations as p\nsha256_cracker=lambda h,c:next((''.join(i) for i in p(c) if sha256(''.join(i).encode()).hexdigest()==h),None)", "import hashlib\nimport itertools\ndef hashit(str):\n    result = hashlib.sha256(str.encode())\n    return result.hexdigest()\ndef guess(chars):\n    yield from list(itertools.permutations(chars,len(chars)))\ndef sha256_cracker(hash, chars):\n    for x in guess(chars):\n        str = ''.join(x)\n        if (hashit(str) == hash):\n            return str\n    return None", "import hashlib\nfrom itertools import permutations\n\ndef sha256_cracker(code, chars):\n    x = [''.join(i) for i in permutations(chars)]\n    for i in x :\n        if hashlib.sha256(str.encode(i)).hexdigest() == code :\n            return i", "from itertools import permutations\nfrom hashlib import sha256\n\ndef sha256_cracker(hash, chars):\n  return next((\"\".join(p) for p in permutations(chars) if sha256(\"\".join(p).encode('utf-8')).hexdigest() == hash), None)", "from hashlib import sha256\nfrom itertools import permutations\n\ndef sha256_cracker(hash, chars):\n    for x in map(''.join, permutations(chars)):\n        if sha256(x.encode()).hexdigest() == hash:\n            return x", "from hashlib import sha256\nfrom itertools import permutations\n\ndef sha256_cracker(hash, chars):\n  for stg in (\"\".join(p) for p in permutations(chars)):\n      if sha256(stg.encode(\"utf-8\")).hexdigest() == hash:\n          return stg", "import hashlib\nfrom itertools import permutations\n\ndef sha256_cracker(hash, chars):\n    bs = chars.encode()\n    h = bytes.fromhex(hash)\n    return next((\n        bytes(xs).decode()\n        for i in range(1, min(10, len(bs))+1)\n        for xs in permutations(bs, i)\n        if hashlib.sha256(bytes(xs)).digest() == h\n    ), None)"]