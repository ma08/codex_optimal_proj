["def count_red_beads(nb):\n    return max(0, 2 * (nb - 1) )", "def count_red_beads(n_blue):\n    return (n_blue - 1) * 2 if n_blue >= 2 else 0\n", "def count_red_beads(n):\n    return max(0, 2 * (n-1))\n    #maximum value -> two for every two beads times number of blue beads - 1\n", "def count_red_beads(n):\n  return 2*(n - 1) if n > 1 else 0", "count_red_beads=lambda b:b and b*2-2", "def count_red_beads(n):\n    return 2*max(n-1,0)", "def count_red_beads(n):\n    if n >= 2:\n        red = n+(n-2)\n        return red\n    else: \n        return 0", "def count_red_beads(N_blue):\n    return (N_blue-2)*2+2 if N_blue >2 else 0", "def count_red_beads(N_blue):\n    return max(N_blue - 1, 0) * 2", "def count_red_beads(n_blue):\n    return 2 * (n_blue - 1) if n_blue > 1 else 0", "def count_red_beads(n):\n    return max(0, (n-1) * 2)", "def count_red_beads(n):\n    return (n-1)*2 if n > 1 else 0", "def count_red_beads(n):\n    return (n-1) * 2 if n else 0", "def count_red_beads(N_blue):\n    return 2*(N_blue - 1) if N_blue >= 2 else 0", "def count_red_beads(N_b):\n    return 0 if N_b == 0 else (N_b - 1) * 2", "def count_red_beads(N_blue):\n    return (N_blue - 1) * 2 if N_blue >= 2 else 0", "count_red_beads = lambda n: n and (n - 1) * 2", "def count_red_beads(N_blue):\n    return N_blue and (N_blue-1)*2", "def count_red_beads(n):\n    return 0 if n == 0 else n*2 - 2", "def count_red_beads(n):\n    return n and n*2-2", "count_red_beads=lambda b:(b>1)*(b-1)*2", "count_red_beads=lambda n:max(n-1,0)*2", "def count_red_beads(n):\n    if n < 2:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return ((n-2) * 2) +2", "def count_red_beads(n):\n    return (n-1)*(n>0)*2", "import math\n\ndef count_red_beads(n):\n\n    if n<2:\n    \n        return 0\n        \n    else:\n        \n        if n%2!=0:\n    \n            g = math.floor(n/2)\n        \n            d = g*4\n    \n            return d\n    \n        if n%2==0:\n    \n            g = math.floor(n/2)\n        \n            d = g*4\n    \n            return d-2\n", "def count_red_beads(n):\n    if (n != 0):\n        return 2 * (n - 1)\n    return 0", "\ndef count_red_beads(n):\n    lista = []\n    if n < 2:\n        return 0\n    for i in range(1,n):\n        lista.append(i*2)\n    return lista[-1]\n       \n", "def count_red_beads(n):\n    return 2*n-2*(n>0)", "def count_red_beads(n):\n    return (max(1,n)-1)*2 ", "def count_red_beads(n):\n    return (n - 1) * 2 if n else n", "def count_red_beads(n):\n    if n<=1:\n        return 0\n    return 2*(n-1)", "def count_red_beads(n):\n    if n < 2:\n        return 0\n    if n == 2:\n        return 2\n    else:\n        return n*2 - 2", "def count_red_beads(n):\n    if n == 0:\n        return 0\n    else:\n        output = (n - 1) * 2\n        \n        return output", "def count_red_beads(n):\n    if n == 0 or n == 1:\n        return 0\n    else:\n        return (n - 1) * 2", "count_red_beads = lambda n: max(0, 2 * (n - 1))", "def count_red_beads(n):\n    return 0 if n < 2 else 2 * ((3*n-1)//3) ", "def count_red_beads(n):\n    return [0, (n-1)*2][n > 2]", "def count_red_beads(n):\n    if n==1 or n==0:\n        return 0\n    return (n-1)*2", "count_red_beads = lambda n: 0 if n in [0,1] else (n-1)*2", "def count_red_beads(n):\n    return range(0,10001,2)[n-1 if n>0 else n]", "def count_red_beads(n):\n    if n-2<0:\n        return 0\n    else:\n        y= n*2\n        z= y-2\n        return(z)\n", "def count_red_beads(n):\n    return max(0, n - 1 << 1)", "def count_red_beads(n):\n    if n-3<0:\n        return 0\n    else:\n        y= n*2\n        z= y-2\n        return(z)", "def count_red_beads(n):\n    counter = 0\n    if n < 2:\n        return counter\n    else:\n        for x in range(1, n):\n            counter +=2\n        return counter", "def count_red_beads(n):\n    if n>=2:\n        return (2*n)-2\n    return 0", "def count_red_beads(n):\n    if n <= 0:\n        return 0\n\n    return (n - 1) * 2", "def count_red_beads(n):\n    if n < 2:\n        return 0\n    red = (n - 1) * 2\n    return red", "count_red_beads = lambda n: (n - 1) * 2 if n else 0", "def count_red_beads(n):\n    if n < 2:\n        return 0\n    elif n % 2 == 0:\n        return (n - 1) * 2\n    else:\n        return (n * 2) - 2", "def count_red_beads(n):\n    if n < 2:\n        r = 0\n    else:\n        r = (n*2) - 2\n    return(r)", "def count_red_beads(n):\n    if n <= 1:\n        return 0\n    elif n > 1:\n        return (n*2)-2\n", "def count_red_beads(n):\n    red_beads = 0\n    if n < 2:\n        return 0\n    red_beads = (n-1) * 2\n    return red_beads\n        \n", "def count_red_beads(n):\n    return  0 if n-1 < 2 else(n - 1) * 2", "def count_red_beads(n):\n    return 0 if n < 2 else 2 if n == 2 else (n-1)*2", "def count_red_beads(n):\n    return (n - 1) * 2 if n > 1 else 0\n    # Flez\n", "def count_red_beads(blue):\n    if blue <= 1:\n        return 0\n    return (blue - 1) * 2", "def count_red_beads(n):\n    if n < 1:\n        return 0\n    else:\n        return n + (n-2)", "def count_red_beads(n):\n    if n < 2:\n        return 0\n    else:\n        count = 2\n        for i in range(2, n):\n            count += 2\n\n        return count", "def count_red_beads(n):\n    while n > 0:\n        return (n *2) - 2\n    return 0", "def count_red_beads(n):\n    if n >= 2:\n        x = n -2\n        result = n + x\n        return result\n    else:\n        return 0", "def count_red_beads(n):\n  count = 0\n  if n < 2:\n    return 0\n  for x in range(1,n):\n    count += 2\n  return count", "def count_red_beads(n):\n    return 'rr'.join(['b' for b in range(n)]).count('r')", "def count_red_beads(n):\n    return (max(n,1)-1) * 2", "def count_red_beads(n):\n    res=0\n    for i in range(1,n):\n        res+=2\n    return res", "def count_red_beads(n):\n    if n < 2:\n        return 0\n    else:\n        y = (n * 2) - 2\n        return y", "def count_red_beads(n):\n    if n > 2:\n        return 2*n-2\n    else:\n        return 0", "def count_red_beads(n):\n    if n < 2:\n        return 0\n        \n    r = n * 2 - 2\n    return r", "def count_red_beads(n):\n    if n < 2:\n        return 0\n    else:\n        n -= 1\n        output = n * 2\n        return output", "def count_red_beads(n):\n    return (n-1)*2 if n>1 else 0  #I solved this Kata on  [28-Nov-2019] ^_^ [11:33 PM]...#Hussam'sCodingDiary", "def count_red_beads(n):\n    numOfRed = 0\n    if n < 2:\n        return 0\n    else:\n       numOfRed += n * 2 - 2\n    return numOfRed", "def count_red_beads(n):\n    if n < 2:\n        return 0\n    elif n >= 2:\n        return 2*(n-1)", "def count_red_beads(n):\n    r = 2\n    if n < 2:\n        return 0\n    for x in range(2, n):\n        r += 2\n    return r", "def count_red_beads(n):\n    if (n - 1) * 2 < 0:\n        return 0\n    return (n - 1) * 2", "count_red_beads = lambda n: max(0, (n-1)*2)", "def count_red_beads(n):\n    count = 0\n    if n < 2:\n        return count\n    for i in range(2, n+1):\n        count += 2\n    return count", "count_red_beads = lambda n: (n-1)*2*(n>0)", "def count_red_beads(n):\n    if n == 0:\n         return 0\n    else:\n        return ((n*2)-2)", "def count_red_beads(n):\n  if n < 2:\n    return 0\n  else: \n    p = (n*2)-2\n    return p", "def count_red_beads(x):\n    if x>1:\n        return(2*(x-1))\n    else:\n        return(0)", "def count_red_beads(n):\n    if n == 2:\n        return 0\n    elif n>0:\n        return (n-1)*2\n    return 0\n", "def count_red_beads(n):\n    return [0, (n-1)*2][n>0]", "def count_red_beads(n):\n    return (n + n) - 2 if n > 0 else 0", "count_red_beads = lambda n: (n - (1 if n else 0)) * 2", "count_red_beads = lambda n: (0, (n - 1) * 2)[bool(n)]", "def count_red_beads(n):\n    if n > 1:\n        red = 2*n - 2\n        return red\n    else:\n        return 0", "def count_red_beads(n):\n    if n < 2:\n        return 0\n    else:\n        red_beds = n * 2 - 2\n    return red_beds", "def count_red_beads(n):\n    return n and (n-1)*2", "def count_red_beads(n):\n    if n < 2:\n        return 0\n    else:\n        n -= 1\n        return 2 * n", "def count_red_beads(n):\n    if n == 0 or n == 1:\n        return 0\n    return (n-1)*2", "def count_red_beads(n):\n    if n > 1:\n        return n * 2 - 2\n    elif n == 1:\n        return 0\n    elif n < 1:\n        return 0", "def count_red_beads(n):\n    if n==1 or n==0:\n        return 0\n    elif n%2!=0:\n        return (n-1)*2\n    else:\n        return(n*2)-2", "def count_red_beads(n):\n    a = -2\n    for i in range(n):\n        a += 2\n    return (a if a > 0 else 0)", "def count_red_beads(n):\n    if n < 2:\n        return 0\n    if n > 2:\n        red = (n-1)*2\n        return red", "def count_red_beads(n):\n    if n<2:\n        return 0\n    else:\n        i =0\n        RedCount = -2\n    while(i<n):\n        RedCount+=2\n        i+=1\n    return RedCount\n", "def count_red_beads(n):\n    beads = 0\n    if n < 2:\n        return 0\n    else: \n        for i in range(n-1):\n            beads += 2 \n    return beads ", "def count_red_beads(n):\n    ecount = 2\n    ocount = 4\n    oplst1 = []\n    \n    if n < 2:\n        return 0\n    else:\n        for i in range(2, n+1):\n            if i % 2 == 0:\n                oplst1.append(ecount)\n                ecount += 4\n            else:\n                oplst1.append(ocount)\n                ocount += 4\n    \n        return oplst1[-1]", "def count_red_beads(n):\n    if n == 2:\n        return n\n    elif n > 2:\n        return n * 2 - 2\n    else:\n        return 0", "def count_red_beads(n):\n    beads = ''\n    for i in range(n-1):\n        beads += 'B'\n        beads += 'RR'\n    beads += 'B'\n#     print(beads)\n    return beads.count('R')", "def count_red_beads(n):\n    return ((n or 1)-1)*2"]