["class Solution:\n    def peakIndexInMountainArray(self, arr: List[int]) -> int:\n        l,r = 0,len(arr)-1\n        while l<=r:\n            m = (l+r)//2\n            if (arr[m]>=arr[m-1])and (arr[m]>=arr[m+1]):\n                return m\n            else:\n                if arr[m-1]>arr[m]:\n                    r = m-1\n                else:\n                    l = m+1\n", "class Solution:\n    def peakIndexInMountainArray(self, arr: List[int]) -> int:\n        hi = len(arr) - 1\n        lo = 0\n        while lo < hi:\n            mid = (lo + hi) // 2\n            if arr[mid - 1] < arr[mid] > arr[mid + 1]:\n                return mid\n            elif arr[mid - 1] >= arr[mid]:\n                hi = mid\n            else:\n                lo = mid\n", "class Solution:\n    def peakIndexInMountainArray(self, arr: List[int]) -> int:\n        left, right = 0, len(arr) - 1\n        while left < right:\n            mid = (left + right) // 2\n            if arr[mid] < arr[mid + 1]:\n                left = mid + 1\n            else:\n                right = mid\n\n        return left\n", "class Solution:\n    def peakIndexInMountainArray(self, arr: List[int]) -> int:\n        for i in range(1,len(arr)-1):\n            if arr[i-1] < arr[i] > arr[i+1]:\n                return i\n            \n        \n            \n", "class Solution:\n    def peakIndexInMountainArray(self, arr: List[int]) -> int:\n        l = 0\n        r = len(arr) - 1\n        while l < r:\n            if arr[r-1] >= arr[r]:\n                r -= 1\n            if arr[l + 1] >= arr[l]:\n                l += 1\n        return r", "class Solution:\n    def peakIndexInMountainArray(self, arr: List[int]) -> int:\n        left, right = 0, len(arr) - 1\n        while left < right:\n            mid = (left + right) // 2\n            if (mid == 0 or arr[mid - 1] < arr[mid]) and arr[mid] < arr[mid + 1]:\n                left = mid + 1\n            elif (mid == 0 or arr[mid - 1] > arr[mid]) and arr[mid] > arr[mid + 1]:\n                right = mid - 1\n            else:\n                return mid\n\n        return left\n", "class Solution:\n    def peakIndexInMountainArray(self, arr: List[int]) -> int:\n        \n        for i in range(len(arr)):\n            if i == 0 and arr[i] > arr[i + 1]:\n                return i\n            elif i == len(arr) - 1 and arr[i] > arr[i - 1]:\n                return i\n            elif arr[i] > arr[i + 1] and arr[i] > arr[i - 1]:\n                return i", "class Solution:\n    def peakIndexInMountainArray(self, arr: List[int]) -> int:\n        #return arr.index(max(arr))\n        \n        left, right = 0, len(arr)-1\n        \n        while left <= right:\n            mid = (left+right)//2\n            if arr[left] < arr[left+1]:\n                left+= 1\n            if arr[right] < arr[right-1]:\n                right-= 1\n            if arr[mid-1] < arr[mid] and arr[mid] > arr[mid+1]:\n                return mid\n        \n        return mid\n", "class Solution:\n    def peakIndexInMountainArray(self, arr: List[int]) -> int:\n        l, r = 0, len(arr)-1\n        \n        while l<=r:\n            m = l+(r-l)//2\n            \n            if arr[m-1] < arr[m] > arr[m+1]:\n                return m\n            elif arr[m-1] < arr[m] < arr[m+1]:\n                l = m\n            else:\n                r = m\n", "class Solution:\n    def peakIndexInMountainArray(self, arr: List[int]) -> int:\n        l, r = 0, len(arr) - 1\n        while l <= r:\n            m = l + (r-l) // 2\n            if m + 1 < len(arr) and arr[m] < arr[m+1]:\n                l = m+1\n            else:\n                r = m-1\n        return l", "class Solution:\n    def peakIndexInMountainArray(self, arr: List[int]) -> int:\n        l, r = 0, len(arr) - 1\n        \n        while l < r:\n            if arr[l] > arr[l+1]:\n                return l\n            if arr[r-1] < arr[r]:\n                return r\n            l, r = l + 1, r - 1\n        return l", "class Solution:\n    def peakIndexInMountainArray(self, arr: List[int]) -> int:\n        # # linear scan\n        # i = 0\n        # while arr[i + 1] > arr[i]:\n        #     i += 1\n        # return i\n    \n        # binary search\n        left = 0\n        right = len(arr) - 1\n        while True:\n            mid = (left + right)//2\n            if (arr[mid] > arr[mid - 1]) and (arr[mid + 1] > arr[mid]):\n                left = mid\n            elif (arr[mid] < arr[mid - 1]) and (arr[mid + 1] < arr[mid]):\n                right = mid\n            else:\n                return mid\n", "class Solution:\n    def peakIndexInMountainArray(self, arr: List[int]) -> int:\n        i, j = 0, len(arr) - 1\n        \n        peak = 1\n        \n        while i < j:\n            mid = (i + j) // 2\n            if arr[mid] < arr[mid + 1]:\n                i = mid + 1\n            else:\n                j = mid\n                \n        return i\n            \n", "class Solution:\n    def peakIndexInMountainArray(self, arr: List[int]) -> int:\n        l = 0\n        # r = len(arr) - 1\n        while arr[l] < arr[l + 1]:\n            l += 1\n        return l\n        # while l < r:\n        #     mid = (l + r)//2\n        #     if arr[mid] < arr[mid + 1]:\n        #         l = mid + 1\n        #     else:\n        #         r = mid\n        # return r\n        # while l < r:\n        #     if arr[r-1] >= arr[r]:\n        #         r -= 1\n        #     if arr[l + 1] >= arr[l]:\n        #         l += 1\n        # return r\n", "# O(logn), binary search for peak since arr is ordered\nclass Solution:\n    def peakIndexInMountainArray(self, arr: List[int]) -> int:\n        l = 0\n        r = len(arr)\n        while l < r:\n            m = (l + r) // 2\n            if arr[m-1] < arr[m] > arr[m+1]:\n                return m\n            if arr[m] < arr[m+1]: # peak on right\n                l = m + 1\n            else: # peak on left\n                r = m\n        return l\n\n'''\n# O(n), distinct elements so get max and return it's index\nclass Solution:\n    def peakIndexInMountainArray(self, arr: List[int]) -> int:\n        return arr.index(max(arr))\n'''", "class Solution(object):\n    def peakIndexInMountainArray(self, A):\n        lo, hi = 0, len(A) - 1\n        while lo < hi:\n            mi = (lo + hi) // 2\n            if A[mi] < A[mi + 1]:\n                lo = mi + 1\n            else:\n                hi = mi\n        return lo", "class Solution:\n    def peakIndexInMountainArray(self, arr: List[int]) -> int:\n        l,r=0,len(arr)-1\n        while(l<=r):\n            mid = l + (r - l) // 2; \n            print(mid)\n            if(arr[mid-1]<arr[mid]>arr[mid+1]):\n                return mid\n            elif(arr[mid-1]>arr[mid]):\n                r=r-1\n            else:\n                l=l+1\n", "class Solution:\n    def peakIndexInMountainArray(self, arr: List[int]) -> int:\n        i = 0\n        size = len(arr)\n        # increasing check\n        while i < size - 1 and arr[i] < arr[i + 1]:\n            i += 1\n        return i", "class Solution:\n    def peakIndexInMountainArray(self, arr: List[int]) -> int:\n        l = 0 \n        r = len(arr) - 1\n        \n        while l <= r:\n            mid = (l + r) // 2\n            if mid > 0 and arr[mid-1] < arr[mid] > arr[mid+1]:\n                return mid\n            \n            if arr[mid] < arr[mid+1]:\n                # increasing\n                l = mid + 1\n            else:\n                # decreasing\n                r = mid - 1", "class Solution:\n    def peakIndexInMountainArray(self, arr: List[int]) -> int:\n        \n        s = 0\n        e = len(arr) - 1\n        \n        while s < e:\n            m = (e + s) // 2\n            if (arr[m] < arr[m + 1]):\n                s = m + 1\n            else:\n                e = m\n                \n        return s\n", "class Solution:\n    def peakIndexInMountainArray(self, arr: List[int]) -> int:\n        low = 0\n        high = len(arr) - 1\n        \n        while low < high:\n            mid1 = (low + high)//2\n            mid2 = mid1 + 1\n            \n            if arr[mid1] <= arr[mid2]:\n                low = mid2\n            else:\n                high = mid1\n        return low", "class Solution:\n    def peakIndexInMountainArray(self, arr: List[int]) -> int:\n        i, j = 0, len(arr)-1\n        while i<j:\n            m = (i+j)//2\n            if arr[m] > arr[m+1]:\n                j = m\n            else:\n                i = m+1\n        return i", "class Solution:\n    def peakIndexInMountainArray(self, arr: List[int]) -> int:\n        \n        for i in range(0, len(arr) - 1):\n            if arr[i + 1] < arr[i]:\n                return i\n            \n            \n", "class Solution:\n    def peakIndexInMountainArray(self, arr: List[int]) -> int:\n        \n        for i in range(1,len(arr)-1):\n            if arr[i] > arr[i+1] and arr[i] > arr[i-1]:\n                return i"]