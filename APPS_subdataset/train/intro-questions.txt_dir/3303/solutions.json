["def div_con(lst):\n    return sum(n if isinstance(n, int) else -int(n) for n in lst)", "def div_con(x):\n    return sum([a for a in x if isinstance(a, int)]) - sum([int(a) for a in x if not isinstance(a, int)])", "def div_con(x):\n    integer = []\n    string = []\n    for element in x:\n        if type(element) == int:\n            integer.append(element)\n        else:\n            string.append(int(element))\n    return sum(integer) - sum(string)", "def div_con(x):\n    sum = 0    \n    for i in x:\n        if (type(i) == int):\n            sum += i\n        else:\n            sum -= int(i)    \n    return sum", "def div_con(x):\n    return sum(-int(i) if isinstance(i, str) else i for i in x)", "def div_con(x):\n\n    diff = 0\n    for num in x:\n        if isinstance(num, int):\n            diff += num\n        else:\n            diff -= int(num)\n          \n    return diff\n    \n            \n", "div_con=lambda l:sum(e if type(e)==int else -int(e)for e in l)", "def div_con(x):\n    # your code here\n    num = 0 #set the variable num = 0\n    strnum = 0 #set the variable strnum = 0\n    for number in x: #for an element of x\n        if int(number) == number: #if the integer version of the element is equivalent to the element\n            num = num + number #num is num + the number(element) of x\n        else:\n            strnum = strnum + int(number) #otherwise, if it's a string, add the integer value of the string\n    num = num - strnum #num is the total of the integers - the total of the strings\n    return num #return num", "div_con=lambda x:sum(i for i in x if type(i)==int)-sum(int(s) for s in x if type(s)==str)", "def div_con(x):\n    # your code here\n    return sum(i for i in x if isinstance(i, int)) - sum( int(i) for i in x if isinstance(i, str))"]