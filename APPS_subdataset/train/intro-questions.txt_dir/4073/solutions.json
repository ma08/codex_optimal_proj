["def crossing_sum(matrix, row, col):\n    return sum(matrix[row]) + sum(line[col] for line in matrix) - matrix[row][col]", "def crossing_sum(a, b, c):\n    return sum(a[b]) + sum(x[c] for x in a) - a[b][c]", "def crossing_sum(matrix, row, col):\n    return sum(matrix[row]) + sum(i[col] for i in matrix[:row] + matrix[row + 1:])", "def crossing_sum(matrix, row, col):\n    mat_tr = [[i[j]  for i in matrix] for j in range(len(matrix[0]))]\n    return sum(matrix[row] + mat_tr[col]) - matrix[row][col]", "def crossing_sum(matrix, row, col):\n    return sum(matrix[row]) + sum(matrix[i][col] for i in range(len(matrix))) - matrix[row][col]\n", "def crossing_sum(mx, r, c):\n    return sum(mx[r]+[x[c] for x in mx[:r]+mx[r+1:]])", "crossing_sum=lambda m,r,c: sum(m[r])+sum(l[c] for i,l in enumerate(m) if i!=r)", "def crossing_sum(matrix, row, col):\n    a = matrix[row]\n    b = [i[col] for num,i in enumerate(matrix) if num!=row]\n    return sum(a) + sum(b)\n", "def crossing_sum(matrix, row, col):\n    return sum(matrix[row]) + sum([matrix[a][col] for a in range(len(matrix)) if a != row])\n    # sums the required row\n    # sums a list made of the required column minus the value that is in the row\n"]