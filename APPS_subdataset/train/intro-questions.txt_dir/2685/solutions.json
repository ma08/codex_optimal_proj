["abc = \"abcdefghijklmnopqrstuvwxyz\"\n\ndef keyword_cipher(s, keyword, key=\"\"):\n    for c in keyword + abc:\n        if c not in key:\n            key += c\n    return s.lower().translate(str.maketrans(abc, key))", "from string import ascii_lowercase\n\ndef keyword_cipher(a, b):\n    return a.lower().translate(str.maketrans(ascii_lowercase, \"\".join(dict.fromkeys(b + ascii_lowercase))))", "from string import ascii_lowercase as low\nfrom itertools import filterfalse, chain\n\ndef keyword_cipher(msg, keyword):\n    D = dict.fromkeys(keyword)\n    cypher = ''.join(chain(D.keys(), filterfalse(D.__contains__, low)))\n    return msg.lower().translate(str.maketrans(low, cypher))", "keyword_cipher=lambda m,k,s='abcdefghijklmnopqrstuvwxyz':m.lower().translate(str.maketrans(s,''.join(sorted(set(k),key=k.index)+[i for i in s if i not in k])))", "from string import ascii_lowercase\n\ndef keyword_cipher(msg, keyword):\n    key = list(dict.fromkeys(keyword + ascii_lowercase).keys())\n    return ''.join(key[ascii_lowercase.index(c)] if c in key else c for c in msg.lower())\n", "def keyword_cipher(msg, keyword):\n  abc = 'abcdefghijklmnopqrstuvwxyz'\n  return msg.lower().translate(str.maketrans(abc, ''.join(dict.fromkeys(keyword)) + ''.join(c for c in abc if c not in keyword)))", "from string import ascii_lowercase\n\ndef keyword_cipher(msg, keyword):\n    msg = msg.lower()\n    keyword = keyword.lower()\n    subs = ''.join(dict.fromkeys(keyword)) + ''.join(c for c in ascii_lowercase if c not in keyword)\n    tbl = str.maketrans(ascii_lowercase, subs)\n    return msg.translate(tbl)", "lowers = \"abcdefghijklmnopqrstuvwxyz \"\n\ndef keyword_cipher(msg, keyword):\n    key = \"\".join(sorted(lowers, key=f\"{keyword.lower()}{lowers}\".index))\n    return \"\".join(key[lowers.index(char)] for char in msg.lower())", "from string import ascii_lowercase\nfrom collections import OrderedDict\n\ndef keyword_cipher(msg,keyword):\n    return msg.lower().translate(str.maketrans(ascii_lowercase,''.join(OrderedDict.fromkeys(keyword.lower()+ascii_lowercase).keys())))", "import string\ndef keyword_cipher(msg, keyword):\n    s = []\n    for i in keyword.lower():\n        if i not in s:\n            s.append(i)\n    return msg.lower().translate(str.maketrans(string.ascii_lowercase, ''.join(s + [i for i in string.ascii_lowercase if i not in keyword]).lower()))"]