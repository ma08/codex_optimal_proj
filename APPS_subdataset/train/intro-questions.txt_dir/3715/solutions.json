["def nth_chandos_number(n):\n    return int((bin(n)+\"0\")[2:], 5)", "from itertools import combinations, chain\nfrom math import log\ndef nth_chandos_number(n):\n    l = [0] + [5 ** i for i in range(1, int(log(n, 5)) + 10)]\n    m = chain(*[combinations(l, ni) for ni in range(1, len(l) + 1)])\n    ls = sorted(list(set([sum(i) for i in m])))\n    return ls[n]\n", "\"\"\" Considering that we search first 7000 Chandos numbers, generate the full\n    list and then returned the good one on each call.\n    \n    Process: Chandos number are made of 5^n terms with DIFFERENT n, so integers\n             usable as power can be represented in a binary way:\n             \n                 0    =>    no Chandos\n                 1    =>    first Chandos: 5^1\n                 10   =>    secund:        5^2\n                 11   =>    ...            5^2 + 5^1\n                 ...\n             \n             This way, the ARCHIVE is made by iterating binary numbers up to 7000\n             in base 10.\n             For the simplicity of the implementation, the binary representation is \n             reversed (-> big endian notation : this avoid the need of filling the \n             binary string representation with leading 0).\n\"\"\"\n\nARCHIVE = [ sum( 5**(i+1) for i,s in enumerate(reversed(bin(n)[2:])) if s == '1' ) for n in range(1, 7001) ]\n\ndef nth_chandos_number(n): return ARCHIVE[n-1]", "from itertools import combinations as c\ndef nth_chandos_number(n):\n    comb, generate, i = [1], [], 1\n    while len(generate) <= n:\n        generate.extend(sorted([j for k in range(1,len(comb)+1) for j in c(comb,k) if j[0]==i]))\n        i += 1  ; comb.insert(0, i)\n    return sum(5 ** i for i in generate[n-1])", "nth_chandos_number=c=lambda n:n and c(n//2)*5+n%2*5", "lst = [5]\nfor i in range(2, 14):\n    x = 5**i\n    lst.append(x)\n    temp = lst[:]\n    for j in temp[:-1]:\n        lst.append(j+x)\n\ndef nth_chandos_number(n):\n    return lst[n-1]", "def nth_chandos_number(n):\n    return int(bin(n)[2:] + '0', 5)", "def nth_chandos_number(n):  # :( stupid code\n    a, i, j, m = [], -1, 1, 5\n    while len(a) < n:\n        m = 5 ** j\n        a.append(m)\n        while j > 1 and i < 2 ** ~-j-1:\n            a.append(m + a[i])\n            i += 1\n        i, j = 0, j+1\n    return a[~-n]", "def nth_chandos_number(n):\n    b='{:b}'.format(n)\n    r=0\n    for d in b:\n        r=r*5+int(d)*5\n    return r", "def nth_chandos_number(n):\n    t, ans = 1, 0\n    while n:\n        t *= 5\n        if n % 2:\n            ans += t\n        n //= 2\n    return ans"]