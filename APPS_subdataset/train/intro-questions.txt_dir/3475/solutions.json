["import re\n\ndef to_integer(s):\n    if re.match(\"\\A[+-]?(\\d+|0b[01]+|0o[0-7]+|0x[0-9a-fA-F]+)\\Z\", s):\n        return int(s, 10 if s[1:].isdigit() else 0)", "from re import compile, match\n\nREGEX = compile(r'[+-]?(0(?P<base>[bxo]))?[\\d\\w]+\\Z')\n\n\ndef to_integer(strng):\n    try:\n        return int(strng, 0 if match(REGEX, strng).group('base') else 10)\n    except (AttributeError, KeyError, ValueError):\n        pass\n", "import re\ndef to_integer(s):\n    decimal = re.compile(r'^[-+]?\\d+$')\n    binary = re.compile(r'^[-+]?0b[01]+$')\n    hexadecimal = re.compile(r'^[-+]?0x[0-9A-Fa-f]+$')\n    octal = re.compile(r'^[-+]?0o[0-7]+$')\n    return next((int(s,[10,0][j!=0]) for j,i in enumerate([decimal,binary,hexadecimal,octal]) if re.search(i,s) and '\\n' not in s),None)", "import re\n\nBASE = {'0b': 2, '0x': 16, '0o': 8, '': 10}\ndef to_integer(string):\n    matched = re.search(r'\\A(?P<sign>[-+]?)(?P<base>0[box]|)?(?P<n>[a-fA-F0-9]+)\\Z', string)\n    if not matched:\n        return None\n    base = BASE[matched.group('base').lower()]\n    try:\n        n = int(matched.group('n'), base)\n    except ValueError:\n        return None\n    return n * (-1 if matched.group('sign') == '-' else 1)", "import re\n\ndef to_integer(string):\n    valid = re.search(r\"\\A([+-])?(0[bxo])?([0-9a-fA-F]+)\\Z\", string)\n    if not valid:\n        return None\n    str_base = valid.groups()[1]\n    base = {\"0x\": 16, \"0o\": 8, \"0b\": 2}.get(str_base, 10)\n    try:\n        return int(string, base)\n    except:\n        return None\n", "import re\n\n\ndef to_integer(string):\n    #your code here\n    result = re.compile(r'^(\\+|-)?(0b[01]+|0o[0-7]+|0x(\\d|[abcdefABCDEF])+|\\d+)\\Z').match(string)\n    if not result:\n        return None     \n    return convert_to_number(result.string)\n        \n\ndef convert_to_number(string):\n    base_dict={'0x': 16, '0b': 2, '0o':8}\n    for key, value in base_dict.items():\n        if string.find(key) != -1:\n            return int(string, value)\n    return int(string)", "import re\n\ndef to_integer(string):\n    try: return eval(''.join(e for e in re.match(r'\\A([-+]?)(?:(0b[01]+)|(0o[0-7]+)|(0x[0-9a-fA-F]+)|0*(\\d+))\\Z',string).groups() if e))\n    except: return None", "import re\ndef to_integer(string):\n    s = re.match(\"^([+-]?((0x[0-9A-Fa-f]+)|(0b[01]+)|(0o[0-7]+))?(?(2)$|[0-9]+$))\",string)\n    if s==None or s.group(1)!=string:\n        return None\n    return int(string,0 if s.group(2) else 10)", "import re\ndef to_integer(string):\n    b = r'\\A[+-]?0b1+[01]*\\Z'\n    x = r'\\A[+-]?0x[1-9A-Fa-f]+[0-9A-Fa-f]*\\Z'\n    o = r'\\A[+-]?0o[1-7]+[0-7]*\\Z'\n    d = r'\\A[+-]?[0-9]+\\Z'\n    #print(string)\n    for pattern, base in zip((b,x,o,d), (2,16,8,10)):\n        if re.search(pattern, string):\n            return int(string, base)\n    return None", "import re\n\ndef to_integer(string):\n    dic = {'0x': 16, '0b': 2, '0o': 8 ,None: 10}\n    match = re.fullmatch(r\"[+-]?(0[xbo]+)?[\\d\\w]*\", string)\n    try:\n        num = int(match.group(), dic[match.group(1)])\n    except:\n        num = None\n    finally:\n        return num"]