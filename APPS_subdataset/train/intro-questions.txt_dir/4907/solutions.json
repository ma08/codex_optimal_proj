["def candles(candles, make_new):\n    return candles + (candles - 1) // (make_new - 1)", "def candles(m, n):\n    burn = leftover = 0\n    while m:\n        burn += m\n        m, leftover = divmod(leftover + m, n)\n    return burn", "def candles(a, b):\n    return a + (a - 1) // (b - 1)", "from functools import lru_cache\n\n@lru_cache(maxsize=None)\ndef candles(m, n, l=0):\n    if not m and l < n: return 0\n    m, l = m+l//n, l%n\n    return m + candles(0, n, l+m)", "def candles(m, n):\n    c, r = m, 0\n    while m:\n        m, r = divmod(m+r, n)\n        c += m\n    return c\n", "def candles(m, n):\n    c = m\n    while m >= n:\n        a, b = divmod(m, n)\n        c += a\n        m = a + b\n    return c", "def candles(m, n):\n    answer = 0\n    candles, leftovers = m, 0\n    while candles >= 1 or leftovers >= n:\n        answer += candles\n        leftovers += candles\n        candles = leftovers//n\n        leftovers -= leftovers//n*n\n    return answer", "def candles(candles1, leftovers):\n    return candlesop(candles1, leftovers)\n\n\n# Candle operations.\ndef candlesop(candles1, leftovers):\n    candle1 = candles1\n    answer = 0\n    left = 0\n    # while loop; as long as some candles remain, the loop keeps running.\n    while candle1 != 0:\n        answer += candle1\n        left += candle1\n        candle1 = left // leftovers\n        left = left % leftovers\n    return answer", "def candles(m,n):\n    total=0\n    l=0\n    while m:\n        total+=m\n        m,l=divmod(m+l,n)\n    return total", "def candles(m, n):\n    burnt = m\n    leftovers = m\n    while leftovers//n >= 1:\n        burnt += leftovers//n\n        leftovers = leftovers%n + leftovers//n\n    return burnt"]