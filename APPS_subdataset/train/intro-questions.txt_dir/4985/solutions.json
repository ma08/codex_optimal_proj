["def transpose(song, interval):\n    altern = {\"Bb\": \"A#\", \"Db\": \"C#\", \"Eb\": \"D#\", \"Gb\": \"F#\", \"Ab\": \"G#\"}\n    notes = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n    return [notes[(notes.index(altern.get(i, i)) + interval) % 12] for i in song]", "table = \"A Bb B C Db D Eb E F Gb G Ab\".split()\ntable += \"A A# B C C# D D# E F F# G G#\".split() * 3\n\ndef transpose(song, interval):\n    return [table[table.index(note) + interval%12 + 12] for note in song]", "SHARP = \"A, A#, B, C, C#, D, D#, E, F, F#, G, G#\".split(\", \")\nFLAT = \"A, Bb, B, C, Db, D, Eb, E, F, Gb, G, Ab\".split(\", \")\nREVERSED_INDEX = {**{note: i for i, note in enumerate(SHARP)},\n                  **{note: i for i, note in enumerate(FLAT)}}\n\ndef transpose(song, interval):\n    return [SHARP[(REVERSED_INDEX[note] + interval) % 12] for note in song]", "def transpose(song, interval):\n    sharp = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n    flat = ['A', 'Bb', 'B', 'C', 'Db', 'D', 'Eb', 'E', 'F', 'Gb', 'G', 'Ab']\n    return [sharp[(12 + (sharp.index(nt) if nt in sharp else flat.index(nt)) + interval) % 12] for nt in song]", "def transpose(song, interval):\n    sharp = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\n    flat = ['A', 'Bb', 'B', 'C', 'Db', 'D', 'Eb', 'E', 'F', 'Gb', 'G', 'Ab']\n    result = []\n    \n    for note in song:\n        if note in sharp:\n            result.append(sharp[(sharp.index(note) + interval) % 12])\n        else:\n            result.append(sharp[(flat.index(note) + interval) % 12])\n    \n    return result", "def transpose(song, interval):\n    notes = [\"A\", \"A#\", \"B\", \"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\",\n             \"A\", \"Bb\", \"B\", \"C\", \"Db\", \"D\", \"Eb\", \"E\", \"F\", \"Gb\", \"G\", \"Ab\"]\n    return [ notes[(12+notes.index(n)+interval)%12] for n in song ]", "transpose=lambda s, i: (lambda sharp,flat: [sharp[(flat.index(n)+i+12)%12] if n in flat else sharp[(sharp.index(n)+i+12)%12] for n in s])([\"A\",\"A#\",\"B\",\"C\",\"C#\",\"D\",\"D#\",\"E\",\"F\",\"F#\",\"G\",\"G#\"],[\"A\",\"Bb\",\"B\",\"C\",\"Db\",\"D\",\"Eb\",\"E\",\"F\",\"Gb\",\"G\",\"Ab\"])", "def transpose(song, interval):\n    sharp=\"A A# B C C# D D# E F F# G G#\".split()\n    flat=\"A Bb B C Db D Eb E F Gb G Ab\".split()\n    return [sharp[((sharp.index(note) if note in sharp else flat.index(note))+12+interval)%12] for note in song]", "sharp = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\nflat = ['A', 'Bb', 'B', 'C', 'Db', 'D', 'Eb', 'E', 'F', 'Gb', 'G', 'Ab']\ndef transpose(song, interval):\n    return [sharp[((sharp.index(note) if note in sharp else flat.index(note)) + interval) % 12] for note in song]\n", "d = {\"Bb\": \"A#\", \"Db\": \"C#\", \"Eb\": \"D#\", \"Gb\": \"F#\", \"Ab\": \"G#\"}\nq = [\"A\", \"A#\", \"B\", \"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\"]\n\ndef transpose(a, n):\n    return [q[(q.index(d.get(x, x)) + n) % len(q)] for x in a]"]