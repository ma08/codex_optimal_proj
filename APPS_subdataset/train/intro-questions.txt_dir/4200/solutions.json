["import re\nfrom collections import deque\n\ndef vowel_shift(text,n):\n    try:\n        tokens = re.split(r'([aeiouAEIOU])', text)\n        if len(tokens) > 1:\n            vowels = deque(tokens[1::2])\n            vowels.rotate(n)\n            tokens[1::2] = vowels\n        return ''.join(tokens)\n    except TypeError:\n        return None", "def vowel_shift(text,n):\n    if text in (None, \"\"):\n        return text\n        \n    vwl = [x for x in text if x in \"aeiouAEIOU\"]\n    \n    if len(vwl) == 0:\n        return text\n\n    n %= len(vwl)\n    vwl = list(vwl[-n:] + vwl[:-n])\n\n    return \"\".join([x if x not in \"aeiouAEIOU\" else vwl.pop(0) for x in text])", "import re\ndef vowel_shift(text,n):\n    if not text: return text\n    vowels = [v for v in text if v in 'aeiouAEIOU']\n    n = n % len(vowels) if len(vowels) else n\n    shifted_vowels = vowels[-n:] + vowels[:-n]\n    return re.sub('[aeiouAEIOU]', lambda _: shifted_vowels.pop(0), text)", "import re\ndef vowel_shift(s,n):\n    vow = re.sub(r'[^aeiouAEIOU]',\"\",s or \"\")\n    if not s or n == 0 or not vow: return s\n    n %= len(vow)\n    vow = iter(vow[-n:] + vow[:-n])\n    return \"\".join(i if i not in \"aeiouAEIOU\" else next(vow) for i in s)", "is_vowel = lambda c: c in \"aeiouAEIOU\"\n\ndef vowel_shift(text, n):\n    if not text or not n:\n        return text\n    vowels = [c for c in text if is_vowel(c)]\n    n = -n % (len(vowels) or 1)\n    vowels = iter(vowels[n:] + vowels[:n])\n    return \"\".join(c if not is_vowel(c) else next(vowels) for c in text)\n", "from itertools import chain\nvowel = set(\"aeiouAEIOU\").__contains__\n\ndef vowel_shift(text, n):\n    if not (text and n): return text\n    L = list(filter(vowel, text))\n    if not L: return text\n    n %= len(L)\n    it = chain(L[-n:], L[:-n])\n    return ''.join(next(it) if vowel(c) else c for c in text)", "from itertools import cycle, islice\n\ndef vowel_shift(text, n):\n    chrs = [c for c in text or '' if c.lower() in 'aeiou']\n    if text and chrs:\n        it = islice(cycle(chrs), -n % len(chrs), None)\n        text = ''.join(next(it) if c.lower() in 'aeiou' else c for c in text)\n    return text", "import re\n\ndef vowel_shift(text, n):\n    if not text:\n        return text\n    vowels = [c for c in text if c in \"AEIOUaeiou\"]\n    if not vowels:\n        return text\n    vowels = iter(vowels[-n % len(vowels):] + vowels)\n    return re.sub('[AEIOUaeiou]', lambda m: next(vowels), text)", "from re import split\ndef vowel_shift(text, n):\n    if text == None:\n        return None\n    parts = split(r\"([aeiouAEIOU])\", text)\n    return \"\".join(parts[i if i % 2 == 0 else (i - 2*n) % (len(parts) - 1)] for i in range(len(parts)))", "def vowel_shift(text, n):\n    if text is None or text is '':\n        return text\n    text = [n for n in text]\n    vowels = []\n    for x in range(len(text)):\n        if text[x].lower() in 'aeuoi':\n            vowels.append(text[x])\n            text[x] = None\n    if len(vowels) == 0:\n        return ''.join(text)\n    while n != 0:\n        if n > 0:\n            vowels.insert(0, vowels.pop(-1))\n            n -= 1\n        else:\n            vowels.insert(len(vowels) - 1, vowels.pop(0))\n            n += 1\n    while len(vowels) != 0:\n        text[text.index(None)] = vowels.pop(0)\n    return ''.join(text)"]