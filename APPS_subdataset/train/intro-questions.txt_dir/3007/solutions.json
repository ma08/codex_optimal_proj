["def consecutive_sum(num):\n    upper_limit = 1\n    while True:\n        if upper_limit * (upper_limit + 1) // 2 > num:\n            break\n        upper_limit += 1\n    return sum([1 if i % 2 and not num % i else 1 if not i % 2 and num % i == i//2 else 0 for i in range(1, upper_limit)])", "from math import sqrt\ndef consecutive_sum(n):\n    cnt = 0\n    lim = int(sqrt(2 * n))\n    m = 1\n    while m <= lim:\n        u = n / m + m / 2 + 0.5\n        if int(u) == u:\n            cnt += 1\n        m += 1\n    return cnt\n", "def consecutive_sum(n):\n    top = (1+(1+8*n)**.5) / 2\n    return sum( not (n - (v-1)*v//2) % v for v in range(1,int(top)))", "from functools import partial\nfrom itertools import accumulate, count, takewhile\nfrom operator import ge\n\n\ndef consecutive_sum(num):\n    return sum(\n        (num - start) % step == 0\n        for step, start in enumerate(takewhile(partial(ge, num), accumulate(count(1))), 1)\n    )", "def consecutive_sum(num):\n    count = 0\n    N = 1\n    while( N * (N + 1) < 2 * num): \n        a = (num - (N * (N + 1) ) / 2) / (N + 1) \n        if (a - int(a) == 0.0): \n            count += 1\n        N += 1\n    return count+1", "from math import sqrt\ndef consecutive_sum(num):\n    counter = 1\n    for i in range (2, int(sqrt(2*num)+1)):\n        if i % 2 == 0:\n            if num/i - num//i == .5:\n                counter +=1\n        else:\n            if num/i == num//i:\n                counter +=1\n    return counter", "def factors(n):\n    seen = {1, n}\n    for a in range(2, 1 + int(n ** 0.5)):\n        b, m = divmod(n, a)\n        if m == 0:\n            if a in seen: break\n            seen.add(a)\n            seen.add(b)\n    return sorted(seen)\n\ndef consecutive_sum(num):\n    return sum(1 for d in factors(num) if d % 2)", "from functools import reduce\n\ndef divisors(n):    \n    return sorted(set(reduce(list.__add__, ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0))))\n\ndef consecutive_sum(n):\n    return len([x for x in divisors(n) if x %2 != 0])\n", "from numpy import roots\n\ndef consecutive_sum(num):\n    return sum(num%i == (i>>1) * (i&1^1) for i in range(1, int(roots([1/2, 1/2, -num])[1] + 1)))", "def consecutive_sum(num):\n    sol = 1\n    nums = 1\n    i = 2\n    while num > nums:\n        if (num - nums) % i == 0:\n            sol += 1\n        nums += i\n        i += 1\n    \n    return sol"]