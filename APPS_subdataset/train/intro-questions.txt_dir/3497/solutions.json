["from math import ceil, log, sqrt\n\ndef isPP(n):\n    for b in range(2, int(sqrt(n)) + 1):\n        e = int(round(log(n, b)))\n        if b ** e == n:\n            return [b, e]\n    return None\n", "def isPP(n):\n    for i in range(2, int(n**.5) + 1):\n        number = n\n        times = 0\n        while number % i == 0:\n            number /= i\n            times += 1\n            if number == 1:\n                return [i, times]\n    return None\n", "def isPP(n):\n    for i in range(2, n+1):\n        for j in range(2, n+1):\n            if i**j > n:\n                break\n            elif i**j == n:\n                return [i, j]\n    return None", "from math import log\n\ndef isPP(n, e=1e-12):\n    for p in range(2, int(log(n, 2)) + 1):\n        if int(n ** (1./p) + e) ** p == n:\n            return [int(n ** (1./p) + e), p]", "def isPP(n):\n    x, y = 2, 2\n    while x**2 <= n:\n        if x**y == n:\n            return[x,y]\n        if x**y > n:\n            x+=1\n            y = 1\n        y+=1        \n    return None", "from math import sqrt\ndef isPP(n):\n    cur = int(sqrt(n)), 2\n    while True:\n        val = cur[0] ** cur[1]\n        if val == 1:\n            break\n        if val > n:\n            cur = cur[0]-1, cur[1]\n        elif val < n:\n            cur = cur[0], cur[1]+1\n        else:\n            return list(cur)", "from math import log\ndef isPP(n):\n    for m in range(2,int(n**0.5)+1):\n        k = round(log(n, m), 13)\n        if k % 1 == 0:\n            return [m ,k]\n    return", "def isPP(n):\n    b=n\n    import math\n    root=math.sqrt(n)\n    iroot=int(root)\n    if float(iroot)==root:\n        return([iroot,2])\n    elif n==1:\n        return([1,1])\n    else:\n        if iroot==2:\n            iroot=3\n        for i in range(2,iroot):\n            s=0\n            d='no'\n            n=b\n            while n%i==0:\n                d='yes'\n                n=n/i\n                s=s+1\n                if n==1:\n                    return([i,s])\n            else:\n                d='no'\n        if d=='no':\n            return None\n    \n                \n", "def isPP(n):\n    for k in range(2,round(n**0.5+1)):\n        m=round(n**(1/k))\n        if m**k==n:\n            return [m,k]\n    return None", "def isPP(n):\n    m, k = 2, 2\n    while m**2 <= n:\n        while m**k <= n:\n            if m**k == n:\n                return [m, k]\n            else:\n                k += 1\n        m += 1\n        k = 2\n    return None", "import math\n\ndef isPP(n):\n    return next(([b, round(math.log(n, b))] for b in range(2, int(n**0.5)+1) if b**round(math.log(n, b)) == n), None)", "def isPP(n):\n    base = 2\n    power = 2\n\n    while base ** power <= n:\n        while base ** power <= n:\n            if base ** power == n:\n                return [base, power]\n            else:\n                power += 1\n\n        power = 2\n        base += 1\n\n    return None", "def isPP(n):\n    k = 2\n    m = n**(1/k)\n    while m % 1 != 0 and m > 2:\n        k += 1\n        m = n**(1/k)\n        m = float(\"{:.5f}\".format(m))\n    if m % 1 == 0:\n        return [int(m), k]\n    else:\n        return None", "def isPP(n):\n    d = 2\n    k = 2\n    while d >= 2:\n        d = round(n**(1/k), 4)\n        if d.is_integer():\n            return [d,k]\n        k +=1", "primeTable = [2,3,5,7,11,13,17,19,23,29]\ndef isPP(n):\n    for p in primeTable:\n        base = round(n ** (1/p))\n        if base ** p ==n:\n            return [base, p]", "def isPP(n):\n    for i in range(2,400):\n        for j in range(2,50):\n            if i**j == n:\n                return [i, j]\n\n    return None", "def isPP(num):\n    for n in range(2, 100):\n        if abs( num ** (1/n) - round(num ** (1/n))) < 0.0000001:\n          return [round(num ** (1/n)), n]\n        n += 1", "from math import sqrt\n\ndef isPP(n):\n    limit = int(sqrt(n))\n    for m in range(2, limit + 1):\n        k = 2\n        while m ** k <= n:\n            if m ** k == n:\n                return [m, k]\n            k += 1"]