["def first_non_consecutive(arr):\n    if not arr: return 0\n    for i, x in enumerate(arr[:-1]):\n        if x + 1 != arr[i + 1]:\n            return arr[i + 1]", "def first_non_consecutive(a):\n    i = a[0]\n    for e in a:\n        if e != i:\n            return e\n        i += 1\n    return None", "def first_non_consecutive(arr):\n    for i in range(1, len(arr)):\n        if arr[i] - arr[i-1] > 1:\n            return arr[i]", "def first_non_consecutive(arr):\n    return next((j for i, j in zip(arr, arr[1:]) if i + 1 != j), None)", "def first_non_consecutive(arr):\n    for i, v in enumerate(arr, arr[0]):\n        if v != i:\n            return v", "def first_non_consecutive(arr):\n    for b in range(len(arr) - 1):\n        if arr[b + 1] - arr[b] != 1:\n            return arr[b + 1]\n", "def first_non_consecutive(arr):\n    for i, j in zip(arr, arr[1:]):\n        if abs(j-i) > 1:\n            return j\n    return None", "def first_non_consecutive(arr):\n    init = arr[0]\n    for i in arr:\n        if init != i:\n            return i\n        else:\n            init += 1\n    return None", "def first_non_consecutive(arr):\n    pre=arr[0]-1\n    for e in arr:\n        if e-pre!=1:\n            return e\n        pre=e\n    return\n", "def first_non_consecutive(arr):\n    if not arr:\n        return None\n\n    for i, x in enumerate(arr, arr[0]):\n        if i != x:\n            return x\n\n    return None", "def first_non_consecutive(a):\n    return [e for i,e in enumerate(a + [None]) if e != a[0] + i][0]", "def first_non_consecutive(arr):\n    a = [x+1 for x in range(min(arr), max(arr)+1) if x not in arr]\n    return None if a == [] else a[0]", "def first_non_consecutive(arr):\n    for i in range(1,len(arr)):\n        if arr[i-1]+ 1 < arr[i]:\n            return arr[i]\n", "def first_non_consecutive(arr):\n    for x in range(min(arr), max(arr)+1):\n        if x not in arr:\n            return x+1", "def first_non_consecutive(arr):\n    for n in range(len(arr) - 1):\n        if arr[n + 1] != arr[n] + 1:\n            return arr[n + 1]\n    return None", "def first_non_consecutive(arr):\n    for i, q in enumerate(arr, arr[0]):\n        if i != q:\n            return q", "def first_non_consecutive(arr):\n    b = arr.pop(0);\n    for i in arr:\n        if b + 1 == i : b = i;\n        else: return i", "def first_non_consecutive(arr):\n    for index in range(len(arr)-1):\n        if abs(arr[index+1] - arr[index]) != 1:\n            return arr[index+1]\n    return None", "def first_non_consecutive(a):\n    for i, x in enumerate(a, a[0]):\n        if i != x:\n            return x", "def first_non_consecutive(arr):\n    for ind in range(1, len(arr)):\n        if arr[ind] - arr[ind-1] > 1:\n            return arr[ind]", "def first_non_consecutive(list):\n    tmp = ''\n    for item in list:\n        if tmp == '':\n            tmp = str(item)\n        else:\n            if item == int(tmp) + 1:\n                tmp = str(item)\n            else:\n                return item", "def first_non_consecutive(arr):\n    k = arr[0]\n    for i in arr:\n        if i!=k:\n            return i\n        k+=1\n    return None", "def first_non_consecutive(arr):\n  for i in range(1,len(arr)):\n    if ( arr[i] - arr[i-1] != 1 ): return arr[i]\n  else:\n    return None", "def first_non_consecutive(arr):\n    for x in range(1,len(arr)):\n        if arr[x]-1 != arr[x-1]:\n            return arr[x]\n", "def first_non_consecutive(arr):\n    for i, a in enumerate(arr):\n        if 0 < i < len(arr) + 1 and a != arr[i-1] + 1:\n            return a", "def first_non_consecutive(arr):\n    for i in range(len(arr)-1):\n        if not arr[i]+1 == arr[i+1]: return arr[i+1]\n    return None", "def first_non_consecutive(arr):\n    for i in range(len(arr)-1):\n        if arr[i] != arr[i+1]-1:\n            return arr[i+1]\n    return None", "def first_non_consecutive(arr):\n    #your code here\n    for i in range(1, len(arr)):\n        if arr[i] - arr[i-1] != 1:\n            return arr[i]\n    return None", "def first_non_consecutive(arr):\n    #your code here\n    for i in range(len(arr)-1):\n        if arr[i]+1!=arr[i+1]:\n            return arr[i+1]\n    return None\n", "first_non_consecutive = lambda a: min([e for i,e in enumerate(a) if i>0 and e!=a[i-1]+1] or [None])", "def first_non_consecutive(arr):\n    for j in range(1, len(arr)):\n        if arr[j] != arr[j-1]+1:\n            return arr[j]", "from itertools import count\ndef first_non_consecutive(arr):\n    return next((a for a, b in zip(arr, count(arr[0])) if a != b), None)", "def first_non_consecutive(arr):\n  return next(iter(a for a, b in zip(arr, range(arr[0], arr[-1])) if a != b), None)", "def first_non_consecutive(arr):\n    for i in range(1, len(arr)):\n        if abs(arr[i] - arr[i-1]) > 1:\n            return arr[i]", "def first_non_consecutive(arr):\n    for ix in range(len(arr) - 1):\n        if arr[ix] + 1 != arr[ix + 1]:\n            return arr[ix + 1]", "def first_non_consecutive(arr):\n    expected = arr[0]\n    for x in arr:\n        if x != expected:\n            return x\n        else:\n            expected = x + 1\n            \n", "def first_non_consecutive(arr):\n    res = [arr[i] for i in range(1, len(arr)) if arr[i-1] != arr[i]-1]\n    return res[0] if res else None", "def first_non_consecutive(a):\n    i = 0\n    n = None\n    while i < len(a)-1:\n        if a[i]+1 != a[i+1]:\n            n = a[i+1]\n            break\n        i += 1\n    return n", "def first_non_consecutive(arr):\n    for number_lag, number in zip(arr[:-1], arr[1:]):\n        if number_lag+1 != number:\n            return number\n    else:\n        return None\n      \n", "def checkConsecutive(l): \n    return sorted(l) == list(range(min(l), max(l)+1))\n\ndef first_non_consecutive(nums):\n    if checkConsecutive(nums):\n        return None\n    else:\n        gaps = [[s, e] for s, e in zip(nums, nums[1:]) if s+1 < e]\n        edges = iter(nums[:1] + sum(gaps, []) + nums[-1:])\n        A=list(zip(edges,edges))\n        A.pop(0)\n        L=[]\n        for i in A:\n            for j in i:\n                L.append(j)\n        return L[0]", "def first_non_consecutive(arr):\n    #your code here\n    length = len(arr)\n    if length <=2:\n        return None\n    len_list = list(range(length))\n    for item in len_list:\n        try:\n            if abs(arr[item+1] - arr[item]) != 1:\n                return arr[item+1]\n                break\n        except:\n            return None", "def first_non_consecutive(arr):\n    for n in arr:\n        if n != arr.index(n)+arr[0]:\n            return n", "def first_non_consecutive(arr):\n    for i in range(len(arr)-1):\n        next = arr[i+1]\n        if arr[i] +1 != next:\n            return next\n    return None", "def first_non_consecutive(arr):\n    return next((n for i,n in enumerate(arr[1:]) if n != arr[i]+1), None)\n    \"\"\" WARNING: i = 0 for the second element of arr! ;) \"\"\"", "def first_non_consecutive(arr):\n    for i in range(1,len(arr)):\n        if (arr[i]-1)!=arr[i-1]:\n            return arr[i]\n    return None", "def first_non_consecutive(arr):\n    is_consecutive = True\n    for index, item in enumerate(arr[0:-1]):\n        if item + 1 == arr[index + 1]:\n            continue\n        else:\n            is_consecutive = False\n            return arr[index + 1]\n            break\n    if is_consecutive == True:\n            return None", "def first_non_consecutive(arr):\n    for i in range(len(arr)-1):\n        if arr[i+1] - arr[i] != 1:\n            return arr[i+1]\n    return None\n        \n", "from typing import List, Optional\n\ndef first_non_consecutive(arr: List[int]) -> Optional[int]:\n    \"\"\" Find the first element of an array that is not consecutive. \"\"\"\n    for prev, next in zip(arr, arr[1:]):\n        if next - prev > 1:\n            return next", "def first_non_consecutive(arr):\n    return None if len(arr) < 2 else (arr[1] if arr[1]-arr[0] != 1 else first_non_consecutive(arr[1::]))", "from operator import eq\nfrom itertools import compress\n\ndef first_non_consecutive(a):\n   return next(compress(a, [not eq(*x) for x in zip(a,list(range(a[0],a[0]+len(a)+1)))]), None)\n", "def first_non_consecutive(arr):\n    return next((y for x, y in zip(arr, arr[1:]) if y - x > 1), None)", "def first_non_consecutive(arr):\n    return next((i for i in arr if not min(arr)+arr.index(i)==i), None)", "def first_non_consecutive(arr):\n    try:\n        return [i for i in arr if not min(arr)+arr.index(i)==i][0]\n    except:\n        return None", "def first_non_consecutive(lst_input): \n    if sorted(lst_input) == list(range(min(lst_input), max(lst_input)+1)):\n      return None \n    else:\n      if sorted(lst_input) != list(range(min(lst_input), max(lst_input)+1)):\n        for val, val2 in zip(sorted(lst_input), list(range(min(lst_input), max(lst_input)+1))):\n          if val != val2:\n            return val", "def first_non_consecutive(arr):\n    i = 0\n    for i in range(0, len(arr)):\n        if (i + 1 < len(arr)):\n            if (arr[i]+1 != arr[i+1]):\n                i += 1       \n                return arr[i]\n", "def first_non_consecutive(arr):\n    for i in range(len(arr)-1):\n        if arr[i+1] - arr[i] != 1 :\n            return(arr[i+1])\n        else:\n            print('',end=\"\")\n", "def first_non_consecutive(arr):\n    numbers = list(range(arr[0], arr[-1] + 1))\n    missing = [number for number in numbers if number not in arr]\n    return missing[0] + 1 if missing != [] else None", "def first_non_consecutive(x):\n    \n    for i in x:\n        if i-1 not in x:\n            if i == x[0]:\n                pass\n            else:\n                return i\n", "def first_non_consecutive(arr):\n    for i, e in enumerate(arr):\n        if i == len(arr)-1: return None\n        elif e+1 != arr[i+1]: return arr[i+1]\n", "def first_non_consecutive(arr):\n    #your code here\n    a=[arr[i+1] for i in range(len(arr)) if i+1<len(arr) and arr[i+1]-arr[i] >1]\n    print(a)\n    return a[0] if len(a)>0 else None", "def first_non_consecutive(arr):\n    return None if list(range(arr[0], arr[-1] + 1)) == arr else [arr[i + 1] for i in range(0, len(arr) - 1) if arr[i] + 1 != arr[i + 1]][0]", "def first_non_consecutive(arr):\n    d=[arr[0]]\n    for i in arr:\n        d.append(i+1)\n    if len(list(set(d[:-1]).difference(arr)))==0:\n        return None\n    else:\n        return min(list(set(d[:-1]).difference(arr)))+1", "def first_non_consecutive(arr):\n    for i in range(len(arr)-1):\n        if arr[i+1]-arr[i]==1:\n            continue\n        elif arr[i+1]-arr[i]!=1:\n            return arr[i+1]\n        else:\n            return None", "def first_non_consecutive(arr):\n    results = set(range(arr[0], arr[-1])) - set(arr)\n    return min(results)+1 if len(results) > 0 else None", "def first_non_consecutive(arr):\n    comparator = arr[0]\n    for n in arr:\n        if comparator == n:\n            comparator = comparator + 1\n        else:\n            return n", "def first_non_consecutive(arr):\n    n = 0\n    while n < len(arr)-1:\n        if arr[n+1] - arr[n] != 1:\n            return arr[n+1] \n        n +=1        ", "def first_non_consecutive(arr):\n    result = arr[0]\n    for i in arr[1:]:\n        if i - result != 1:\n            return i\n        result = i", "def first_non_consecutive(arr):\n    new_list = arr.pop(0)\n    for num in arr:\n        new_list += 1\n        if num != new_list:\n            return num\n", "def first_non_consecutive(arr):\n    \n    \n    for int in range(1,len(arr)):\n        if arr[int]-arr[int-1]!=1:\n            return  arr[int]\n    \n    \n    \n    return None", "def first_non_consecutive(l):\n    for i,n in enumerate(l[1:]):\n        if n!=l[i]+1:\n            return n", "def first_non_consecutive(arr):\n    for i, x in enumerate(arr):\n        if x != arr[i-1]+1 and i > 0:\n            return x\n    return None\n\n", "def first_non_consecutive(arr):\n    i = arr.pop(0)\n    for item in arr:\n        i += 1\n        if item != i:\n            return item \n    return None", "def first_non_consecutive(arr):\n    i = 0\n    for num in range(arr[0], arr[len(arr) - 1]):\n        if num != arr[i]:\n            return arr[i]\n        i += 1\n    return None", "def first_non_consecutive(arr):\n    for i in range(1, len(arr)):\n        if not arr[i] == arr[i - 1] + 1:\n            return arr[i]\n    return None", "def first_non_consecutive(arr):\n    first, last = arr[0], arr[-1]\n    diff = set(range(first, last + 1)) - set(arr)\n    return min(diff) + 1 if diff else None\n", "def first_non_consecutive(arr):\n    x = len(arr)\n    z= []\n    y = []\n    for k in range(0,x-1):\n        if (arr[k]+1) == arr[(k+1)]:\n            y.append(arr[k+1])\n        else:\n            z.append(arr[k+1])\n    \n    if z==[]:\n        return None\n    else:\n        z = min(z)\n        return z\n            \n\n\n    #your code here\n", "def first_non_consecutive(arr):\n    for n in range(len(arr)):\n        if n+1 < len(arr):\n            if arr[n+1] - arr[n] > 1:\n                return arr[n+1]\n    return None", "def first_non_consecutive(arr):\n    ans = arr[0]\n    for i in arr:\n        if ans != i:\n            return i\n        else:\n            ans += 1\n    return None\n", "def first_non_consecutive(arr):\n    for i in range(len(arr)-1):\n        if arr[i] - arr[i+1] != -1:\n            return arr[i+1]\n    else:\n        return None", "def first_non_consecutive(arr):\n    size = len(arr)\n    for i in range(size):\n        if i == size-1:\n            return None\n        elif arr[i+1] > arr[i]+1:\n            return arr[i+1]", "def first_non_consecutive(arr=[]):\n    if len(arr) > 1:\n        for i in range(len(arr)):\n            if i < len(arr) - 1:\n                if arr[i + 1] != arr[i] + 1:\n                    return arr[i + 1]\n    else:\n        return None", "def first_non_consecutive(arr):\n    n = 0\n    try:\n        for i in arr:\n            if i + 1 == arr[n + 1]:\n                n += 1\n                continue\n            elif i + 1 != arr[n + 1]:\n                return arr[n + 1]\n    except:\n        return None", "def first_non_consecutive(arr):\n    i = 0\n    while i < len(arr) - 1:\n        i += 1\n        if arr[0] >= 0 and arr[i] - arr[i - 1] != 1:\n            return arr[i]\n            break\n        elif arr[0] < 0 and abs(arr[i - 1]) - abs(arr[i]) != 1:\n            return arr[i]\n            break\n    else:\n        return None", "def first_non_consecutive(arr):\n    lena = len(arr)\n    b = arr[0]\n    for i in arr:\n        if b == i:\n            b = b + 1\n            print(\"tut\")\n        else:\n            return i\n            \n            \n\n", "def first_non_consecutive(arr):\n    for i, v in enumerate(arr, arr[0]):\n        if i != v:\n            return i + 1\n    return None", "def first_non_consecutive(a):\n    temp = [a[i] for i in range(len(a)) if i !=0 and a[i] != a[i-1]+1]\n    return temp[0] if temp else None", "def first_non_consecutive(arr):\n    #your code here\n    first_ele = arr[0]\n    for i in range(1,len(arr)):\n        if arr[i] == first_ele +1:\n            first_ele=first_ele + 1\n        else:\n            return arr[i]\n", "def first_non_consecutive(arr):\n    for i in range(len(arr)-1):\n        if arr[i+1] != arr[i]+1:\n            return arr[i+1]\n        if len(arr) == 0:\n            return None\n", "def first_non_consecutive(arr):\n    i = 0\n    j = 1\n    for k in range(len(arr)-1):\n        if arr[i] +1 != arr[j]:\n            return arr[j]\n        else:\n            i += 1\n            j+= 1", "first_non_consecutive = lambda arr: (lambda x:None if len(x)==0 else min(x)+1)({*range(min(arr),max(arr)+1)}.difference({*arr}))", "def first_non_consecutive(arr):\n    for el in range(0, len(arr) - 1):\n        if(arr[el + 1] - arr[el] > 1):\n            return arr[el + 1]", "def first_non_consecutive(arr):\n    if len(arr) > 1:\n        for i in range(len(arr) - 1):\n            if arr[i + 1] - arr[i] > 1:\n                return arr[i + 1]\n        return \n    else:\n        return ", "import numpy\ndef first_non_consecutive(arr):\n    if sorted(arr) == list(range(min(arr), max(arr)+1)):\n        return None\n    else:\n        difference = list(numpy.diff(arr))\n        for i in difference:\n            if i > 1:\n                index = difference.index(i)\n                return arr[index+1]\n        \n        \n    #your code here\n", "def first_non_consecutive(arr):\n    return next((arr[i] for i in range(1, len(arr)) if arr[i] - 1 != arr[i-1]), None)", "def first_non_consecutive(arr):\n    if len(arr) == 2:\n        return None\n    elem_1 = arr[0]\n    elem_2 = arr[1]\n    elem_3 = arr[2]\n    diff_1 = elem_2 - elem_1\n    diff_2 = elem_3 - elem_2\n    if diff_1 > diff_2:\n        grade_1 = diff_2\n    elif diff_1 < diff_2:\n        grade_1 = diff_1\n    else:\n        grade_1 = diff_1\n    for i in range(0, len(arr) - 1):\n        if arr[i + 1] != arr[i] + grade_1:\n            return arr[i + 1]\n    \n    return None", "\n    \n    \ndef first_non_consecutive(arr):\n    for a,b in zip(arr[:-1], arr[1:]):\n        if b!=a+1:\n            return b\n", "def first_non_consecutive(arr):\n    expected = arr[0]\n    for x in arr:\n        if x != expected:\n            return x\n        else:\n            expected += 1\n", "def first_non_consecutive(arr):\n    x = arr[0]\n    for index in arr:\n        if index != x:\n            result = index\n            break\n        x += 1\n    else:\n        result = None\n    return result", "def first_non_consecutive(arr):\n    try:\n        for i in range(len(arr)):\n            if arr[i] != arr[i+1] - 1:\n                return arr[i+1]\n    except:\n        return None", "def first_non_consecutive(arr):\n    for num in arr:\n        i = arr.index(num)\n        if i > (len(arr) - 2):\n            return None\n        elif arr[i + 1] == int(num + 1):\n            continue\n        else:\n            return arr[i + 1]\n    #your code here\n"]