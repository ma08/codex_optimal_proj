["def chain_arith_deriv(n, k):\n    if len(prime_factors(n)) < 2:\n        return \"{} is a prime number\".format(n)\n    chain = [n]\n    while k > 1:\n        k, n = k-1, arith_deriv(n)\n        chain.append(n)\n    return chain\n\n\ndef arith_deriv(n):\n    factors = prime_factors(n)\n    return sum(n * factors.count(factor) // factor for factor in set(factors)) or 1\n\n\ndef prime_factors(n):\n    if n < 2:\n        return []\n    factors = []\n    for k in (2, 3):\n        while n % k == 0:\n            n //= k\n            factors.append(k)\n    k = 5\n    step = 2\n    while k * k <= n:\n        if n % k:\n            k += step\n            step = 6 - step\n        else:\n            n //= k\n            factors.append(k)\n    if n > 1:\n        factors.append(n)\n    return factors", "from collections import Counter\n\ndef factors(n):\n    step = lambda x: 1 + 4*x - (x - x%2)\n    d, q, qmax = 1, 2 + n % 2, int(n ** .5)\n    while q <= qmax and n % q:\n        q = step(d)\n        d += 1\n    return q <= qmax and [q] + factors(n//q) or [n]\n\ndef chain_arith_deriv(start, k):\n    n, chain = start, []\n    for _ in range(k):\n        chain.append(n)\n        fac = Counter(factors(n))\n        n = sum(n // p * k for p, k in fac.items())\n    return chain if chain[1] > 1 else \"%d is a prime number\" % start", "def chain_arith_deriv(n, k):\n    r = [n]\n    while len(r) < k:\n        d = decompose(r[-1])\n        if n in d and len(r) == 1: return str(n) + \" is a prime number\"\n        r.append(sum(r[-1] / i * d[i] for i in d))    \n    return r\n    \ndef decompose(n):\n    i, f = 2, {}\n    while i * i <= n:\n        while n % i == 0:\n            f[i] = f.get(i, 0) + 1\n            n //= i\n        i += 1\n    if n > 1: f[n] = 1\n    return f if f else {1:1}        ", "def chain_arith_deriv(start, k):\n    res=[start]\n    for i in range(k-1):\n       s=0; r=factorize(start)\n       if i==0 and r=={start:1}: return str(start)+\" is a prime number\"\n       try:\n          for n in r:\n             p=1\n             for n2 in r: p*= r[n2]*n2**(r[n2]-1) if n2==n else n2**r[n2]\n             s+=p\n          start=s; res.append(s)\n       except: res.append(1)   \n    return res\n\ndef factorize(num):\n    if num<4: return [num]\n    r={}; d=2\n    while d<num**.5+1:\n        while not num%d: \n           r[d]= r[d]+1 if d in r else 1\n           num/=d\n        d+=1 if d==2 else 2\n    if num!=1: r[num]=1\n    return r", "def _prime_factors(n):\n    factors = {}\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            if i in factors.keys():\n                factors[i] += 1\n            else:\n                factors[i] = 1\n    if n > 1:\n        if n in factors.keys():\n            factors[n] += 1\n        else:\n            factors[n] = 1\n\n    return factors\n\n\ndef chain_arith_deriv(start, m, chain=None):\n    factors = _prime_factors(start)\n    if len(factors) == 1 and chain is None:\n        return '{} is a prime number'.format(start)\n    if chain is None:\n        chain = []\n    chain.append(start)\n\n    if m == 1:\n        return chain\n    elif start == 1:\n        next_num = 1\n    else:\n        next_num = 0\n        for p, k in factors.items():\n            next_num += k/p*start\n    return chain_arith_deriv(round(next_num), m-1, chain=chain)", "from sys import version_info\nif version_info.major >= 3:\n    long = int\nfrom collections import Counter\nfrom math import floor, sqrt\nfrom random import randint\n\ndef is_prime(number):\n    if (number > 1):\n        for time in range(3):\n            randomNumber = randint(2, number)- 1\n            if ( pow(randomNumber, number-1, number) != 1 ):\n                return False\n        return True\n    else:\n        return False  \n\ndef fac(n): \n    step = lambda x: 1 + (x<<2) - ((x>>1)<<1) \n    maxq = int(floor(sqrt(n)))\n    d = 1\n    q = n % 2 == 0 and 2 or 3 \n    while q <= maxq and n % q != 0:\n        q = step(d)\n        d += 1\n    return q <= maxq and [q] + fac(n//q) or [n]\n\ndef f_arith_deriv_(n):\n    primeCount = Counter(fac(n))\n    n_ = 0\n    for k, v in list(primeCount.items()):\n        n_ += v * n // k\n    return n_\n\ndef chain_arith_deriv(n, k):\n    if is_prime(n) :return str(n) + \" is a prime number\"\n    chain = [n]\n    while True:\n        next_ = f_arith_deriv_(n)\n        chain.append(next_)\n        if len(chain) == k:break\n        n = next_\n    return chain\n", "from collections import defaultdict\n\ndef derivate(x):\n    divisors = defaultdict(int)\n    n=x\n    i=2\n    while i*i<=x:\n        while x%i==0:\n            divisors[i]+=1\n            x /= i\n        i += 1\n    if x>1:\n        divisors[x]+=1\n    if len(divisors)<2:\n        return 1\n    return sum(k*n/p for p, k in divisors.items())\n    \n\ndef chain_arith_deriv(start, k):\n    result = [start]\n    for i in range(k-1):\n        result.append(derivate(result[-1]))\n        if len(result)==2 and result[-1]==1:\n            return '%d is a prime number'%start\n    return result", "from fractions import Fraction\nfrom collections import Counter\n\ndef isPrime(n):\n    if n < 3 or not n%2: return n==2\n    return all(n%x for x in range(3, int(n**0.5)+1, 2))\n\ndef prime_factors(n):\n    i = 2\n    while i * i <= n:\n        if n % i: i += 1\n        else: n //= i; yield i\n    if n > 1: yield n\n\ndef rec(current, k):\n    if not k: return []\n    if current == 1: return [1]*k\n    return [current] + rec(current * sum(Fraction(v, k) for k,v in Counter(prime_factors(current)).items()), k-1)\n\ndef chain_arith_deriv(start, k):\n    if isPrime(start): return \"{} is a prime number\".format(start)\n    return rec(start, k)", "def chain_arith_deriv(start, k):\n    if is_prime(start): return '{} is a prime number'.format(start)\n    \n    chain, n = [], float(start)\n    \n    for i in range(k):\n        chain.append(n)\n        n = sum(n * v / k for k, v in list(prime_factors_dict(n).items()))\n        if n == 1: break\n    \n    return chain + [1] * (k - len(chain))\n    \ndef is_prime(num):\n    return num == 2 or (num > 2 and all(num % i for i in range(2, int(num ** 0.5) + 1)))    \n    \ndef prime_factors_dict(n):\n    d, exp = {}, 0\n    while n % 2 == 0: \n        exp += 1\n        n //= 2\n    if exp: d[2] = exp\n    for i in range(3, int(n ** 0.5) + 1):\n        exp = 0\n        while n % i == 0: \n            exp += 1\n            n //= i\n        if exp: d[i] = exp\n    if n > 1: d[n] = 1\n    return d\n"]