["def solution(pairs):\n    return ','.join(sorted('{} = {}'.format(k, pairs[k]) for k in pairs))", "def solution(pairs):\n    return ','.join(['{} = {}'.format(*a) for a in sorted(pairs.items())])", "solution=lambda d:\",\".join(\"{} = {}\".format(*p)for p in sorted(d.items()))", "def solution(pairs):\n    return ','.join(f'{key} = {pairs[key]}' for key in sorted(pairs.keys(), key = str))", "def solution(pairs):\n    return ','.join(sorted([ f'{k} = {v}' for k,v in pairs.items() ]))", "def solution(pairs):\n    answer = [str(i) + ' = ' + str(pairs[i]) for i in pairs]\n    answer.sort()\n    return ','.join(answer)", "def solution(pairs):\n    l=[]\n    for a in pairs:\n        l.append( (str(a) + \" = \"+str(pairs[a])))\n    return ','.join(sorted(l))", "def solution(pairs):\n    return ','.join('{} = {}'.format(key, value) for key, value in sorted(pairs.items()))", "def solution(pairs):\n    return ','.join('{} = {}'.format(k, v) for k,v in sorted(pairs.items()))", "def solution(pairs):\n    return ','.join('{} = {}'.format(k, pairs[k]) for k in sorted(pairs))"]