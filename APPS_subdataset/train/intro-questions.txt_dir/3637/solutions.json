["def num_primorial(n):\n    primorial, x, n = 2, 3, n-1\n    while n:\n        if all(x % d for d in range(3, int(x ** .5) + 1, 2)):\n            primorial *= x\n            n -= 1\n        x += 2\n    return primorial", "def num_primorial(n):\n    primNums = [\n     2,    3,   5,   7,  11,  13,  17,  19,  23,   29,   \n    31,  37,  41,  43,  47,  53,  59,  61,  67,   71, \n    73,  79,  83,  89,  97,  101, 103, 107, 109, 113, \n    127, 131, 137, 139, 149, 151, 157, 163, 167, 173, \n    179, 181, 191, 193, 197, 199, 211, 223, 227, 229, \n    233, 239, 241, 251, 257, 263, 269, 271, 277, 281, \n    283, 293, 307, 311, 313, 317, 331, 337, 347, 349, \n    353, 359, 367, 373, 379, 383, 389, 397, 401, 409, \n    419, 421, 431, 433, 439, 443, 449, 457, 461, 463, \n    467, 479, 487, 491, 499, 503, 509, 521, 523, 541, \n    547, 557, 563, 569, 571, 577, 587, 593, 599, 601, \n    607, 613, 617, 619, 631, 641, 643, 647, 653, 659, \n    661, 673, 677, 683, 691, 701, 709, 719, 727, 733, \n    739, 743, 751, 757, 761, 769, 773, 787, 797, 809, \n    811, 821, 823, 827, 829, 839, 853, 857, 859, 863, \n    877, 881, 883, 887, 907, 911, 919, 929, 937, 941, \n    947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, \n   1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, \n   1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, \n   1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, \n   1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, \n   1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, \n   1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, \n   1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, \n   1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, \n   1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, \n   1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, \n   1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, \n   1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, \n   1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, \n   1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, \n   2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, \n   2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, \n   2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, \n   2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, \n   2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, \n   2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, \n   2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, \n   2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, \n   2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, \n   2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, \n   2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, \n   2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, \n   3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, \n   3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, \n   3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, \n   3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, \n   3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, \n   3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, \n   3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, \n   3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, \n   3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, \n   3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, \n   3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, \n   3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, \n   4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, \n   4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, \n   4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, \n   4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, \n   4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, \n   4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, \n   4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, \n   4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, \n   4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, \n   4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, \n   4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, \n   4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, \n   5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, \n   5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, \n   5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, \n   5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, \n   5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, \n   5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, \n   5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, \n   5641, 5647, 5651, 5653, 5657, 5659, 5669, 5683, 5689, 5693, \n   5701, 5711, 5717, 5737, 5741, 5743, 5749, 5779, 5783, 5791, \n   5801, 5807, 5813, 5821, 5827, 5839, 5843, 5849, 5851, 5857, \n   5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, 5927, 5939, \n   5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, 6053, \n   6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, \n   6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, \n   6229, 6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, \n   6311, 6317, 6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, \n   6373, 6379, 6389, 6397, 6421, 6427, 6449, 6451, 6469, 6473, \n   6481, 6491, 6521, 6529, 6547, 6551, 6553, 6563, 6569, 6571, \n   6577, 6581, 6599, 6607, 6619, 6637, 6653, 6659, 6661, 6673, \n   6679, 6689, 6691, 6701, 6703, 6709, 6719, 6733, 6737, 6761, \n   6763, 6779, 6781, 6791, 6793, 6803, 6823, 6827, 6829, 6833, \n   6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, 6911, 6917, \n   6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, 6997, \n   7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, \n   7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207,\n   7211, 7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, \n   7307, 7309, 7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411, \n   7417, 7433, 7451, 7457, 7459, 7477, 7481, 7487, 7489, 7499, \n   7507, 7517, 7523, 7529, 7537, 7541, 7547, 7549, 7559, 7561, \n   7573, 7577, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 7643, \n   7649, 7669, 7673, 7681, 7687, 7691, 7699, 7703, 7717, 7723, \n   7727, 7741, 7753, 7757, 7759, 7789, 7793, 7817, 7823, 7829, \n   7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, 7907, 7919,\n    ]\n    prod = 1\n    for i in range(n):\n        prod *= primNums[i]\n    return prod", "def num_primorial(n):\n    p = []\n    val = 2\n    while len(p)<n:\n        for div in p:\n            if val%div==0:\n                val += 1\n                break\n        else:\n            p.append(val)\n    val = 1\n    for x in p:\n        val *= x\n    return val\n", "def num_primorial(n):\n    \"\"\"\n    Custom Sieve method used...\n    \"\"\"\n    prime_list = [2]\n    ans = prime_list[0]\n    chk_num = 3\n    while len(prime_list) != n:\n        for prime in prime_list:\n            if chk_num % prime == 0:\n               break\n            elif prime == prime_list[-1]: # and chk_num%prime != 0\n                prime_list.append(chk_num)   # chk_num is prime\n                ans = ans*prime_list[-1] # update answer\n        chk_num = chk_num + 2 #all primes after 2 are odd\n    return ans\n\n", "def isprime(x): #function to check if number is a prime number\n    number = x\n    if number==2:\n        return(True)\n    else:\n        for num in range(2,number):\n            if number%num ==0:\n                return(False)\n        else:\n            return(True)\n\ndef num_primorial(num_of_nums):\n    counter = 0 # counter to keep track of how many numbers prime numbers we've multipled\n    number = 2 #arbitray number to start keeping track of prime numbers\n    primorial=1 #return variable which we will multiple all discovered prime numbers by until counter == num_of_nums\n\n    \n    for x in range(2,10000):\n        if isprime(number) == True: \n            primorial *=x\n            number+=1#keep our number counter going up to test for more prime numbers\n            counter+=1\n            if counter == num_of_nums:# to break the loop once we have the desired amount of prime numbers multipled\n                break\n        else:\n            number+=1 #keep our number counter going up to test for more prime numbers\n    return(primorial)\n            \n", "import math as mt   \nMAX=10000  \nprime=[True for i in range(MAX+1)] \ndef Sieve():      \n    prime[1]=False\n      \n    for p in range(2,mt.ceil(mt.sqrt(MAX))):   \n        if prime[p]: \n           \n            for i in range(2*p,MAX+1,p): \n                prime[i]=False\nSieve()                  \ndef num_primorial(n):\n    count,num=0,1     \n    prod=1\n    while count<n:\n          \n        if prime[num]: \n            prod*=num \n            count+=1\n        num+=1\n    return prod ", "def num_primorial(n):\n    l = [2]\n    k = 3\n    while len(l) < n:\n        l.append(k)\n        for i in range(2, k):\n            if k % i == 0:\n                l.pop()\n                break\n        k += 1\n    out = 1\n    for i in l:\n        out *= i\n    return out", "from functools import reduce\n\n\ndef primes_sieve(n):\n    sieve = [False, False] + [True] * (n - 1)\n    limit = int(n ** 0.5) + 1\n    for k in range(2, limit):\n        if sieve[k]:\n            i = k * 2\n            l = (n - k) // k\n            sieve[i::k] = [False] * l\n    return [p for p, is_prime in enumerate(sieve) if is_prime]\n\n\nprimes = primes_sieve(8000)\n\n\ndef num_primorial(n):\n    return reduce(int.__mul__, primes[:n])", "from itertools import accumulate, count\nfrom collections import defaultdict\nfrom operator import mul\n\ndef gen():\n    D = defaultdict(list)\n    for q in count(2):\n        if q not in D:\n            yield q\n            D[q*q] = [q]\n        else:\n            for p in D[q]: D[p+q].append(p)\n            del D[q]\ncreate, save = accumulate(gen(), mul), [1]\n\ndef num_primorial(n):\n    while len(save) <= n: save.append(next(create))\n    return save[n]", "def num_primorial(n):\n    def isprime(p):\n        return p > 1 and all(p % i > 0 for i in range(2,int(p**.5+1)))\n    primorial,p,c = 1,1,0\n    while c < n:\n        if isprime(p):\n            primorial *= p\n            c += 1\n        p += 1\n    return primorial", "import math\ndef isPrime(n):\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\ndef num_primorial(n):\n    s,j=1,0\n    for i in range(2,n**2):\n        if isPrime(i):\n            s*=i\n            j+=1\n            if j==n:\n                return s", "from functools import reduce\ndef num_primorial(n):\n    from operator import mul\n    from functools import reduce\n    lst = []\n    i = 2\n    while (len(lst)!=n):\n        for j in range(2,i):\n            if i%j == 0:\n                break\n        else:\n                lst.append(i)\n        i+=1\n    return reduce(mul,lst)\n", "def num_primorial(n):\n    prim = 2\n    x = 3\n    while n - 1:\n        if all(x % num != 0 for num in range(3, int(x ** 0.5) + 1, 2)):\n            prim *= x\n            n -= 1\n        x += 2\n    return prim", "def num_primorial(n):\n    i = 2\n    sum = 1\n    k = 0\n    while True:\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            sum *= i\n            k += 1\n        if k == n:\n            break\n        i += 1\n    return sum ", "def is_prime(a):\n    if a < 4:\n        return True\n    for i in range(2,int(a/2)+1):\n        if a%i == 0:\n            return False\n    return True\n\ndef num_primorial(n):\n    result = 1\n    count_primes = 0\n    i = 2\n    while count_primes < n:\n        if is_prime(i):\n            result *= i\n            count_primes += 1\n        i += 1\n    return result", "def num_primorial(n):\n    lst=[2]\n    for i in range(2,7919):\n        count=0\n        for e in lst:\n            if i%e==0:\n                count=count+1\n        if count==0:\n            lst.append(i)\n        if len(lst)==n:\n            break\n\n    prod=1\n    for e in range(n):\n        prod=prod*lst[e]\n    return prod  \n", "def num_primorial(n):\n    primes = [2]\n    i = 1\n    new_p = 2\n    while i < n:\n        j = 0\n        while j < len(primes):\n            if new_p % primes[j] == 0:\n                new_p += 1\n                break\n            else: j += 1\n        if j == len(primes): \n            primes = primes + [new_p]\n            new_p += 1\n            i += 1\n    product = primes[0]\n    for p in primes[1:]: product *= p\n    return product\n        \n", "import math\nfrom functools import reduce\n#finding primes\nMAX_PRIME = 10000\nprime_candidates = [True] * MAX_PRIME\n\nfor i in range (2,int(math.sqrt(MAX_PRIME)) + 1):\n    if prime_candidates[i] == True:\n        for j in range(i**2, MAX_PRIME, i):\n            prime_candidates[j] = False\n\n\ndef num_primorial(n):\n    primes = [i for i,j in enumerate(prime_candidates) if j == True][2:]\n    return reduce(lambda x,y : x*y, primes[0:n])", "from functools import reduce\nfrom operator import mul\n\nPRIMES = [2] + [x for x in range(3, 10**4, 2) if all(x%d for d in range(3, int(x**0.5)+1, 2))]\n\ndef num_primorial(n):\n    return reduce(mul, PRIMES[:n])"]