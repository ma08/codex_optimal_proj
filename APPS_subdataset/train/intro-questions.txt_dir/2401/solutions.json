["class Solution:\n     def wordPattern(self, pattern, str):\n         \"\"\"\n         :type pattern: str\n         :type str: str\n         :rtype: bool\n         \"\"\"\n         # d['a'] = word\n         #pattern_arr = list(pattern)\n         str_arr = str.split()\n         pattern_dict = {}\n         str_dict = {}\n         \n         pattern_tokenize = []\n         token_p = 0\n         \n         str_tokenize = []\n         token_s = 0\n         \n         for char in pattern:\n             if char not in list(pattern_dict.keys()):\n                 pattern_dict[char] = token_p\n                 token_p += 1\n                 pattern_tokenize.append(token_p)\n             else:\n                 pattern_tokenize.append(pattern_dict[char])\n                 \n         for word in str_arr:\n             if word not in list(str_dict.keys()):\n                 str_dict[word] = token_s\n                 token_s += 1\n                 str_tokenize.append(token_s)\n             else:\n                 str_tokenize.append(str_dict[word])\n             \n         return (pattern_tokenize == str_tokenize)\n         \n         \n", "class Solution:\n     def wordPattern(self, pattern, str):\n         \"\"\"\n         :type pattern: str\n         :type str: str\n         :rtype: bool\n         \"\"\"\n         dict1 = {i:[] for i in pattern}\n         for tag,i in enumerate(pattern):\n             dict1[i].append(tag)\n         L1 = []\n         for key in dict1:\n             L1.append(dict1[key])\n             \n         dict2 = {i:[] for i in str.split()}\n         for tag,i in enumerate(str.split()):\n             dict2[i].append(tag)\n         L2 = []\n         for key in dict2:\n             L2.append(dict2[key])\n \n         if sorted(L1) == sorted(L2):\n             return True\n         else:\n             return False\n         \n             \n", "class Solution:\n     def wordPattern(self, pattern, str):\n         \"\"\"\n         :type pattern: str\n         :type str: str\n         :rtype: bool\n         \"\"\"\n         return list(map(pattern.find, pattern)) == list(map(str.split().index, str.split()))", "class Solution(object):\n     def wordPattern(self, pattern, str):\n         \"\"\"\n         :type pattern: str\n         :type str: str\n         :rtype: bool\n         \"\"\"\n         ptMap = {}\n         good = True\n         wList = str.split(' ')\n         if len(wList) != len(pattern):\n             good = False\n         else:\n             for k, v in enumerate(wList):\n                 if v in ptMap:\n                     if ptMap[v] != pattern[k]:\n                         good = False\n                 else:\n                     if pattern[k] in ptMap.values():\n                         good = False\n                     else:\n                         ptMap[v] = pattern[k]\n \n         return good", "class Solution:\n     def wordPattern(self, pattern, str):\n         \"\"\"\n         :type pattern: str\n         :type str: str\n         :rtype: bool\n         \"\"\"\n         \n         \n         strlst = str.split()\n         return [ pattern.find(i) for i in pattern ] == [ strlst.index(i) for i in strlst ]\n     \n     \n         \n         \"\"\"\n         my first solution...beat 93%\n         \n         strlst = str.split()\n         \n         if len(pattern) != len(strlst) or len(pattern) == 0:\n             return False\n         if len(pattern) == 1:\n             return True\n         \n         pdic = {}\n         pnum = []\n         sdic = {}\n         snum = []\n         i = 0\n         j = 0\n         k = 0\n         while i < len(pattern):\n             if pattern[i] not in pdic:\n                 pdic[pattern[i]] = j\n                 pnum.append(j)\n                 j += 1\n             else:\n                 pnum.append(pdic[pattern[i]])\n             if strlst[i] not in sdic:\n                 sdic[strlst[i]] = k\n                 snum.append(k)\n                 k += 1\n             else:\n                 snum.append(sdic[strlst[i]])\n             i += 1\n         \n         if pnum == snum:\n             return True\n         return False\n         \"\"\"", "class Solution:\n     def wordPattern(self, pattern, str):\n         \"\"\"\n         :type pattern: str\n         :type str: str\n         :rtype: bool\n         \"\"\"\n         str_ls = str.split()\n         flag = True\n         pattern_d, str_d = {}, {}\n         if len(str_ls) != len(pattern):\n             return False\n         for i in range(len(pattern)):\n             if (str_ls[i] in str_d) and (pattern[i] in pattern_d):\n                 if (str_d[str_ls[i]] != pattern[i]) or (pattern_d[pattern[i]] != str_ls[i]):\n                     flag = False\n             elif (pattern[i] not in pattern_d) and (str_ls[i] not in str_d):\n                 pattern_d[pattern[i]] = str_ls[i]\n                 str_d[str_ls[i]] = pattern[i]\n \n             else:\n                 flag = False\n         return flag\n", "class Solution:\n     def wordPattern(self, pattern, s):\n         \"\"\"\n         :type pattern: str\n         :type s: str\n         :rtype: bool\n         \"\"\"\n         words = s.split(' ')\n         if len(words) != len(pattern):\n             return False\n         \n         d = {}\n         for a, b in zip(pattern, words):\n             if a not in d:\n                 d[a] = b\n             else:\n                 if d[a] != b:\n                     return False\n                 \n         values = list(d.values())\n         return len(values) == len(set(values))\n", "class Solution:\n     def wordPattern(self, pattern, str):\n         \"\"\"\n         :type pattern: str\n         :type str: str\n         :rtype: bool\n         \"\"\"\n         pattern_map = {}\n         pattern_word = []\n         pattern_result = []\n         string_map = {}\n         string_word = []\n         string_result = []\n         for index,item in enumerate(pattern):\n             if item not in pattern_map:\n                 pattern_word.append(item)\n             pattern_map[item] = pattern_map.get(item,[]) + [index]\n         for item in pattern_word:\n             pattern_result.append([pattern_map[item]])\n         start = 0\n         count = 0\n         index = 0\n         while index <= len(str):\n             if index < len(str) and str[index] != ' ':\n                 index += 1\n                 continue\n             else:\n                 sub_str = str[start:index]\n                 index += 1\n                 if sub_str not in string_map:\n                     string_word.append(sub_str)\n                 string_map[sub_str] = string_map.get(sub_str,[]) + [count]\n                 start = index\n                 count += 1\n         for item in string_word:\n             string_result.append([string_map[item]])\n         if string_result == pattern_result:\n             return True\n         else:\n             return False\n                 \n             \n", "class Solution:\n     def wordPattern(self, pattern, str):\n         \"\"\"\n         :type pattern: str\n         :type str: str\n         :rtype: bool\n         \"\"\"\n         if pattern is None or str is None:\n             return False\n         \n         dic_p2w = {}\n         pset = set()\n         words = str.split(' ')\n         if len(pattern) != len(words):\n             return False\n         \n         for i in range(len(words)):\n             pset.add(pattern[i])\n             if pattern[i] not in dic_p2w:\n                 dic_p2w[pattern[i]] = words[i]\n             else:\n                 if dic_p2w[pattern[i]] != words[i]:\n                     return False\n         return len(pset) == len(set(words)) ", "class Solution:\n     def wordPattern(self, pattern, str):\n         \"\"\"\n         :type pattern: str\n         :type str: str\n         :rtype: bool\n         \"\"\"\n         wordlist = str.split()\n         dictionary = {}\n         L1 = len(pattern)\n         L2 = len(wordlist)\n         if L1 !=L2 :\n             return False\n         else:\n             for n in range(L1):\n                 #dictionary key exists already, just check for value\n                 if pattern[n] in dictionary.keys():\n                     if(dictionary[pattern[n]] != wordlist[n]):\n                         return False\n                 else:\n                     #dictionary key does not exist\n                     if (wordlist[n] not in dictionary.values()):\n                         dictionary[pattern[n]] =wordlist[n]\n                     else:\n                         return False\n         return True", "class Solution:\n     def wordPattern(self, pattern, str):\n         if not pattern and not str:\n             return True\n         if not pattern or not str:\n             return False\n         \n         str_list = str.split()\n         if len(pattern) != len(str_list):\n             return False\n         \n         pattern_table = collections.defaultdict(int)\n         str_table = collections.defaultdict(int)\n         for idx in range(len(pattern)):\n             if pattern_table[pattern[idx]] != str_table[str_list[idx]]:\n                 return False\n             pattern_table[pattern[idx]] = idx + 1\n             str_table[str_list[idx]] = idx + 1\n             \n         return True\n         \n         \"\"\"\n         :type pattern: str\n         :type str: str\n         :rtype: bool\n         \"\"\"\n"]