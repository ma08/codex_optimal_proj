["def box_capacity(length, width, height):\n    return (length * 12 // 16) * (width * 12 // 16) * (height * 12 // 16)\n", "def box_capacity(l, w, h):\n    return ((l * 3) // 4) * ((w * 3) // 4) * ((h * 3) // 4)\n", "def box_capacity(length, width, height):\n    # Your code here.\n    length_capacity = (length * 12) // 16\n    width_capacity = (width * 12) // 16\n    height_capacity = (height * 12) // 16\n    \n    return length_capacity * width_capacity * height_capacity", "from functools import reduce\n\nBOX_DIM = 16\n\ndef box_capacity(*dims):\n    return reduce(int.__mul__, (d*12//BOX_DIM for d in dims))", "def box_capacity(x, y, z):\n  return int(x*0.75)*int(y*0.75)*int(z*0.75)", "box_capacity = lambda *ds,r=__import__(\"functools\").reduce:r(int.__mul__, ((i * 12) // 16 for i in ds))", "def box_capacity(length, width, height):\n  length_i = 12*length\n  width_i = 12*width\n  height_i = 12*height\n  crate = 16\n  L =  length_i // crate\n  W =  width_i // crate\n  H =  height_i // crate\n  return L*W*H", "def box_capacity(l, w, h):\n    return int(l * 0.75) * int(w * 0.75) * int(h * 0.75)", "def box_capacity(length, width, height):\n    # Your code here.\n    box_length = length * 12 // 16\n    width_box = width * 12 // 16\n    height_box = height * 12 // 16\n    \n    return box_length * width_box * height_box\n", "def box_capacity(length, width, height):\n    # Your code here.\n    box_size = 16/12 # in feet\n    return (length//box_size) * (width // box_size) * (height//box_size)"]