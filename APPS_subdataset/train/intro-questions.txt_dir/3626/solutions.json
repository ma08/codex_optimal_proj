["def encode(str, key):\n    key = key.lower() + key.upper()\n    dict = { char: key[i-1] if i % 2 else key[i+1] for i, char in enumerate(key) }\n    return ''.join( dict.get(char, char) for char in str )\n\ndecode = encode", "def encode(message, key):\n    a, b = (f\"{key[i::2]}{key[i::2].upper()}\" for i in (0, 1))\n    return message.translate(str.maketrans(f\"{a}{b}\", f\"{b}{a}\"))\n\ndecode = encode\n", "def encode(str, key): return ende(str, key)\ndef decode(str, key): return ende(str, key)\n\ndef ende(str, key):\n    key+=key.upper()\n    rkey = \"\"\n    for l in range(0,len(key),2):\n        rkey+=key[l+1]+key[l]\n    str = list(str)\n    for i in range(0,len(str)):\n        if str[i] in key:\n            str[i] = rkey[list(key).index(str[i])]\n    return \"\".join(str)\n", "encode = decode = lambda message, key: message.translate(str.maketrans(*mapping(key)))\n\ndef mapping(key):\n  even, odd = key[::2] + key[::2].upper(), key[1::2] + key[1::2].upper()\n  return (even + odd, odd + even)", "def encode(message, key):\n    tbl = str.maketrans(\n        key[::2] + key[::2].upper() + key[1::2] + key[1::2].upper(),\n        key[1::2] + key[1::2].upper() + key[::2] + key[::2].upper()\n    )\n    return message.translate(tbl)\ndecode = encode", "def encode(message, key):\n    s1, s2 = [], []\n    for c1,c2 in zip(key[0::2], key[1::2]):\n        s1.append(c1+c1.upper())\n        s2.append(c2+c2.upper())\n    return message.translate(str.maketrans(*map(''.join, [s1+s2, s2+s1])))\n\ndecode = encode", "def encode(message, key):\n    x, y = key[::2] + key[::2].upper(), key[1::2] + key[1::2].upper()\n    return message.translate(str.maketrans(x + y, y + x))\n\ndecode = encode", "def encode(s, key):\n    D = {key[i]: key[i+1] for i in range(0, len(key), 2)}\n    D.update({v: k for k, v in D.items()})\n    D.update({k.upper(): v.upper() for k, v in D.items()})\n    return s.translate(str.maketrans(D))\n    \ndecode = encode", "def encode(str, key):\n    \"\"\"Translate str using given key\"\"\"\n    switched = []\n    for x in range(int(len(key) / 2)):\n        switched.append(key[x * 2 + 1])\n        switched.append(key[x * 2])\n    switched = \"\".join(switched)\n    return str.translate(str.maketrans(key + key.upper(), switched + switched.upper()))\n\n\ndef decode(str, key):\n    \"\"\"Do the same as encode\"\"\"\n    return encode(str, key)"]