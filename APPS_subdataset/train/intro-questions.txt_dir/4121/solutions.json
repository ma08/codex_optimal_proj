["def fight_resolve(d, a):\n    return -1 if d.islower() == a.islower() else d if d.lower() + a.lower() in \"ka sp as pk\" else a", "def fight_resolve(d, a):\n    return -1 if d.islower() == a.islower() else d if f\"{d}{a}\".lower() in \"aspka\" else a", "def fight_resolve(defender, attacker):\n    res = attacker\n    if defender.islower() and attacker.islower() or defender.isupper() and attacker.isupper():\n        return -1\n    elif attacker.lower() == 'a':\n        if defender.lower() == 'k':\n            res = defender\n    elif attacker.lower() == 'p':\n        if defender.lower() == 's':\n            res = defender\n    elif attacker.lower() == 's':\n        if defender.lower() == 'a':\n            res = defender\n    elif attacker.lower() == 'k':\n        if defender.lower() == 'p':\n            res = defender\n    return res\n", "def fight_resolve(defender, attacker): \n    if (attacker.isupper() and defender.isupper()) or (attacker.islower() and defender.islower()):\n        return -1\n    att = {\"A\":1, \"P\":2, \"S\":3, \"K\":4}\n    dff = {\"K\":1, \"S\":2, \"A\":3, \"P\":4}\n    \n    if att[attacker.upper()] == dff[defender.upper()]:\n        return defender\n    else:\n        return attacker\n    #pass\n", "p1 = ['p', 'k', 'a', 's']\np2 = ['P', 'K', 'A', 'S']\nar = ['a', 'A']\nsm = ['s', 'S']\npm = ['p', 'P']\ncy = ['k', 'K']\n\ndef fight_resolve(d, a): \n    if (d in p1 and a in p1) or (d in p2 and a in p2):\n        return -1\n    if a in ar:\n        return d if d in cy else a\n    elif a in pm:\n        return d if d in sm else a\n    elif a in sm:\n        return d if d in ar else a\n    elif a in cy:\n        return d if d in pm else a\n", "def fight_resolve(defender, attacker): \n\n    if defender.isupper() == attacker.isupper():\n        return -1\n\n    battle = dict(zip('ksapKSAP', 'APSKapsk'))\n    return defender if battle[defender] == attacker else attacker", "def fight_resolve(defender, attacker): \n    if defender.islower() == attacker.islower(): return -1\n    return defender if f\"{defender}{attacker}\".lower() in \"aspka\" else attacker", "fight_resolve=lambda d,a:d.islower()^a.islower()and(a,d)[(d+a).lower()in'aspka']or-1", "def fight_resolve(d, a): \n    if d.islower() == a.islower(): return -1\n    map = {\"a\":\"s\", \"k\":\"a\", \"p\":\"k\", \"s\":\"p\"}\n    return d if map[d.lower()] == a.lower() else a", "def fight_resolve(defender, attacker): \n    fight = (defender + attacker).lower()\n    d_low = defender == defender.lower()\n    a_low = attacker == attacker.lower()\n    \n    if (d_low and a_low) or (not d_low and not a_low):\n        return -1\n    \n    if (\"a\" in defender.lower()) and (\"s\" in attacker.lower()):\n        winner = defender\n    elif \"s\" in defender.lower() and \"p\" in attacker.lower():\n        winner = defender\n    elif \"p\" in defender.lower() and \"k\" in attacker.lower():\n        winner = defender\n    elif \"k\" in defender.lower() and \"a\" in attacker.lower():\n        winner = defender\n    else:\n        winner = attacker\n    \n    return winner"]