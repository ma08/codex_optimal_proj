["def bingo(card, numbers):\n    \n    rc, cc, dc = [0]*5, [0]*5, [1]*2            # rows count, columns count, diag counts\n    rc[2] = cc[2] = 1                           # preaffect 'FREE SPACE'\n    s = set(numbers)\n    \n    for x,line in enumerate(card[1:]):\n        for y,(c,n) in enumerate(zip(card[0], line)):\n            tile = f'{c}{n}'\n            if tile in s:\n                rc[x] += 1\n                cc[y] += 1\n                if x == y:   dc[0] += 1         # main diag\n                if x+y == 4: dc[1] += 1         # secundary diag\n    return 5 in rc + cc + dc", "def bingo(card, numbers):\n    decode = lambda s: True if s == 'FREE SPACE' else int(s)\n    game = [\n        [decode(x) for x in row]\n        for row in card[1:]\n    ]\n\n    # Decode each 'number' into a column and number\n    for s in numbers:\n        col = 'BINGO'.find(s[0])\n        n = int(s[1:])\n        for row in range(5):\n            val = game[row][col]\n            if val is not True and val == n:\n                # We have that number in the column, mark it as found\n                game[row][col] = True\n                break\n\n    # Extract all the straight lines through the board\n    lines = game                                               # rows \n    lines += [[row[col] for row in game] for col in range(5)]  # cols\n    lines += [[game[i][i] for i in range(5)]]                  # leading diagonal\n    lines += [[game[i][4-i] for i in range(5)]]                # secondary diagonal\n    # See if any lines are all True\n    return any(all(x is True for x in line) for line in lines)", "def bingo(card, numbers):\n    card = card[1:]\n\n    indexes = {\n        str(x): (i, j)\n        for i, row in enumerate(card)\n        for j, x in enumerate(row)\n    }\n    board = [[0] * 5 for _ in range(5)]\n    for n in numbers + [' FREE SPACE']:\n        try:\n            i, j = indexes[n[1:]]\n            board[i][j] = 1\n        except KeyError:\n            pass\n    return (\n        any(sum(row) == 5 for row in board)\n        or any(sum(row) == 5 for row in zip(*board))\n        or all(board[i][i] for i in range(5))\n        or all(board[i][4-i] for i in range(5))\n    )", "def bingo(card, numbers):\n    grid = card[1:]\n    draw = set(int(n[1:]) for n in numbers if n[0] != \"F\") | {\"FREE SPACE\"}\n    lines = [set(l) for l in grid]\n    columns = [set(c) for c in zip(*grid)]\n    diagonals = [set(d[(-1)**p * i] for i, d in enumerate(grid, p)) for p in (0, 1)]\n    rows = lines + columns + diagonals\n    return any(row.issubset(draw) for row in rows)\n", "def matches(set,digits):\n    count = 0   \n    if 'FREE SPACE' in set:\n        count += 1\n    for digit in digits:\n        if int(digit[1:]) in set:\n            count += 1           \n    return count\n\ndef bingo(card, numbers):\n\n    for set in card:\n        count_row = matches(set,numbers)\n        if count_row == 5:\n            break\n            \n    for column in range(5):\n        cols = []\n        for row in range(1,6):\n            cols.append(card[row][column])\n        count_col = matches(cols, numbers)\n        if count_col == 5:\n            break\n\n    diag_r = []\n    diag_l = [] \n    for i in range(5):\n        diag_r.append(card[i+1][i])\n        diag_l.append(card[5-i][i])\n    \n    return count_row == 5 or count_col == 5 or matches(diag_r, numbers) == 5 or matches(diag_l, numbers) == 5", "from copy import copy, deepcopy\n\ndef bingo(card, numbers):\n    copy = deepcopy(card)\n    def checkEqual(e, x):\n        for i in range (1, len(copy)):\n            if copy[i][x] == int(e[1:]):\n                copy[i][x] = None\n\n    def markBoard():\n        for e in numbers:\n            if e[0] == 'B':\n                checkEqual(e, 0)\n            if e[0] == 'I':\n                checkEqual(e, 1)\n            elif e[0] == 'N':\n                checkEqual(e, 2)\n            elif e[0] == 'G':\n                checkEqual(e, 3)\n            elif e[0] == 'O':\n                checkEqual(e, 4)\n        \n    def checkVerticle():\n        for i in range (1, len(copy)):\n            for j in range(len(copy) - 1):\n                if copy[i][j] != None and copy[i][j] != 'FREE SPACE':\n                    break\n            else:\n                return True\n        return False\n    \n    \n    def checkLateral():\n        for i in range (len(copy) - 1):\n            for j in range(1, len(copy)):\n                if copy[j][i] != None and copy[j][i] != 'FREE SPACE':\n                    break\n            else:\n                return True\n        return False\n\n    \n    def checkCross():\n        for i in range(1, len(copy)):\n            if copy[i][i-1] != None and copy[i][i-1] != 'FREE SPACE':\n                break\n        else:\n            return True\n        \n        for i in range(1, len(copy)):\n            if copy[-i][i-1] != None and copy[-i][i-1] != 'FREE SPACE':\n                break\n        else:\n            return True\n\n        return False\n        \n    \n    markBoard()\n    t = checkVerticle() or checkLateral() or checkCross()\n    \n    return t\n    \n\ndef printBoard(card):\n    for i in range(len(card)):\n        for j in range(len(card) - 1):\n            print(card[i][j], '\\t', end='')\n        print()\n", "def bingo(card, numbers):\n    card = card[1:]\n    c = 'BINGO'\n    r =[]\n    \n    #col\n    col = []\n    for i,v in enumerate(c):\n        for j in range(5):\n            s = f'{v}{card[j][i]}'\n            if s != 'NFREE SPACE':\n                col.append(s)\n        r.append(col)\n        col = []\n            \n    #row\n    row = []\n    for j in range(5):\n        for i,v in enumerate(c):\n            s = f'{v}{card[j][i]}'\n            if s != 'NFREE SPACE':\n                row.append(s)\n        r.append(row)\n        row = []\n            \n    #down diag\n    dd = []\n    for i in range(5):\n        s = f'{c[i]}{card[i][i]}'\n        if s != 'NFREE SPACE':\n            dd.append(s)\n    r.append(dd)\n        \n    #up diag\n    du = []\n    for i in range(4,-1,-1):\n        s = f'{c[4-i]}{card[i][4-i]}'\n        if s != 'NFREE SPACE':\n            du.append(s)\n    r.append(du)\n    \n    for x in r:\n        if all(i in numbers for i in x):\n            return 1\n    return 0", "def bingo(c, n):\n    r=range(5)\n    q=[[(x in [int(w[1:])for w in n])or x=='FREE SPACE'for x in l]for l in c[1:]]\n    return any(all(x)for x in[l for l in q]+[[l[i]for l in q]for i in r]+[[q[i][i]for i in r]]+[[q[i][4-i]for i in r]])", "def bingo(card, numbers):\n    \n    card[3][2] = 'X'\n    parsed_num = [int(x[1:len(x)]) for x in numbers]\n    \n    for n in parsed_num:\n        card = [['X' if x == n else x for x in y] for y in card]\n    \n    if (check_rows(card)) or (check_diag2 (card)) or (check_diag1 (card)) or (check_columns (card)) is True:\n        return True\n    else:\n        return False \n    \ndef check_columns (card):\n    m = 0\n    templist = []\n    while m<5:\n        for k in range (1,6):\n            templist.append(card[k][m])\n        if templist == ['X','X','X','X','X']:\n            return True\n        else:\n            templist.clear()\n            m +=1\n            continue\n    return False\n        \ndef check_diag1 (card):\n    templist = []\n    for i in range (1,6):\n        templist.append(card[i][i-1])\n    if templist == ['X','X','X','X','X']:\n        return True\n    else:\n        return False\n\ndef check_diag2 (card):\n    templist = []\n    for i in range (0,5):\n        templist.append(card[5-i][i])\n    if templist == ['X','X','X','X','X']:\n        return True\n    else:\n        return False\n    \ndef check_rows (card):\n    for i in range (1,6): #check rows\n        if card[i] == ['X','X','X','X','X']:\n            return True\n        else:\n            continue\n    return False\n    \n\n", "def bingo(card, numbers):\n    card_copy = list(card)\n    card_copy.remove(card_copy[0])\n    card_copy[2][2] = 0\n    \n    numbers = [int(x[1:]) for x in numbers]\n    \n    marked_card = [[0 if card_copy[row][col] == 0 else 0 if card_copy[row][col] in numbers else 1 for col in range(5)] for row in range(5)]\n    \n    for row in range(5):\n      if sum(marked_card[row]) == 0:\n        return True\n    \n    for col in range(5):\n      if sum([marked_card[row][col] for row in range(5)]) == 0:\n        return True\n        \n    if sum([marked_card[position][position] for position in range(5)]) == 0:\n      return True\n      \n    if sum([marked_card[row][col] for col in range(5) for row in range(5) if (row + col) == 4]) == 0:\n      return True\n      \n    return False\n    \n"]