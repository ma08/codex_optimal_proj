["def beggars(values, n):\n    return [sum(values[i::n]) for i in range(n)]", "def beggars(a, n):    \n    return [sum(a[i::n]) for i in range(n)]", "def beggars(values, n):\n    if n == 0:\n        return []\n    i=0\n    take=[]\n    for x in range(n):\n        take.append(0)\n    for val in values:\n        take[i%n]=take[i%n]+val\n        i= i + 1\n    return take    ", "def beggars(values: list, n: int):\n    if n < 1: return []\n\n    beggars = [0] * n\n    for i, v in enumerate(values):\n        beggars[i % n] += v\n\n    return beggars", "def beggars(values, n):\n    if n<1: return []\n    k = [0]*n\n    for i in range(len(values)):\n        k[i%n]+=values[i]\n    return k", "def beggars(values, n):\n    return [sum(values[k::n]) for k in range(n)]", "def beggars(values, n):\n    #your code here\n    if n == 0:\n        return []\n    newe = list(0 for i in range(n)) \n    count = 0\n    for i in values:\n        newe[(count % n)] += i\n        count += 1\n    return newe   ", "def beggars(values, n):\n    return [sum(values[i] for i in range(j, len(values), n)) for j in range(n)]", "beggars=lambda values,n:[sum(values[i::n]) for i in range(n)]", "def beggars(values, n):\n    retList = [0]*n\n    if not n:\n        return []\n    for idx,i in enumerate(values):\n        retList[idx%n] += i\n    return retList\n"]