["def solution(number):\n    return sum(x for x in range(number) if x % 3 == 0 or x % 5 == 0)\n", "def solution(number):\n    sum = 0\n    for i in range(number):\n        if (i % 3) == 0 or (i % 5) == 0:\n            sum += i\n    return sum", "def solution(number):\n  return sum([x for x in range(number) if x % 3 == 0 or x % 5 == 0])", "from math import floor\n\ndef sum_to_n(n):\n    return n * (n + 1) / 2\n\ndef sum_of_multiples(k, n):\n    return k * sum_to_n(floor(n / k))\n\ndef solution(number):\n    number = number - 1\n    return (sum_of_multiples(3, number) + \n        sum_of_multiples(5, number) - \n        sum_of_multiples(3 * 5, number))", "def solution(number):\n  import itertools\n  return sum(set(itertools.chain(range(0, number, 3), range(0, number, 5))))", "def solution(number):\n    return sum([i for i in range(number) if i % 3 == 0 or i % 5 == 0])", "def solution(number):\n  return sum(i for i in range(number) if i%5==0 or i%3==0)", "class Multiples:\n    def __init__(self, maximum):\n        self.maximum = maximum\n\n    def sum(self, base):\n        count = self.maximum // base + 1\n        last = base * (count - 1)\n        return count * last // 2\n\ndef solution(number):\n    multiples = Multiples(number - 1)\n    return multiples.sum(3) + multiples.sum(5) - multiples.sum(15)", "def solution(number):\n    return sum(x for x in range(number) if not x%3 or not x%5)", "def solution(number):\n    multiples = []\n    sum = 0\n    for i in range(number):\n        if i % 3 == 0 or i % 5 == 0:\n            multiples.append(i)\n    for x in multiples:\n        sum += x\n    return(sum)\n", "def solution(number):\n  x = number-1\n  f = lambda n: n*(n+1)//2\n  return 3*f(x//3) + 5*f(x//5) - 15*f(x//15)", "def solution(number):\n    def s(m):\n        n = (number - 1) // m\n        return n * m * (n + 1) // 2\n    return s(3) + s(5) - s(15)", "def solution(number):\n  return sum(set(range(0,number,3)) | set(range(0,number,5)))", "def solution(number):\n    number -= 1\n    f = lambda d, n: (d + n * d) * n / 2\n    return f(3, number // 3) + f(5, number // 5) - f(15, number // 15)", "solution = lambda n: sum(i for i in range(n) if i % 3 == 0 or i % 5 == 0)", "def solution(number):\n  return sum(range(0, number, 3)) + sum(range(0, number, 5)) - sum(range(0, number, 15))", "def solution(number):\n    return sum(num if (num % 3 == 0) or (num % 5 == 0) else 0 for num in range(number))"]