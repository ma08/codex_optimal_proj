["from math import factorial as fact\n\ndef sum_arrangements(n):\n    s = str(n)\n    perms   = fact(len(s)-1)\n    coefAll = int('1'*len(s))\n    return coefAll*perms*sum(map(int,s))", "def sum_arrangements(num):\n    import math\n    numLength = len(str(num))\n    scaleFactor = int(\"1\"*numLength) * math.factorial(numLength - 1)\n    ans = 0\n    for i in range(numLength):\n        num, digit = divmod(num, 10)\n        ans = ans + digit\n    return ans * scaleFactor", "from math import factorial\n\ndef sum_arrangements(n):\n    s = str(n)\n    return (10**len(s)-1)//9*sum(map(int,s))*factorial(len(s)-1)", "def sum_arrangements(num):\n    num = str(num)\n    n = 1\n    number = len(num)\n    for i in range(1,number):\n        n *= i\n    return int('1'*number)*sum(int(i) for i in num)*n\n    \n    \n", "#A reason that it can be up to 10**10000 is so itertools.permutations will not work\nfrom math import factorial\n\ndef sum_arrangements(num):\n    return int(''.join([\"1\" for i in range(len(str(num)))]))*sum([int(i) for i in str(num)])*factorial(len(str(num))-1)", "from math import factorial\n\ndef sum_arrangements(num):\n    return sum(int(_) for _ in str(num)) * factorial(len(str(num)) - 1) * int('1' * len(str(num)))", "from math import factorial\n\ndef sum_arrangements(num):\n\n    snum = str(num)\n    leng = len(snum)\n    total = 0\n    c = factorial(leng - 1) * sum(map(int, snum))\n\n    for i in range(leng):\n        total += c\n        c *= 10\n\n    return total", "from math import factorial\n\n\ndef sum_arrangements(num):\n    ns = list(map(int, str(num)))\n    mul = factorial(len(ns) - 1)\n    return int(\"1\" * len(ns)) * sum(ns) * mul", "def sum_arrangements(num):\n    s = str(num)\n    from math import factorial\n    return factorial(len(s)-1)*int(\"1\"*len(s))*sum(int(i) for i in s)", "import itertools, math\ndef sum_arrangements(num):\n    return math.factorial(len(str(num))-1)*(int(\"1\"*len(str(num))))*sum(int(i) for i in str(num))"]