["from fractions import gcd\n\ndef fraction(a,b):\n    return (a+b)//gcd(a,b)", "from math import gcd\ndef fraction(a, b):\n    return a/gcd(a,b) + b/(gcd(a,b))", "\ndef fraction(a, b):\n    from math import gcd\n    return (a + b) / gcd(a, b)", "from fractions import gcd\n\ndef fraction(a, b):\n    d = gcd(a, b)\n    return a//d + b//d", "from fractions import Fraction\ndef fraction(a, b):\n  #coding and coding..\n  f = Fraction(a,b)\n  return f.numerator + f.denominator", "from fractions import Fraction\ndef fraction(a, b):\n    return Fraction(a,b).denominator+Fraction(a,b).numerator", "import fractions\ndef fraction(a, b):\n    return sum([int(s) for s in str(fractions.Fraction(a,b)).split('/')])", "def fraction(a, b):\n  #coding and coding..\n  c=a+b\n  if b>a:\n      a,b=b,a\n  while b!=0:\n      a,b=b,a%b\n  return int(c/a)", "def fraction(a, b):\n    # check if one arguments can serve as the denominator\n    if max([a, b]) % min([a, b]) == 0:\n        return (a + b) // min([a, b])\n    # otherwise start from the half of the smallest argument and search it\n    else:\n        x = min([a, b]) // 2\n        while True:\n            if a % x == 0 and b % x == 0:\n                break\n            x -= 1\n        return (a + b) // x", "import math\n\ndef fraction(a, b):\n    g = math.gcd(a, b)\n    return a / g + b / g"]