["def motif_locator(sequence, motif):\n    res, i = [], 0\n    while True:\n        i = sequence.find(motif, i) + 1\n        if not i: return res\n        res.append(i)", "def motif_locator(sequence, motif):\n    return [i+1 for i,c in enumerate(sequence) if sequence[i:i+len(motif)] == motif]", "def motif_locator(seq, motif):\n    dex = 0\n    result = []\n    while True:\n        dex = seq.find(motif, dex)\n        if dex == -1:\n            return result\n        dex += 1\n        result.append(dex)", "def motif_locator(s, motif):\n    return [i + 1 for i in range(len(s) - len(motif) + 1) if s[i:].startswith(motif)]", "from itertools import count\n\ndef motif_locator(sequence, motif):\n    if len(motif) > len(sequence): return []\n    n = len(motif)\n    target_hash = sum(map(ord, motif)) \n    hashish = sum(map(ord, sequence[:n]))\n    res = []\n    for i in count():\n        if hashish == target_hash and sequence[i:i+n] == motif:\n            res.append(i+1)\n        if i + n == len(sequence):\n            return res\n        hashish += ord(sequence[i+n]) - ord(sequence[i])", "import re\n\ndef motif_locator(sequence, motif):\n    return [m.start() + 1 for m in re.finditer('{}(?={})'.format(motif[0], motif[1:]), sequence)]", "def motif_locator(sequence, motif):\n    start=0\n    arr=[]\n    while True :\n        index=sequence.find(motif,start)\n        if index ==-1:\n            break\n        start =index+1\n        arr.append(index+1)\n    return arr", "def motif_locator(s, motif):\n    return [i+1 for i, c in enumerate(s) if s[i:i + len(motif)] == motif]", "motif_locator = lambda s,m: sorted(list({s.find(m, e)+1 for e, i in enumerate(range(len(s))) if s.find(m, e) != -1}))", "def motif_locator(s, m):\n    return [i+1 for i in range(len(s)-len(m)+1) if s[i:i+len(m)]==m]"]