["def recaman(n):\n    series, last = {0}, 0\n    for i in range(1, n+1): \n        test = last - i\n        last = last + i if test < 0 or test in series else test\n        series.add(last)     \n\n    return last", "inseq, seq = {0}, [0]\nfor n in range(1, 10 ** 6):\n    x = seq[-1] - n\n    if x < 0 or x in inseq: x += 2*n\n    seq.append(x)\n    inseq.add(x)\n\nrecaman = seq.__getitem__", "def recaman(n):\n    s = set()\n    prev = 0\n    curr = 0\n    for i in range(1, n + 1):\n        curr = prev - i\n        if curr <= 0 or curr in s:\n            curr = prev + i\n        s.add(curr)\n        prev = curr\n    return curr", "buf = [0]\n\ndef recaman(n):\n    while len(buf)<=n:\n        x = buf[-1]; v = x-len(buf)\n        buf.append(v if 0<=v and v not in buf else x+len(buf))\n    return buf[n]\n", "def recaman(n):\n    seq = [0]\n    seen = {0}\n    for i in range(1, n+1):\n        x = seq[-1] - i\n        if x < 0 or x in seen:\n            x = seq[-1] + i\n        seq.append(x)\n        seen.add(x)\n    return seq[-1]\n", "RECA = [0]\nseen = {0}\nlast = 0\n\nfor n in range(1, 30000):\n    new = last - n\n    if new <= 0 or new in seen:\n        new = last + n\n    RECA.append(new)\n    seen.add(new)\n    last = new\ndel seen\n\n\ndef recaman(n):\n    return RECA[n]", "def recaman(n):\n    k, r, s = 0, 0, 0\n    S = {0}\n    while n != 0:\n        r = k + 1\n        if s - r < 0 or s - r in S:\n            s += r\n        else:\n            s -= r\n        k += 1\n        n -= 1\n        S.add(s)\n    return s", "def recaman(n):\n    a, i = 0, 0\n    k = {0}\n    while i<=n:\n        x = [a+i,a-i][(a-i) > 0 and a-i not in k]\n        k.add(x)\n        a = x\n        i += 1\n    return x      ", "def recaman(n):\n    seq={0}\n    cur=0\n    for i in range(1,n+1):\n        cur+=[i,-i][cur-i not in seq and cur-i>0]\n        seq.add(cur)\n    return cur        ", "R=[0]\nfor i in range(1,30000):      \n    if R[i-1]-i>0 and      R[i-1]-i     not in R:\n            R.append(  R[i-1]-i )\n    else:\n            R.append(   R[i-1]+i )\ndef recaman(n):\n    return R[n]"]