["def grille(msg, code):\n    return ''.join(msg[-1-i] for i,c in enumerate(bin(code)[::-1]) if c == '1' and i < len(msg))[::-1]", "def grille(message, code):\n    binary = bin(code)[2:][-len(message):].zfill(len(message))\n    return ''.join(char for char, code in zip(message, binary) if code == '1')", "def grille(m, c):\n    return \"\".join(i[0] for i in zip(m[::-1],bin(c)[2:][::-1]) if i[1]==\"1\")[::-1]", "def grille(message, code):\n    binary = bin(code)[2:][::-1]\n    return(''.join([j for i, j in enumerate(message[::-1]) if i < len(binary) and binary[i] == '1'])[::-1])\n", "def grille(message, code):\n    l = len(message)\n    return \"\".join(c for c, b in zip(message, f\"{code:{l}b}\"[-l:]) if b == \"1\")", "from itertools import compress\n\ndef grille(message, code):\n    l = len(message)\n    code = list(map(int, bin(code)[2:].zfill(l)))\n    return ''.join(list(compress(message, [code, code[l:]][l <len(code)] )))\n", "from itertools import compress\n\ndef grille(message, code):\n    n = len(message)\n    grille = map(int, '{:0{}b}'.format(code, n)[-n:])\n    return ''.join(compress(message, grille))", "def grille(message, code):\n    binary = str(bin(code)[2:].zfill(len(message)))\n    print(str(bin(code)[2:]))\n    i = 0\n    decoded = \"\"\n    if( len(binary) > len(message) ):\n        while ( i < len(message) ):\n            if ( binary[i + (len(binary) - len(message))] == '1' ):\n                decoded += message[i]\n            i += 1\n    while ( i < len(message) ):\n        if ( binary[i] == '1' ):\n            decoded += message[i]\n        i += 1\n    return decoded", "def grille(s, code):\n    return ''.join(c for c, k in zip(s[::-1], bin(code)[2:][::-1]) if k == '1')[::-1]", "def grille(message, code):\n    return ''.join(c for i, c in enumerate(message) if 1<<(len(message)-i-1) & code)"]