["import sys\ninput = sys.stdin.readline\n\nQ = int(input())\nfor _ in range(Q):\n    N = int(input())\n    A = [int(a) for a in input().split()]\n    X = {}\n    for a in A:\n        if a in X:\n            X[a] += 1\n        else:\n            X[a] = 1\n    Y = []\n    for x in X:\n        Y.append(X[x])\n    Y = sorted(Y)[::-1]\n    prev = Y[0] + 1\n    su = 0\n    for i in range(len(Y)):\n        ne = min(prev-1, Y[i])\n        if ne <= 0:\n            break\n        su += ne\n        prev = ne\n    print(su)\n\n", "import sys\nfrom collections import Counter\nimport itertools\n\ndef input():\n    return sys.stdin.readline().strip()\n\ndef dinput():\n    return int(input())\n\ndef tinput():\n    return input().split()\n\ndef rinput():\n    return map(int, tinput())\n\ndef main():\n    input()\n    q = {}\n    for i in tinput():\n        if i not in q:\n            q[i] = 1\n        else:\n            q[i] = q[i] + 1\n    r = []\n    for i in q:\n        r.append(q[i])\n    r.sort()\n    y = 0\n    t = []\n    for i in range(len(r)):\n        while r[i] in t and r[i] > 0:\n            r[i] -= 1\n        t.append(r[i])\n        y += t[i]\n    print(y)\n        \nfor i in range(int(input())):\n    main()", "q = int(input())\nfor _ in range(q):\n    n = int(input())\n    a = list(map(int, input().split()))\n    u = [0] * n\n    for i in range(n):\n        u[a[i] - 1] += 1\n    u.sort(reverse = 1)\n    k = u[0]\n    ans = k\n    for i in range(1, n):\n        if u[i] >= u[i - 1]:\n            u[i] = u[i - 1] - 1\n            if u[i] <= 0:\n                break\n        ans += u[i]\n    print(ans)\n    #print(u)\n", "import sys\ninput = sys.stdin.readline\nfrom collections import Counter\n\nQ=int(input())\nfor testcase in range(Q):\n    n=int(input())\n    A=Counter((list(map(int,input().split()))))\n    S=sorted(list(A.values()),reverse=True)\n\n    #print(A)\n    #print(S)\n    NOW=10**10\n\n    ANS=0\n    for s in S:\n        M=min(NOW,s)\n        ANS+=M\n        NOW=M-1\n\n        if NOW==0:\n            break\n\n    print(ANS)\n        \n\n    \n", "SS = []\na = int(input())\nfor i in range(a):\n    x = int(input())\n    A = list(map(int, input().split()))\n    D = {}\n    for j in range(x):\n        if A[j] in D:\n            D[A[j]] += 1\n        else:\n            D[A[j]] = 1\n    B = []\n    for key in D:\n        B.append(D[key])\n    B.sort(reverse=True)\n    w = B[0]\n    for j in range(1, len(B)):\n        if B[j] < B[j - 1] - 1:\n            w += max(0, B[j])\n        else:\n            B[j] = B[j - 1] - 1\n            w += max(0, B[j - 1] - 1)\n    SS.append(w)\nfor s in SS:\n    print(s)", "for i in range(int(input())):\n    n = int(input())\n    sort_col = [0] * (n + 1)\n    col_csort = [0] * (n + 1)\n    t = 0\n    for el in map(int, input().split()):\n        col_csort[sort_col[el]] -= 1\n        sort_col[el] += 1\n        col_csort[sort_col[el]] += 1\n        t = max(sort_col[el], t)\n    cou = 0\n    for j in range(t, 0, -1):\n        if col_csort[j]:\n            cou += j\n            col_csort[j] -= 1\n            if col_csort[j]:\n                col_csort[j - 1] += col_csort[j]\n    print(cou)\n", "T = int(input())\ntest = 0\nwhile test<T:\n    \n    N = int(input())\n    \n    arr = input()\n    arr = [int(num) for num in arr.split(' ')]\n    \n    freq = {}\n    \n    for num in arr:\n        if num not in freq:\n            freq[num] = 1\n        else:\n            freq[num] += 1\n          \n    res = 0\n    \n    k = list(freq.values())\n    k.sort(reverse=True)\n    #print(k)\n    m = max(k)\n    \n    idx = 0\n    while m>0 and idx<len(k):\n        m = min(m,k[idx])\n        res += m\n        m -= 1\n        idx += 1\n        \n    print(res)\n        \n    test += 1", "for q in range(int(input())):\n    n = int(input())\n    A = list(map(int, input().split()))\n    G = {}\n    for i in A:\n        if i not in G:\n            G[i] = 0\n        G[i] += 1\n    B = []\n    for i in G:\n        B.append(G[i])\n    B.sort(reverse=True)\n    cnt = 0\n    op = B[0] + 1\n    for i in B:\n        if i >= op:\n            op -= 1\n            cnt += max(0, op)\n        else:\n            op = i\n            cnt += i\n        if op == 0:\n            break\n    print(cnt)", "import sys\nt=int(input())\nfor _ in range(t):\n    n=int(sys.stdin.readline())\n    a=list(map(int,sys.stdin.readline().split()))\n    d={}\n    for i in a:\n        d[i]=d.get(i,0) + 1\n    b=sorted(list(((list(d.values())))))\n    ans=b[-1]\n    ans1=b[-1]\n    # print(b)\n    # print(ans,ans1)\n    for i in range(len(b)-2,-1,-1):\n        # print(\" \",b[i])\n        # print(\"ans\",ans,ans1,b[i])\n        ans1=min(ans1-1,b[i])\n        if ans1>0:\n            ans+=ans1\n        else:\n            break\n    print(ans)        \n            \n    \n", "#   In this template you are not required to write code in main\n\nimport sys\ninf = float(\"inf\")\n\n#from collections import deque, Counter, OrderedDict,defaultdict\n#from heapq import nsmallest, nlargest, heapify,heappop ,heappush, heapreplace\n#from math import ceil,floor,log,sqrt,factorial,pow,pi,gcd\n#from bisect import bisect_left,bisect_right\n\nabc='abcdefghijklmnopqrstuvwxyz'\nabd={'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9, 'k': 10, 'l': 11, 'm': 12, 'n': 13, 'o': 14, 'p': 15, 'q': 16, 'r': 17, 's': 18, 't': 19, 'u': 20, 'v': 21, 'w': 22, 'x': 23, 'y': 24, 'z': 25}\nmod,MOD=1000000007,998244353\nvow=['a','e','i','o','u']\ndx,dy=[-1,1,0,0],[0,0,1,-1]\n\ndef get_array(): return list(map(int, sys.stdin.readline().strip().split()))\ndef get_ints(): return map(int, sys.stdin.readline().strip().split())\ndef input(): return sys.stdin.readline().strip()\n\nq=int(input())\nwhile q>0:\n    n=int(input())\n    Arr=get_array()\n    mydict=dict()\n    for i in Arr:\n        mydict[i]=mydict.get(i,0)+1\n    myset=set()\n    count=0\n    for i in mydict:\n        if mydict[i] not in myset:\n            count+=mydict[i]\n            myset.add(mydict[i])\n        else:\n            z=mydict[i]\n            for i in range(z,0,-1):\n                if i not in myset:\n                    count+=i\n                    myset.add(i)\n                    break\n    print(count)\n    q-=1", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport time\n\nq   = int(input())\nans = []\n\nstart = time.time()\n\nfor i in range(q):\n    n   = int(input())\n    a   = [int(j) for j in input().split()]\n    d   = [ 0 for j in range(n)]\n    for j in range(n):\n        d[a[j]-1]+=1\n    d.sort(reverse=True)\n    s = d[0]\n    last = d[0]\n    for j in range(1, n):\n        if last > d[j]:\n            s += d[j]\n            last = d[j]\n        else:\n            last -= 1\n            if last <= 0:\n                break\n            s += last\n    ans.append(s)\n\nfor i in range(q):\n    print(ans[i])\nfinish = time.time()\n#print(finish - start)\n", "q=int(input())\nfor i in range(q):\n    n=int(input())\n    a=[int(x) for x in input().split()]\n    dic={}\n    b=[]\n    counter=0\n    for item in a:\n        if item not in dic:\n            dic[item]=1\n        else:\n            dic[item]+=1\n    for item in dic:\n        b.append(dic[item])\n    b.sort(reverse=True)\n    x=b[0]+1\n    for item in b:\n        x=min(x-1,item)\n        counter+=max(x,0)\n    print(counter)\n        \n            \n", "import sys\ninput=sys.stdin.readline\ndef ecount(X):\n  c,ans=1,[]\n  for i in range(len(X)-1):\n    if X[i]==X[i+1]:c+=1\n    else:\n      ans.append(c);c=1\n  ans.append(c)\n  return ans\nfor i in range(int(input())):\n    n=int(input())\n    a=list(map(int,input().split()))\n    a.sort()\n    b=ecount(a)\n    b.sort(reverse=1)\n    ans=b[0]\n    m=b[0]\n    for i in b[1:]:\n        m=min(max(0,m-1),i)\n        ans+=m\n    print(ans)", "t = int(input())\n\nwhile t > 0:\n    n = int(input())\n    a = list(map(int,input().split()))\n\n    P = (1 + n) * [0]\n    for i in a:\n        P[i] += 1\n\n    b = []\n    for i in range(1 + n):\n        if P[i] != 0:\n            b.append(P[i])\n\n    b.sort()\n\n    m = len(b) - 1\n    ans = 0\n    take = b[m]\n    \n    for i in range(m, -1, -1):\n        if take < 0:\n            break\n        if 0 < b[i] <= take:\n            ans += b[i]\n            take = b[i] - 1\n        elif b[i] > take:\n            ans += take\n            take -= 1\n\n    print(ans)\n    \n    t -= 1", "#   In this template you are not required to write code in main\n\nimport sys\ninf = float(\"inf\")\n\n#from collections import deque, Counter, OrderedDict,defaultdict\n#from heapq import nsmallest, nlargest, heapify,heappop ,heappush, heapreplace\n#from math import ceil,floor,log,sqrt,factorial,pow,pi,gcd\n#from bisect import bisect_left,bisect_right\n\nabc='abcdefghijklmnopqrstuvwxyz'\nabd={'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9, 'k': 10, 'l': 11, 'm': 12, 'n': 13, 'o': 14, 'p': 15, 'q': 16, 'r': 17, 's': 18, 't': 19, 'u': 20, 'v': 21, 'w': 22, 'x': 23, 'y': 24, 'z': 25}\nmod,MOD=1000000007,998244353\nvow=['a','e','i','o','u']\ndx,dy=[-1,1,0,0],[0,0,1,-1]\n\ndef get_array(): return list(map(int, sys.stdin.readline().strip().split()))\ndef get_ints(): return map(int, sys.stdin.readline().strip().split())\ndef input(): return sys.stdin.readline().strip()\n\nQ=int(input())\nwhile Q>0:\n    mydict1 = dict()\n    n=int(input())\n    a=get_array()\n    for j in a:\n        mydict1[j]=mydict1.get(j,0)+1\n    ct = 0\n    myset1=set()\n    for i in mydict1:\n        if mydict1[i] not in myset1:\n            ct+=mydict1[i]\n            myset1.add(mydict1[i])\n        else:\n            z=mydict1[i]\n            for i in range(z,0,-1):\n                if i not in myset1:\n                    ct+=i\n                    myset1.add(i)\n                    break\n    print(ct)\n    Q-=1", "T=int(input())\nfor i in range(T):\n    n=int(input())\n    s=[list(map(int,input().split()))]\n    p={}\n    q={}\n    for it in s:\n        for j in range(n):\n            if it[j] in q:\n                q[it[j]]+=1\n            else:\n                q[it[j]]=1\n    for j in range(1,n+1):\n        if j in q:\n            if q[j] in p:\n                p[q[j]]+=1\n            else:\n                p[q[j]]=1\n    x=n\n    ans=0\n    cnt=0\n    while x>0:\n        if x in p:\n            cnt+=p[x]\n        if cnt>0:\n            ans+=x\n            cnt-=1\n        x-=1\n    print(ans)\n    p.clear()\n    q.clear()\n    s.clear()\n", "q = int(input())\nfor j in range(q):\n    n = int(input())\n    a = list(map(int,input().split()))\n    b = [0]*n\n    for i in a:\n        b[i-1] += 1\n    b.sort()\n    k = b[n-1]+1\n    ans = 0\n    for i in range(n-1,-1,-1):\n        if b[i] >= k:\n            b[i] = k-1\n        k = b[i]\n        ans += max(0,b[i]) \n    print(ans)", "from collections import *\nfrom sys import stdin\n\ndef input():\n    return stdin.readline()\n\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    aas = list(map(int, input().split()))\n    counts = [0]*(n+1)\n    for a in aas:\n        counts[a] += 1\n    counts.sort(reverse=True)\n    total = 0\n    mx = counts[0]\n    for c in counts:\n        inc = min(mx, c)\n        if inc == 0:\n            break\n        mx = inc - 1\n        total += inc\n    print(total)\n", "from collections import Counter\nt=int(input())\nANS = []\nfor _ in range(t):\n    n=int(input()) \n    a=list(map(int,input().split()))\n    freq = sorted(list(dict(Counter(a)).values()),reverse = True)\n    i = 1\n    ans = freq[0]\n    last = freq[0]\n    while i < len(freq) :\n        val = freq[i]\n        if val >= last:\n            val = last -1 \n        if(val<=0):\n            break\n        else:\n            ans+=val\n            i+=1\n            last = val\n    ANS.append(ans)\nfor i in ANS:\n    print(i) \n", "q = int(input())\n\nfor _ in range(q):\n\n\tn = int(input())\n\ta = sorted(list(map(int, input().split())))\n\n\ts = []\n\tlast = a[0]\n\tcount = 1\n\tfor i in range(1, n):\n\t\tif a[i] != last:\n\t\t\ts.append(count)\n\t\t\tlast = a[i]\n\t\t\tcount = 0\n\t\tcount += 1\n\ts.append(count)\n\n\ts.sort()\n\n\tanswer = s[-1]\n\n\tfor i in range(len(s) - 2, -1, -1):\n\t\tif s[i] >= s[i + 1]:\n\t\t\ts[i] = s[i + 1] - 1\n\t\tif not s[i]:\n\t\t\tbreak\n\t\tanswer += s[i]\n\n\tprint(answer)\n", "'''input\n3\n8\n1 4 8 4 5 6 3 8\n16\n2 1 3 3 4 3 4 4 1 3 2 2 2 4 1 1\n9\n2 2 4 4 4 7 7 7 7\n'''\nfrom sys import stdin, setrecursionlimit\nfrom itertools import combinations\nimport collections\n\ndef doc(s):\n    if hasattr(s, '__call__'):\n        s = s.__doc__\n    def f(g):\n        g.__doc__ = s\n        return g\n    return f\n\nclass heapdict(collections.MutableMapping):\n    __marker = object()\n\n    @staticmethod\n    def _parent(i):\n        return ((i - 1) >> 1)\n\n    @staticmethod\n    def _left(i):\n        return ((i << 1) + 1)\n\n    @staticmethod\n    def _right(i):\n        return ((i+1) << 1)    \n    \n    def __init__(self, *args, **kw):\n        self.heap = []\n        self.d = {}\n        self.update(*args, **kw)\n\n    @doc(dict.clear)\n    def clear(self):\n        self.heap.clear()\n        self.d.clear()\n\n    @doc(dict.__setitem__)\n    def __setitem__(self, key, value):\n        if key in self.d:\n            self.pop(key)\n        wrapper = [value, key, len(self)]\n        self.d[key] = wrapper\n        self.heap.append(wrapper)\n        self._decrease_key(len(self.heap)-1)\n\n    def _min_heapify(self, i):\n        l = self._left(i)\n        r = self._right(i)\n        n = len(self.heap)\n        if l < n and self.heap[l][0] < self.heap[i][0]:\n            low = l\n        else:\n            low = i\n        if r < n and self.heap[r][0] < self.heap[low][0]:\n            low = r\n\n        if low != i:\n            self._swap(i, low)\n            self._min_heapify(low)\n\n    def _decrease_key(self, i):\n        while i:\n            parent = self._parent(i)\n            if self.heap[parent][0] < self.heap[i][0]: break\n            self._swap(i, parent)\n            i = parent\n\n    def _swap(self, i, j):\n        self.heap[i], self.heap[j] = self.heap[j], self.heap[i]\n        self.heap[i][2] = i\n        self.heap[j][2] = j\n\n    @doc(dict.__delitem__)\n    def __delitem__(self, key):\n        wrapper = self.d[key]\n        while wrapper[2]:\n            parentpos = self._parent(wrapper[2])\n            parent = self.heap[parentpos]\n            self._swap(wrapper[2], parent[2])\n        self.popitem()\n\n    @doc(dict.__getitem__)\n    def __getitem__(self, key):\n        return self.d[key][0]\n\n    @doc(dict.__iter__)\n    def __iter__(self):\n        return iter(self.d)\n\n    def popitem(self):\n        \"\"\"D.popitem() -> (k, v), remove and return the (key, value) pair with lowest\\nvalue; but raise KeyError if D is empty.\"\"\"\n        wrapper = self.heap[0]\n        if len(self.heap) == 1:\n            self.heap.pop()\n        else:\n            self.heap[0] = self.heap.pop(-1)\n            self.heap[0][2] = 0\n            self._min_heapify(0)\n        del self.d[wrapper[1]]\n        return wrapper[1], wrapper[0]    \n\n    @doc(dict.__len__)\n    def __len__(self):\n        return len(self.d)\n\n    def peekitem(self):\n        \"\"\"D.peekitem() -> (k, v), return the (key, value) pair with lowest value;\\n but raise KeyError if D is empty.\"\"\"\n        return (self.heap[0][1], self.heap[0][0])\n\ndel doc\n__all__ = ['heapdict']\n\n\ndef check(num, arr):\n\tprint(num)\n\tfor i in range(len(arr)):\n\t\tif abs(arr[i] - num) <= k:\n\t\t\tpass\n\t\telse:\n\t\t\treturn False\n\treturn True\n\n\ndef get_heap(arr, n):\n\tmydict = dict()\n\tfor i in arr:\n\t\tif i in mydict:\n\t\t\tmydict[i] +=1 \n\t\telse:\n\t\t\tmydict[i] = 1\n\n\tmheap = heapdict()\n\tfor i in mydict:\n\t\tmheap[i] = -mydict[i]\n\treturn mheap\n\n\n# main starts\nq = int(stdin.readline().strip())\nfor _ in range(q):\n\tn = int(stdin.readline().strip())\n\tarr = list(map(int, stdin.readline().split()))\n\tmheap = get_heap(arr, n)\n\tt, value = mheap.popitem()\n\tnum = -value\n\tans = num\t\n\twhile len(mheap) > 0 and num > 0:\n\t\tnum -= 1\n\t\tt, value = mheap.popitem()\n\t\tvalue = -value\n\t\tif value >= num:\n\t\t\tans += num\n\t\telse:\n\t\t\tnum = value\n\t\t\tans += num\n\tprint(ans)\n\n\n", "import sys\nfor _ in range(int(input())):\n    n=int(sys.stdin.readline())\n    a=list(map(int,sys.stdin.readline().split()))\n    d={}\n    for i in range(n):\n        if a[i] in d:\n            d[a[i]]+=1\n        else:\n            d[a[i]]=1\n    #print(d)\n    b=list(dict.values(d))\n    c=[0]*n\n    ans=0\n    if b[0]==n:\n        print(n)\n    else:\n        for i in range(len(b)-1,-1,-1):\n            if c[b[i]]==0:\n                ans+=b[i]\n                c[b[i]]=1\n                #print(\"adfasf\")\n            else:\n                while c[b[i]]==1:\n                    b[i]-=1\n                c[b[i]]=1\n                c[0]=0\n                ans+=b[i]\n            #print(b[i])\n        print(ans)"]