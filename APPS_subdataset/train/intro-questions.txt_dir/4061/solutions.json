["from fractions import gcd\n\ndef seq():\n    i, a, g = 1, 7, 1\n    while 1:\n        yield i, a, g\n        i += 1\n        g = gcd(i, a)\n        a += g\n\ndef count_ones(n):\n    return sum(g == 1 for _, (i, a, g) in zip(range(n), seq()))\n\ndef p(n):\n    seen = set()\n    for i, a, g in seq():\n        if not n: break\n        if g > 1 and g not in seen:\n            n -= 1\n            seen.add(g)\n            yield g\n\ndef max_pn(n):\n    return max(p(n))\n\ndef an_over(n):\n    for i, a, g in seq():\n        if not n: break\n        if g > 1:\n            n -= 1\n            yield a / i\n\ndef an_over_average(n):\n    return sum(an_over(n)) / n", "from fractions import gcd\nfrom sys import maxsize\n\ndef an(length):\n  current = 7\n  for index in range(length):\n    yield current\n    current += gcd(index + 2, current)\n\ndef gn(length):\n  previous = False\n  for current in an(length):\n    if previous:\n      yield current - previous\n    else:\n      yield 1\n    previous = current\n\ndef pn(length):\n  seen = set()\n  count = 0\n  for current in gn(maxsize):\n    if current != 1 and current not in seen:\n      seen.add(current)\n      count += 1\n      yield current\n    if count == length:\n      break\n\ndef max_pn(length):\n  return max(pn(length))\n\ndef an_over(length):\n  count = 0\n  for i, (a, g) in enumerate(zip(an(maxsize), gn(maxsize))):\n    if g != 1:\n      count += 1\n      yield a / (i + 1)\n    if count == length:\n      break\n\ndef an_over_average(length):\n  return sum(an_over(length)) / length\n\ndef count_ones(length):\n  count = 0\n  for x in gn(length):\n    if x == 1:\n      count += 1\n  return count", "def count_ones(n):\n    a, ones = 7, 1\n    for i in range(2, n+1):\n        b = a + gcd(i, a)\n        if b == a + 1: ones += 1\n        a = b\n\n    return ones\n\ndef max_pn(n):\n    a, p, i = 7, {1}, 1\n    \n    while len(p) < n + 1:\n        i += 1\n        b = a + gcd(i, a)\n        p.add(b - a)\n        a = b\n    return max(p)\n\ndef an_over_average(n):\n    return 3\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a", "from math import gcd\n\na, res1, res2, memo = 6, [0], [1], {1}\nfor i in range(1, 1000000):\n    x = a + gcd(i, a)\n    a, g = x, x-a\n    res1.append(res1[-1] + (g == 1))\n    if g not in memo:\n        res2.append(max(res2[-1], g))\n        memo.add(g)\n\ncount_ones = res1.__getitem__\nmax_pn     = res2.__getitem__\nan_over_average = lambda _: 3", "from math import gcd\n\n# precalculations\nLIMIT = 10**6\n\n# an(n)\nan = [7]\nfor n in range(2, LIMIT +1):\n    an.append( an[-1] + gcd(an[-1], n) )\n\n# gn(n)\ngn = [1] + [ y-x for x, y, in zip(an, an[1:]) ]\n\n# p(n)\nprimes = []\nfor x in gn:\n    if x > 1 and x not in primes:\n        primes.append(x)\n\n\ndef count_ones(n):\n    return gn[:n].count(1)\n\ndef max_pn(n):\n    return max(primes[:n])\n\ndef an_over_average(n):\n    return 3\n", "from fractions import gcd\n\ndef gn(n):\n    prev = 7\n    i = 2\n    res = [1]\n    while (i <= n):\n        nou = prev + gcd(prev, i)\n        res.append(nou - prev)\n        prev = nou\n        i += 1\n    return res\n\ndef count_ones(n):\n    a = [x for x in gn(n) if x == 1]\n    return len(list(a))\n\ndef pn(n):\n    prev = 7\n    i = 2\n    res = []\n    cnt = 0\n    while (cnt < n):\n        nou = prev + gcd(prev, i)\n        d = nou - prev\n        if ((d != 1) and (d not in res)): \n            res.append(d)\n            cnt += 1 \n        prev = nou\n        i += 1\n    return res\n\ndef max_pn(n):\n    return max(pn(n))\n\ndef an_overn(n):\n    prev = 7\n    i = 2\n    res = []\n    cnt = 0\n    while (cnt < n): \n        nou = prev + gcd(prev, i)\n        d = nou - prev\n        if (d != 1):\n            res.append(nou / i)\n            cnt += 1 \n        prev = nou\n        i += 1\n    return res\n\ndef an_over_average(n):\n    a = an_overn(n)\n    return int(sum(a) / len(a))\n", "from math import gcd\nseq = [7]\ndiff = [1]\nfor i in range(2, 100001):\n    seq.append(seq[-1] + gcd(i, seq[-1]))\n    diff.append(seq[-1] - seq[-2])\nunique = [5, 3, 11, 23, 47, 101, 7, 13, 233, 467, 941, 1889, 3779, 7559, 15131, 53, 30323, 60647, 121403, 242807, 19, 37, 17, 199, 29, 486041, 421, 972533, 577]\ncount_ones=lambda n:diff[:n].count(1)\nmax_pn=lambda n:max(unique[:n])\nan_over_average=lambda n:3*n/n", "def gcd(a, b):\n    return a if b == 0 else gcd(b, a % b)\n\ndef count_ones(n):\n    a = [6, 7]\n    for i in range(2, n + 1):\n        a.append(a[i - 1] + gcd(i, a[i - 1]))\n\n    return sum([a[i + 1] - a[i] == 1 for i in range(n)])\n\n\ndef max_pn(n):\n    a, p, i = 7, {1}, 1\n\n    while len(p) < n + 1:\n        i += 1\n        b = a + gcd(i, a)\n        p.add(b - a)\n        a = b\n    return max(p)\n\ndef an_over_average(n):\n    return 3", "from math import gcd\n\na=[7];g=[1];p=[];pn=[];ones=[1];anover=[]\n\nfor i in range(2,1000000):\n    c = gcd(a[-1],i)\n    g.append(c)\n    a.append(a[-1]+c)\n    if c!=1: \n        p.append(c)\n        if c not in pn: pn.append(c)\n        ones.append(ones[-1])\n        anover.append(a[-1]/i)\n    else:\n        ones.append(ones[-1]+1)\n\ndef count_ones(n): return ones[n-1]\ndef max_pn(n): return max(pn[:n])\ndef an_over_average(n): return 3"]