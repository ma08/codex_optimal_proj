["def duplicate_encode(word):\n    return \"\".join([\"(\" if word.lower().count(c) == 1 else \")\" for c in word.lower()])", "from collections import Counter\n\ndef duplicate_encode(word):\n    word = word.lower()\n    counter = Counter(word)\n    return ''.join(('(' if counter[c] == 1 else ')') for c in word)\n", "#This solution is O(n) instead of O(n^2) like the methods that use .count()\n#because .count() is O(n) and it's being used within an O(n) method.\n#The space complexiety is increased with this method.\nimport collections\ndef duplicate_encode(word):\n    new_string = ''\n    word = word.lower()\n    #more info on defaultdict and when to use it here:\n    #http://stackoverflow.com/questions/991350/counting-repeated-characters-in-a-string-in-python\n    d = collections.defaultdict(int)\n    for c in word:\n        d[c] += 1\n    for c in word:\n        new_string = new_string + ('(' if d[c] == 1 else ')')\n    return new_string", "def duplicate_encode(word):\n    word = word.lower()\n    return ''.join('(' if word.count(x) == 1 else ')' for x in word)", "def duplicate_encode(word):\n    \"\"\"a new string where each character in the new string is '(' \n    if that character appears only once in the original word, or ')' \n    if that character appears more than once in the original word. \n    Ignores capitalization when determining if a character is a duplicate. \"\"\"\n    word = word.upper()\n    result = \"\"\n    for char in word:\n        if word.count(char) > 1:\n            result += \")\"\n        else:\n            result += \"(\"\n            \n    return result\n", "def duplicate_encode(word):\n    new_string = \"\"\n    word = word.lower()\n    \n    for char in word:\n        new_string += (\")\" if (word.count(char) > 1) else \"(\")\n            \n    return new_string", "def duplicate_encode(word):\n    word = word.lower()\n    \n    dict = {}\n    for char in word:\n        dict[char] = ')' if char in dict else '('\n    \n    return ''.join( dict[char] for char in word )", "def duplicate_encode(word):\n    word = word.lower()\n    return ''.join([')' if word.count(char) > 1 else '(' for char in word])", "from collections import Counter\n\ndef duplicate_encode(word):\n    word = word.lower()\n    charCounts = Counter(word)\n    return ''.join(')' if charCounts[c] > 1 else '(' for c in word)"]