["from fractions import Fraction\n\ndef to_string(self):\n    n, d = self.numerator, self.denominator\n    s, w, n = \"-\" if n < 0 else \"\", *divmod(abs(n), d)\n    r = \" \".join((str(w) if w else \"\", f\"{n}/{d}\" if n else \"\")).strip()\n    return f\"{s}{r}\"\n\nFraction.__str__ = to_string\nFraction.to_decimal = lambda self: self.numerator / self.denominator", "from fractions import Fraction\n\ndef to_string(self):\n    n, d = self.numerator, self.denominator\n    s, w, n = \"-\" if n < 0 else \"\", *divmod(abs(n), d)\n    r = \" \".join((str(w) if w else \"\", f\"{n}/{d}\" if n else \"\")).strip()\n    return f\"{s}{r}\"\n\nFraction.__str__ = to_string\nFraction.to_decimal = lambda self: float(self.numerator) / self.denominator", "from fractions import Fraction, gcd\n\ndef to_string(self):\n    n, d = self.numerator, self.denominator\n    s, w, n = \"-\" if n < 0 else \"\", *divmod(abs(n), d)\n    r = \" \".join((str(w) if w else \"\", f\"{n}/{d}\" if n else \"\")).strip()\n    return f\"{s}{r}\"\n\nFraction.__str__ = to_string\nFraction.to_decimal = lambda self: float(self.numerator) / self.denominator"]