["def get_diagonale_code(grid):\n    grid = [line.split() for line in grid.split(\"\\n\")]\n    i, j, d, word = 0, 0, 1, \"\"\n    while 0 <= i < len(grid) and j < len(grid[i]):\n        if 0 <= j < len(grid[i]):\n            word += grid[i][j]\n            i, j = i + d, j + 1\n        else: i += d\n        if i == 0 or i == len(grid) - 1: d = -d\n    return word", "def get_diagonale_code(grid: str) -> str:\n    if not grid:\n        return ''\n    s=[]    \n    for line in grid.split('\\n'):\n        s.append(line.split(' '))\n    if len(s)==1:\n        return s[0][0]\n    x,y=0,0\n    m=-1\n    r=''\n    while(y<len(s[x])):\n        r+=s[x][y]\n        if x==0 or x==len(s)-1:\n            m*=-1\n        x+=m\n        y+=1\n    return r", "from itertools import takewhile,count\n\ndef get_diagonale_code(grid):\n    grid = grid.replace(' ','').split('\\n')\n    rail = len(grid)-1\n    return grid[0] if not rail else ''.join(takewhile(bool, genRail(grid,rail)))\n\ndef genRail(grid,rail):\n    for i in count():\n        n,x = divmod(i,rail)\n        row = rail-x if n&1 else x\n        yield '' if i>=len(grid[row]) else grid[row][i]", "def get_diagonale_code(grid: str) -> str:\n    grid = grid.split('\\n')\n    ret = ''\n    l , i, s = 0, 0 , 1\n    while 1:\n        try:\n            ret += grid[l][i]\n        except:\n            return ret\n        i += 2\n        l += s\n        if l == len(grid)-1 or l==0:\n            s = -s\n", "def get_diagonale_code(s):\n    out, m = [], s.splitlines()\n    d, i, j = -1, 0, 0\n    while i < len(m) and j < len(m[i]):\n        out.append(m[i][j])\n        j += 2\n        if i in (0, len(m) - 1): d = -d\n        i += d\n    return ''.join(out)", "def get_diagonale_code(grid: str) -> str:\n    if not grid:\n        return \"\"\n    lines = [l.split() for l in grid.split('\\n')]\n    row, col, word = (0, 0, \"\")\n    while col < len(lines[row]):\n        word += lines[row][col]\n        if row == 0:\n            down = True\n        if row+1 == len(lines):\n            down = False\n        row = row+1 if down else row-1\n        col += 1\n    return word\n        \n", "def get_diagonale_code(grid: str) -> str:\n    i, j, res, move, M = 0, 0, [], 1, [line.split() for line in grid.split('\\n')]\n    while i < len(M) and j < len(M[i]):\n        res.append(M[i][j])\n        move = 1 if i==0 else -1 if i==len(M)-1 else move\n        i, j = i+move, j+1\n    return ''.join(res)", "def get_diagonale_code(grid):\n    grid = [line.split() for line in grid.splitlines()]\n    d, word, N = -1, \"\", len(grid)\n    x, y = 0, 0\n    while x < N and y < len(grid[x]):\n        if x == 0 or x == N - 1:\n            d *= -1\n        word += grid[x][y]\n        x, y = x + d, y + 1\n    return word", "from itertools import count, cycle, takewhile\n\ndef get_diagonale_code(grid: str) -> str:\n    rows = grid.splitlines()\n    it = zip(cycle(rows + rows[-2:0:-1]), count(0, 2))\n    chars = (row[c] if c < len(row) else None for row, c in it)\n    return ''.join(takewhile(lambda c: c, chars))", "def generator(strings: list):\n    while True:\n        for q in strings:\n            yield q\n        for q in strings[-2: 0: -1]:\n            yield q\n        \n\ndef get_diagonale_code(grid: str) -> str:\n    strings = [q.replace(' ', '') for q in grid.split('\\n')]\n    result = []\n    for index, row in enumerate(generator(strings)):\n        if index < len(row):\n            result.append(row[index])\n        else:\n            return ''.join(result)", "def get_diagonale_code(grid: str) -> str:\n    ans=[]\n    if grid:\n      grid = [k.strip().split(\" \") for k in grid.split(\"\\n\")]\n      i=j=0\n      dir = True\n      while j <len(grid[i]):\n        ans.append(grid[i][j])\n        if i == len(grid) - 1:dir = False\n        if (i == 0): dir = True \n        i = 0 if len(grid) == 1 else i +1 if dir else i - 1\n        j+=1\n    return \"\".join(ans)\n", "def get_diagonale_code(s):\n    S=[x.split()for x in s.split('\\n')]\n    i,z,L=0,'',list(range(len(S)))\n    while 1:\n        try:\n            for j in L+L[1:-1][::-1]:z,i=z+S[j][i],i+1\n        except:return z", "def get_diagonale_code(grid: str) -> str:\n    flag=True\n    temp=grid.split(\"\\n\")\n    for i,j in enumerate(temp):\n        temp[i]=j.split()\n    res=\"\"\n    x=0\n    y=0\n    while True:\n        try:\n            res+=temp[y][x]\n            if y==len(temp)-1:\n                flag=False\n            elif y==0 and not flag:\n                flag=True\n            y+=1 if flag else -1\n            x+=1\n        except:\n            return res", "def get_diagonale_code(grid: str) -> str:\n    matrix = [i.split() for i in grid.split('\\n')]\n    x, y, flag = 0, 0, 1\n    result = ''\n    while x < len(matrix) and y < len(matrix[x]) :\n        result += matrix[x][y]\n        x, y = x + flag, y + 1\n        flag = flag if 1 < x + 1 < len(matrix) else -flag\n    return result", "def get_diagonale_code(grid: str) -> str:\n    matrix = [i.split() for i in grid.split('\\n')]\n    x, y = 0, 0\n    flag = True\n    result = ''\n    while x < len(matrix) and y < len(matrix[x]) :\n        result += matrix[x][y]\n        y += 1\n        x = x + 1 if flag else x - 1\n        flag = flag if 1 < x + 1 < len(matrix) else not flag\n    return result\n        \n        \n\n", "def get_diagonale_code(grid: str) -> str:\n    g = (grid.replace(\" \",\"\").split(\"\\n\"))\n    i, j, d, word = 0, 0, 1, \"\"\n    while 0 <= i < len(g) and j < len(g[i]):\n        if 0 <= j < len(g[i]):\n            word += g[i][j]\n            i, j = i + d, j + 1\n        else: \n            i += d\n        if i == 0 or i == len(g) - 1: \n            d = -d\n    return word", "def get_diagonale_code(grid: str) -> str:\n    grid = grid.replace(' ','').split('\\n')\n    x,y = 0,0\n    s=1\n    res=''\n    try:\n        while True:\n            print((x,y,s,grid[x][y]))\n            res+=grid[x][y]\n            y+=1\n            x+= 1 if s==1 else -1\n            if not 0<=x<len(grid):\n                s*=-1\n                x+=s*2\n    except:\n        return res\n", "def get_diagonale_code(grid: str) -> str:\n    grid = grid.split('\\n')\n    ret = ''\n    l , i, s = 0, 0 , 1\n    while 1:\n        try:\n            ret += grid[l][i]\n        except:\n            return ret\n        i += 2\n        l += s\n        if l == len(grid)-1:\n            s = -1\n        elif l <= 0:\n            s = 1\n", "def get_diagonale_code(grid: str) -> str:\n    res, grid = '', [x.split() for x in grid.splitlines()]\n    r, c, x, rows = 0, 0, 1, len(grid)\n    while -1 < r < rows and c < len(grid[r]):\n        res += grid[r][c]\n        if r + 1 == rows:\n            x = -1\n        elif r == 0:\n            x = 1\n        r += x\n        c += 1\n    return res", "def get_diagonale_code(grid: str) -> str:\n    grid = [x.split() for x in grid.splitlines()]\n    res, rows, x = '', len(grid), 1\n    r = c = 0\n    while -1 < r < rows and c < len(grid[r]):\n        res += grid[r][c]\n        if r + 1 == rows:\n            x = -1\n        elif r == 0:\n            x = 1\n        r += x\n        c += 1\n    return res"]