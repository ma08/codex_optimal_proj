["class Solution:\n     def isPalindrome(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: bool\n         \"\"\"\n         cleanlist = [c for c in s.lower() if c.isalnum()]\n         return cleanlist == cleanlist[::-1]", "class Solution:\n     def isPalindrome(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: bool\n         \"\"\"\n         s = s.lower()\n         s = [c for c in s if c.isalnum()]\n         return s == s[::-1]\n", "class Solution:\n     def isPalindrome(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: bool\n         \"\"\"\n         s = [symbol for symbol in s.lower() if  'a' <= symbol <= 'z' or '0' <= symbol <= '9']\n         \n         return s == s[::-1]", "class Solution:\n     def isPalindrome(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: bool\n         \"\"\"\n         s = s.strip().lower()\n         if s == '': return True\n         wordsR = []\n         for item in s:\n             if item.isalnum() == True:\n                 wordsR.append(item)\n         if wordsR == []: return True\n         words = wordsR[:]\n         wordsR.reverse()\n         if words == wordsR:\n             return True\n         else:\n             return False\n             \n", "class Solution:\n     def isPalindrome(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: bool\n         \"\"\"\n         b=0\n         t=len(s)-1\n         while b<t:\n             while b<t and not s[b].isalnum():\n                 b=b+1\n             while b<t and not s[t].isalnum():\n                 t=t-1\n             if s[b].lower() != s[t].lower():\n                 return False\n             b=b+1\n             t=t-1\n         return True", "class Solution:\n     def isPalindrome(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: bool\n         \"\"\"\n         if len(s) == 0:\n             return True\n         pt1 = 0\n         pt2 = len(s) - 1\n         while pt1 < pt2:\n             while pt1 < pt2 and not s[pt1].isalnum():\n                 pt1 = pt1 + 1\n             while pt1 < pt2 and not s[pt2].isalnum():\n                 pt2 = pt2 - 1\n             if pt1 < pt2 and s[pt1].lower() != s[pt2].lower():\n                 return False\n             pt1 = pt1 + 1\n             pt2 = pt2 - 1\n         return True", "class Solution:\n     def isPalindrome(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: bool\n         \"\"\"\n         left, right = 0, len(s) - 1\n         while left < right:\n             while left < len(s) and not s[left].isalnum():\n                 left += 1\n             \n             while right >= 0 and not s[right].isalnum():\n                 right -= 1\n \n             if left >= len(s) or right < 0:\n                 return True\n             \n             if s[left].lower() != s[right].lower():\n                 return False\n             left += 1\n             right -= 1\n             \n         return True\n", "class Solution:\n     def isPalindrome(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: bool\n         \"\"\"\n         i = 0\n         j = len(s) - 1\n         while(i < j):\n             while(i <= len(s) - 1 and not s[i].isalnum()):\n                 i += 1\n             while(j >= 0 and not s[j].isalnum()):\n                 j -= 1\n \n             if i < j and s[i].lower() != s[j].lower():\n                 return False\n \n             i += 1\n             j -= 1\n         return True\n", "class Solution:\n     def isPalindrome(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: bool\n         \"\"\"\n         s = s.lower()\n         i = 0\n         j = len(s) - 1\n         while i < j:\n             if not self._is_alphanumeric(s[i]):\n                 i += 1\n                 continue\n             if not self._is_alphanumeric(s[j]):\n                 j -= 1\n                 continue\n             if s[i] != s[j]:\n                 return False\n             i += 1\n             j -= 1\n         return True\n \n     def _is_alphanumeric(self, c):\n         if (ord(c) >= 97 and ord(c) <= 122) or (ord(c) >= 48 and ord(c) <= 57):\n             return True"]