["def is_bouncy(n):\n    return sorted(str(n)) != list(str(n)) and sorted(str(n)) != list(str(n))[::-1]", "def is_bouncy(n):\n    s = str(n)\n    decrease = increase = False\n    for a, b in zip(s, s[1:]):\n        if a < b:\n            increase = True\n        elif a > b:\n            decrease = True\n    return decrease and increase", "def is_bouncy(number):\n    return sorted(str(number)) != list(str(number)) != sorted(str(number))[::-1]", "def is_bouncy(n):\n    lst = list(map(int, str(n)))\n    return {1,-1} <= {(b<a)-(b>a) for a,b in zip(lst,lst[1:])}", "def is_bouncy(number):\n    n = str(number)\n    \n    return not(sorted(n) == list(n)) and not(sorted(n, reverse=True) == list(n) )", "def is_bouncy(number):\n    string = str(number)\n    sort = \"\".join(sorted(string))\n    reverse = \"\".join(reversed(string))\n    return sort != string and sort != reverse\n", "def is_bouncy(number):\n    n = str(number)\n    s = ''.join(sorted(n))\n    return s != n != s[::-1]\n", "def is_bouncy (n):\n    num_list = [int (x) for x in str (n)]\n    up = down = False\n    for index in range (1, len (num_list)):\n        if (num_list[index-1] < num_list[index]):\n           up = True\n        elif (num_list[index-1] > num_list[index]):\n           down = True\n        if (up and down):\n           return True\n    return False"]