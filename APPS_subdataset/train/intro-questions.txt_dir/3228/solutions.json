["def word_pattern(pattern, string):\n    x = list(pattern)\n    y = string.split(\" \")\n    return (len(x) == len(y) and \n        len(set(x)) == len(set(y)) == len(set(zip(x, y)))\n    )", "def word_pattern(pattern, string):\n    return [pattern.index(any) for any in pattern] == [string.split().index(any) for any in string.split()]", "def word_pattern(pattern, string):\n    match = {}\n    \n    if len(pattern) != len(string.split()): return False\n    \n    for c, word in zip(pattern, string.split()):\n        # For a new character in pattern\n        if c not in match: \n            # If word has already been assigned to a character, return false\n            if word in list(match.values()): return False\n            \n            # else assign the word to the character\n            match[c] = word\n        \n        # Match the word with the one assigned to the character\n        if match[c] != word: return False\n    \n    return True\n", "def word_pattern(pattern, string):\n    \n    words = string.split(' ')\n    \n    if len(words) != len(pattern):\n        return False\n    \n    map, used = {}, set()\n    \n    for i, p in enumerate(pattern):\n        \n        w = words[i]\n\n        if p not in map and w not in used:\n            map[p] = w\n            used.add(w)\n        \n        if map.get(p, None) != w:\n            return False\n\n    return True", "def word_pattern(pattern, s):\n  s = s.split()\n  return len(set(zip(pattern, s))) == len(set(pattern)) == len(set(s)) and len(s) == len(pattern)", "def word_pattern(pattern,string):\n    print((pattern,string))\n    string = string.split(' ')\n    m = len(string); x = {}\n    if m!=len(pattern) or len(set(pattern))!=len(set(string)):\n        return False\n    for k, s in zip(pattern,string):\n        if k in x and s!=x[k]: return False\n        x[k] = s\n    return True\n", "def word_pattern(pattern, string):\n    words = string.split(\" \")\n    return len(pattern) == len(words) and len(set(zip(pattern, words))) == len(set(pattern)) == len(set(words))", "def word_pattern(p, s):\n    if len(p) != len(s.split()): return False\n    ss = set([(p[i], c) for i, c in enumerate(s.split())])\n    return len(ss) == len(set(p)) == len(set(s.split()))\n", "from collections import OrderedDict\n\n\ndef get_pattern(iterable):\n    unique_ordered = list(OrderedDict.fromkeys(iterable))\n    return tuple(unique_ordered.index(a) for a in iterable)\n\n\ndef word_pattern(pattern, string):\n    return get_pattern(pattern) == get_pattern(string.split())\n"]