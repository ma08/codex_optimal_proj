["from datetime import date\n\ndef unlucky_days(year):\n    return sum(date(year, m, 13).weekday() == 4 for m in range(1, 13))", "from calendar import weekday\n\ndef unlucky_days(year):\n    return sum(1 for i in range(1, 13) if weekday(year, i, 13) == 4)\n", "from datetime import datetime\n\ndef unlucky_days(year):\n   return sum(datetime(year, month, 13).weekday() == 4 for month in range(1,13))", "from datetime import date\ndef unlucky_days(year):    \n    counter = 0 \n    for months in range(1,13):\n        if date(year, months, 13).weekday()==4:\n            counter +=1            \n    return counter\n\n", "from datetime import date\n\ndef unlucky_days(year):\n    return sum( 1 for month in range(1,13) if date(year,month,13).weekday()==4 )", "import datetime as d\nimport calendar\ndef unlucky_days(year):\n    l = []\n    for i in range(1,13):\n        l.append(calendar.monthrange(year,i)[1])\n    count = 0\n    for i in range(0,12):\n        if l[i]>=28 and d.date(year,i+1,13).weekday() == 4:\n            count+=1\n    return count\n", "import datetime\n\ndef unlucky_days(year):\n    friday13 = 0\n    months = range(1,13)\n    for month in months:\n      if datetime.date(year,month, 13).weekday() == 4:\n        friday13 += 1\n    return friday13", "unlucky_days = lambda y: sum(__import__(\"datetime\").date(y, m, 13).weekday() == 4 for m in range(1, 13))", "def unlucky_days(y):    \n    count = 0 # Clean & Pure Math Example      \n    for m in range(3,15):\n        if m == 13: y-=1            \n        if (y%100+(y%100//4)+(y//100)//4-2*(y//100)+26*(m+1)//10+12)%7==5:\n            count += 1\n    return count", "import calendar \ndef unlucky_days(year):\n    return [calendar.weekday(year, m, 13) for m in range(1,13)].count(4)", "from datetime import date\n\nunlucky_days = lambda year: sum(date(year, month, 13).weekday() == 4 for month in range(1, 13))", "def unlucky_days(year):\n    x=0\n    import datetime\n    for i in range(1, 13):\n        if datetime.date(year, i, 13).weekday()==4:\n            x=x+1\n    return x", "def unlucky_days(year):\n    import calendar\n    fridays = 0\n    for i in range(1,13):\n        if calendar.weekday(year,i,13) == 4:\n            fridays += 1\n    return fridays", "def unlucky_days(year):\n    import datetime\n    \n    # setting variables\n    i, count = 1, 0\n    \n    # loop for each month\n    while i <= 12:\n\n        # checks if there is an unlucky day in the month\n        if (datetime.datetime(year, i, 13).strftime('%w') ==  '5'): count += 1\n        \n        i += 1\n        \n    return count    ", "from datetime import date\ndef unlucky_days(year):\n    black_fridays = 0\n    for month in range(1,13):\n        if date(year,month,13).isoweekday() == 5:\n            black_fridays+=1\n    return black_fridays", "def unlucky_days(year):\n    from datetime import date\n    black_Fri = 0\n    for i in range(1,13):\n        if date(year, i, 13).weekday() == 4:\n            black_Fri += 1\n    return black_Fri", "from datetime import date\n\ndef unlucky_days(year):\n    count = 0\n    for i in range(1, 13):\n        if date(year, i, 13).weekday() == 4:\n            count += 1\n    return count\n", "import calendar\n\n\ndef unlucky_days(year):\n    answer = 0\n\n    for month in range(1, 13):\n        for day in calendar.Calendar().itermonthdays2(year, month):\n            if day[0] == 13 and day[1] == 4:\n                answer += 1\n\n    return answer\n", "import datetime\ndef unlucky_days(y):                                 #(year,month,day)\n    return len([i for i in range(12) if datetime.date(y,i+1,13).weekday() == 4])\n                  #for month the range of 12 months,\n                                            #if the weekday == friday 13th in y year, i+1 month,\n               #return the number of months that have friday the 13th in them as a list.\n            #find the length of it.\n", "import datetime\ndef unlucky_days(y):\n    return len([i for i in range(12) if datetime.date(y,i+1,13).weekday() == 4])", "from datetime import datetime\n\ndef unlucky_days(year):\n    return sum(True for month in range(1, 13) if datetime(year=year, month=month, day=13).weekday() == 4)", "from datetime import datetime\n\n\ndef unlucky_days(year):\n    return sum(datetime(year, a, 13).weekday() == 4 for a in range(1, 13))\n", "def unlucky_days(year):\n    c=year//100\n    y=year-100*c\n    c1=(year-1)//100\n    y1=year-1-100*c1\n    return (1 if (y1+y1//4+c1//4-2*c1+26*(13+1)//10+12)%7==5 else 0)+(1 if (y1+y1//4+c1//4-2*c1+26*(14+1)//10+12)%7==5 else 0)+sum(1 for m in range(3,13) if (y+y//4+c//4-2*c+26*(m+1)//10+12)%7==5)", "import calendar\n\ndef unlucky_days(year):\n    f13=0\n    for i in range(1,13):\n        c=calendar.monthcalendar(year,i)\n        for f in [c[0],c[1],c[2],c[3]]:\n            if f[calendar.FRIDAY]==13:\n                f13+=1\n    return f13\n", "import time\ndef unlucky_days(y):\n    return sum([time.strptime('%s-%d-13' % (y,x+1),'%Y-%m-%d').tm_wday == 4 for x in range(12)])", "import datetime\n\n\ndef unlucky_days(year):\n    return sum(map(lambda x: datetime.datetime(year, x, 13).weekday() == 4, range(1, 13)))", "import calendar\nc=calendar.Calendar()\n\ndef unlucky_days(year):\n    cont=0\n    for mes in range(1,13):\n        for i in c.monthdayscalendar(year,mes):\n            if i[4]==13:\n                cont=cont+1\n    return cont        ", "from datetime import datetime \ndef unlucky_days(year):\n    return sum(1 for x in range(1, 13) if datetime(year, x, 13).strftime('%a') == 'Fri')", "import datetime\ndef unlucky_days(n):\n\n   t=0\n   initial_date = datetime.date(n,1,1)\n   for e in range(1,365):   # \u043f\u0440\u0438\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u043f\u043e \u0434\u043d\u044e \u0438 \u0441\u0447\u0435\u0442\u0447\u0438\u043a \u0435\u0441\u043b\u0438\n      my_date = initial_date + datetime.timedelta(days=e)\n      if my_date.isoweekday() == 5 and my_date.day == 13:\n         t+=1\n   return t", "from calendar import weekday\n\ndef unlucky_days(year):\n    \n    c = 0\n    \n    for m in range(1,13):\n    \n        u = weekday(year,m,13)\n        \n        if u==4:\n            \n            c+= 1\n    \n    return c\n\n", "import datetime as dt\n\ndef unlucky_days(y):\n    return sum(dt.datetime(y, i+1, 13).weekday() == 4 for i in range(12))\n\n", "from datetime import date, timedelta\n\ndef unlucky_days(year):\n    d = date(year, 1, 1)\n    d += timedelta(days=4 - d.weekday())\n    counter = 0\n    \n    while d.year != year + 1:\n        if d.weekday() == 4 and d.day == 13:\n            counter += 1\n        d += timedelta(days=7)\n    \n    return counter", "import datetime\ndef unlucky_days(year):\n    sum = 0\n    for month in range(1,13):\n        date = datetime.datetime(year,month,13).strftime(\"%w\")\n        if date == '5':\n            sum += 1\n    return sum", "import datetime\ndef unlucky_days(year):\n    sum = 0\n    for month in range(1,13):\n        date = datetime.datetime(year,month,13).strftime(\"%w\")\n        if date == '5':\n            sum += 1\n    return sum\nprint(unlucky_days(2015))", "from datetime import datetime\n\ndef unlucky_days(year):\n    return sum(map(lambda i: datetime(year, i, 13).weekday() == 4, [i for i in range(1, 13)]))", "import datetime\ndef unlucky_days(year):\n    howmany=0\n    for i in range(1,13):\n        day=datetime.datetime(year,i,13)\n        if day.weekday()==4:\n            howmany+=1 \n    return howmany", "from datetime import date, timedelta\n\n\ndef unlucky_days(year):\n    count = 0\n    start_day = date(year, 1, 1)\n    end_day = date(year, 12, 31)\n\n    while start_day <= end_day:\n        if (start_day.weekday() == 4) and (start_day.day == 13):\n          #  print(start_day)\n            count += 1\n        else:\n            pass\n        start_day += timedelta(days=1)\n\n    return count", "import datetime\ndef unlucky_days(year):\n    return sum(1 for month in range(1,13) if datetime.date(year, month, 13).isoweekday() == 5)\n", "import datetime\ndef unlucky_days(year):\n    cnt = 0\n    for i in range(1, 13):\n        d = datetime.datetime(year, i, 13)\n        if d.weekday() == 4:\n            cnt += 1\n    return cnt", "import datetime\n\ndef unlucky_days(year):\n    sm=0\n    for i in range(1,13):\n        dt=datetime.datetime(year,i,13)\n        if dt.strftime(\"%A\")==\"Friday\":\n            sm+=1\n            \n    return sm", "from datetime import date, timedelta    \n\ndef calc(y):\n\n    st  = date(y, 1, 1)\n    fin = date(y, 12, 31)\n    numday = timedelta(days=1)\n    while st < fin:\n        if st.weekday() == 4 and st.day == 13:\n             yield st\n        st = st + numday\n        \n    \ndef unlucky_days(year):\n    count = 0\n    res = [str(i) for y in range(year - 1,year + 1) for i in calc(y)]\n    for x in range(len(res)):\n        if str(year) in res[x]:\n            count = count + 1\n    return count\n", "import datetime\n\ndef unlucky_days(year):\n    i = 0\n    for item in range(1, 13):\n        day = datetime.date(year, item, 13).isoweekday()\n        if day == 5:\n            i += 1\n    return i", "unlucky_days = lambda y: len([m for m in range(1, 13) if __import__('datetime').date(y, m, 13).weekday() == 4])", "import calendar\n\ndef unlucky_days(year):\n    res_date = calendar.Calendar()\n    res_days = 0\n    for month in range(1, 13):\n        for day in res_date.itermonthdays2(year, month):\n            if day[0] == 13 and day[1] == 4:\n                res_days += 1\n    return res_days\n", "import calendar\nimport datetime\n\n\ndef unlucky_days(year):\n    start_date = datetime.date(year, 1, 1)\n    end_date = datetime.date(year, 12, 31)\n    delta = datetime.timedelta(days=1)\n    counter = 0\n    while start_date <= end_date:\n        year = int(str(start_date)[:4])\n        month = int(str(start_date)[5:7])\n        day = int(str(start_date)[8:10])\n        if day == 13 and calendar.weekday(year, month, day) == 4:\n            counter += 1\n        start_date += delta\n    \n    return counter\n", "import datetime\ndef unlucky_days(year):\n    return sum([1 for m in range(1,13) if datetime.date(year,m,13).weekday()==4])", "import datetime\n\ndef unlucky_days(n):\n\n        c=0\n       \n        d=datetime.timedelta(days=1)\n        t = datetime.date(n, 1, 1)\n        while t !=  datetime.date(n,12,31):\n\n           \n            if  t.day==13 and t.strftime(\"%A\")=='Friday':\n                c=c+1\n            t=t+d\n\n        return c\n", "import datetime\ndef unlucky_days(y):\n    return sum(datetime.date(y,i,13).weekday() == 4 for i in range(1,13))", "def unlucky_days(year):\n    \n    from datetime import datetime as dt\n    \n    count = 0\n    \n    for i in range(1,13):\n        if dt(year, i, 13).weekday() == 4:\n            count += 1\n    \n    return count", "import datetime\n\ndef unlucky_days(year):\n    counter = 0\n    for i in range(1, 13):\n        d = datetime.date(year, i, 13)\n        if d.weekday() == 4:\n            counter += 1\n    return counter", "import datetime\n\ndef unlucky_days(year):\n    dates_13 = [datetime.datetime.strptime (f'{year}-{i}-13', '%Y-%m-%d').date () for i in range (1, 13)]\n\n    res = [mon for mon in dates_13 if mon.isoweekday() == 5]\n\n    return len(res)", "import datetime\ndef unlucky_days(year):\n    ans = 0\n    for i in range(1, 13):\n        day = datetime.date(year, i, 13)\n        ans += (day.weekday() == 4)\n    \n    return(ans)", "from datetime import date\n\ndef unlucky_days(year):\n    return sum(date(year, month, 13).isoweekday() == 5 for month in range(1, 13))\n\n\ndef __starting_point():\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert unlucky_days(2015) == 3, \"First - 2015\"\n    assert unlucky_days(1986) == 1, \"Second - 1986\"\n__starting_point()", "import datetime\ndef unlucky_days(year):\n    count = 0\n    for i in range(1, 13):\n        a = datetime.datetime(year, i, 13)\n        if a.strftime(\"%A\") == 'Friday':\n            count += 1\n    return count", "def unlucky_days(year):\n    from datetime import datetime\n    \n    fridays = 0\n    \n    for i in range(1, 13):\n        if datetime(year, i, 13).weekday() == 4:\n            fridays += 1\n    \n    return fridays", "import calendar\n\n\ndef unlucky_days(year):\n    c = calendar.Calendar()\n    counter = 0\n    for month in range(1,13):\n        print(f\"Months is {month}\")\n        for day in c.itermonthdays2(year, month):\n            print(f\"Day is {day}\")\n            if day[0] == 13 and day[1] == 4:\n                print(f\"This is Friday 13th {day}\")\n                counter += 1\n    return counter", "def unlucky_days(year):\n    from datetime import datetime as dt\n    from datetime import timedelta\n    \n    cnt = 0\n    x = dt(year,1,1)\n    while x.year == year:\n        x = x + timedelta(days = 1)\n        if x.day == 13 and x.weekday() == 4:\n            cnt = cnt + 1\n    return cnt", "from calendar import Calendar\ndef unlucky_days(year):\n    x = Calendar()\n    lst = []\n    for month in range(1, 13):\n        for days in x.itermonthdays2(year, month):\n            if days[0] == 13 and days[1] == 4:\n                lst.append(days)\n    return len(lst)", "import calendar\n\n\ndef unlucky_days(year):\n    return sum([calendar.weekday(year, month, 13) == 4 for month in range(1,13)])", "from datetime import date\n\ndef unlucky_days(year,count=0):\n    d1 = date.toordinal(date(year,1,1))\n    d2 = date.toordinal(date(year,12,31))\n    for i in range(d1, d2+1):\n        if date.weekday(date.fromordinal(i)) == 4 and date.fromordinal(i).day == 13:\n            count += 1\n    return count", "from datetime import date\n\ndef unlucky_days(year,count=0):\n    d1 = date.toordinal(date(year,1,1))\n    d2 = date.toordinal(date(year,12,31))\n    for i in range(d1, d2+1):\n        #print(date.weekday(date.fromordinal(i)), date.fromordinal(i).day)\n        if date.weekday(date.fromordinal(i)) == 4 and date.fromordinal(i).day == 13:\n            count += 1\n    return count", "from datetime import date\ndef unlucky_days(year):\n    NumDays=0\n    for i in range(1,12+1):\n        if date(year,i,13).weekday()==4:\n            NumDays+=1\n    return NumDays\n", "from datetime import datetime\nfrom functools import reduce\n\ndef unlucky_days(year):\n    return reduce(lambda r, month: r + int(datetime.strptime(f'{year}-{month:02}-13', '%Y-%m-%d').weekday() == 4), range(1,13), 0)", "import pandas as pd\nfrom datetime import datetime, timedelta\n\ndef unlucky_days(year):\n    unlucky = 0\n    start_date = datetime(year, 1, 1)\n    end_date = datetime(year+1, 1, 1)\n    delta = end_date - start_date\n    for i in range(delta.days + 1):\n        day = start_date + timedelta(days=i)\n        if ((day.strftime('%A') == \"Friday\") and (day.strftime('%d') == \"13\")):\n            unlucky += 1\n    return unlucky\n    \n", "import calendar\n\ndef unlucky_days(year):\n    return [calendar.weekday(year, x+1, 13) for x in range(12)].count(4)", "from datetime import date\ndef unlucky_days(year):\n    thirteenths=[]\n    for m in range(1,13):\n        if date(year,m,13).weekday()==4:\n            thirteenths.append(m)\n        else:\n            continue\n    return len(thirteenths)", "def unlucky_days(year):\n    from datetime import date\n    unluckyday = 0\n    for month in range(1,13):\n        if date(year,month,13).weekday() == 4:\n            unluckyday +=1\n    return unluckyday", "import datetime\ndef unlucky_days(year):\n    friday_13 = 0\n    months = range(1, 13)\n    for i in months:\n        if datetime.date(year, i, 13).weekday() == 4:\n            friday_13 += 1\n    return friday_13", "import datetime\n\ndef unlucky_days(year):\n    return sum(datetime.datetime(year, m + 1, 13).weekday() == 4 for m in range(12))\n", "import calendar\n\ndef unlucky_days(year):\n    n = 0\n    for i in range (1,13):\n        if calendar.weekday(year, i, 13) == 4:\n            n += 1\n    return n", "import datetime\ndef unlucky_days(year):\n    unlucky = 0\n    for month in range(1,13):\n        if datetime.datetime(year,month, 13).weekday() == 4:\n            unlucky += 1\n    return unlucky", "import datetime\n\n\ndef unlucky_days(year):\n\n    counter = 0\n    for i in range(1,13):\n        thirteenth = datetime.date(year, i, 13)\n        if thirteenth.weekday() == 4:\n            counter += 1\n\n    return counter", "import datetime\n\n\ndef unlucky_days(year):\n    black_fridays = 0\n    for i in range(1, 13):\n        d = datetime.date(year, i, 13)\n        if (d.weekday() == 4):\n            black_fridays += 1\n\n    return black_fridays", "from calendar import weekday\ndef unlucky_days(year):\n    return sum(weekday(year,i,13) == 4 for i in range(1, 13))", "from functools import reduce\nimport datetime\n\ndef unlucky_days(year):\n    return  reduce(\n        lambda a, b: a + (1 if datetime.datetime(year, b + 1, 13).weekday() == 4 else 0)\n        , range(12), 0)", "import calendar\n\ncal = calendar.Calendar()\n\ndef unlucky_days(input):\n    count = 0\n    for month in range(1, 13):\n        results = cal.monthdays2calendar(input, month)\n        for result in results:\n            if (13, 4) in result:\n                count += 1\n    return count\n", "import datetime\n\ndef unlucky_days(year):\n    total = 0\n    for x in range(1,13):\n        if datetime.date(year,x,13).isoweekday() == 5:\n            total += 1\n    return total", "from datetime import datetime as dt\ndef unlucky_days(year):\n    return sum(int(dt(year,x,13).weekday()==4) for x in range(1,13))", "from datetime import date\ndef unlucky_days(year):\n    contador = 0\n    for i in range(1,13):\n        dato = date(year,i,13)\n        if dato.weekday() == 4:\n            contador+=1\n\n    return contador", "import datetime\ndef unlucky_days(year):\n    total = 0\n    month = 1\n    while month < 13:\n        test = datetime.datetime(year, month, 13)\n        if datetime.datetime.weekday(test) == 4:\n            total += 1\n            month += 1\n        else:\n            month +=1\n            continue\n    return total", "\nimport datetime\n\ndef unlucky_days(year):\n    date_=datetime.date(year,1,1)\n    \n    while date_.weekday() != 4: \n        date_+=datetime.timedelta(days=1)\n    \n    bad_days=0\n    \n    while date_.year==year:\n        if date_.day==13:\n            bad_days+=1\n        date_+=datetime.timedelta(days=7)\n    return bad_days", "from datetime import datetime\n\n\ndef unlucky_days(year):\n    \"\"\"returns the numbers of Fridays 13th found in a given year.\n       \n       example:\n       >> print('%s unlucky days found in year 2020.' % unlucky_days(2020))\n    \"\"\"\n    spooky_days = 0\n    if (isinstance(year, int) and (0 < year < 10000)):\n        months = ('01', '02', '03', '04', '05', '06', \n                  '07','08', '09', '10', '11', '12')\n        for m in months:\n            date_to_check = str(year) + '-' + m + '-13'\n            day = datetime.strptime(date_to_check, '%Y-%m-%d').weekday()\n            if day == 4:\n                spooky_days += 1\n    return spooky_days", "from datetime import date\ndef unlucky_days(year):    \n    return sum(date(year,months,13).weekday()==4 for months in range(1,13))\n\n", "from datetime import datetime\ndef unlucky_days(year: int) -> sum:\n    return sum(datetime(year, month, 13).weekday() == 4 for month in range(1, 13))", "from calendar import Calendar, MONDAY, FRIDAY\n\ndef unlucky_days(year):\n    c = Calendar(firstweekday=MONDAY)\n    return sum(1 for x in [[1 for d, wd in c.itermonthdays2(year, m) if wd == FRIDAY and d == 13] for m in range(1,13)] if x)\n", "from datetime import datetime\ndef unlucky_days(year):\n    return sum(map(lambda x: datetime(year, x, 13).weekday() == 4, range(1,13)))", "from datetime import date\n\ndef unlucky_days(year):\n    # Only need to check the 13th of each month\n    day = 13\n    \n    # Counter for unlucky days\n    unlucky_days_count = 0\n    \n    # Loop through the months (1 to 12)\n    for x in range(1, 13):\n        # Create date object for each month\n        date_obj = date(year=year, month=x, day=day)\n        \n        # Check if the 13th of current month is Friday\n        # Weekdays range from 0 (Monday) to 6 (Sunday)\n        if date_obj.weekday() == 4:\n            # Increment unlucky days counter if current 13th is Friday\n            unlucky_days_count += 1\n    \n    # Return the unlucky days counter\n    return unlucky_days_count", "from datetime import date, timedelta\ndef unlucky_days(year):\n    start_date = date(year,1,1)\n    end_date = date(year,12,31)\n    delta_days = (end_date - start_date).days\n    count = 0\n    \n    for n in range(delta_days):\n        if(start_date.strftime(\"%a %d\") == \"Fri 13\"):\n            count=count+1\n        start_date=start_date+(timedelta(days=1))\n    return count", "import calendar\n\ndef unlucky_days(year):\n    c = calendar.Calendar()\n    return sum(sum(sum(list(c.yeardays2calendar(year,width=12)), []), []), []).count((13,4))", "import datetime\n\ndef unlucky_days(year):\n    number = 0\n    for month in range(1, 13):\n        d = datetime.date(year, month, 13)\n        if (d.strftime(\"%A\") == \"Friday\"):\n            number += 1\n    return number", "import datetime\n\ndef unlucky_days(year):\n    \n    count = 0 \n    \n    for month in range(12):\n        if datetime.date(year,month+1,13).weekday() == 4:\n            count += 1\n            \n    return count\n", "from calendar import weekday as wd\ndef unlucky_days(year):\n    day=13;k=0\n    for month in range(1,13):\n        if wd(year,month,day)==4:\n            k+=1\n    return k", "from datetime import timedelta, date\n\ndef unlucky_days(year):\n    day_td = timedelta(days=1)\n    date_i = date(year,1,1)\n    \n    unlucky_counter = 0\n    \n    for i in range(366):\n        date_i = date_i + day_td\n        if date_i.day == 13 and date_i.weekday() == 4:\n            unlucky_counter += 1\n    return unlucky_counter", "from datetime import datetime\n\ndef unlucky_days(year):\n    bfriday = 0\n    for i in range(1, 13):\n        if datetime(year, i, 13).strftime(\"%a\") == \"Fri\":\n            bfriday+=1\n    return bfriday", "from datetime import datetime\n\nFRIDAY = 4\n\ndef unlucky_days(year):\n    bad_days_counter = 0\n    for month in range(1, 13):\n        if datetime(year, month, 13).weekday() == FRIDAY:\n            bad_days_counter += 1\n            \n    return bad_days_counter\n", "import datetime\ndef unlucky_days(year):\n    total=0\n    for i in range(12):\n        date=datetime.datetime(year,i+1,13)\n        if date.weekday()==4:total+=1    \n    return total\n\n", "def unlucky_days(year):\n    import datetime\n    weekdays_13 = [ datetime.date(year,mm,13).weekday() for mm in range(1,13) ]\n    return weekdays_13.count(4)", "import calendar\ndef unlucky_days(year):\n    c=0\n    cal=calendar.Calendar()\n    for i in range(1,13):\n        for d,w in cal.itermonthdays2(year,i):\n            if d==13 and w==4:\n                c=c+1\n    return c", "from datetime import datetime\n\ndef unlucky_days(year):\n  days = 0\n  date_string = \"13/{}/{}\"\n  for i in range(1,13):\n      date_obj = datetime.strptime(date_string.format(str(i).zfill(2),str(year)),'%d/%m/%Y').weekday()\n      if date_obj==4:\n        days+=1\n  return days"]