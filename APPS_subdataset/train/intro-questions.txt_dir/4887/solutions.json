["import datetime\n\ndef days(date, month, year):\n    x = datetime.datetime(year, month, date)\n    y = datetime.datetime(2437, 3, 24)\n    delta = y-x\n    t = delta.days\n    if year < 1752 or (year == 1752 and month < 9) or (year == 1752 and month == 9 and date < 14):\n        t -= 11\n    if year < 1752 :\n        y = year //4 * 4 + 4\n        for i in range(y, 1752, 4):\n            if i % 100 == 0 and i % 400 != 0:\n                t+=1\n    return t\n    \n", "my_year = {1: 31, 2: 28, 3: 31,  4: 30,  5: 31,  6: 30, \n           7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n\ndef is_leap(year):\n    return [0,1,0,1,0,1,1,1][(year%4==0)+(year%100==0)+(year%400==0)+4*(year < 1752)]\n\ndef day_of_year(d, m, y=2437):\n    return sum(my_year[i] for i in range(1, m)) + d + is_leap(y)*(m > 2)\n\ndef days(d, m, y, d0=24, m0=3, y0=2437):\n    A = day_of_year(d0, m0) # current year\n    B = sum(map(is_leap, range(y+1, y0))) + 365*(y0 - y) # years between y and y0\n    C = 11*(y < 1752 or y == 1752 and day_of_year(d, m) < 246) # < 03.09.1752\n    D = is_leap(y) - day_of_year(d, m, y) # desired year\n    return A + B - C + D", "# Let's do this without the builtin date library\n# and without looking up formulas in wikipedia\n\ndef is_leap_year(year):\n    if year % 4 != 0:\n        return False\n    # year is divisible by 4.\n    # If the year is in the Gregorian calendar, that's it\n    if year <= 1752:\n        return True\n    \n    # Julian calendar rule\n    return (year % 100 != 0) or (year % 400 == 0)\n\n# Day number of the first day of the month, minus one.\n# Doesn't count leap years.\nDOM = {\n    1: 0,\n    2: 31,\n    3: 59,\n    4: 90,\n    5: 120,\n    6: 151,\n    7: 181,\n    8: 212,\n    9: 243,\n    10: 273,\n    11: 304,\n    12: 334,\n}\n\ndef is_julian_period(date, month, year):\n    if year > 1752: return True\n    if year < 1752: return False\n    # year == 1752\n    if month < 9: return False\n    if month > 9: return True\n    return date >= 14\n\n# This could be rewritten as a one-liner (see wikipedia) but I'm not sure that I can derive the formula.\ndef normalized_day(date, month, year):\n    \"\"\"Number of days between given date and an arbitrary origin. normalized_day(1, 1, 0) == 1\n    \"\"\"\n    orig_year = 0\n    days = date + DOM[month] + (year - orig_year) * 365\n    \n    # Leap year adjustment for the current year\n    if is_leap_year(year) and month >= 3:\n        days += 1\n    # Leap year adjustment for the intervening years\n    # It could be done without a loop (count 4-year intervals,\n    # subtract centuries, re-add 400-years) but it would be less\n    # readable given the Gregorian stuff.\n    for y in range(orig_year, year, 4):\n        if is_leap_year(y):\n            days += 1\n    # Gregorian->Julian transition adjustment\n    if is_julian_period(date, month, year):\n        days -= 11\n    \n    return days\n    \ndef days(date, month, year):\n    return normalized_day(24, 3, 2437) - normalized_day(date, month, year)", "def days(date, month, year):\n   \n    ## create function to calculate day value\n    def day_calc(date, month, year):\n        count = 0\n        \n        #find days in years\n        for i in range (0,year):\n            if i < 1752:\n                if i % 4 == 0:\n                    count += 366\n                else:\n                    count += 365\n            elif i == 1752:\n                count += 366-11\n            else:\n                if i % 400 == 0:\n                    count += 366\n                elif i % 100 == 0:\n                    count += 365\n                elif i % 4 == 0:\n                    count += 366\n                else:\n                    count += 365\n         \n        #dictionary of days passed at a month end\n        months = {0:0,1:31,2:59,3:90,4:120,5:151,6:181,7:212,8:243,9:273,10:304,11:334,12:365}\n        \n        #find days in month\n        if year % 400 == 0:\n            count += months[month-1]\n            if month > 2:\n                count += 1\n        elif year % 100 == 0:\n            count += months[month-1]\n        elif year % 4 == 0:\n            count += months[month-1]\n            if month > 2:\n                count += 1\n        else:\n            count += months[month-1]\n         \n        #add days in month, check if it was in Sept 1752 when 11 days were skipped\n        if year == 1752 and month == 9 and date > 13:\n            count += date -11\n        else:\n            count += date\n       \n        return count\n    \n    cdate = 24\n    cmonth = 3\n    cyear = 2437\n    \n    return day_calc(cdate, cmonth, cyear) - day_calc(date, month, year)\n    \n\n    \nprint(days(31,1,2436))    ", "from datetime import *\n\ndef julian(day,month,year):\n    dayy=(year-1)*365+(year-1)//4\n    daym=sum([0,31,29 if year%4==0 else 28,31,30,31,30,31,31,30,31,30,31][:month])\n    return dayy+daym+day\n\nref =date(2437,3,24)\ngreg=date(1752,9,14)\ndays2greg=(ref-greg).days\njgreg=julian(3,9,1752)\n\ndef days(day, month, year):\n    if year>1752 or (year==1752 and month>9) or (year==1752 and month==9 and day>13):\n        return (ref-date(year,month,day)).days\n    else:\n      return jgreg-julian(day,month,year)+days2greg\n      \n", "def days(date, month, year):\n    current_year = 2437\n    current_month = 3\n    current_date = 24\n    current_days = (24+28+31)\n    days = 0\n    y_days = 0\n    \n    print((date,month,year))\n    \n    def leap_year(year):\n        condition = False\n        if year > 1752:\n            if year % 400 == 0:\n                condition = True\n            elif year % 100 == 0:\n                condition = False\n            elif year % 4 == 0:\n                condition = True\n        else:\n            if year % 4 == 0:\n                condition = True\n        return condition\n    \n    month_30 = {1:31,2:28,3:31,4:30,5:31,6:30,7:31,8:31,9:30,10:31,11:30,12:31}\n    month_30_leap = {1:31,2:29,3:31,4:30,5:31,6:30,7:31,8:31,9:30,10:31,11:30,12:31}\n    \n    if year > 1752:\n        if leap_year(year) == True: #if its a leap year\n            for m in range(1,month):\n                days += month_30_leap[m]\n            days += date\n            for y in range(year, current_year):\n                if leap_year(y) == True:\n                    y_days += 366\n                else:\n                    y_days += 365\n            days = current_days - days + y_days\n            print(\"this one - 1\")\n            return days\n        else:\n            for m in range(1,month):\n                days += month_30[m]\n            days += date\n            for y in range(year, current_year):\n                if leap_year(y) == True:\n                    y_days += 366\n                else:\n                    y_days += 365\n            days = current_days - days + y_days\n            print(\"this one = 2\")\n            return days\n    else:\n        if year % 4 == 0:\n        \n            for m in range(1,month):\n                days += month_30_leap[m]\n                \n            if year == 1752 and month > 9:\n                days -= 11\n                    \n            if year == 1752 and month == 9:\n            \n                for d in range(1,date+1):\n                    if 3 > d or d > 13:\n                        print(d)\n                        days += 1\n            else:\n                days += date\n                \n            for y in range(year, current_year):\n                if leap_year(y) == True:\n                    if y == 1752:\n                        y_days += 366-11\n                    else:\n                        y_days += 366\n                else:\n                    y_days += 365\n            days = current_days - days + y_days\n            print(\"this one - 3\")\n            return days\n            \n        else:\n            for m in range(1,month):\n                days += month_30[m]\n\n            days += date\n                \n            for y in range(year, current_year):\n                if leap_year(y) == True:\n                    if y == 1752:\n                        y_days += 366-11\n                    else:\n                        y_days += 366\n                else:\n                    y_days += 365\n            days = current_days - days + y_days\n            print(\"this one - 4\")\n            return days\n          \n", "def leap(year):\n    if year < 1753:\n        if year % 4 == 0:\n            return True\n    else:\n        if year % 4 == 0:\n            if year % 100 != 0 or year % 400 == 0:\n                return True\n            elif year % 100 == 0:\n                return False\n        else:\n            return False\n\ndef days(date, month, year):\n    the_date = [24, 3, 2437]\n\n    Leap_year = {1: 31, 2: 29, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31,\n                 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n    Non_leap_year = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31,\n                     8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n\n    point_date = [date, month, year]\n    reverse_date = [year, month, date]\n\n    days_from_beginning = the_date[0]\n    for i in range(1, the_date[1]):\n        days_from_beginning += Non_leap_year[i]\n\n    def to_year_end(list, dict):\n        days_to_end = dict[list[1]] - list[0]\n        for i in range(list[1] + 1, 13):\n            days_to_end += dict[i]\n        return days_to_end\n\n    if year == the_date[2] and month == the_date[1]:\n        result = the_date[0] - date\n        return result\n    \n    elif year == the_date[2] and month < the_date[1]:\n        result = days_from_beginning - date\n        for i in range(1, month):\n            result -= Non_leap_year[i]\n        return result\n\n    else:\n        result = days_from_beginning\n        if reverse_date < [1752, 9, 14]:\n            result -= 11\n        if leap(year):\n            result += to_year_end(point_date, Leap_year)\n        else:\n            result += to_year_end(point_date, Non_leap_year)\n        for y in range(year + 1, the_date[2]):\n            if leap(y):\n                result += 366\n            else:\n                result += 365\n        return result", "def days(date, month, year):\n    \n    def leap_year(y):\n        if y % 4 == 0:\n            if y>1752 and y%100==0: \n                if y%400==0:\n                    return True\n                else:\n                    return False\n            return True\n            \n    def days_in_years(y):\n        n=0\n        for num in range(1,y):\n            if leap_year(num):\n                n+=1\n        return ((y-1)*365+n) if y<=1752  else ((y-2)*365+n+354)\n    \n\n    def days_in_month(m,y):\n        n=0\n        list_31 = [1,3,5,7,8,10,12]\n        list_30 = [4,6,9,11]\n        for num in range(1,m):\n            if num in list_31:\n                n+=31\n            elif num in list_30:\n                n+=30\n            elif leap_year(y):\n                n+=29\n            else:\n                n+=28\n        if y == 1752 and m > 9:\n            n-=11\n        return n\n        \n    def days_in_days(d,m,y):\n        if y==1752 and m==9 and d>2:\n            return d-11\n        return d\n    \n    current_days = days_in_days(24,3,2437)+days_in_month(3,2437)+days_in_years(2437)\n    return current_days - (days_in_days(date,month,year) + days_in_month(month,year)+days_in_years(year) )\n", "def days(date, month, year):\n    daysaway = 0\n    monthdays = 0\n    leapyear = 0\n    monthsinyear = [31,28,31,30,31,30,31,31,30,31,30,31] \n\n    daysaway += 24- date\n\n    if year < 2437:\n        daysaway += (2437 - year) * 365\n\n    if month < 3:\n        if month == 1:\n            daysaway += monthsinyear[0] + monthsinyear[1]\n        else:\n            daysaway += monthsinyear[1] \n    elif month > 3:\n        for i in range(3,month):\n            monthdays -= monthsinyear[i-1]\n        daysaway += monthdays\n\n    if year < 1752 or (year == 1752 and month < 9) or (year == 1752 and month == 9 and date < 3):\n        daysaway -= 11\n\n    for i in range(year,2438):\n        if i <= 1752 and i % 4 == 0:\n            leapyear += 1\n            if i==year and month > 2:\n                leapyear -=1\n        elif i > 1752:\n            if i % 400 == 0 or (i % 4 == 0 and i % 100 !=  0):\n                leapyear += 1\n                if i==year and month > 2:\n                    leapyear -=1\n    daysaway += leapyear\n    \n    return daysaway", "from datetime import date\n\n'''Datetime assumes \"the current Gregorian calendar always \n   was, and always will be, in effect.\"'''\nGREG_START = date(1752, 9, 14)\nGREG_SKIP = 11\nCURR_DATE = date(2437, 3, 24)\n\ndef days(day, month, year):\n    try:\n        target_date = date(year, month, day)\n        distance = (CURR_DATE - target_date).days\n    except ValueError:  # Gregorian/Julian conflict\n        target_date = date(year, month, day-1)\n        distance = (CURR_DATE - target_date).days - 1\n    if target_date < GREG_START:\n        distance -= GREG_SKIP\n        distance += len([cent for cent in range((year-1)//100 + 1, GREG_START.year//100 + 1) if cent % 4])\n    return distance\n"]