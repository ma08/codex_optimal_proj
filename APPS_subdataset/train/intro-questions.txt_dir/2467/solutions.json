["# class Solution:\n#     def specialArray(self, nums: List[int]) -> int:\n#         nums.sort(reverse=True)\n#         left, right = 0, len(nums)\n#         while left < right:\n#             mid = left + (right - left) // 2\n#             if mid < nums[mid]:\n#                 left = mid + 1\n#             else:\n#                 right = mid       \n#         return -1 if left < len(nums) and left == nums[left] else left\nclass Solution:\n    def specialArray(self, a: List[int]) -> int:\n        n, i = len(a), 0\n        a.sort(reverse=True)        \n        l, r  = 0, n\n        while l < r:\n            m = l + (r-l) // 2\n            if m < a[m]:\n                l  = m + 1\n            else:\n                r = m\n        return -1 if l < n and l == a[l] else l\n", "from bisect import bisect_left\n\nclass Solution:\n    def specialArray(self, nums: List[int]) -> int:\n        \n        nums.sort()\n        l = len(nums)\n        maxi = nums[-1]\n        \n        for i in range(maxi+1):\n            if l - bisect_left(nums,i) == i:\n                return i\n        \n        return -1", "class Solution:\n    def specialArray(self, nums: List[int]) -> int:\n        for i in range(0, len(nums)+1):\n            if sum([n >= i for n in nums]) == i:\n                return i\n        return -1", "class Solution:\n    def specialArray(self, nums: List[int]) -> int:\n        \n        res = -1\n        \n        \n        nums.sort()\n        \n        for i in range(0, len(nums)):\n            temp = 0\n            for j in range(0, len(nums)):\n                if nums[j] >= i+1 and nums[j] != 0:\n                    temp += 1\n                \n            if i+1 == temp: \n                res = i+1 if i+1 > res else res\n    \n        return res\n", "class Solution:\n    def specialArray(self, nums: List[int]) -> int:\n        # n --> length of given array\n        n = len(nums)\n        \n        # temporary array with all elements 0\n        temp = [0 for i in range(n)]\n        \n        # if all elements are 0 then given array is not special\n        if nums==temp:\n            return -1\n        \n        # check for each number from 0 to 1000 that for ith number there are exactly i numbers greater than or equal to i.\n        for x in range(1001):\n            cnt = 0\n            for i in nums:\n                if i>=x:\n                    cnt+=1\n            if cnt==x:\n                return x\n        return -1", "class Solution:\n    def specialArray(self, nums: List[int]) -> int:\n        x = 0\n        res = 0\n        maxn = max(nums)\n        # minn = min(nums)\n        for i in range(maxn+1):\n            res = 0\n            for y in nums:\n                if y >= i:\n                    res += 1\n            if res == i:\n                return i\n        return -1\n", "class Solution:\n    def specialArray(self, nums: List[int]) -> int:\n        for x in range(0, 1001):\n            cnt = 0\n            for e in nums:\n                if e >= x:\n                    cnt += 1\n            if cnt == x:\n                return x\n        return -1", "class Solution:\n    def specialArray(self, nums: List[int]) -> int:\n        \n        for x in range(-5, 1002):\n            cnt = 0\n            for y in nums:\n                if y >= x:\n                    cnt += 1\n            if cnt == x:\n                return x\n        \n        return -1", "class Solution:\n    def specialArray(self, nums: List[int]) -> int:\n        for i in range(1001):\n            if sum(1 for a in nums if a >= i) == i:\n                return i\n        return -1\n", "class Solution:\n    def specialArray(self, nums: List[int]) -> int:\n        for i in range(1, 1001):\n            geq = 0\n            for n in nums:\n                geq += n >= i\n            if geq == i:\n                return i\n        return -1", "class Solution:\n    def specialArray(self, nums: List[int]) -> int:\n        low, high = 0, len(nums)\n        while low <= high:\n            mid = (low + high) // 2\n            cnt = 0\n            for i in nums:\n                if i >= mid: cnt += 1\n            if cnt == mid:\n                return mid\n            elif cnt > mid: low = mid + 1\n            else: high = mid - 1\n        return -1", "class Solution:\n    def specialArray(self, nums: List[int]) -> int:\n        freq = collections.Counter()\n        i, cnt = 1, 0\n        for num in nums:\n            freq[num] += 1\n            if num >= i:\n                cnt += 1\n            if cnt == i:\n                cnt -= freq[i]\n                i += 1\n        return -1 if cnt + freq[i-1] != i - 1 else i - 1\n", "class Solution:\n    def specialArray(self, nums: List[int]) -> int:\n        cache=set()\n        for x in range(len(nums),0,-1):\n            cnt=0\n            for i in range(len(nums)):\n                if nums[i] in cache:\n                    cnt+=1\n                elif nums[i]>=x:\n                    cnt+=1\n                    cache.add(nums[i])\n            if cnt==x:\n                return x\n        return -1", "class Solution:\n    def specialArray(self, nums: List[int]) -> int:\n        for x in range(len(nums), -1, -1):\n            c = 0\n            for n in nums:\n                if n >= x:\n                    c += 1\n            if c == x:\n                return x\n            \n        return -1", "class Solution:\n    def specialArray(self, nums: List[int]) -> int:\n        len_num = len(nums)\n        for x in range(1, len_num+1):\n            elem_greater = 0\n            for num in nums:\n                elem_greater += num >= x\n            if x == elem_greater:\n                return x\n        return -1", "class Solution:\n    def specialArray(self, nums: List[int]) -> int:\n        for i in range(min(len(nums), max(nums)) + 1):\n            if i == len([x for x in nums if x >= i]):\n                return i\n        return -1", "class Solution:\n    def specialArray(self, nums: List[int]) -> int:\n        nums.sort()\n        for i in range(0, nums[-1] + 1):\n            if i == len([n for n in nums if n >= i]):\n                return i\n        return -1", "class Solution:\n    def specialArray(self, nums: List[int]) -> int:\n        x = None\n        for i in range(1, len(nums) + 1):\n            count = 0\n            for n in nums:\n                if n >= i:\n                    count += 1\n            if count == i:\n                x = i\n                break\n        return x if x is not None else -1"]