["def sort_nested_list(xsss):\n    ys = iter(sorted(x for xss in xsss for xs in xss for x in xs))\n    return [[[next(ys) for x in xs] for xs in xss] for xss in xsss]", "import numpy as np\n\ndef sort_nested_list(A):\n    return np.sort(A, axis=None).reshape(np.array(A).shape).tolist()", "def sort_nested_list(array):\n    numbers = iter(sorted(n for a1 in array for a2 in a1 for n in a2))\n    return [[[next(numbers) for n in a2] for a2 in a1] for a1 in array]\n", "def sort_nested_list(A):\n    numbers = []\n    def peel(A, insert=False):\n        for i in range(len(A)):\n            if len(A[i]) != 0 and isinstance(A[i][0], list):\n                A[i] = peel(A[i], insert)\n            else:\n                if insert:\n                    A[i] = numbers[:len(A[i])]\n                    del numbers[:len(A[i])]\n                else:\n                    numbers.extend(A[i])\n        return A\n    peel(A)\n    numbers = sorted(numbers)\n    return peel(A, insert=True)", "import re\ndef sort_nested_list(arr):\n    s=str(arr); ns=sorted(re.findall(r\"\\d+\",s),key=int,reverse=True)\n    return eval(re.sub(r\"\\d+\",lambda _:ns.pop(), s))", "def sort_nested_list(A, emol = ''):\n    for e in str(A):\n        if e.isdigit() and emol[-1] is '}': continue\n        emol+= [e,'{}'][e.isdigit()]\n    return eval(emol.format(*sorted([ i for l in A for e in l for i in e ])))", "def fl(l):\n    for x in l:\n        if isinstance(x,list):\n            for j in fl(x):\n                yield j\n        else:\n            yield x\n\n\ndef sort_nested_list(a):\n    numbers = iter(sorted(fl(a)))\n\n    def b(n,a):\n        return [next(n)if isinstance(c,int)else b(n,c)for c in a]\n    return b(numbers,a)", "from copy import deepcopy\n\ndef sort_nested_list(a):\n    \n    def seeker(lst):\n        return lst if not lst or not isinstance(lst[0], list) else sum(map(seeker, lst), [])\n        \n    def putter(lst):\n        for i in range(len(lst)):\n            if isinstance(lst[i],list):\n                putter(lst[i])\n            else:\n                lst[i] = next(elts)\n        \n    a, elts = deepcopy(a), iter(sorted(seeker(a)))\n    putter(a)\n    return a", "import re\n\ndef sort_nested_list(A):\n  a=str(A); b,a=a,re.sub('\\[|\\]','',a);  \n  B=str(sorted(eval('['+a+']')))\n  b,nl=list(re.sub(\"\\d+\", \"#\",b)),re.findall(\"\\d+\",B)[::-1]\n  for i in range(len(b)): b[i]= nl.pop() if b[i]=='#' else b[i]\n  return eval(''.join(b))", "def sort_nested_list(A):\n    sort_nested_list.numbers = []\n    def collect_numbers(lista):\n        if len(lista) == 0:\n            return lista\n        if len(lista) > 1:\n            for i in lista:\n                try:\n                    for e in i:\n                        for q in e:\n                            sort_nested_list.numbers.append(q)\n                except:\n                    return sorted(lista)\n            return lista\n        else:\n            return [collect_numbers(lista[0])]\n\n    def place_numbers(lista):\n        if len(lista) == 0:\n            return lista\n        if len(lista) > 1:\n            for i in lista:\n                try:\n                    for e in i:\n                        for index, element in enumerate(e):\n                            e[index] = sort_nested_list.numbers.pop(0)\n                except:\n                    return sorted(lista)\n            return lista\n        else:\n            return [place_numbers(lista[0])]\n\n    collect_numbers(A)\n    sort_nested_list.numbers.sort()\n\n    return place_numbers(A)"]