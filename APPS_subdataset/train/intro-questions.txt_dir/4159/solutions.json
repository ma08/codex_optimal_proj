["def poly_multiply(p1, p2):\n  if not p1 or not p2: return []\n  n = len(p1) + len(p2) - 1\n  p = [0]*n\n  for i,a in enumerate(p1):\n    for j,b in enumerate(p2):\n      p[i + j] += a*b\n  return p", "from numpy import polymul\n\ndef poly_multiply(p1, p2):\n    res = list(polymul(p1, p2))\n    return res if any(res) else []", "def poly_multiply(p1,p2):\n    r,s={},[] \n    for i in range(len(p1)):\n       for j in range(len(p2)): r[i+j]= r[i+j]+p1[i]*p2[j] if i+j in r else p1[i]*p2[j]\n    for i in r: s.append(r[i]) \n    return s     ", "from numpy import polymul\n\ndef poly_multiply(p1, p2):\n    if not (p1 and p2 and any(p1) and any(p2)): return []\n    return polymul(p1, p2).tolist()", "from itertools import zip_longest\npoly_multiply=lambda a,b:[sum(i) for i in zip_longest(*[[0]*i+[j*k for k in a] for i,j in enumerate(b)],fillvalue=0)] if a else []", "def poly_multiply(p1, p2):\n    result = [0 for _ in range(len(p1)+len(p2)-1)]\n    for i, n1 in enumerate(p1):\n        for j, n2 in enumerate(p2):\n            result[i+j] += n1 * n2\n    return [] if not p1 or not p2 else result", "import numpy as np\n\ndef poly_multiply(p1, p2):\n    return np.trim_zeros(np.polymul(p1, p2), 'f').tolist()", "def poly_multiply(a, b):\n    if a== [] or b== []:\n        return []\n    r=[0 for i in range(len(a)+len(b)-1)]\n    for k,j in enumerate(a):\n        for m,n in enumerate(b):\n            r[k+m] += j*n    \n    return r", "def poly_multiply(p1, p2):\n    ans = [0] * (len(p1) + len(p2) - 1)\n    for i in range(len(p1)):\n        for j in range(len(p2)):\n            ans[i + j] += p1[i] * p2[j]\n    return any(ans) and ans or []"]