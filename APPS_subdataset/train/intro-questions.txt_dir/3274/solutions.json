["def solve(st):\n    return next((n for n in range(len(st)//2, 0, -1) if st[:n] == st[-n:]), 0)\n", "def solve(s):\n    for i in range(len(s) // 2, 0, -1):\n        if s[:i] == s[-i:]:\n            return i\n    return 0", "solve=lambda s:len(__import__('re').match(r'^(.*).*\\1$',s).group(1))", "def solve(st):\n    i = len(st)//2\n    while i and not st.endswith(st[0:i]): i -= 1\n    return i;\n", "def solve(st):\n    attempts = len(st) // 2\n    for i in range(attempts, 0, -1):\n        if st[:i] == st[-i:]:\n            return i\n    return 0", "def solve(s):\n    return max(i for i in range(len(s)//2+1) if s[:i]==s[len(s)-i:])", "import math\n\n# The function that will check a prefix and a suffix\ndef prefix_suffix_check(string, indexIn):\n    return string[:indexIn] == string[(indexIn) * -1 : ]\n\ndef solve(initial_string):\n    \n    # Halves and floors the array size\n    half_array_size = int(math.floor(len(initial_string) / 2))\n    \n    # A revese for loop for checking the middle to outer\n    for x in range(half_array_size, 0, -1):\n        # If the suffix and prefix are equal return the x\n        if (prefix_suffix_check(initial_string, x) == True):\n            return x\n    \n    # Else return 0\n    return 0\n", "def solve(st):\n    prefixes = set()\n    sufixes = set()\n    pref = ''\n    suff = st[1:]\n    for i in st[:-1]:\n        sufixes.add(suff)\n        suff = suff[1:]\n        pref += i\n        prefixes.add(pref)\n    \n    for i in sorted(sufixes.intersection(prefixes))[::-1]:\n        if len(i) * 2 <= len(st):\n            return len(i)\n    return 0\n", "def solve(st):\n    return max((i for i in range(1, len(st)//2+1) if st[:i] == st[-i:]), default=0)", "def solve(st):\n    for i in range(len(st)-1,0,-1):\n        if not i or len(st) >= 2 * i and st[0:i] == st[-i:]: return i\n    return 0"]