["class Solution:\n     def canPlaceFlowers(self, flowerbed, n):\n         \"\"\"\n         :type flowerbed: List[int]\n         :type n: int\n         :rtype: bool\n         \"\"\"\n         p = flowerbed.count(1)\n         m = int(len(flowerbed) / 2)\n         if p+n <= m+1:\n             pos = 0\n             while pos < len(flowerbed):\n                 if n == 0:\n                     print(n)\n                     return True\n                 else:\n                     if pos+1 < len(flowerbed):\n                         if flowerbed[pos] == 0 and flowerbed[pos+1] == 0:\n                             print(pos)\n                             n-=1\n                             pos+=2\n                         elif flowerbed[pos] == 1:\n                             pos += 2\n                         else:\n                             pos +=3\n                     else:\n                         if flowerbed[pos] == 0:\n                             n-=1\n                             pos+=2\n             if n == 0:\n                 return True\n             else:\n                 return False\n         else:\n             return False", "class Solution:\n     def canPlaceFlowers(self, flowerbed, n):\n         \"\"\"\n         :type flowerbed: List[int]\n         :type n: int\n         :rtype: bool\n         \"\"\"\n         \n         possible = 0\n         repeated = 1\n         \n         for f in flowerbed:\n             if f:\n                 if repeated:\n                     possible += (repeated - 1) // 2\n                 repeated = 0\n             else:\n                 repeated += 1\n         \n         if repeated:\n             possible += repeated // 2\n         \n         return (possible >= n)", "class Solution:\n     def canPlaceFlowers(self, flowerbed, n):\n         \"\"\"\n         :type flowerbed: List[int]\n         :type n: int\n         :rtype: bool\n         \"\"\"\n         cnt = 0\n         for i in range(len(flowerbed)):\n             if flowerbed[i] == 0:\n                 if (i == 0 or flowerbed[i-1] == 0) and (i == len(flowerbed)-1 or flowerbed[i+1] == 0):\n                     flowerbed[i] = 1\n                     cnt += 1\n         return cnt >= n", "class Solution:\n     def canPlaceFlowers(self, flowerbed, n):\n         \"\"\"\n         :type flowerbed: List[int]\n         :type n: int\n         :rtype: bool\n         \"\"\"\n         cnt = 0\n         for i, f in enumerate(flowerbed):\n             if f == 0 and (i == 0 or flowerbed[i-1] == 0) and (i == len(flowerbed)-1 or flowerbed[i+1] == 0):\n                 cnt += 1\n                 flowerbed[i] = 1\n         return cnt >= n\n         \n", "class Solution:\n     def canPlaceFlowers(self, flowerbed, n):\n         \"\"\"\n         :type flowerbed: List[int]\n         :type n: int\n         :rtype: bool\n         \"\"\"\n         if n == 0:\n             return True\n         L = len(flowerbed)\n         if n > (L + 1) // 2:\n             return False\n         if L == 1:\n             return flowerbed[0] == 0\n         \n         cnt, i = 0, 0\n         while i < L:\n             if flowerbed[i] == 1:\n                 i += 2\n             elif i < L-1 and flowerbed[i+1] == 1:\n                 i += 3\n             elif i == L-1:\n                 cnt += int(flowerbed[i-1] == 0)\n                 i += 1\n             elif i == 0 or flowerbed[i-1] == 0:\n                 cnt += 1\n                 i += 2\n         return cnt >= n", "class Solution:\n     def canPlaceFlowers(self, nums, n):\n         \"\"\"\n         :type flowerbed: List[int]\n         :type n: int\n         :rtype: bool\n         \"\"\"\n         count = 0\n         nums = [0] + nums +[0]\n         for i in range(1,len(nums)-1):\n             if nums[i] == 0:\n                 if nums[i+1] == 0 and nums[i-1] == 0:\n                     count += 1\n                     nums[i] =1\n         if count >= n:\n             return True\n         else:\n             return False", "class Solution:\n     def canPlaceFlowers(self, flowerbed, n):\n         \"\"\"\n         :type flowerbed: List[int]\n         :type n: int\n         :rtype: bool\n         \"\"\"\n         lenFb = len(flowerbed)\n         for i in range(lenFb):\n             if i == 0:\n                 if flowerbed[i] == 0:\n                     if i == lenFb -1:\n                         flowerbed[i] = 1\n                         n -= 1\n                     elif flowerbed[i+1] == 0:\n                         flowerbed[i] = 1\n                         n -= 1\n             elif i == lenFb - 1:\n                 if flowerbed[i] == 0:\n                     if flowerbed[i-1] == 0:\n                         flowerbed[i] = 1\n                         n -= 1\n             else:\n                 if flowerbed[i-1] == 0 and flowerbed[i+1] == 0 and flowerbed[i] == 0:\n                     flowerbed[i] = 1\n                     n -= 1\n         return not (n>0)\n", "class Solution:\n     def canPlaceFlowers(self, flowerbed, n):\n         \"\"\"\n         :type flowerbed: List[int]\n         :type n: int\n         :rtype: bool\n         \"\"\"\n         lenFb = len(flowerbed)\n         for i in range(lenFb):\n             if i == 0:\n                 if flowerbed[i] == 0:\n                     if i == lenFb -1:\n                         flowerbed[i] = 1\n                         n -= 1\n                     elif flowerbed[i+1] == 0:\n                         flowerbed[i] = 1\n                         n -= 1\n             elif i == lenFb - 1:\n                 if flowerbed[i] == 0:\n                     if flowerbed[i-1] == 0:\n                         flowerbed[i] = 1\n                         n -= 1\n             else:\n                 if flowerbed[i-1] == 0 and flowerbed[i+1] == 0 and flowerbed[i] == 0:\n                     flowerbed[i] = 1\n                     n -= 1\n         return (n<=0)\n", "class Solution:\n     def canPlaceFlowers(self, flowerbed, n):\n         \"\"\"\n         :type flowerbed: List[int]\n         :type n: int\n         :rtype: bool\n         \"\"\"\n         canPlant=0\n         if len(flowerbed)==1:\n             if flowerbed[0]==0:\n                 canPlant +=1\n                 flowerbed[0]=1\n         else:\n             for i in range(len(flowerbed)):\n                 if flowerbed[i]==0:\n                     if i ==0:\n                         if flowerbed[i+1]==0:\n                             flowerbed[i]=1\n                             canPlant+=1\n                     elif i == len(flowerbed)-1:\n                         if flowerbed[i-1]==0:\n                             flowerbed[i]=1\n                             canPlant+=1\n                     else:\n                         if flowerbed[i+1]==0 and flowerbed[i-1]==0:\n                             flowerbed[i]=1\n                             canPlant+=1   \n         if canPlant >=n:\n             return True\n         else:\n             return False\n            \n", "class Solution:\n     def canPlaceFlowers(self, flowerbed, n):\n         \"\"\"\n         :type flowerbed: List[int]\n         :type n: int\n         :rtype: bool\n         \"\"\"\n         count, pos = 0, 0\n         while pos < len(flowerbed):\n             if (pos - 1 < 0 or not flowerbed[pos-1]) and \\\n                 (not flowerbed[pos]) and \\\n                 (pos + 1 > len(flowerbed) - 1 or not flowerbed[pos+1]):\n                 print(pos)\n                 count+=1\n                 pos+=2\n             else:\n                 pos+=1\n         return count >= n", "class Solution:\n     def canPlaceFlowers(self, flowerbed, n):\n         \"\"\"\n         :type flowerbed: List[int]\n         :type n: int\n         :rtype: bool\n         \"\"\"\n         result = False\n         if n == 0:\n             return True\n         if flowerbed:\n             if len(flowerbed) == 1:\n                 if flowerbed[0] == 0:\n                     flowerbed[0] = 1\n                     n -= 1\n                     return n == 0\n             for i in range(len(flowerbed)):\n                 left, right = False, False\n                 if flowerbed[i] == 0 and n != 0:\n                     if i == 0 and len(flowerbed) >= 2:\n                         if flowerbed[i] == 0 and flowerbed[i + 1] == 0:\n                             flowerbed[i] = 1\n                             n -= 1\n                     else:\n                         left = i - 1 >= 0 and flowerbed[i - 1] == 0 \n                     \n                     if i == len(flowerbed) - 1 and len(flowerbed) >= 2:\n                         if flowerbed[i] == 0 and flowerbed[i - 1] == 0:\n                             flowerbed[i] =1 \n                             n -= 1\n                     else:\n                         right = i + 1 < len(flowerbed) and flowerbed[i + 1] == 0\n                     \n                     if left and right:\n                         flowerbed[i] = 1\n                         n -= 1\n             result = (n == 0)\n         return result", "class Solution:\n     def canPlaceFlowers(self, flowerbed, n):\n         \"\"\"\n         :type flowerbed: List[int]\n         :type n: int\n         :rtype: bool\n         \"\"\"\n         if n==0:\n             return True\n         temp=0\n         m=0\n         if flowerbed[0]==0:\n             temp=1\n         for i,plot in enumerate(flowerbed):\n             if plot==0:\n                 temp+=1\n                 if(i==len(flowerbed)-1):\n                     temp+=1\n             if plot==1 or i==len(flowerbed)-1:\n                 m+=int((temp-1)/2)\n                 temp=0\n             if m>=n:\n                 return True\n         return False\n"]