["def geometric_sequence_elements(a, r, n):\n    return ', '.join(str(a * r ** i) for i in range(n))\n", "def geometric_sequence_elements(a, r, n):\n    l = []\n    for _ in range(n):\n        l.append(str(a))\n        a *= r\n    return \", \".join(l)\n", "def geometric_sequence_elements(a, r, n):\n    return \", \".join(str(a * r**i) for i in range(n))\n", "def geometric_sequence_elements(a, r, n):\n    return ', '.join([str(a*r**x) for x in list(range(n))])", "def geometric_sequence_elements(a, r, n):\n    return str([a*pow(r,i) for i in range(n)])[1:-1]", "def geometric_sequence_elements(a, r, n):\n    arr = [a]\n    for i in range(n - 1):\n        arr.append(arr[i] * r)\n    return ', '.join(map(str, arr))", "geometric_sequence_elements=lambda a,r,n:', '.join(str(a*r**e) for e in range(n))", "def geometric_sequence_elements(a, r, n):\n    res = [a]\n    for i in range(n - 1):\n        res.append(res[-1] * r)\n    return ', '.join(map(str, res))", "def geometric_sequence_elements(a, r, n):\n    seq = []\n    for i in range(n):\n        seq.append(a*r**i)\n    return ', '.join(str(e) for e in seq)", "def geometric_sequence_elements(a, r, n):\n  string = \"\"\n  for x in range(0,n):\n    if x!=n-1:\n      string += str(a * (r ** x)) + \", \"\n    else:\n      string += str(a * (r ** x))\n  return(string)"]