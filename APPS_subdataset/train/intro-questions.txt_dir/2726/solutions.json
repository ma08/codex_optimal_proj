["def square_it(digits):\n    s = str(digits)\n    n = len(s)**0.5\n    if n != int(n):\n        return \"Not a perfect square!\"\n    n = int(n)\n    return \"\\n\".join(s[i*n:i*n+n] for i in range(int(n)))", "square_it=lambda n:len(str(n))**.5%1and\"Not a perfect square!\"or'\\n'.join(map(''.join,zip(*[iter(str(n))]*int(len(str(n))**.5))))", "def square_it(n):\n    s=str(n)\n    x=len(s)**.5\n    if x%1: return \"Not a perfect square!\"\n    x=int(x)\n    return '\\n'.join(s[i:i+x] for i in range(0,len(s),x))", "square_it=lambda d:\"Not a perfect square!\"if len(str(d))**.5%1else''.join(str(d)[i:i+int(len(str(d))**.5)]+'\\n'for i in range(0,len(str(d)),int(len(str(d))**.5)))[:-1]", "def square_it(digits):\n    digits = str(digits)\n    l = int(len(digits) ** 0.5)\n    if l ** 2 == len(digits):\n        return \"\\n\".join(digits[i * l:i * l + l] for i in range(l))\n    else:\n        return \"Not a perfect square!\"", "import math\n\ndef square_it(digits):\n    strdigits = str(digits)\n    sq = math.sqrt(len(strdigits))\n    if(round(sq,0) == sq):\n      arr = []\n      sqint = int(sq)\n      for a in range(0,sqint):\n        line = \"\"\n        for b in range(0,sqint):\n          line += strdigits[a*sqint+b]\n        arr.append(line)\n      return \"\\n\".join(arr)\n    else:\n      return \"Not a perfect square!\"\n", "def square_it(digits):\n    d = len(str(digits))**.5\n    return '\\n'.join(map(''.join, zip(*[iter(str(digits))]*int(d)))) if int(d) == d  else 'Not a perfect square!'", "from re import findall\n\ndef square_it(digits):\n    digits_string = str(digits)\n    root = len(digits_string) ** 0.5\n    if root.is_integer():\n        return '\\n'.join(findall('.{'+str(int(root))+'}',digits_string))  \n    return 'Not a perfect square!'"]