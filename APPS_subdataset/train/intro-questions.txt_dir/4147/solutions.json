["def play_pass(s, n):\n\n    # Step 1, 2, 3\n    shiftText = \"\"\n    for char in s:\n        if char.isdigit():\n            shiftText += str(9 - int(char))\n        elif char.isalpha():\n            shifted = ord(char.lower()) + n\n            shiftText += chr(shifted) if shifted <= ord('z') else chr(shifted - 26)\n        else:\n            shiftText += char\n\n    # Step 4\n    caseText = \"\"\n    for i in range(len(shiftText)):\n        caseText += shiftText[i].upper() if i % 2 == 0 else shiftText[i].lower()\n\n    # Step 5\n    return caseText[::-1]\n\n", "def play_pass(s, n):\n    slower = s.lower()\n    change = ''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\n    for i,char in list(enumerate(slower)):\n        if char in alphabet:\n            ind = (alphabet.index(char) + n)\n            if ind >= 26:\n                ind = ind % 26\n            if i % 2 == 0:\n                change += alphabet[ind].upper()\n            else:\n                change += alphabet[ind].lower()\n        elif char.isdigit():\n            change += str(9 - int(char))\n        else:\n            change += char\n\n    return change[::-1]", "def play_pass(s, n):\n    passphrase = list(s)\n    for i in range(0, len(s)):\n        if passphrase[i].isalpha():\n            ascii = ord(passphrase[i].lower())\n            passphrase[i] = chr(ascii+n-26) if ascii+n > 122 else chr(ascii+n)\n            passphrase[i] = passphrase[i].lower() if i % 2 == 1 else passphrase[i].upper()\n        if passphrase[i].isdigit():\n            passphrase[i] = str(9 - int(passphrase[i]))\n            \n    return ''.join(passphrase[::-1])", "from string import digits, ascii_uppercase as auc\ndef play_pass(s, n):\n    return ''.join(a.lower() if c % 2 else a for c, a in enumerate(s.translate(str.maketrans(auc + digits, auc[n:] + auc[:n] + digits[::-1]))))[::-1]", "def play_pass(s, n):\n    return \"\".join([c.lower() \n                    if (i % 2 != 0) \n                    else c\n                    for i, c in enumerate([chr((ord(c) - 65 + n) % 26 + 65)\n                                          if (ord(c) in range(65, 91))\n                                          else str(abs(int(c) - 9))\n                                          if (ord(c) in range(48, 58))\n                                          else c for c in s])][::-1])", "def play_pass(phrase, n):\n    output = ''\n    for i, char in enumerate(phrase):\n        if char.isdigit():\n            char = str(9 - int(char))\n        elif char.isalpha():\n            code = (ord(char) - 65 + n) % 26\n            char = chr(code + 65)\n        if i & 1:\n            char = char.lower()\n        output = char + output\n    return output", "from string import ascii_uppercase as letters, digits\n\ndef play_pass(s, n):\n    return \"\".join(c.lower() if i & 1 else c\n        for i, c in enumerate(s.upper().translate(\n            str.maketrans(letters + digits, letters[n:] + letters[:n] + digits[::-1])\n        )))[::-1]", "from string import ascii_lowercase as s\n\ndef play_pass(message,key):\n    m = message.lower().translate(str.maketrans(s+\"0123456789\",s[key%26:]+s[:key%26]+\"9876543210\"))\n    return \"\".join([j if i%2==1 else j.upper() for i,j in enumerate(m)][::-1])", "from collections import deque\n\ndef play_pass(s, n):\n    d = deque( chr(ord('A')+x) for x in range(26) )\n    d.rotate(-n)\n    return ''.join( d[ord(c)-ord('A')].lower() if c.isalpha() and i%2\n                    else d[ord(c)-ord('A')] if c.isalpha()\n                    else str(9-int(c)) if c.isdigit()\n                    else c for i,c in enumerate(s) )[::-1]"]