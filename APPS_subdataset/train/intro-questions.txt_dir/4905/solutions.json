["def answer(puzzlebox):\n    return 42", "def answer(puzzlebox):\n    #print(dir(puzzlebox))\n    #puzzlebox.hint\n    #print(puzzlebox.hint_two)\n    #print(puzzlebox.lock(puzzlebox.key))\n    return 42\n    pass", "# 09/01/2019\n# I did all the work in the Sample Test section, then after submitting my answer, all of my work in the Sample Test section is gone.  \n# So I'm doing this over and will incude my test data here as so it does not vanish when submitting the work. \n# I think from now on I will use my local machine so I don't loose all of my testing steps and have to do it all over again.\n\ndef answer(puzzlebox):  \n    # Print statements are your friend.\n    return(42)\n    \n#*** Below is the test dataand process I used to figure out that returning then number 42 is the the solution to the challenge ***\n\n#Printing attributes of puzzlebox\nprint((dir(puzzlebox))) # Returns the puzzlebox object attributes\nprint((list(dir(puzzlebox))[25:30])) #prints attributes with values from puzzlebox [answer, hint, hint_two, key, lock]\n\n#See values assigned to the puzzlebox object\nprint((puzzlebox.answer))      # returns \"Ha, not quite that easy.\"\nprint((puzzlebox.hint))        # returns \"How do you normally unlock things?\nprint((puzzlebox.hint_two))    # returns \"The lock attribute is a method.  Have you called it with anything yet? \"   \nprint((puzzlebox.key))         # returns \"50\", but running code again returns \"78\", then \"57\", so key is a random number\nprint((puzzlebox.lock))        # returns \"<bound method Puzzlebox.lock of The built-in dir() function is useful. \n                             # Continue adding print statements till you know the answer.>\n\n#Try passing stuff to the lock function as suggested by hint_two\nnum = 2\nfloat = 2.3\nbool = False\nstr = \"hello\"\n\nprint((puzzlebox.lock(num)))             # returns \"Did you know the key changes each time you print it?\"\nprint((puzzlebox.lock(float)))           # returns \"This method expects an integer.\"\nprint((puzzlebox.lock(bool)))            # return  \"This method expects an integer.\"\nprint((puzzlebox.lock(str)))             # returns \"This method expects an integer.\"\nprint((puzzlebox.lock(puzzlebox.key)))   # returns \"You put the key in the lock! The answer is, of course, 42. \n                                       # Return that number from your answer() function to pass this kata.\"\n                                       # HOORAY!  Just return the number 42!\n\n\n", "import random\n\n\nclass Puzzlebox(object):\n    \"\"\"Puzzlebox for codewars kata.\"\"\"\n\n    def __init__(self):\n        self.key = random.randint(1, 99)\n\n    answer = \"Ha, not quite that easy.\\n\"\n\n    hint = \"How do you normally unlock things?\\n\"\n        \n    hint_two = \"The lock attribute is a method. Have you called it with anything yet?\\n\"\n\n    def lock(self, *args):\n        if len(args) != 1:\n            return \"This method expects one argument.\\n\"\n        elif type(args[0]) != int:\n            return \"This method expects an integer.\\n\"\n        elif args[0] != self.key:\n            return \"Did you know the key changes each time you print it?\\n\"\n        else:\n            return \"You put the key in the lock! The answer is, of course, 42. Return that number from your answer() function to pass this kata.\\n\"\n\n    def __repr__(self):\n        return \"The built-in dir() function is useful. Continue adding print statements till you know the answer.\\n\"\n\ndef answer(puzzlebox):\n    return 42\n    \nprint((answer(puzzlebox)))\n\n", "#print(dir(puzzlebox))\n#print(\"The answer component of puzzlebox is {}.\".format(puzzlebox.answer))\n#print(\"The hint component of puzzlebox is {}.\".format(puzzlebox.hint))\n#print(\"The hint_two component of puzzlebox is {}.\".format(puzzlebox.hint_two))\n#print(\"The key component of puzzlebox is {}.\".format(puzzlebox.key))\n#print(\"The lock component of puzzlebox is {}.\".format(puzzlebox.lock))\n    \ndef answer(puzzlebox):\n    return 42\n\n#The answer component of puzzlebox is Ha, not quite that easy.\n\n", "def answer(puzzlebox):\n\n    return 42\n\n\nprint((type(dir(puzzlebox))))\nfor i in dir(puzzlebox):  \n    print(i)\n      \n      \nx = Puzzlebox()\nprint(x)\nprint((x.answer))\nprint((x.hint))\nprint((x.hint_two))\nprint((x.key))\nprint((x.lock(x.key)))\n# x.lock(x.key)\n", "def answer(puzzlebox):\n    # Print statements are your friend.\n    print(dir(puzzlebox))\n    #print(puzzlebox.answer)\n    print(puzzlebox.hint)\n    print(puzzlebox.hint_two)\n    print(puzzlebox.key)\n    print(puzzlebox.lock(puzzlebox.key))\n    return 42", "def answer(puzzlebox):\n    #print(puzzlebox.key)\n    k=puzzlebox.key\n    print(puzzlebox.lock(k))\n    return 42", "def answer(x):\n    return 42", "def answer(puzzlebox):\n    return 42\n    #print(dir(puzzlebox)\n    # Print statements are your friend.\n    \nprint(dir(puzzlebox))\nprint(puzzlebox.answer)\nprint(puzzlebox.hint)\nprint(puzzlebox.hint_two)\nprint(puzzlebox.key)\nprint(puzzlebox.lock)\nprint( puzzlebox.lock(puzzlebox.key))\nprint(puzzlebox.key)"]