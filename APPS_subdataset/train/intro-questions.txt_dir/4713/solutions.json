["from itertools import permutations\n\ndef late_clock(digits):\n  for p in permutations(sorted(digits, reverse=True)):\n    if p[0] > 2 or (p[0] == 2 and p[1] > 3) or p[2] > 5: continue\n    return '{}{}:{}{}'.format(*p)", "def late_clock(digits):\n    res, digits = [], digits[:]\n    def rec(i):\n        if i == 3:\n            res.append(digits.pop())\n            return True\n        maxi = 2 if i==0 else 5 if i==2 else 3 if res[0]==2 else 9\n        for x in range(maxi, -1, -1):\n            if x in digits:\n                res.append(digits.pop(digits.index(x)))\n                if rec(i+1): return True\n                digits.append(res.pop())\n        return False\n        \n    rec(0)\n    return \"{}{}:{}{}\".format(*res)", "from itertools import permutations\n\n\ndef late_clock(digits):\n    for combo in permutations(sorted(digits, reverse=True)):\n        if combo[:2] < (2, 4) and combo[2] < 6:\n            return \"{}{}:{}{}\".format(*combo)", "from itertools import permutations\n\ndef late_clock(digits):\n    return max(\n        f'{a}{b}:{c}{d}'\n        for a,b,c,d in permutations(digits)\n        if 0 <= a*10+b < 24 and 0 <= c*10+d < 60\n    )", "def late_clock(digits):\n    result = ''\n    minute = '_'\n    lessSix = 0\n    digits = sorted(digits, reverse = True)\n    for d in digits:\n        if d < 6:\n            lessSix += 1\n    for d in digits:\n        if d < 3:\n            if lessSix < 3 and d == 2:\n                continue\n            result += str(d)\n            digits.remove(d)\n            break\n    for d in digits:\n        if (d < 4 and result == '2') or (d < 10 and result != '2'):\n            result += str(d) + ':'\n            digits.remove(d)\n            break\n    for d in digits:\n        if d < 6:\n            minute= str(d)\n            digits.remove(d)\n            break\n    result += minute + str(digits.pop())\n    return result", "from itertools import permutations\n\ndef late_clock(digits):\n    return \"{}{}:{}{}\".format(*max(c for c in permutations(digits) if c[:2] < (2,4) and c[2:] < (6,0)))", "from itertools import permutations\n\ndef late_clock(digits):\n    mx = max(t for t in [''.join(p) for p in permutations(''.join(str(d) for d in digits))] if t[:2] < '24' and t[2:] < '60')\n    return '{}:{}'.format(mx[:2], mx[2:])", "from itertools import permutations\n\n\ndef late_clock(digits):\n    decreasing_combos = permutations(sorted(digits, reverse=True))\n    max_combo = next(c for c in decreasing_combos if c[:2] < (2, 4) and c[2] < 6)\n    return \"{}{}:{}{}\".format(*max_combo)", "from itertools import *\nfrom datetime import *\n\ndef late_clock(digits):\n    dt = []\n    for a,b,c,d in permutations(digits,4):\n        try:\n            dt.append(datetime.strptime(f'{a}{b}:{c}{d}', '%H:%M'))\n        except:\n            pass\n    return max(dt).strftime('%H:%M')", "from datetime import datetime as dt\nfrom itertools import permutations\ndef late_clock(a):\n    li = []\n    for i in permutations(list(map(str, a))): \n        try : d = dt.strptime(f'{\"\".join(i[:2])}:{\"\".join(i[2:])}', \"%H:%M\")\n        except : continue\n        li.append(d)\n    return str(min(li, key=lambda x: dt.now() - x))[11:16]"]