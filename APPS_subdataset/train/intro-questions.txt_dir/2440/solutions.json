["class Solution:\n     \n     dictionary = {}\n     def climbStairs(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"\n         number = 0\n         if n == 0 or n == 1:\n             return 1\n         if n in self.dictionary:\n             return self.dictionary[n]\n         else:\n             number += self.climbStairs(n - 1) + self.climbStairs(n - 2)\n             self.dictionary[n] = number\n         return number", "class Solution:\n     def climbStairs(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"\n         result = [1 for i in range(n+1)]\n         for i in range(2, n + 1):\n             result[i] = result[i - 1] + result[i - 2]\n         return result[n]", "class Solution:\n     def climbStairs(self, n):\n         T = [1, 1]\n         for i in range(2, n+1):\n             T[i%2] = T[(i - 2)%2] + T[(i-1)%2]\n         return T[n%2]\n     \n     \n     def iterative_climbStairs(self, n):\n         T = [-1]*n\n         T[0] = 0\n         T[1] = 1\n         for i in range(2, n+1):\n             T[i] = T[i - 2] + T[i - 1]\n         return T[n]\n         \n     \n     def recursive_climbStairs(self, T, n):\n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"\n         if (n in T):\n             return T[n]\n         if (n < 0):\n             return 0\n         if (n < 2):\n             return 1\n         T[n] = self.climbStairs(n - 2) + self.climbStairs(n - 1)\n         return T[n]", "class Solution:\n     def climbStairs(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"\n         steps = [0, 1, 2]\n         if n < 3:\n             return steps[n]\n         for i in range(3,n+1):\n             steps.append(steps[i-1] + steps[i-2])\n         return steps[n]", "class Solution:\n     def climbStairs(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"\n         # f(i) = f(i-1) + f(i-2)\n         if n == 0 or n == 1:\n             return 1\n         f2, f1 = 1, 1\n         for i in range(2, n+1):\n             f = f1 + f2\n             f2, f1 = f1, f\n         return f\n     \n     def climbStairs(self, n):\n         F = {0:1, 1:1}\n         def f(i):\n             if i in F:\n                 return F[i]\n             else:\n                 F[i] = f(i-1) + f(i-2)\n                 return F[i]\n         return f(n)", "class Solution:\n     def climbStairs(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"\n         if n == 1:\n             return 1\n         \n         dp = [0]*(n+1)\n         dp[0] = 1\n         dp[1] = 1\n         \n         for i in range(2,n+1):\n             dp[i] += dp[i-1] +dp[i-2]\n         return dp[n]\n", "class Solution:\n     def climbStairs(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"\n         if n < 3:\n             return n\n         a = [1, 2]\n         for i in range(2, n):\n             a.append(a[i-1] + a[i-2])\n         return a[n-1]", "class Solution:\n     def climbStairs(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"\n         if n<=3:\n             return n\n \n         v=[1,2,3]\n         for i in range(3,n):\n             v.append(v[-1]+v[-2])\n         return v[-1]", "class Solution:\n     def climbStairs(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"\n         a = 1\n         b = 2\n         if n < 2:\n             return 1\n         for i in range(n-2):\n             a,b = b, a+b\n             \n         return b", "class Solution:\n     def climbStairs(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"\n         #\u9012\u5f52\u8d85\u65f6\u3002\u3002\n         # if n == 1:\n         #     return 1\n         # if n == 2:\n         #     return 2\n         # return self.climbStairs(n-1)+self.climbStairs(n-2)\n     \n         #\u6539\u8fdb\u9012\u5f52\uff0c\u4f7f\u7528cache\n         cache = {}\n         def f(n):\n             if n == 1:\n                 return 1\n             if n == 2:\n                 return 2\n             if n in list(cache.keys()):\n                 return cache[n]\n             cache[n] = f(n-1) + f(n-2)\n             return cache[n]\n         return f(n)\n         \n     \n         #\u6539\u6210\u5faa\u73af\u3002\u9012\u63a8\u516c\u5f0f\u4e3a\u3002f(n) = f(n-1) + f(n-2)\n         \n", "class Solution:\n     def climbStairs(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"\n         \n         # n[0] = 1\n         # n[1] = 1\n         # n[2] = n[0] + n[1]\n         # n[3] = n[1] + n[2]\n         # n[4] = n[2] + n[3]\n         \n         if n == 0 or n == 1:\n             return 1\n         \n         ns = [1, 1]\n         for i in range(2, n):\n             ns[i%2] = sum(ns)\n             \n         return sum(ns)\n         \n", "class Solution:\n     def climbStairs(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"\n         if n <= 0:\n             return 0\n         if n==1:\n             return 1\n         if n==2:\n             return 2\n         a, b=1,2\n         for i in range(n)[2:]:\n             a,b=b,a+b\n         return b\n"]