["def tops(msg):\n    n = len(msg)\n    res,i,j,k = \"\",2,2,7\n    while i < n:\n        res = msg[i:i+j] + res\n        i,j,k=i+k,j+1,k+4\n    return res", "def transform(i): return (3*i-4+2*(i-1)*(i-2), i)\n\ndef tops(msg):\n    iMax = int((3+(9+8*len(msg))**.5) / 4)\n    return ''.join( msg[i:i+c] for i,c in map(transform, reversed(range(2,iMax+1))) )", "def tops(msg):\n    i,l, step, st = 2,2,2, []\n    while l<len(msg):\n        st.insert(0, msg[l:l+i] )\n        step += 3\n        l += step + i \n        i += 1\n    return ''.join(st)\n", "from math import ceil\nfrom numpy import roots\n\ndef gen(msg, i, n):\n    while n > 1:\n        yield msg[i:i+n]\n        n -= 1\n        i -= 4*n - 1\n\ndef tops(msg):\n    number = ceil(roots((2, 5, 2-len(msg)))[1]) + 1\n    start = number * (2*number - 3)\n    return ''.join(gen(msg, start, number))", "from itertools import count\n\ndef tops(msg):\n    deltas = count(7, 4)\n    xs = []\n    i, n = 2, 2\n    while i < len(msg):\n        xs.append(msg[i:i+n])\n        i += next(deltas)\n        n += 1\n    return ''.join(reversed(xs))", "def tops(msg):\n    if msg:\n        step = int(((2 * len(msg) - 1)**0.5 + 3) / 2)\n        result = [msg[n*(2*n+1)-1:2*n*(n+1)] for n in range(1, step)]\n        return \"\".join(reversed(result))\n    return \"\"\n", "def tops(s):\n    tops, start = [s[2:4]], 2\n    while start < len(s):\n        l = len(tops[-1])\n        start += (l - 1) * 2 + l * 2 + 1\n        tops.append(s[start:start + l + 1]) \n    return \"\".join(tops[::-1])", "def tops(msg):\n    return \"\".join(msg[(i*2-1)*(i+1):i*(i+1)*2] for i in range(int(1+(-1+(1+2*len(msg))**0.5)*0.5),0,-1))", "def tops(msg):\n    r=[]\n    for i in range(int(1+(-1+(1+2*len(msg))**0.5)*0.5),0,-1):\n        r.append(msg[(i*2-1)*(i+1):i*(i+1)*2])\n    return ''.join(r)", "def tops(msg):\n    return \"\".join(msg[n*(2*n-3):2*n*(n-1)] for n in range(int((3 + (9 + 8*len(msg))**.5)/4), 1, -1))"]