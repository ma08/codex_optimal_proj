["def blocks_to_collect(level):\n    answer = {\n    'total': sum([(i+3+i)**2 for i in range(level)]),\n    'gold': sum([(i+3+i)**2 for i in range(0,level,4)]),\n    'diamond': sum([(i+3+i)**2 for i in range(1,level,4)]),\n    'emerald': sum([(i+3+i)**2 for i in range(2,level,4)]),\n    'iron': sum([(i+3+i)**2 for i in range(3,level,4)]),\n    }\n    \n    return answer", "from itertools import count, cycle, islice\n\nBLOCKS = [\"gold\", \"diamond\", \"emerald\", \"iron\"]\n\n\ndef blocks_to_collect(level):\n    result = dict.fromkeys(BLOCKS, 0)\n    for block, n in zip(islice(cycle(BLOCKS), level), count(3, step=2)):\n        result[block] += n ** 2\n    return {**result, \"total\": sum(result.values())}", "def blocks_to_collect(height):\n    stuff = [0, 0, 0, 0]\n    for level in range(height):\n        stuff[level % 4] += (2 * level + 3)**2\n    return dict(list(zip((\"gold\", \"diamond\", \"emerald\", \"iron\", \"total\"), stuff + [sum(stuff)])))\n", "def blocks_to_collect(level):\n    beacon = {x:0 for x in \"total gold diamond emerald iron\".split(\" \")}\n    for l in range(1,level+1):\n        mode = (\"gold diamond emerald iron\".split(\" \"))[(l-1)%4]\n        blocks = (2*l+1)**2\n        beacon[\"total\"]+=blocks\n        beacon[mode]+=blocks\n    return beacon\n", "L = [\"gold\", \"diamond\", \"emerald\", \"iron\"]\n\ndef blocks_to_collect(level):\n    D = {\"total\": 0, \"gold\": 0, \"diamond\": 0, \"emerald\": 0, \"iron\": 0}\n    for i,x in enumerate(range(3, 2*level+2, 2)): D[L[i%4]] += x**2\n    D[\"total\"] = level + 4 * level * (level + 1) * (level + 2) // 3 # Cause why not\n    return D", "def blocks_to_collect(l):\n    t = l*(4*l*(l+3)+11)//3\n    g = ((l+3)//4)*(8*((l+3)//4)*(8*((l+3)//4)-3)-13)//3\n    d = ((l+2)//4)*(8*((l+2)//4)*(8*((l+2)//4)+3)-13)//3\n    e = ((l+1)//4)*(8*((l+1)//4)*(8*((l+1)//4)+9)+11)//3\n    i = (l//4)*(8*(l//4)*(8*(l//4)+15)+59)//3\n    return {\"total\": t, \"gold\": g, \"diamond\": d, \"emerald\": e, \"iron\": i}", "def blocks_to_collect(x):\n    return {\"total\": (4*(x**3)+12*(x**2)+11*x)//3,\"gold\": (64*((1+(x-1)//4)**3)-24*((1+(x-1)//4)**2)-13*(1+(x-1)//4))//3,\"diamond\": (64*((1+(x-2)//4)**3)+24*((1+(x-2)//4)**2)-13*(1+(x-2)//4))//3,\"emerald\": (64*((1+(x-3)//4)**3)+72*((1+(x-3)//4)**2)+11*(1+(x-3)//4))//3,\"iron\": (64*((1+(x-4)//4)**3)+120*((1+(x-4)//4)**2)+59*(1+(x-4)//4))//3}", "from itertools import cycle\n\ndef blocks_to_collect(level):\n    materials = cycle(('gold', 'diamond', 'emerald', 'iron'))\n    res = {\"total\": 0, \"gold\": 0, \"diamond\": 0, \"emerald\": 0, \"iron\": 0}\n    for x in range(3, 2*level+2, 2): \n        material = next(materials)\n        res[material] += x**2\n        res['total'] += x**2\n    return res        ", "def blocks_to_collect(level):\n    seq = ['gold', 'diamond', 'emerald', 'iron']\n    result = {\n        \"total\": 0, \n        \"gold\": 0, \n        \"diamond\": 0, \n        \"emerald\": 0, \n        \"iron\": 0\n    }\n    for i in range(1, level + 1):\n        n = (i * 2 + 1) ** 2\n        result['total'] += n\n        result[seq[(i - 1) % len(seq)]] += n\n    return result", "def blocks_to_collect(level):\n    order, output, count = ['gold', 'diamond', 'emerald', 'iron'], {\"total\": 0, \"gold\": 0, \"diamond\": 0, \"emerald\": 0, \"iron\": 0}, 3\n    for loop in range(level):\n        square = count * count\n        output[\"total\"] += square\n        output[order[loop % 4]] += square\n        count += 2\n    return output"]