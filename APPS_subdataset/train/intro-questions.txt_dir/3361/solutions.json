["def sum_of_minimums(numbers):\n    return sum(map(min, numbers))", "def sum_of_minimums(numbers):\n    return sum([min(rows) for rows in numbers])", "def sum_of_minimums(numbers):\n    return sum(min(xs) for xs in numbers)", "def sum_of_minimums(numbers):\n    total = 0\n    for nums in numbers:\n        total += min(nums)\n    return total", "def sum_of_minimums(numbers):\n    return sum(min(row) for row in numbers)", "def sum_of_minimums(a):\n    return sum(map(min, a))", "def sum_of_minimums(numbers):\n    \n    answer = []\n    \n    for array in numbers:\n        answer.append(min(array))\n        \n    return sum(answer)", "def sum_of_minimums(numbers):\n    return sum(min(v)for v in numbers)", "def sum_of_minimums(numbers):\n    return sum([min(x) for x in numbers])", "def sum_of_minimums(numbers):\n    return sum([min(l) for l in numbers])", "def sum_of_minimums(numbers):\n    return sum([min(i) for i in numbers])", "from typing import List\n\ndef sum_of_minimums(numbers: List[int]) -> int:\n    \"\"\" Find the sum of minimum value in each row. \"\"\"\n    return sum(map(min, numbers))\n", "from typing import List\n\ndef sum_of_minimums(numbers: List[int]) -> int:\n    \"\"\" Find the sum of minimum value in each row. \"\"\"\n    return sum([min(_num_list) for _num_list in numbers])\n", "def sum_of_minimums(num): return sum([min(i) for i in num])", "sum_of_minimums=lambda l:sum(min(e)for e in l)", "def sum_of_minimums(a):\n    return sum(min(sub_a) for sub_a in a)", "def sum_of_minimums(numbers):\n    summ = 0\n    for i in numbers:\n       x = sorted(i)[0]\n       summ+=x\n\n    return summ", "def sum_of_minimums(numbers):\n    pass\n    print(('Input: ', numbers))\n    x = 0\n    mini = 0\n    answer = []\n    for i in numbers:\n        mini = [min(numbers[x])]\n        answer.append(mini)\n        x+=1   \n    res = [sum(i) for i in zip(*answer)] \n    stringres = [str(i) for i in res]\n    finalres = int(\"\".join(stringres))\n    return int(finalres)    \n", "def sum_of_minimums(arr):\n    return sum(min(lst) for lst in arr)", "def sum_of_minimums(a):\n    m=[]\n    \n    for i in a:\n        m.append(min(i))\n        \n    return(sum(m))", "def sum_of_minimums(numbers):\n    return sum([sorted(x)[0] for x in numbers])", "sum_of_minimums = lambda num: sum([sorted(i)[0] for i in num]) #This is a stupid comment from yours truly -Mr. Stupido", "def sum_of_minimums(numbers):\n    output = 0\n    for row in numbers:\n        row.sort()\n        output += row[0]\n    return output    ", "def sum_of_minimums(numbers):    \n    return sum(min(m) for m in numbers)", "def sum_of_minimums(numbers):\n    return sum([sorted(numbers[i],reverse=True)[-1] for i in range(len(numbers))])", "def sum_of_minimums(numbers):\n    return sum([min(sub) for sub in numbers])", "sum_of_minimums=lambda n:sum(map(min,n))", "def sum_of_minimums(numbers):\n    results=[]\n    for x in numbers:\n        results.append(sorted(x)[0])\n    return sum(results)\n", "def sum_of_minimums(numbers):\n    sum = 0\n    for i in range(len(numbers)):\n        min = numbers[i][0]\n        for j in range(1, len(numbers[i])):\n            if numbers[i][j] < min:\n                min = numbers[i][j]\n        sum += min\n    return sum", "from functools import reduce\n\ndef sum_of_minimums(numbers):\n    return reduce(lambda x, y: min(y) + x, numbers, 0)", "def sum_of_minimums(numbers):\n    minimos = map(min, numbers)\n    suma_minimos = sum (minimos)\n    return suma_minimos", "def sum_of_minimums(numbers):\n    ms=0\n    \n    for i in range(len(numbers)):\n        ms+=min(numbers[i])\n    return ms", "def sum_of_minimums(numbers):\n    return sum(sorted(i).pop(0) for i in numbers)", "def sum_of_minimums(numbers):\n    return sum(sorted(i, reverse=True).pop() for i in numbers)", "def sum_of_minimums(numbers):\n    new_list = [ ]\n    mini = 0\n    for i in numbers:\n        mini = min(i)\n        new_list.append(mini)\n    return sum(new_list)", "def sum_of_minimums(numbers):\n    sum = 0\n    for i in numbers:\n        new = sorted(i)\n        sum += new[0]\n    return sum\n", "def sum_of_minimums(n):\n    return sum(min(e) for e in n)\n", "def sum_of_minimums(numbers):\n    sum = 0\n    for n in range(len(numbers)):\n        sum += sorted(numbers[n])[0]\n    return sum", "def sum_of_minimums(numbers):\n    s = 0\n    for el in numbers:\n        min(el)\n        s = s + min(el)\n    return s", "def sum_of_minimums(numbers):\n    s = 0\n    for el in numbers:\n        s = s + min(el)\n    return s", "def sum_of_minimums(numbers):\n    s = 0\n    for el in numbers:\n        s += min(el)\n    return s", "def sum_of_minimums(numbers):\n    mini = [min(el) for el in numbers]\n    return sum(mini)", "def sum_of_minimums(numbers):\n    count = []\n    for n in numbers:\n        count.append(min(n))\n    return sum(count)\n", "def sum_of_minimums(nums):\n    return sum(min(x) for x in nums)\n", "def sum_of_minimums(numbers):\n    a = [min(x) for x in numbers]\n    return sum(a)", "def sum_of_minimums(numbers):\n  b = []\n  for i in range(0, len(numbers)):\n    b.append(min(numbers[i]))\n  c = 0\n  for j in range (0, len(b)):\n    c += b[j]\n  return c", "def sum_of_minimums(numbers):\n    \n    total_sum = 0\n    i = 0\n    while i < len(numbers):\n        total_sum += min(numbers[i])\n        i += 1\n    return total_sum", "def sum_of_minimums(numbers):\n    min_sum = int()\n    for num in numbers:\n        min_sum += min(num)\n    return min_sum", "def sum_of_minimums(numbers):\n    mini = []\n    for i in range(len(numbers)):\n        mini.append(min(numbers[i]))\n    return sum(mini)", "def sum_of_minimums(nums):\n    return sum([min(el) for el in nums])", "def sum_of_minimums(numbers):\n    rs = 0\n    for i in numbers:\n        rs += (min(i))\n    return rs", "import numpy as np\ndef sum_of_minimums(numbers):\n    minimums = []\n    for n in numbers:\n        minimums.append(np.min(n))\n    return np.sum(minimums)", "def sum_of_minimums(numbers):\n    summ = 0\n    \n    for i in range(len(numbers)):\n        mini = min(numbers[i])\n        summ += mini\n    return summ", "def sum_of_minimums(n):\n    c=0\n    for i in n:\n        c+=min(i)\n    return c", "def sum_of_minimums(numbers):\n    sum=0\n    \n    for i in range(0,len(numbers)):\n         sum=sum+min(numbers[i])\n         i=i+1   \n            \n    return sum\n", "\ndef sum_of_minimums(numbers):\n    suma = 0\n    for arr in numbers:\n        suma += min(arr)\n    return suma", "def sum_of_minimums(numbers):\n    sum1=0\n    for nums in numbers:\n        sum1+=min(nums)\n    return sum1", "def sum_of_minimums(numbers):\n    here = []\n    for el in numbers:\n        x = min(el)\n        here.append(x)\n    return sum(here)\n", "def sum_of_minimums(numbers):\n    summ_of_minimums = 0\n    for i in range(len(numbers)):\n        numbers[i].sort()\n        summ_of_minimums += numbers[i][0]\n    return(summ_of_minimums)", "def sum_of_minimums(n):\n    return sum(min(a) for a in n)", "def sum_of_minimums(numbers):\n    result = []\n    for counter, value in enumerate(numbers):\n        num = min(numbers[counter])\n        result.append(num)\n    return sum(result)", "def sum_of_minimums(numbers):\n    min = 0\n    \n    for n in numbers:\n        n.sort()\n        min += n[0]\n    return min", "def sum_of_minimums(numbers):\n    mins = []\n    for lists in numbers:\n        lists.sort()\n        mins.append(lists[0])\n    return sum(mins)\n        \n", "def sum_of_minimums(numbers):\n    l = list()\n    for x in numbers:\n        x.sort()\n        l.append(x[0])\n    answer = sum(l)\n    return answer", "def sum_of_minimums(numbers):\n    minimum = 0\n    for i in range(len(numbers)):\n        minimum +=min(numbers[i])\n    return minimum", "def sum_of_minimums(arr):\n    mx = 0\n    for i in range(len(arr)):\n        mn = min(arr[i])\n        mx += mn\n    return mx", "def sum_of_minimums(numbers):\n    som = 0\n    for element in numbers:\n        som += min(element)\n    return som", "def sum_of_minimums(numbers):\n    val = 0\n    for i in numbers:\n        val += min(i)\n    return val", "def sum_of_minimums(numbers):\n    c = [min(c) for c in numbers]\n    return sum(c)", "def sum_of_minimums(numbers):\n    ans = 0\n    for arr in numbers:\n        ans += min(arr)\n    return ans\n", "\ndef sum_of_minimums(numbers):\n    return sum(min(zs) for zs in numbers)", "def sum_of_minimums(numbers):\n    mns=[]\n    for i in range(len(numbers)):\n        mns.append(min(numbers[i]))\n    return sum(mns)", "def sum_of_minimums(numbers):\n    accumulator = 0\n    for eachlist in numbers:\n        accumulator = accumulator + min(eachlist)\n    return accumulator", "def sum_of_minimums(numbers):\n    return sum([min(group) for group in numbers])", "def sum_of_minimums(numbers):\n    x = []\n    for i in numbers:\n        x.append(min(i))\n    return sum(x)", "def sum_of_minimums(numbers):\n    counter = 0\n    for list in numbers:\n        counter += min(list)\n    return counter", "sum_of_minimums = lambda numbers: sum(min(arr) for arr in numbers)", "def sum_of_minimums(numbers):\n    total = 0\n    for value in range(len(numbers)):\n        total += min(numbers[value])\n    return total\n", "def sum_of_minimums(n):\n    sum=0\n    for i in n:\n        sum+=min(i)\n    return sum", "def sum_of_minimums(numbers):\n    return sum(min(numbers[x]) for x in range(0,len(numbers)))", "def sum_of_minimums(numbers):\n    t=0\n    for i in range(len(numbers)):\n        x = min(numbers[i])\n        t += x\n    return t", "def sum_of_minimums(numbers):\n    return sum(sorted(numbers[i])[0] for i in range(len(numbers)))", "def sum_of_minimums(numbers):\n    return sum(min(lst_numbers) for lst_numbers in numbers)", "def sum_of_minimums(numbers):\n    Z=[]\n    for i in numbers:\n        Z.append(min(i))\n        \n    return(sum(Z))", "def sum_of_minimums(numbers):\n    z = []\n    for x in numbers:\n        z.append(min(x))\n    return sum(z)", "def sum_of_minimums(numbers):\n#     for i in numbers:\n#       x =  min(i)\n      return sum(min(i) for i in numbers)", "def sum_of_minimums(numbers):\n    a = list()\n    for i in numbers:\n        a.append(min(i))\n    return sum(a)", "def sum_of_minimums(numbers):\n    sum_num = 0\n    for item in range(len(numbers)):\n        sum_num += min(numbers[item])\n    return sum_num", "def sum_of_minimums (number):\n\n    return sum([min(i) for i in number])", "def sum_of_minimums(numbers):\n    n=0\n    for lista in numbers:\n        n+=min(lista)\n    return n\n", "def sum_of_minimums(numbers):\n    data = []\n    for i in range(len(numbers)):\n        data.append(min(numbers[i]))\n    \n    return (sum(data))", "def sum_of_minimums(numbers):\n  l = []\n  for a in numbers:\n    l.append(min(a))\n  su = sum(l)\n  return su", "def sum_of_minimums(numbers):\n    return sum(map(min, numbers))\n        \nprint(sum_of_minimums([ [ 7,9,8,6,2 ], [6,3,5,4,3], [5,8,7,4,5] ]))", "def sum_of_minimums(argumento):\n    suma_min = []\n\n    while argumento !=[]:\n        var = argumento.pop(0)\n        minvar = min(var)\n        suma_min.append(minvar)\n\n    suma=sum(suma_min)\n\n    return suma\n\n", "def sum_of_minimums(numbers):\n    return sum(min(i for i in l) for l in numbers)\n", "def sum_of_minimums(numbers):\n    return sum(min(sorted(subarray)) for subarray in numbers)", "def sum_of_minimums(numbers):\n    a=[min(x) for x in numbers]\n    return sum(a)\n    #return min(numbers[0])+ min(numbers[1])+ min(numbers[2])\n    pass", "def sum_of_minimums(numbers):\n    minimum_arr = []\n    for arr in numbers:\n        minimum_arr.append(min(arr))\n    return sum(minimum_arr)", "def sum_of_minimums(numbers):\n    x = 0\n    for lst in numbers:\n        x += min(lst)\n    return x", "sum_of_minimums = lambda n: sum( min(a) for a in n )"]