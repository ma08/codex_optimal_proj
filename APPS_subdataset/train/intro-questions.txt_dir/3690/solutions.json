["def solve(s, idx):\n    stack = []\n    for i, c in enumerate(s):\n        if c == '(': stack += [i]\n        if c == ')':\n            if not stack: break\n            if stack.pop() == idx: return i\n                \n    return -1", "def solve(s, i):\n    c = s[i] == '('\n    if not c: return -1\n    while c != 0 and i != len(s):\n        i += 1\n        if   s[i]=='(': c += 1\n        elif s[i]==')': c -= 1\n    return -1 if c != 0 else i", "def solve(st, idx):\n    if st[idx] != '(':\n        return -1\n    open = 1\n    for i in range(idx+1, len(st)):\n        if st[i] == '(':\n            open += 1\n        elif st[i] == ')':\n            open -= 1\n        if open == 0:\n            return i", "def solve(st, idx):\n    if st[idx] != \"(\":\n        return -1\n\n    open_par = 0\n    for i, ch in enumerate(st[idx + 1:]):\n        if ch == \"(\":\n            open_par += 1\n        elif ch == \")\":\n            if not open_par:\n                return i + idx + 1\n            open_par -= 1", "def solve(stg, s):\n    n = 1\n    if stg[s] == \"(\":\n        while n and s < len(stg):\n            n, s = n + {\"(\": 1, \")\": -1}.get(stg[s+1], 0), s + 1\n    return -1 if n else s\n", "from functools import reduce\nfrom itertools import takewhile\n\ndef solve(s, i):\n  return i + len(list(takewhile(bool, reduce(lambda x, y : x + [x[-1] + { '(': 1, ')': -1 }.get(y, 0)], s[i+1:], [1])))) if s[i] == '(' else -1", "def solve(st, idx):\n    if st[idx] != \"(\": return -1\n    d = 1\n    while d > 0:\n        idx += 1\n        if st[idx] == \")\": d -= 1\n        if st[idx] == \"(\": d += 1    \n    return idx", "def solve(st, idx):\n    #If char at index is not an opening bracket, return -1\n    if st[idx] != \"(\":\n        return -1\n    #Create a stack data structure\n    stack = []\n    for i in range(len(st)):\n        #If the char at our current index i is an opening bracket, push index on our stack\n        if st[i] == \"(\":\n            stack.append(i)\n        #If the char is a closing bracket, pop from our stack\n        elif st[i] == \")\":\n            tmp = stack.pop()\n            #If the value from our stack matches the given idx, then our current index i is \n            #the closing bracket we are searching for, thus we return said index i\n            if tmp == idx:\n                return i\n    #If there was no solution, return -1\n    return -1\n", "def solve(st, idx):\n    if st[idx] != '(':\n        return -1\n    key = 1\n    for n, letter in enumerate(st[idx+1:]):\n        if key == 0:\n            return idx+n\n        if letter == ')':\n            key -= 1\n        elif letter == '(':\n            key += 1\n    if key == 0:\n        return idx+n+1\n    return -1", "def solve(st, idx):\n    length = len(st)\n    opened = 0\n    start = st[idx]\n    if start != \"(\":\n        return -1\n    for i in range(idx,length,1):\n        if st[i] == \")\":\n            if opened != 0:\n                opened = opened - 1\n            if opened == 0:       \n                return i\n        elif st[i] == \"(\":\n           opened = opened + 1\n    return -1"]