["from itertools import product\n\ndef coin(n):\n    return list(map(''.join, product(*([\"HT\"]*n))))", "from itertools import product\n\ndef coin(n):\n    return list(map(''.join, product('HT', repeat=n)))", "from itertools import product\n\ndef coin(n):\n    return [''.join(xs) for xs in product('HT', repeat=n)]", "def coin(n): return [x + v for x in coin(n-1) for v in 'HT'] if n - 1 else ['H','T']", "from itertools import product\n\ndef coin(n):\n    return [''.join(p) for p in product('HT', repeat=n)]", "from itertools import product;coin=lambda n:list(map(\"\".join,product(*(['HT']*n))))", "import itertools\ndef coin(n):\n    l=list(itertools.product(\"HT\", repeat=n))\n    return([''.join(list) for list in l])\n", "def coin(n):\n    f = f'{{:0{n}b}}'\n    t = str.maketrans('01', 'HT')\n    return [f.format(k).translate(t) for k in range(2**n)]", "def coin(n):\n    return gen_coin(n, \"\", [])\ndef gen_coin(n, solution, res):\n    if n==0:\n        res.append(solution)\n    else:\n        gen_coin(n-1, solution+\"H\", res)\n        gen_coin(n-1, solution+\"T\", res)\n    return res", "def coin(n):\n    return helper(n, \"\", [])\n\ndef helper(n, path, lst_of_ans):\n    if n == 0:\n        lst_of_ans.append(path)\n        return lst_of_ans\n    helper(n - 1, path + \"H\", lst_of_ans)\n    helper(n - 1, path + \"T\", lst_of_ans)\n    return lst_of_ans"]