["def find_min_num(d, n=1):\n    while div_num(n) != d:\n        n += 1\n    return n\n\ndef div_num(n):\n    s = n**0.5\n    return sum(2 for k in range(1, int(s)+1) if n % k == 0) - (s % 1 == 0)", "from collections import Counter\n\ndef number_of_div(n):\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n\n    mu = 1\n    #print(factors)\n    po = [i+1 for i in list(Counter(factors).values())]\n    for i in po:\n        mu *= i\n    return  mu\n\ndef find_min_num(num_div):\n    for i in range(1, num_div**4):\n        num = number_of_div(i)\n        if num == num_div:\n            return i\n", "def n_div(n):\n    result = 0\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            result += 1 + (i * i < n)\n    return result\n        \n\ndef find_min_num(num_div):\n    for i in range(num_div, 1000000):\n        if n_div(i) == num_div:\n            return i", "FOUND, n = {}, 1\nwhile len(FOUND) < 60:\n    sq = n**.5\n    nDivs = sum(2*(not n%x) for x in range(1,int(sq)+1)) - (int(sq)==sq)\n    if nDivs not in FOUND: FOUND[nDivs] = n\n    n += 1\n    \ndef find_min_num(nDivs): return FOUND[nDivs]", "def count_divs(n):\n    is_square = 0\n    if n**0.5 % 1 == 0: is_square = 1\n    return len([(x,n/x)  for x in range(1, int(n**0.5)+1) if n % x == 0])*2 - is_square\n\n\nmin_num = {count_divs(i): i for i in reversed(range(1, 10**5))}\n\ndef find_min_num(num_div):    \n    return min_num[num_div]\n", "def divisors(n):\n    count = 2\n    i = 2\n    while(i**2 < n):\n        if(n % i == 0):\n            count += 2\n        i += 1\n    if i ** 2 == n:\n        count += 1\n    return count  \n\ndef find_min_num(num):\n    i = 2\n    while True:\n        d = divisors(i)\n        if (d == num):\n            return i\n        i += 1", "find_min_num=lambda n: [0,1,2,4,6,16,12,64,24,36,48,1024,60,4096,192,144,120,65536,180,0,240,576,3072,0,360,1296,12288,900,960,0,720,0,840,9216,0,5184,1260,0,0,36864,1680,0,2880,0,15360,3600,0,0,2520,46656,6480,0,61440,0,6300,0,6720,0,0,0,5040,0,0,14400,7560,0,46080,0,0,0,25920,0,10080,0,0,32400,0,0,0,0,15120,44100,0,0,20160,0,0,0,0,0,25200,0,0,0,0,0,27720,0,0,0,45360][n]", "def check(n):                   #\u6c42\u6240\u6709\u9664\u6570\u4e4b\u548c\n    set1 = set()    #\u521b\u5efa\u4e00\u4e2a\u65e0\u5e8f\u4e0d\u91cd\u590d\u5143\u7d20\u96c6\uff0c\u53ef\u8fdb\u884c\u5173\u7cfb\u6d4b\u8bd5\uff0c\u5220\u9664\u91cd\u590d\u6570\u636e\uff0c\u8fd8\u53ef\u4ee5\u8ba1\u7b97\u4ea4\u96c6\u3001\u5dee\u96c6\u3001\u5e76\u96c6\u7b49\n    for i in range(1, int(n**0.5)+1):\n        if n%i == 0:\n            set1.add(i)\n            set1.add(n//i)\n    return set1\n\ndef find_min_num(num_div): # memoize me, please!\n    # your code here\n    i = 1\n    while 1:\n        if len(check(i)) == num_div:\n            return i\n        i += 1\n    return n  # the smallest number in having an amount of divisors equals to numDiv"]