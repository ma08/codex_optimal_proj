["from collections import Counter\nfrom itertools import chain\n\n\ndef highest_age(persons1, persons2):\n    c = Counter()\n\n    for p in chain(persons1, persons2):\n        c[p['name']] += p['age']\n\n    return min(iter(c.items()), key=lambda n_a: (-n_a[1], n_a[0]))[0] if c else None\n", "from functools import reduce\n\ndef choose(a, b):\n\n    if a[1] < b[1]:\n        return b\n        \n    if a[1] > b[1]:\n        return a\n        \n    return a if a[0] < b[0] else b\n    \n\ndef highest_age(group1, group2):\n    \n    totals = {}\n    \n    for item in group1 + group2:\n        name = item['name']\n        totals[name] = totals.get(name, 0) + item['age']\n        \n    return reduce(lambda acc, x: choose(acc, x), totals.items(), ('', -1))[0]", "def highest_age(g1, g2):\n    d = {}\n    for p in g1 + g2:\n        name, age = p[\"name\"], p[\"age\"]\n        d[name] = d.setdefault(name, 0) + age\n    return max(sorted(d.keys()), key=d.__getitem__)\n", "from collections import defaultdict\nfrom itertools import chain\n\ndef highest_age(group1, group2):\n    total = defaultdict(int)\n    for person in chain(group1, group2):\n        total[person['name']] += person['age']\n    return min(total, key=lambda p: (-total[p], p))", "def highest_age(group1,group2):\n    d = {}\n    lst = []\n    for i in group1 + group2:\n        name = i['name']\n        if name in d:\n            d[i['name']] += i['age']\n        else:\n            d[name] = i['age']\n    n = max(d.values())\n    for k, v in d.items():\n        if n == v:\n            lst.append(k)\n    return min(lst)", "from collections import Counter\n\ndef highest_age(group1, group2):\n    total = Counter()\n    for person in group1 + group2:\n        total[person['name']] += person['age']\n    return min(total, key=lambda name: (-total[name], name))", "def highest_age(group1,group2):\n    total={}\n    \n    for p in group1+group2:\n        total[p['name']] = total.get(p['name'],0)+p['age']\n    \n    return sorted(total, key=total.__getitem__)[-1]"]