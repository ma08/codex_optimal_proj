["def palindrome(num):\n    if type(num) != int or num < 0: return \"Not valid\"\n    s = str(num)\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i] == s[i+2]: return True\n    return len(s) != 1 and s[-1] == s[-2]", "def palindrome(num):\n    return \"Not valid\" if type(num) != int or num < 0 else bool(__import__(\"re\").search(r'(\\d).?\\1', str(num)))", "def palindrome(num):\n    if type(123)!=type(num) : return 'Not valid' \n    n = str(num)\n    if any(not c.isdigit() for c in n): return 'Not valid'\n    l = len(n)\n    return any(n[i]==n[i+1] for i in range(l-1)) or any(n[i]==n[i+2] for i in range(l-2))", "import re\n\ndef palindrome(num):\n    return re.search(r'(\\d)\\d?\\1', str(num)) is not None if isinstance(num, int) and num > 0 else 'Not valid'", "def palindrome(num):\n    if not isinstance(num, int) or num < 0:\n        return \"Not valid\"\n\n    s = str(num)+'%'\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i] == s[i+2]:\n            return True\n            \n    return False", "def palindrome(n):\n    if not isinstance(n, int) or n < 0:\n        return \"Not valid\"\n    s = f\"{n}\"\n    return any(n in s[i:i+2] for i, n in enumerate(s[:-1], 1))\n", "import re\n\ndef palindrome(num):\n    if not (isinstance(num, int) and num > 0):\n        return 'Not valid'\n    return bool(re.search(r'(.)\\1|(.).\\2', str(num)))", "def palindrome(n):\n    return 'Not valid' if type(n) != int or n < 0 else any(s == s[::-1] for s in subs(str(n)))\n        \ndef subs(s):\n    return [s[i:i+j] for j in range(2, len(s)+1) for i in range(len(s)-j+1)]", "def palindrome(n):\n    if type(n) is not int or n < 0:\n        return 'Not valid'\n    patterns = [2*str(i) for i in range(10)] + [str(i) + str(j) + str(i) for j in range(10) for i in range(10)]\n    for p in patterns:\n        if p in str(n):\n            return True\n    return False", "def palindrome(num):\n    if not isinstance(num, int) or num<0:\n        return 'Not valid'\n    check=str(num)\n    for i in range(2, len(check)+1):\n        for j in range(len(check)-i+1):\n            if is_palin(check[j:j+i]):\n                return True\n    return False\ndef is_palin(s):\n    return s[::-1]==s"]