["from collections import Counter\n\n\ndef self_descriptive(num):\n    s = [int(a) for a in str(num)]\n    cnt = Counter(s)\n    return all(cnt[i] == b for i, b in enumerate(s))\n", "def self_descriptive(num):\n    numList = list(str(num))\n    for i, s in enumerate(numList):\n        if int(s) != numList.count(str(i)):\n            return False\n    return True", "def self_descriptive(num):\n    digits = [int(d) for d in str(num)]\n    return all(digits.count(i) == digits[i] for i in range(len(digits)))", "from collections import Counter\n\n\ndef self_descriptive(num):\n    s = str(num)\n    return Counter(s) == {str(i): int(n) for i, n in enumerate(s) if n != '0'}", "def self_descriptive(num):\n    num = str(num)\n    return all(num.count(str(i)) == int(d) for i, d in enumerate(num))", "def self_descriptive(num):\n  from collections import Counter\n  \n  snum = str(num)\n  c = Counter(snum)\n  return all(int(d) == c[str(i)] for i, d in enumerate(snum))", "def self_descriptive(num):\n    s = str(num)\n    return all(int(d) == s.count(str(i)) for i, d in enumerate(s))", "def self_descriptive(num):\n    ns = str(num)\n    return all(ns.count(str(i)) == int(d) for i, d in enumerate(ns))", "def self_descriptive(num):\n    for i, d in enumerate(str(num)):\n        if str(num).count(str(i)) != int(d):\n            return False\n    return True"]