["def cyclic_string(s):\n    return next((i for i, _ in enumerate(s[1:], 1) if s.startswith(s[i:])), len(s))", "import math\n\ndef cyclic_string(s):\n  for l in [i for i,ch in enumerate(s) if ch==s[0]][1:]:\n      if (s[:l]*math.ceil(len(s)/l))[:len(s)] == s:\n          return l\n  return len(s)\n  \n", "from itertools import cycle\n\ndef cyclic_string(s):\n    i = 0\n    while True:\n        i = s.find(s[0], i+1)\n        if i == -1: return len(s)\n        if all(c1==c2 for c1,c2 in zip(cycle(s[:i]), s[i:])): return i", "def cyclic_string(s):\n    length = len(s)\n    for i in range(1, length + 1):\n        if s in s[:i] * length:\n            return i", "def cyclic_string(s):\n    l = len(s)\n    for i in range(1, l+1):\n        if s in s[:i] * l:\n            return i", "def cyclic_string(s):\n    i = 1\n    while not s.startswith(s[i:]):\n        i += 1\n    return i", "def cyclic_string(s):\n    for i in range(1, len(s)):\n        # Check to see if s is in the first i characters repeated enough to be of len(s) \n        if s in s[:i] * (len(s) // i) * 2:\n            return i\n    # Must use whole string\n    return len(s)", "def cyclic_string(s):\n    l=len(s)\n    return next(i for i in range(1,l+1) if s==(s[:i]*l)[:l])", "def cyclic_string(st):\n    for x in range(1, len(st)+1): \n        aux = st[:x]*len(st)\n        if aux.startswith(st): \n            break\n    return x", "def cyclic_string(s):\n    if len(set(s)) == 1:\n        return 1\n    alist = []\n    for i in s:\n        alist.append(i)\n        if s in \"\".join(alist) * 15:\n            return len(alist)\n"]