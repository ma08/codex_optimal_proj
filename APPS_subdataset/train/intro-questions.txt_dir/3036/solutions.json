["def abacaba(k):\n    return next(chr(97+i) for i,d in enumerate(f'{k:b}'[::-1]) if d=='1')", "def abacaba(k):\n    return chr(96 + (k & -k).bit_length())", "def abacaba(k):\n    return chr((k & -k).bit_length() + 96)", "def abacaba(k):\n    n = 26\n    if k % 2: return 'a'\n    while k % pow(2, n) != 0: n -= 1\n    return chr(97 + n)", "def abacaba(k):\n    alph = 'abcdefghijklmnopqrstuvwxyz'\n    s = ''\n    for i in range(26):\n        s = s + alph[i] + s\n    return s[k-1]\n    \n         \n", "from string import ascii_lowercase\n\ndef abacaba(k):\n    for i, c in enumerate(reversed(ascii_lowercase)):\n        p = 2 ** (25 - i)\n        if k == p:\n            return c\n        if k > p:\n            k -= p\n", "def abacaba(k):\n    for i in range(26):\n        if k%(2**(i+1)) == 2**i:\n            return chr(i+97)\n", "from functools import lru_cache\n\n@lru_cache(maxsize=None)\ndef rec(i):\n    if not i: return \"\"\n    return rec(i-1) + chr(97+i-1) + rec(i-1)\n\ndef abacaba(k):\n    return rec(26)[k-1]", "def abacaba(k):\n    k = k-1\n    for i in range(1,27):\n        if k%(2**i) == 2**(i-1)-1:\n            return chr(96+i)"]