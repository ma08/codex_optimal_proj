["def SumEvenFibonacci(limit):\n    a,b,s = 1,1,0\n    while a <= limit:\n        if not a%2: s += a\n        a,b = b, a+b\n    return s", "def SumEvenFibonacci(limit):\n    a, b, result = 1, 2, 0\n    while b <= limit:\n        if b % 2 == 0:\n            result += b\n        a, b = b, a + b\n    return result\n", "from functools import lru_cache\nfrom itertools import takewhile, count\neven_fib = lru_cache(maxsize=None)(lambda n: 2 if n==0 else 8 if n==1 else 4*even_fib(n-1) + even_fib(n-2))\n\ndef SumEvenFibonacci(limit):\n    return sum(takewhile(limit.__ge__, map(even_fib, count())))", "def sum_even_fibonacci(limit):\n    if limit < 2:\n        return 0\n    a, b, total = 1, 2, 0\n    while b <= limit:\n        total += (b % 2 == 0) and b\n        a, b = b, a + b\n    return total\n\n\nSumEvenFibonacci = sum_even_fibonacci", "def SumEvenFibonacci(limit):\n    lst = []\n    for num in fib(limit):\n        if num > limit:\n            break\n        if num % 2 == 0:\n            lst.append(num)\n    return sum(lst)\n\n\ndef fib(num):\n    a, b = 1, 2\n    while True:\n        yield a\n        a, b = b, a + b", "def SumEvenFibonacci(limit):\n    a, b, result = 1, 2, 0\n    while (a <= limit):\n        if(not a&1): result += a\n        a, b = b, a + b\n    return result", "def SumEvenFibonacci(n):\n    a,b,r=1,1,0\n    while a<=n:\n        a,b,r=b,a+b,r+(a&1<1)*a\n    return r", "def fibonacci(max):\n    a, b = 1, 2\n    while a <= max:\n        yield a\n        a, b = b, a + b\n\ndef SumEvenFibonacci(limit):\n    return sum(n for n in fibonacci(limit) if n % 2 == 0)", "from functools import reduce\ndef fib(n):    \n    array = []\n    a, b = 0, 1\n    while a < n + 1:\n        array.append(a)\n        a, b = b, a+b\n    return array\n\ndef SumEvenFibonacci(limit): \n    array = fib(limit)\n    resultado = list(filter(lambda x: x % 2 == 0, array))\n    return reduce((lambda x, y: x + y), resultado ) ", "def SumEvenFibonacci(n):\n    s, a, b = 0, 1, 2\n    while b <= n:\n        a, b, s = b, a + b, s + (1 - b % 2) * b\n    return s"]