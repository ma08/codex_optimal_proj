["import math\n\neffectiveness = {\n    \"electric\":{\n      \"electric\": 0.5,\n      \"fire\": 1,\n      \"grass\": 1,\n      \"water\": 2\n    },\n    \"fire\":{\n      \"electric\": 1,\n      \"fire\": 0.5,\n      \"grass\": 2,\n      \"water\": 0.5\n    },\n    \"grass\":{\n        \"electric\": 1,\n        \"fire\": 0.5,\n        \"grass\": 0.5,\n        \"water\": 2\n    },\n    \"water\":{\n        \"electric\": 0.5,\n        \"fire\": 2,\n        \"grass\": 0.5,\n        \"water\": 0.5\n    }\n}\n\ndef calculate_damage(your_type, opponent_type, attack, defense):\n    return math.ceil(50 * (attack / defense) * effectiveness[your_type][opponent_type]);", "from math import ceil\n\nD = {\"fire\": \"grass\", \"water\": \"fire\", \"grass\": \"water\", \"electric\": \"water\"}\n\ndef calculate_damage(a, b, n, m):\n    return ceil(50 * (n / m) * (2 if D[a] == b else 0.5 if D[b] == a or a == b else 1))", "def calculate_damage(your_type, opponent_type, attack, defense):\n    damage = 50 * (attack / defense)\n    if your_type == opponent_type:\n        return int(damage * 0.5)\n        \n    pairs = (('water', 'fire'), ('fire', 'grass'), ('grass', 'water'), ('electric', 'water'))\n    e = 1\n    for p in pairs:\n        if your_type in p and opponent_type in p:\n            if p.index(your_type) == 0:\n                e = 2\n            else:\n                e = 0.5\n    return int(damage * e)", "from math import ceil\n\nEFF = {\n    ('fire','grass'):     2,\n    ('fire','water'):    .5,\n    ('grass','water'):    2,\n    ('electric','water'): 2,\n}\n\ndef calculate_damage(you, opp, attack, defense):\n    k   = (you,opp) if you<opp else (opp,you)\n    eff = .5 if you==opp else EFF.get(k,1) if k[0]==you else 1/EFF.get(k,1)\n    return ceil( 50 * eff * attack / defense )", "def calculate_damage(your_type, opponent_type, attack, defense):\n    types = {\n        \"fire\": 0,\n        \"water\": 1,\n        \"grass\": 2,\n        \"electric\": 3\n    }\n    effectiveness = [\n        [0.5, 0.5, 2.0, 1.0],\n        [2.0, 0.5, 0.5, 0.5],\n        [0.5, 2.0, 0.5, 1.0],\n        [1.0, 2.0, 1.0, 0.5],\n    ]\n    \n    return 50 * (attack / defense) * effectiveness[types[your_type]][types[opponent_type]]", "def calculate_damage(your_type, opponent_type, attack, defense):\n    tipo = {\"fire\":{\"fire\":0.5, \"grass\":2, \"water\":0.5, \"electric\":1},\n            \"grass\":{\"fire\":0.5, \"grass\":0.5, \"water\":2, \"electric\":1},\n            \"water\":{\"fire\":2, \"grass\":0.5, \"water\":0.5, \"electric\":0.5},\n            \"electric\":{\"fire\":1, \"grass\":1, \"water\":2, \"electric\":0.5}}\n    effectiveness = tipo[your_type][opponent_type]\n    return 50 * (attack / defense) * effectiveness", "def calculate_damage(your_type, opponent_type, attack, defense):\n    effectivnes_matrix = [[0.5, 0.5, 2, 1],[2, 0.5, 0.5, 0.5],[0.5, 2, 0.5, 1],[1, 2, 1, 0.5]]      \n    types = ['fire', 'water', 'grass', 'electric']\n    effectivness = effectivnes_matrix[types.index(your_type)][types.index(opponent_type)]\n\n    return  50 * (attack/defense) * effectivness", "col = {'fire':0,'water':1,'grass':2,'electric':3}\neffects = [\n    [.5,.5, 2, 1],\n    [ 2,.5,.5,.5],\n    [.5, 2,.5, 1],\n    [ 1, 2, 1,.5]\n]\ndef eff(t1,t2):\n    x,y=col[t1],col[t2]\n    return effects[x][y]\n\ndef calculate_damage(your_type, opponent_type, attack, defense):\n    return 50 * (attack / defense) * eff(your_type, opponent_type)", "from math import ceil\n\nD = {\"fire\": \"grass\", \"water\": \"fire\", \"grass\": \"water\", \"electric\": \"water\"}\n\ndef calculate_damage(a, b, n, m):\n    return 50 * n / m * (2 if D[a] == b else 0.5 if D[b] == a or a == b else 1)", "import math\n\ndef calculate_damage(your_type, opponent_type, attack, defense):\n    powerMap = {\n        ('fire','grass') : 2,\n        ('water', 'fire'): 2,\n        ('fire', 'electric'): 1,\n        ('grass', 'water'): 2,\n        ('electric', 'water'): 2,\n        ('grass', 'electric'): 1\n        \n    }\n    print((your_type, opponent_type, attack, defense))\n    effectiveness = 0\n    if your_type == opponent_type or ((opponent_type, your_type) in powerMap and powerMap[(opponent_type, your_type)] == 2):\n        effectiveness = 0.5\n    elif (your_type, opponent_type) in powerMap:\n        effectiveness = powerMap[(your_type, opponent_type)]\n    elif (opponent_type, your_type) in powerMap and powerMap[(opponent_type, your_type)] == 1:\n        effectiveness = 1\n    \n    return math.ceil(attack/defense * 50 * effectiveness)\n    \n"]