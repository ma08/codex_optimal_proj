["class Solution:\n     def majorityElement(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         n=len(nums)\n         if n==1 :\n             return nums[0]\n         if n%2 :\n             find = set(nums[0:(n//2)+1]) & set(nums[n//2:])\n         else:\n             find = set(nums[0:n//2]) & set(nums[n//2:])\n         \n         for i in find:\n             if nums.count(i)>n//2:\n                 return i", "class Solution:\n     def majorityElement(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         order=dict()\n         if len(nums)>1:\n             for i in range(len(nums)):\n                 if nums[i] in list(order.keys()):\n                     order[nums[i]]+=1\n                     if order[nums[i]]>(len(nums)//2):\n                         return nums[i]\n                 else:\n                     order[nums[i]]=1\n         else:\n             return nums[0]\n             \n", "class Solution:\n     def majorityElement(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         l = len(nums)\n         for n in set(nums):\n             if nums.count(n) > l/2:\n                 return(n)", "class Solution:\n     def majorityElement(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         count = 0\n         candidate = None\n \n         for num in nums:\n             if count == 0:\n                 candidate = num\n             count += (1 if num == candidate else -1)\n             \n         return candidate", "class Solution:\n     def majorityElement(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         order=dict()\n         #order[nums[0]]=1\n         if len(nums)>1:\n             for i in range(len(nums)):\n                 if nums[i] in list(order.keys()):\n                     order[nums[i]]+=1\n                 else:\n                     order[nums[i]]=1\n         else:\n             return nums[0]\n         for i in list(order.keys()):\n             if order[i]>(len(nums)//2):\n                 return i\n             \n", "class Solution:\n     def majorityElement(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         map = {}\n         for n in nums:\n             if n not in map:\n                 map[n] = 0\n             map[n] += 1\n         max, occ = -1, -1\n         for num, count in map.items():\n             if count > occ:\n                 max, occ = num, count\n         return max", "class Solution:\n     def majorityElement(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         a = sorted(nums)\n         return a[int(len(a)/2)]\n", "class Solution:\n     def majorityElement(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         count = 0\n         candidate = None\n         \n         for i in nums:\n             if count == 0:\n                 candidate = i\n             count += (1 if i == candidate else -1)\n         return candidate", "class Solution:\n     def majorityElement(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if not nums:\n             return \"\"\n         current = nums[0]\n         counter = 1\n         for i in range(1, len(nums)):\n             if counter == 0:\n                 current = nums[i]\n                 counter = 1\n             elif nums[i] == current:\n                 counter += 1\n             else:\n                 counter -= 1\n         return current", "class Solution:\n     def majorityElement(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         table = {}\n         \n         for num in nums:\n             if num not in table:\n                 table[num] = 1\n             else:\n                 table[num] += 1\n             \n         \n         sorting_tutple = [(value, key) for key, value in list(table.items())]\n         sorting_tutple.sort(reverse=True)\n         \n         \n         return sorting_tutple[0][1]\n             \n             \n                 \n \n         \n         \n", "class Solution:\n     def majorityElement(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         d = {}\n         maxV = float('-inf')\n         maxX = -1\n         n = len(nums)//2\n         for x in nums:\n             if x not in d:\n                 d[x] = 1\n             else:\n                 d[x] += 1\n             if d[x] > maxV:\n                 maxV = d[x]\n                 maxX = x\n             if maxV > n:\n                 break                \n         return maxX", "class Solution:\n     def majorityElement(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         hist = {}\n         for num in nums:\n             if num not in hist:\n                 hist[num] = 0\n             hist[num] += 1\n             if hist[num] > len(nums)//2:\n                 return num", "class Solution:\n     def majorityElement(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         s = {}\n         for i in range(len(nums)):\n             s[nums[i]] = s.get(nums[i], 0) + 1\n         \n         for num in nums:\n             if s[num] > len(nums) // 2:\n                 return num\n                 \n         \n        \n         \n", "class Solution:\n     def majorityElement(self, nums):\n         \n         ele = {}\n         for i in nums:\n             if i in ele:\n                 ele[i] +=1\n             else:\n                 ele[i] = 1\n             \n             if ele[i] > (len(nums)/2):\n                 return int(i)\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n", "class Solution:\n     def majorityElement(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         count = {}\n         for i in nums:\n             if i in count.keys():\n                 count[i]+=1\n             else:\n                 count[i] = 1\n         ans = count[nums[0]]\n         res = nums[0]\n         for x in count.keys():\n             if count[x]>ans:\n                 ans = count[x]\n                 res = x\n         return res"]