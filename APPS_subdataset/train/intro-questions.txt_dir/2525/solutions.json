["class Solution:\n     def hammingDistance(self, x, y):\n         \"\"\"\n         :type x: int\n         :type y: int\n         :rtype: int\n         \"\"\"\n         x = x ^ y\n         y = 0\n         while (x):\n             y += 1\n             x &= x-1\n         return y\n", "class Solution:\n     def hammingDistance(self, x, y):\n         \"\"\"\n         :type x: int\n         :type y: int\n         :rtype: int\n         \"\"\"\n         if x == y:\n             return 0\n         bin_x, bin_y = bin(x)[2:], bin(y)[2:]\n         if x < y:\n             bin_x = bin_x.zfill(len(bin_y))\n         else:\n             bin_y = bin_y.zfill(len(bin_x))\n         return sum([abs(int(bin_x[i]) - int(bin_y[i])) for i in range(len(bin_x))])", "class Solution:\n     def hammingDistance(self, x, y):\n         \"\"\"\n         :type x: int\n         :type y: int\n         :rtype: int\n         \"\"\"\n         count = 0\n         for i in range(32):\n             count += (x & 1) ^ (y & 1)\n             x >>= 1\n             y >>= 1\n         return count", "class Solution:\n     def hammingDistance(self, x, y):\n         \"\"\"\n         :type x: int\n         :type y: int\n         :rtype: int\n         \"\"\"\n         d = bin(x^y)\n         return d.count('1')\n", "class Solution:\n     def hammingDistance(self, x, y):\n         \"\"\"\n         :type x: int\n         :type y: int\n         :rtype: int\n         \"\"\"\n         x_b = '{:32b}'.format(x).replace(' ', '0')\n         y_b = '{:32b}'.format(y).replace(' ', '0')\n         \n         count = 0\n         for i in range(len(x_b)):\n             if x_b[i] != y_b[i]:\n                 count += 1\n         return count\n", "class Solution:\n     def hammingDistance(self, x, y):\n         \"\"\"\n         :type x: int\n         :type y: int\n         :rtype: int\n         \"\"\"\n         # 035b is the code for formatting the int as a binary of 35 characters with 0 as left hand padding\n         x_bin = format(x, '#035b')\n         y_bin = format(y, '#035b')\n         \n         print(\"x_bin: \", x_bin)\n         print(\"y_bin: \", y_bin)\n         \n         hammingDistance = 0\n         \n         for idx, val in enumerate (x_bin):\n             print(\"val: \", val)\n             print(\"y_bin[idx]: \", y_bin[idx])\n             if val != y_bin[idx]:\n                 hammingDistance += 1\n                 \n         return hammingDistance", "class Solution:\n     def hammingDistance(self, x, y):\n         \"\"\"\n         :type x: int\n         :type y: int\n         :rtype: int\n         \"\"\"\n         xor = x ^ y\n         count = 0\n         for _ in range(32):\n             count += xor & 1\n             xor = xor >> 1\n         return count", "class Solution:\n     def hammingDistance(self, x, y):\n         \"\"\"\n         :type x: int\n         :type y: int\n         :rtype: int\n         \"\"\"\n         \n         count = 0\n         while x > 0 or y > 0:\n             if (x & 1) != (y & 1):\n                 count += 1\n             \n             if x > 0:\n                 x = x >> 1\n             \n             if y > 0:\n                 y = y >> 1\n         \n         return count", "class Solution:\n     def hammingDistance(self, x, y):\n         \"\"\"\n         :type x: int\n         :type y: int\n         :rtype: int\n         \"\"\"\n         x_bits = [int(i) for i in bin(x)[2:]]\n         y_bits = [int(j) for j in bin(y)[2:]]\n         digit_diff = abs(len(x_bits)-len(y_bits))\n \n         if len(y_bits) > len(x_bits):\n             x_bits = [0] * digit_diff + x_bits\n         elif len(x_bits) > len(y_bits):\n             y_bits = [0] * digit_diff + y_bits\n \n         hamming_dist = 0\n         for i in range(0, len(x_bits)):\n             if x_bits[i] != y_bits[i]:\n                 hamming_dist += 1\n \n         return hamming_dist\n", "class Solution:\n     def hammingDistance(self, x, y):\n         \"\"\"\n         :type x: int\n         :type y: int\n         :rtype: int\n         \"\"\"\n         xor_result = x^y\n         count = 0\n         while xor_result > 0:\n             count += xor_result & 1\n             xor_result = xor_result >> 1\n         \n         return count\n             \n         \n         \n", "class Solution:\n     def hammingDistance(self, x, y):\n         \"\"\"\n         :type x: int\n         :type y: int\n         :rtype: int\n         \"\"\"\n         \n         hamming_distance=0\n         \n         while(x != 0 or y != 0):\n             b1 = x & 1\n             b2 = y & 1\n             if(b1 != b2):\n                 hamming_distance = hamming_distance+1\n             x = x >> 1\n             y = y >> 1\n         \n         return hamming_distance", "class Solution:\n     def hammingDistance(self, x, y):\n         \"\"\"\n         :type x: int\n         :type y: int\n         :rtype: int\n         \"\"\"\n         return bin(x^y).count('1')"]