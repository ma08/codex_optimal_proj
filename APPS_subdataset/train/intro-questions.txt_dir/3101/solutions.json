["def palindrome_pairs(w):\n  return [[i, j] for i in range(len(w)) for j in range(len(w)) if str(w[i])+str(w[j])==(str(w[i])+str(w[j]))[::-1] and i!=j]", "def is_palindrome(word):\n    return word == word[::-1]\n\n\ndef palindrome_pairs(words):\n    words = [str(word) for word in words]\n    return [\n        [i, j]\n        for i, word_i in enumerate(words)\n        for j, word_j in enumerate(words)\n        if i != j and is_palindrome(word_i + word_j)\n    ]\n", "def palindrome_pairs(words):\n    indices = []\n    \n    for i in range(len(words)):\n        for j in range(len(words)):\n            if i != j:\n                concatenation = str(words[i]) + str(words[j])\n                if concatenation == concatenation[::-1]:\n                    indices.append([i, j])\n                    \n    return indices", "from itertools import chain, permutations\n\ndef is_palindrome(w1, w2):\n    return all(c1 == c2 for c1, c2 in zip(chain(w1, w2), chain(reversed(w2), reversed(w1))))\n\ndef palindrome_pairs(words):\n    words = [str(word) for word in words]\n    return [[i, j] for i, j in permutations(range(len(words)), 2) if is_palindrome(words[i], words[j])]", "from itertools import permutations\n\ndef palindrome_pairs(words):\n    result = []\n    for i, j in permutations(list(range(len(words))), 2):\n        concat = f\"{words[i]}{words[j]}\"\n        if concat == concat[::-1]:\n            result.append([i, j])\n    return result\n  \n\n# one-liner\n#def palindrome_pairs(w):\n#    return [[i, j] for i, j in permutations(range(len(w)), 2) if f\"{w[i]}{w[j]}\" == f\"{w[i]}{w[j]}\"[::-1]]\n", "def palindrome_pairs(words):\n    w=list(map(str,words))\n    return [[i,j] for i,a in enumerate(w) for j,b in enumerate(w) if i!=j and a+b == (a+b)[::-1]]", "import itertools\n\n\ndef is_palindrome(word):\n    return word == word[::-1]\n\n\ndef palindrome_pairs(words):\n    words = list(map(str, words))\n    return [\n        [i, j]\n        for i, j in itertools.permutations(range(len(words)), 2)\n        if is_palindrome(words[i] + words[j])\n    ]", "def palindrome_pairs(words):\n  return [[words.index(i),words.index(j)] for i in words for j in words if str(i)+str(j)==(str(i)+str(j))[::-1] and i!=j]", "palindrome_pairs=lambda a:[[i,j]for i,s in enumerate(a)for j,t in enumerate(a)if i!=j and str(s)+str(t)==(str(s)+str(t))[::-1]]", "def palindrome_pairs(a):\n    a = [str(x) for x in a];r = [];\n    for k1,i in enumerate(a):\n        for k2,j in enumerate(a):\n            if i!=j and (i+j)==(i+j)[::-1]:r.append([k1,k2])\n    return r"]