["from sys import stdin\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int,input().split()))\n    id = list(zip(l,list(range(n))))\n    id.sort()\n    val, pos = zip(*id)\n    blok = []\n    cur = [pos[0]]\n    for i in range(1,n):\n        if val[i] == val[i-1]:\n            cur.append(pos[i])\n        else:\n            cur.sort()\n            blok.append(cur)\n            cur = [pos[i]]\n    cur.sort()\n    blok.append(cur)\n    best = 0\n    m = len(blok)\n    for j in range(m):\n        best = max(len(blok[j]), best)\n    i = 0\n    while True:\n        if i >= m-2:\n            break\n        cyk = min(blok[i+1])\n        j = -1\n        while j+1 < len(blok[i]) and blok[i][j+1] < cyk:\n            j += 1\n        su = (j+1)\n        ii = i+2\n        while ii < m:\n            if min(blok[ii]) > max(blok[ii-1]):\n                su += len(blok[ii-1])\n                ii += 1\n            else:\n                break\n        if ii == m:\n            su += len(blok[-1])\n            best = max(best, su)\n        else:\n            xxx = max(blok[ii-1])\n            su += len(blok[ii-1])\n            inde = len(blok[ii])-1\n            while inde >= 0 and blok[ii][inde] >= xxx:\n                su += 1\n                inde -= 1\n            best = max(best,su)\n        i = max(i+1, ii-1)\n    for i in range(1,m):\n        b1 = blok[i];b0 = blok[i-1];l0,l1,i1 = len(b0),len(b1),0\n        for ind in range(l0):\n            while True:\n                if i1 < l1 and b1[i1] <= b0[ind]:i1 += 1\n                else:break\n            if l1 == i1:break\n            best = max(best, (ind+1)+(l1-i1))\n    print(n-best)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int,input().split()))\n    id = list(zip(l,list(range(n))))\n    id.sort()\n    val, pos = zip(*id)\n    blok = []\n    cur = [pos[0]]\n    for i in range(1,n):\n        if val[i] == val[i-1]:\n            cur.append(pos[i])\n        else:\n            cur.sort()\n            blok.append(cur)\n            cur = [pos[i]]\n    cur.sort()\n    blok.append(cur)\n    best = 0\n    m = len(blok)\n    for j in range(m):\n        best = max(len(blok[j]), best)\n    i = 0\n    while True:\n        if i >= m-2:\n            break\n        cyk = min(blok[i+1])\n        j = -1\n        while j+1 < len(blok[i]) and blok[i][j+1] < cyk:\n            j += 1\n        su = (j+1)\n        ii = i+2\n        while ii < m:\n            if min(blok[ii]) > max(blok[ii-1]):\n                su += len(blok[ii-1])\n                ii += 1\n            else:\n                break\n        if ii == m:\n            su += len(blok[-1])\n            best = max(best, su)\n        else:\n            xxx = max(blok[ii-1])\n            su += len(blok[ii-1])\n            inde = len(blok[ii])-1\n            while inde >= 0 and blok[ii][inde] >= xxx:\n                su += 1\n                inde -= 1\n            best = max(best,su)\n        i = max(i+1, ii-1)\n    for i in range(1,m):\n        b1 = blok[i];b0 = blok[i-1];l0,l1,i1 = len(b0),len(b1),0\n        for ind in range(l0):\n            while True:\n                if i1 < l1 and b1[i1] <= b0[ind]:i1 += 1\n                else:break\n            if l1 == i1:break\n            best = max(best, (ind+1)+(l1-i1))\n    print(n-best)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int,input().split()))\n    id = list(zip(l,list(range(n))))\n    id.sort()\n    val, pos = zip(*id)\n    blok = []\n    cur = [pos[0]]\n    for i in range(1,n):\n        if val[i] == val[i-1]:\n            cur.append(pos[i])\n        else:\n            cur.sort()\n            blok.append(cur)\n            cur = [pos[i]]\n    cur.sort()\n    blok.append(cur)\n    best = 0\n    m = len(blok)\n    for j in range(m):\n        best = max(len(blok[j]), best)\n    i = 0\n    while True:\n        if i >= m-2:break\n        cyk = min(blok[i+1]);j = -1\n        while j+1 < len(blok[i]) and blok[i][j+1] < cyk:j += 1\n        su = (j+1)\n        ii = i+2\n        while ii < m:\n            if min(blok[ii]) > max(blok[ii-1]):su += len(blok[ii-1]);ii += 1\n            else:break\n        if ii == m:su += len(blok[-1]);best = max(best, su)\n        else:\n            xxx = max(blok[ii-1])\n            su += len(blok[ii-1])\n            inde = len(blok[ii])-1\n            while inde >= 0 and blok[ii][inde] >= xxx:\n                su += 1\n                inde -= 1\n            best = max(best,su)\n        i = max(i+1, ii-1)\n    for i in range(1,m):\n        b1 = blok[i];b0 = blok[i-1];l0,l1,i1 = len(b0),len(b1),0\n        for ind in range(l0):\n            while True:\n                if i1 < l1 and b1[i1] <= b0[ind]:i1 += 1\n                else:break\n            if l1 == i1:break\n            best = max(best, (ind+1)+(l1-i1))\n    print(n-best)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int,input().split()))\n    id = list(zip(l,list(range(n))))\n    id.sort()\n    val, pos = zip(*id)\n    blok = []\n    cur = [pos[0]]\n    for i in range(1,n):\n        if val[i] == val[i-1]:\n            cur.append(pos[i])\n        else:\n            cur.sort()\n            blok.append(cur)\n            cur = [pos[i]]\n    cur.sort();blok.append(cur)\n    best,i,m = 0,0,len(blok)\n    for j in range(m):best = max(len(blok[j]), best)\n    while True:\n        if i >= m-2:break\n        cyk = min(blok[i+1]);j = -1\n        while j+1 < len(blok[i]) and blok[i][j+1] < cyk:j += 1\n        su = (j+1);ii = i+2\n        while ii < m:\n            if min(blok[ii]) > max(blok[ii-1]):su += len(blok[ii-1]);ii += 1\n            else:break\n        if ii == m:su += len(blok[-1]);best = max(best, su)\n        else:\n            xxx = max(blok[ii-1]);su += len(blok[ii-1]);inde = len(blok[ii])-1\n            while inde >= 0 and blok[ii][inde] >= xxx:su += 1;inde -= 1\n            best = max(best,su)\n        i = max(i+1, ii-1)\n    for i in range(1,m):\n        b1 = blok[i];b0 = blok[i-1];l0,l1,i1 = len(b0),len(b1),0\n        for ind in range(l0):\n            while True:\n                if i1 < l1 and b1[i1] <= b0[ind]:i1 += 1\n                else:break\n            if l1 == i1:break\n            best = max(best, (ind+1)+(l1-i1))\n    print(n-best)", "for _ in range(int(input())):\n    n,l = int(input()),list(map(int,input().split()))\n    id = sorted(list(zip(l,list(range(n)))))\n    val, pos = zip(*id);blok = [];cur = [pos[0]]\n    for i in range(1,n):\n        if val[i] == val[i-1]:cur.append(pos[i])\n        else:cur.sort();blok.append(cur);cur = [pos[i]]\n    cur.sort();blok.append(cur);best,i,m = 0,0,len(blok)\n    for j in range(m):best = max(len(blok[j]), best)\n    while True:\n        if i >= m-2:break\n        cyk = min(blok[i+1]);j = -1\n        while j+1 < len(blok[i]) and blok[i][j+1] < cyk:j += 1\n        su = (j+1);ii = i+2\n        while ii < m:\n            if min(blok[ii]) > max(blok[ii-1]):su += len(blok[ii-1]);ii += 1\n            else:break\n        if ii == m:su += len(blok[-1]);best = max(best, su)\n        else:\n            xxx = max(blok[ii-1]);su += len(blok[ii-1]);inde = len(blok[ii])-1\n            while inde >= 0 and blok[ii][inde] >= xxx:su += 1;inde -= 1\n            best = max(best,su)\n        i = max(i+1, ii-1)\n    for i in range(1,m):\n        b1 = blok[i];b0 = blok[i-1];l0,l1,i1 = len(b0),len(b1),0\n        for ind in range(l0):\n            while True:\n                if i1 < l1 and b1[i1] <= b0[ind]:i1 += 1\n                else:break\n            if l1 == i1:break\n            best = max(best, (ind+1)+(l1-i1))\n    print(n-best)", "for _ in range(int(input())):\n    n,l = int(input()),list(map(int,input().split()));id = sorted(list(zip(l,list(range(n)))));val, pos = zip(*id);blok = [];cur = [pos[0]]\n    for i in range(1,n):\n        if val[i] == val[i-1]:cur.append(pos[i])\n        else:cur.sort();blok.append(cur);cur = [pos[i]]\n    cur.sort();blok.append(cur);best,i,m = 0,0,len(blok)\n    for j in range(m):best = max(len(blok[j]), best)\n    while True:\n        if i >= m-2:break\n        cyk = min(blok[i+1]);j = -1\n        while j+1 < len(blok[i]) and blok[i][j+1] < cyk:j += 1\n        su = (j+1);ii = i+2\n        while ii < m:\n            if min(blok[ii]) > max(blok[ii-1]):su += len(blok[ii-1]);ii += 1\n            else:break\n        if ii == m:su += len(blok[-1]);best = max(best, su)\n        else:\n            xxx = max(blok[ii-1]);su += len(blok[ii-1]);inde = len(blok[ii])-1\n            while inde >= 0 and blok[ii][inde] >= xxx:su += 1;inde -= 1\n            best = max(best,su)\n        i = max(i+1, ii-1)\n    for i in range(1,m):\n        b1 = blok[i];b0 = blok[i-1];l0,l1,i1 = len(b0),len(b1),0\n        for ind in range(l0):\n            while True:\n                if i1 < l1 and b1[i1] <= b0[ind]:i1 += 1\n                else:break\n            if l1 == i1:break\n            best = max(best, (ind+1)+(l1-i1))\n    print(n-best)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int,input().split()))\n    p = []\n    for i in range(n):\n        p.append((a[i],i))\n    p.sort(key = lambda x: x[0])\n    aOrder = [-1] * n\n    curIndex = 0\n    for i in range(n):\n        if i >= 1 and p[i][0] != p[i-1][0]:\n            curIndex += 1\n        aOrder[p[i][1]] = curIndex\n    aCount = [0] * (curIndex + 1)\n    for i in range(n):\n        aCount[aOrder[i]] += 1\n    maxSubseq0 = [0] * (curIndex + 1) # Only using one number\n    maxSubseq1 = [0] * (curIndex + 1) # Extendable to next number but using >=2 numbers\n    maxSubseq2 = [0] * (curIndex + 1) # How many current number is there in maxSubseq1 sequence\n    maxSubseq3 = [0] * (curIndex + 1) # Not extendable to next number (not necessarily counted if < maxSubseq1)\n    for i in range(n):\n        aCurOrder = aOrder[i]\n        curSubseq1 = maxSubseq1[aCurOrder] + 1\n        curSubseq2 = maxSubseq2[aCurOrder] + 1\n        curSubseq3 = maxSubseq3[aCurOrder] + 1\n        if curSubseq1 == 1:\n            curSubseq1 = 0\n            curSubseq2 = 0\n        if curSubseq3 == 1:\n            curSubseq3 = 0\n        maxSubseq0[aCurOrder] += 1\n        justUpdated = False\n        if aCurOrder >= 1 and maxSubseq0[aCurOrder - 1] > 0:\n            if curSubseq1 == 0:\n                curSubseq1 = maxSubseq0[aCurOrder - 1] + 1\n                curSubseq2 = 1\n                justUpdated = True\n            elif  curSubseq1 < maxSubseq0[aCurOrder - 1] + 1 and curSubseq3 < maxSubseq0[aCurOrder - 1] + 1:\n                curSubseq3 = maxSubseq0[aCurOrder - 1] + 1\n        if aCurOrder >= 1 and maxSubseq1[aCurOrder - 1] > 0 and maxSubseq2[aCurOrder - 1] == aCount[aCurOrder - 1]:\n            if curSubseq1 == 0 or justUpdated:\n                curSubseq1 = maxSubseq1[aCurOrder - 1] + 1\n                curSubseq2 = 1\n            elif  curSubseq1 < maxSubseq1[aCurOrder - 1] + 1 and curSubseq3 < maxSubseq1[aCurOrder - 1] + 1:\n                curSubseq3 = maxSubseq1[aCurOrder - 1] + 1\n        maxSubseq1[aCurOrder] = curSubseq1\n        maxSubseq2[aCurOrder] = curSubseq2\n        maxSubseq3[aCurOrder] = curSubseq3\n\n    print(n - max(maxSubseq0 + maxSubseq1 + maxSubseq3))", "# f = open('test.py')\n# def input():\n# \treturn f.readline().replace('\\n','')\n\n\nfrom collections import defaultdict\nimport bisect\n# from collections import deque\n\ndef read_list():\n\treturn list(map(int,input().strip().split(' ')))\ndef print_list(l):\n\tprint(' '.join(map(str,l)))\n\n\nN = int(input())\nfor _ in range(N):\n\tn = int(input())\n\tnums = read_list()\n\tdic = defaultdict(list)\n\tfor i in range(n):\n\t\tdic[nums[i]].append(i)\n\tdata = list(set(nums))\n\tdata.sort()\n\tl = len(data)\n\tres = 0\n\tif l>1:\n\t\tind = bisect.bisect_left(dic[data[0]],dic[data[1]][0])\n\t\tln = len(dic[data[1]])\n\t\tfor j in range(len(dic[data[0]])-1,ind-1,-1):\n\t\t\tres = max(res,j+1+ln-bisect.bisect_left(dic[data[1]],dic[data[0]][j]))\n\t\ttmp = ind+ln\n\telse:\n\t\ttmp = 0\n\tfor i in range(2,l):\n\t\tif dic[data[i]][0]>dic[data[i-1]][-1]:\n\t\t\ttmp+=len(dic[data[i]])\n\t\telse:\n\t\t\tres = max(res,tmp+len(dic[data[i]])-bisect.bisect_left(dic[data[i]],dic[data[i-1]][-1]))\n\t\t\tind = bisect.bisect_left(dic[data[i-1]],dic[data[i]][0])\n\t\t\tln = len(dic[data[i]])\n\t\t\tfor j in range(len(dic[data[i-1]])-1,ind-1,-1):\n\t\t\t\tres = max(res,j+1+ln-bisect.bisect_left(dic[data[i]],dic[data[i-1]][j]))\n\t\t\ttmp = ind+ln\n\tres = max(res,tmp)\n\tfor a in list(dic.values()):\n\t\tres = max(len(a),res)\n\tprint(n-res)\n", "for _ in range(int(input())):\n    n,l = int(input()),list(map(int,input().split()))\n    id = sorted(list(zip(l,list(range(n)))))\n    val, pos = zip(*id);blok = [];cur = [pos[0]]\n    for i in range(1,n):\n        if val[i] == val[i-1]:cur.append(pos[i])\n        else:cur.sort();blok.append(cur);cur = [pos[i]]\n    cur.sort();blok.append(cur);best,i,m = 0,0,len(blok)\n    for j in range(m):best = max(len(blok[j]), best)\n    while True:\n        if i >= m-2:break\n        cyk = min(blok[i+1]);j = -1\n        while j+1 < len(blok[i]) and blok[i][j+1] < cyk:j += 1\n        su = (j+1);ii = i+2\n        while ii < m:\n            if min(blok[ii]) > max(blok[ii-1]):su += len(blok[ii-1]);ii += 1\n            else:break\n        if ii == m:su += len(blok[-1]);best = max(best, su)\n        else:\n            xxx = max(blok[ii-1]);su += len(blok[ii-1]);inde = len(blok[ii])-1\n            while inde >= 0 and blok[ii][inde] >= xxx:su += 1;inde -= 1\n            best = max(best,su)\n        i = max(i+1, ii-1)\n    for i in range(1,m):\n        b1 = blok[i];b0 = blok[i-1];l0,l1,i1 = len(b0),len(b1),0\n        for ind in range(l0):\n            while True:\n                if i1 < l1 and b1[i1] <= b0[ind]:i1 += 1\n                else:break\n            if l1 == i1:break\n            best = max(best, (ind+1)+(l1-i1))\n    print(n-best)", "import collections\nimport string\n\ndef listprint(l):\n    if len(l) == 0:\n        print(\"[]\")\n        return\n    s = \"[ \" + \"{0:<2}\".format(l[0])\n    for i in range(1, len(l)):\n        s += \", \" + \"{0:>2}\".format(l[i])\n    s += \" ]\"\n    print(s)\n\n\ndef main():\n    n = int( input() )\n    a = list(map(int, input().split()))\n\n    b = sorted(a)\n    d = collections.defaultdict(list)\n    f = collections.defaultdict(list)\n\n    for i in range(n-1, -1, -1):\n        d[ b[i] ].append(i)\n    \n    tmp = []\n    for i in range(n):\n\n        whereInB = d[ a[i] ][-1]\n\n        if a[i] in f:\n            z = 1 + f[a[i]][-1]\n            if whereInB != 0 and (b[whereInB - 1] in f):\n                prevNumberList = f[b[whereInB - 1]]\n                p = prevNumberList\n                if len(p) == len(d[b[whereInB - 1]]):\n                    z = max(z, p[0] + len(p))\n                else:\n                    z = max(z, 1 + len(p))\n            f[a[i]].append(z)\n            tmp.append(f[a[i]][-1])\n            continue\n\n        if whereInB == 0 or (b[whereInB - 1] not in f):\n            f[a[i]].append(1)\n        else:\n            if len(d[b[whereInB - 1]]) == len(f[b[whereInB - 1]]):\n                prevNumberList = f[b[whereInB - 1]]\n                p = prevNumberList\n                f[a[i]].append( p[0] + len(p) )\n            else:\n                f[a[i]].append(1 + len(f[b[whereInB - 1]]))\n\n        tmp.append(f[a[i]][-1])\n\n    print (n - max(map(max, f.values())))\n\n#input = sys.stdin.readline\n\n#sys.setrecursionlimit(2097152)\ntn = int(input())\nfor _ in range(tn):\n    main()", "for t in range(int(input())):\n    n = int(input())\n    aa = list(map(int, input().split(' ')))\n    asort = sorted([(v, i) for i, v in enumerate(aa)]);\n\n    inds = {}\n    for a, ai in asort:\n        if a not in inds:\n            inds[a] = []\n        inds[a] += [ai]\n\n    def left_eq(b, i):\n        binds = inds[b]\n        l = -1\n        r = len(binds) - 1\n        while l < r:\n            m = (l + r + 1) // 2\n            if binds[m] < i:\n                l = m\n            else:\n                r = m - 1\n        return l + 1\n\n    def right_eq(b, i):\n        binds = inds[b]\n        l = 0\n        r = len(binds)\n        while l < r:\n            m = (l + r) // 2\n            if binds[m] > i:\n                r = m\n            else:\n                l = m + 1\n        return len(binds) - l\n    \n    ls = [None] * n\n    for i, (a, ai) in enumerate(asort):\n        if i == 0:\n            ls[ai] = 1\n            continue\n\n        if asort[i - 1][1] < ai:\n            curl = ls[asort[i - 1][1]] + 1\n        else:\n            curl = left_eq(asort[i - 1][0], ai) + 1\n        \n        ls[ai] = curl\n    #print('before:', ls)\n\n    for i, (a, ai) in reversed(list(enumerate(asort))):\n        if i == n - 1:\n            continue\n        if asort[i + 1][0] != a:\n            ls[ai] += right_eq(asort[i + 1][0], ai)\n    #print('after:', ls)\n\n    alter = [-10]\n    values = list(inds.keys())\n    v2vi = { v: i for i, v in enumerate(values) }\n    for i, (a, ai) in enumerate(asort):\n        avin = v2vi[a]\n        if avin > 0:\n            alter += [left_eq(values[avin-1], ai) + 1 + right_eq(a, ai)]\n\n    maxSeqLen = max(max(ls), max(alter))\n    print(n - maxSeqLen)\n", "\nclass seq():\n    def __init__(self, l,  c):\n        self.length = l\n\n        self.final_ctr = c\n\nimport copy\nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    d = {}\n    c = {}\n    prev = {}\n    ctr = {}\n    li = [int(i) for i in input().split(' ')]\n    n = len(li)\n    for i in li:\n        ctr[i] = ctr.get(i, 0) + 1\n    so = sorted(ctr)\n    pp = -1\n    for i in so:\n        prev[i] = pp\n        pp = i\n    mx = 1\n    for i in li:\n        \n        if i in d: # i\u5728d\u5185\uff0c\u8868\u793a\u524d\u9762\u51fa\u73b0\u8fc7i\n            if prev[i] in d and d[prev[i]][1].final_ctr == ctr[prev[i]]: # \u524d\u4e00\u4e2a\u5143\u7d20\u5df2\u9009\u6ee1\n                if d[prev[i]][1].length > max(d[i][1].length,d[i][0].length):\n                    d[i][0].length = d[prev[i]][1].length\n                    d[i][0].final_ctr = 0\n            if c.get(prev[i],0) > max(d[i][1].length,d[i][0].length): # \u524d\u4e00\u4e2a\u5143\u7d20(\u4e0d\u4e00\u5b9a\u9009\u6ee1)\u7684\u8ba1\u6570\u5927\u4e8e\u73b0\u5728\u7684\uff0c\u73b0\u5728\u7684\u4e0d\u9009\u6ee1\n                d[i][0].length = c[prev[i]]\n                d[i][0].final_ctr = 0\n            d[i][1].final_ctr += 1\n            d[i][1].length += 1\n            d[i][0].final_ctr += 1\n            d[i][0].length += 1\n        else:\n            d.setdefault(i,[seq(0,0),seq(0,0)])\n            if prev[i] in d:\n                if d[prev[i]][1].final_ctr == ctr[prev[i]]:\n                    d[i][1] = seq(d[prev[i]][1].length+1, 1)\n                    d[i][0] = seq(d[prev[i]][1].length+1, 1)\n\n                    if c.get(prev[i],0) > d[i][1].length:\n                        d[i][1].length = c[prev[i]] + 1\n                        d[i][0].length = c[prev[i]] + 1\n                        d[i][1].final_ctr = 1\n                        d[i][0].final_ctr = 1\n                else:\n                    d[i][1] = seq(c[prev[i]]+1, 1)\n                    d[i][0] = seq(c[prev[i]]+1, 1)\n            else:\n                d[i][1] = seq(1, 1)\n        mx = max(mx, d[i][1].length,d[i][0].length)\n        c[i] = c.get(i, 0) + 1\n    print(n-mx)\n'''\n1\n17\n0 0 0 0 1 1 1 0 0 0 0 1 1 1 2 2 2\n4 and 6\n'''"]