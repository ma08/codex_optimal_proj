["from numpy import prod\n\ndef find_difference(a, b):\n    return abs(prod(a) - prod(b))\n", "def find_difference(a, b):\n    return abs((a[1]*a[2]*a[0])-b[1]*b[2]*b[0])", "from operator import mul\nfrom functools import reduce\ndef find_difference(a, b):\n    return abs(reduce(mul, a) - reduce(mul, b))", "def find_difference(a, b):\n    return abs(a[0] * a[1] * a[2] - b[0] * b[1] * b[2])\n", "def find_difference(a, b):\n    A = B = 1\n    for i, j in zip(a, b):\n        A *= i\n        B *= j\n    return abs(A - B)", "find_difference = lambda a,b,p=__import__(\"numpy\").prod: abs(p(a)-p(b))", "find_difference = lambda (a, b, c), (x, y, z): abs(a * b * c - x * y * z)", "def find_difference(a, b):\n    a_volume = a[0] * a[1] * a[2]\n    b_volume = b[0] * b[1] * b[2]\n    return abs(a_volume - b_volume)", "def find_difference(a, b):\n    return abs(p(a) - p(b))\n    \ndef p(a):\n    temp = 1\n    for i in a:\n        temp *= i\n    return temp", "import numpy as np\ndef find_difference(a, b):\n    return abs(np.multiply.reduce(a) - np.multiply.reduce(b))\n    \n", "def find_difference(a, b):\n    aVol = a[0] * a[1] * a[2]\n    bVol = b[0] * b[1] * b[2]\n    \n    return abs(aVol - bVol)\n", "from functools import reduce\nfind_difference = lambda a,b: abs(reduce(lambda x, y:x*y, a) - reduce(lambda x, y:x*y, b))", "from functools import reduce\nfrom operator import mul,sub\n\ndef find_difference(*cs):\n    return abs(sub(*(reduce(mul,c) for c in cs)))", "find_difference=lambda*a:abs(sum((-1)**i*x*y*z for i,(x,y,z)in enumerate(a)))", "def find_difference(a, b):\n    # Your code here!\n    p = 1\n    q = 1\n    for nums in a:\n        p *= nums\n    for nums in b:\n        q *= nums\n    return abs(p - q) ", "from numpy import prod\n\nfind_difference = lambda a, b: abs(prod(a) - prod(b))", "def find_difference(a, b):\n    t1 = 1\n    t2 = 1\n    for num in a:\n        t1 *= num\n    for num in b:\n        t2 *= num\n    return abs(t1 - t2)\n", "from functools import reduce\nfrom operator import mul\ndef find_difference(a, b):\n    return abs(reduce(mul, a) - reduce(mul, b))", "from operator import mul, sub\nfrom typing import List\n\ndef find_difference(a: List[int], b: List[int]) -> int:\n    \"\"\"\n    Find the difference of the cuboids' volumes regardless of which is bigger\n    based on two lists of integers `a` and `b` which representing the dimentions\n    of cuboids `a` and `b`.\n    \"\"\"\n    return abs(sub(*list(map(lambda x, y, z: x * y * z, *zip(a, b)))))", "def find_difference(a, b):\n    value_a = a[0]*a[1]*a[2]\n    value_b = b[0]*b[1]*b[2]\n    return value_a-value_b if value_a >= value_b else value_b-value_a\n\n", "def find_difference(a, b):\n    def mul(li):\n        car=1\n        for i in li:\n            car*=i\n        return car\n    return abs(mul(a)-mul(b))", "from functools import reduce\n\ndef find_difference(a, b):\n    volume = lambda a,b:a*b\n    return abs(reduce(volume, a) - reduce(volume, b))", "def find_difference(a, b):\n    # Your code here!\n    A=1\n    B=1\n    for i in range(len(a)):\n        A=A*a[i]\n        B=B*b[i]\n    return A-B if(A>B) else B-A\n", "def find_difference(a, b):\n    c=a[0]*a[1]*a[2]\n    d=b[0]*b[1]*b[2]\n    return abs(c-d)", "def find_difference(a, b):\n    x = a[0] * a[1] * a[2]\n    y = b[0] * b[1] * b[2]\n    z = x - y\n    if z > 0:\n        return z\n    else:\n        return -z\n    # Your code here!\n", "def find_difference(a, b):\n    x = y = 1\n    for i in a:\n        x *= i\n    for j in b:\n        y *= j\n    return abs(x-y)", "def find_difference(a, b):\n    Va = a[1]*a[2]*a[0]\n    Vb = b[1]*b[2]*b[0]\n    diff = Va - Vb\n    return diff if diff > 0 else -diff  ", "def find_difference(a, b):\n    resa = a[0]\n    resb = b[0]\n    for i in a[1:]:\n        resa = resa * i\n    for i in b[1:]:\n        resb = resb * i\n    return abs(resa - resb)", "from typing import List\n\ndef find_difference(a: List[int], b: List[int]) -> int:\n    mult3 = lambda x: x[0]*x[1]*x[2]\n    return abs( mult3(a)-mult3(b) )", "from functools import reduce\n\ndef find_difference(a, b):\n    prod = lambda x, y: x * y\n    return abs(reduce(prod, a) - reduce(prod, b))", "def find_difference(a, b):\n    aCube = a[0]*a[1]*a[2]\n    bCube = b[0]*b[1]*b[2]\n    return abs(aCube - bCube)", "def find_difference(a, b):\n    res1 = 1\n    res2 = 1\n    for n in a:\n        res1 *= n\n    for n in b:\n        res2 *= n\n    return abs(res1 - res2)", "from functools import reduce as r\nfrom operator import mul\ndef find_difference(a, b):\n    return abs(r(mul,a,1)-r(mul,b,1))", "from numpy import prod\n\ndef find_difference(a, b):\n    x , y = prod(a) , prod(b)\n    if x > y:\n        return x - y\n    else:\n        return y - x", "import math\ndef find_difference(a, b):\n    def prod(arr):\n        proc =1\n        for i in arr:\n            proc *=i\n        return proc\n        \n    return abs(prod(a) - prod(b))", "def find_difference(a, b):\n    aa=a[0]*a[1]*a[2]\n    bb=b[0]*b[1]*b[2]\n    return max(aa,bb)-min(aa,bb)", "import numpy\n\ndef find_difference(a, b):\n    return abs(numpy.prod(b) - numpy.prod(a))", "import numpy as np\ndef find_difference(a, b):\n    return np.prod(a)-np.prod(b) if np.prod(a)>np.prod(b) else np.prod(b)-np.prod(a)", "def find_difference(a, b):\n    # Your code here!\n    cube1 = a[0] * a[1] * a[2]\n    cube2 = b[0] * b[1] * b[2]\n    result = cube1 - cube2\n    if cube1 - cube2 < 0:\n        result = cube2 - cube1\n    return result\n", "def find_difference(a, b):\n    a_rez = 1;\n    b_rez = 1;\n    for x in a:\n        a_rez = a_rez * x;\n    for y in b:\n        b_rez = b_rez * y;\n    return abs(a_rez - b_rez);", "find_difference = lambda a, b: a[0]*a[1]*a[2] - b[0]*b[1]*b[2] if (a[0]*a[1]*a[2] - b[0]*b[1]*b[2]) > 0 else b[0]*b[1]*b[2] - a[0]*a[1]*a[2]", "def find_difference(a, b):\n    mx = max(a[0] * a[1] * a[2], b[0]* b[1] * b[2] )\n    mn = min(a[0] * a[1] * a[2], b[0]* b[1] * b[2] )\n    return mx - mn", "import functools as ft\n\ndef find_difference(a, b):\n    return abs(ft.reduce((lambda x, y: x * y), a) - ft.reduce((lambda x, y: x * y), b))    ", "find_difference = lambda a, b: a[0]*a[1]*a[2] - b[0]*b[1]*b[2] if a[0]*a[1]*a[2] > b[0]*b[1]*b[2] else b[0]*b[1]*b[2] - a[0]*a[1]*a[2]", "import numpy as np\ndef find_difference(a, b):\n    return max(np.prod(a)-np.prod(b),np.prod(b)-np.prod(a))", "from functools import reduce\n\n\ndef find_difference(a: list, b: list) -> int:\n    return abs(reduce(lambda x, y: x * y, a) - reduce(lambda x, y: x * y, b))", "def find_difference(a, b):\n    cube_a = cube_b = 1\n    for x in a: cube_a *= x\n    for x in b: cube_b *= x\n    return abs(cube_a - cube_b)", "def find_difference(a, b):\n    s1 = a[0] * a[1] * a[2]\n    s = b[0] * b[1] * b[2]\n    return abs(s - s1)", "def find_difference(a, b):\n    x = 1\n    y = 1\n    for i in a:\n        x = x * i\n    for i in b:\n        y = y * i\n    result = abs(x-y)\n    return result\n        \n", "def find_difference(a, b):\n    result=1\n    result2=1\n    for i in a: \n         result = result * i  \n    for j in b: \n         result2 = result2 * j  \n    \n    return abs(result-result2)\n", "def find_difference(a, b):\n    total_a = 1\n    total_b = 1\n    for i in a:\n        total_a *= i\n    for c in b:\n        total_b *= c\n    return abs(total_a - total_b)", "def find_difference(a, b):\n    x = 1\n    y = 1\n    for i in range(len(a)):\n        x = x * a[i]\n    for j in range(len(b)):\n        y = y * b[j]\n    if x >= y:\n        return (x-y)\n    else:\n        return (y-x)", "def find_difference(a, b):\n    vol_a = a[0] * a[1] * a[2]\n    vol_b = b[0] * b[1] * b[2]\n    return vol_a - vol_b if vol_a > vol_b else vol_b - vol_a", "def find_difference(a, b):\n    mul_a, mul_b = 1, 1\n    \n    for num_a, num_b in zip(a, b):\n        mul_a *= num_a\n        mul_b *= num_b\n        \n    return abs(mul_a - mul_b)", "def find_difference(a, b): \n    c = (a[0] * a[1] * a[2]) - (b[0] * b[1] * b[2])\n    if c < 0:\n        return c * (-1)\n    else:\n        return c\n\n    # Your code here!\n", "def find_difference(a, b):\n    volA = 1\n    volB = 1\n    for x,y in zip(a,b):\n        volA = volA * x\n        volB = volB * y\n\n    return abs(volA-volB)", "from functools import reduce\ndef find_difference(a, b):\n    from functools import reduce\n    vol = lambda _: reduce(lambda x,y:x*y,_)\n    return abs(vol(a)-vol(b))\n", "def find_difference(a, b):\n    sq1 = (a[0]*a[1]*a[2])\n    sq2 = (b[0]*b[1]*b[2])\n    if sq1 >sq2:\n        return sq1-sq2\n    else:\n        return sq2-sq1", "from numpy import prod\ndef find_difference(a, b):\n    v1 = prod(a)\n    v2 = prod(b)\n    return abs(v1-v2)", "def find_difference(a, b):\n    count1 = 1\n    count2 = 1\n    for i in a:\n        if i < 0:\n            return abs(i)\n        else:     \n            count1 *=i\n    for j in b:\n        if j < 0:\n            return abs(j)\n        else:\n             count2 *=j\n    output = count1 - count2\n    if output < 0:\n        return abs(output)\n    return output\n", "def find_difference(a, b):\n    c=1\n    d=1\n    for i in a:\n        c*=i\n    for i in b:\n        d*=i\n    return max(c-d, d-c)", "def find_difference(v, w):\n    a, b, c, d, e, f = v[0], v[1], v[2], w[0], w[1], w[2]\n    return a*b*c-d*e*f if a*b*c > d*e*f else d*e*f-a*b*c", "def v(arr):\n    return arr[0]*arr[1]*arr[2]\n\n\ndef find_difference(a, b):\n    return abs(v(a)-v(b))", "def find_difference(a, b):\n    av, bv = 1, 1\n    for i in a: av *= i\n    for i in b: bv *= i    \n    return av - bv if av >= bv else bv - av\n", "def find_difference(a, b):\n    x = y = 1\n    for i,j in zip(a,b):\n        x *= i\n        y *= j\n    return abs(x-y)", "\ndef find_difference(a, b):\n    a = a[0]*a[1]*a[2]\n    b = b[0]*b[1]*b[2]\n    if a>b:\n        d = a - b\n        return d\n    else:\n        d = b-a\n        return d", "def find_difference(a, b):\n    \n    m = 1\n    n = 1\n    \n    for x in range(len(a)) :\n        m *= a[x]\n        n *= b[x]\n        \n    return abs(m - n)    ", "def find_difference(a, b):\n    vola = 1\n    for x in a:\n        vola *= x  \n    volb = 1\n    for x in b:\n        volb *= x  \n    return abs(vola-volb)", "import math\ndef find_difference(a, b):\n    v1 = a[0] * a[1] * a[2]\n    v2 = b[0] * b[1] * b[2]\n    return math.abs(v1 - v2)", "from operator import mul, abs\nfrom functools import reduce\n\ndef find_difference(a, b):    \n    return abs(reduce(mul,a) - reduce(mul,b))", "def find_difference(a, b):\n    x = 1\n    y = 1\n    for i in a:\n        x = x * i\n    for i in b:\n        y = y * i\n    return x-y if x-y>0 else y-x", "def volume(lens):\n    return lens[0] * lens[1] * lens[2]\n\ndef find_difference(a, b):\n    return abs(volume(a) - volume(b))", "def find_difference(a, b):\n    accumulator1 = 1\n    accumulator2 = 1\n    for eachvalue in a:\n        accumulator1 = accumulator1 * eachvalue\n    for eachvalue in b:\n        accumulator2 = accumulator2 * eachvalue\n    return abs(accumulator1 - accumulator2)", "def find_difference(a, b):\n    x, y, z = a[0], a[1], a[2]\n    r, s, t = b[0], b[1], b[2]\n    volume1 = x * y * z\n    volume2 = r * s * t\n    difference = volume1 - volume2\n    if volume1 > volume2:\n        return difference\n    else:\n        return -difference", "def find_difference(a, b):\n    vol1=1\n    vol2=1\n    for i in range(len(a)):\n        vol1=vol1*a[i]\n        vol2=vol2*b[i]\n    return max(vol1,vol2)-min(vol1,vol2)", "from functools import reduce\n\ndef find_difference(a, b):\n    a_vol = reduce(lambda x, y: x*y, a)\n    b_vol = reduce(lambda x, y: x*y, b)\n    \n    return max(a_vol, b_vol) - min(a_vol, b_vol)", "def find_difference(a, b):\n    print((a,b))\n    resulta = 1\n    resultb = 1\n    for aa in a:\n        resulta = aa * resulta\n    print((resulta, 'resulta'))\n    for bb in b:\n        resultb = bb * resultb\n    print((resultb, 'resultb'))\n    if resulta > resultb:\n        return resulta - resultb\n    else:\n        return resultb - resulta\n\n", "def find_difference(a, b):\n    v1 = a[0] * a[1] * a[2]\n    v2 = b[0] * b[1] * b[2]\n    if(v1>v2):\n        return v1 - v2\n    else:\n        return v2 - v1\n    # Your code here!\n", "def find_difference(a, b):\n  qa = a[0] * a[1] * a[2]\n  qb = b[0] * b[1] * b[2]\n  return qa - qb if qa > qb else qb - qa\n", "def find_difference(a, b):\n    res1 = a[0] * a[1] * a[2]\n    res2 = b[0] * b[1] * b[2]\n    if res2 > res1:\n        res = res2 - res1\n    else:\n        res = res1 - res2\n    return res", "from functools import reduce\n\nvol = lambda l: reduce(lambda x,y:x * y, l)\n\ndef find_difference(a, b):\n    return abs(vol(b)-vol(a))", "def find_difference(a, b):\n    d1 = a[0]\n    a = a[1:]\n    d2 = b[0]\n    b = b[1:]\n    for i in b:\n        d2*=i\n    for i in a:\n        d1*=i\n    \n    total = d1-d2\n    if total >= 0 :\n        return total\n    else:\n        return -total", "def find_difference(a, b):\n    cube1 = 1\n    cube2 = 1\n    for x in a:\n        cube1 = cube1 * x\n    for y in b:\n        cube2 = cube2 * y\n    if cube1 >= cube2:\n        return cube1 - cube2\n    else:\n        return cube2 - cube1", "from numpy import prod as vol\ndef find_difference(a, b):\n    return abs(vol(a)-vol(b))", "def find_difference(a, b): \n    sum1 = 1\n    sum2 = 1\n    for i in a:\n        sum1 = sum1 * i\n    for j in b:\n        sum2 = sum2 * j\n    return abs(sum1 - sum2)\n", "import numpy\n\ndef find_difference(a, b):\n    aa = numpy.prod(a)\n    bb = numpy.prod(b)\n    return aa - bb if aa > bb else bb - aa", "def find_difference(a, b):\n    a1 = a[0] * a[1] * a[2]\n    b1 = b[0] * b[1] * b[2]\n    m = max(a1, b1)\n    m1 = min(a1, b1)\n    return m - m1", "def find_difference(a, b):\n    diff = (a[1] * a[2] * a[0]) - (b[1] * b[2] * b[0])\n    return abs(diff)", "def find_difference(a, b):\n    result_a = 1\n    result_b = 1\n\n    for i in a:\n        result_a = result_a*i\n    for t in b:\n        result_b = result_b*t\n\n    return abs(result_b-result_a)\n", "def find_difference(a, b):\n    # Your code here!\n    aa = a[0]\n    ab = a[1]\n    ac = a[2]\n    ba = b[0]\n    bb = b[1]\n    bc = b[2]\n    return abs(aa*ab*ac - ba*bb*bc)", "def find_difference(a, b):\n      sum = 1\n      sum1 = 1\n      for i in a:\n          sum = sum * i\n      for j in b:\n          sum1 = sum1 * j\n      if sum - sum1 > 0:\n          return sum - sum1\n      else:\n          return (sum - sum1) * -1", "def find_difference(a, b):\n    v1=1\n    v2=1\n    for i,j in zip(a,b):\n        v1 = v1*i\n        v2 = v2*j\n        \n    return abs(v1-v2)", "def prod(arr):\n    result = 1\n    for i in arr:\n        result *= i\n    return result\n\ndef find_difference(a, b):\n    return abs(prod(a) - prod(b))", "from functools import reduce\nimport math\ndef find_difference(a, b):\n    \n    return math.fabs(reduce(lambda x, y: x*y, a)-reduce(lambda p,q: p*q,b))\n", "def find_difference(a, b):\n    total_a = 1\n    for i in range(0, len(a)):\n      total_a *= a[i]\n    \n    total_b = 1\n    for j in range(0, len(b)):\n      total_b *= b[j]\n    return abs(total_a - total_b)\n", "def find_difference(a, b):\n    la = len(a)\n    reza = 1\n    rezb = 1\n    for i in range(la):\n        reza *= a[i]\n        rezb *= b[i]\n    return abs(reza - rezb)", "def find_difference(a, b):\n    \n    vola=a[0]*a[1]*a[2]\n    volb=b[0]*b[1]*b[2]\n    \n    if vola > volb:\n        diff=vola-volb\n        return diff\n    if volb > vola:\n        diff=volb-vola\n        return diff\n    if vola-volb or volb-vola == 0:\n        return 0", "def find_difference(a, b):\n    if ((a[0] * a[1] * a [2]) - (b[0] * b[1] * b[2])) >= 0:\n        return ((a[0] * a[1] * a [2]) - (b[0] * b[1] * b[2]))\n    elif ((b[0] * b[1] * b[2]) - (a[0] * a[1] * a [2])) >= 0:\n        return (b[0] * b[1] * b[2]) - (a[0] * a[1] * a [2])", "def find_difference(a, b):\n\n    prod1 = 1\n    prod2 = 1\n\n    for i in range(3):\n    \n        prod1 *= a[i]\n        prod2 *= b[i]\n        \n    return abs(prod1-prod2) ", "def find_difference(a, b):\n    p=a[0]*a[1]*a[2]\n    q=b[0]*b[1]*b[2]\n    return abs(p-q)"]