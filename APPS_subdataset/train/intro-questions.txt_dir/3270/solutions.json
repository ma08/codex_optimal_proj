["def closest_pair_tonum(uLim):\n    return next( (a,b) for a in reversed(range(1,uLim)) for b in reversed(range(1,a))\n                       if not (a+b)**.5%1 and not (a-b)**.5%1 )", "from itertools import combinations\ndef closest_pair_tonum(upper_lim):\n    return next((x, y) for x, y in combinations(range(upper_lim - 1, 0, -1), 2) if ((x + y) ** 0.5).is_integer() and ((x - y) ** 0.5).is_integer())", "from math import sqrt\n\ndef is_square(n):\n    return round(sqrt(n)) ** 2 == n\n\ndef closest_pair_tonum(lim):\n    for i in range(lim-1, 0, -1):\n        for j in range(i-1, 0, -1):\n            if is_square(i + j) and is_square(i - j):\n                return i, j", "def closest_pair_tonum(lim):\n    return next((m, n) for m in range(lim-1, 0, -1) for n in range(m-1, 0, -1) if not ((m+n)**0.5%1 or (m-n)**0.5%1))\n", "from math import sqrt\n\ndef is_sqrt(x):\n    y = sqrt(x)\n    return y == round(y)\n\ndef closest_pair_tonum(x):\n    for i in range(x-1, 1, -1):\n        for j in range(i-1, 0, -1):\n            if is_sqrt(i+j) and is_sqrt(i-j):\n                return(i, j)\n", "import itertools\n\nsquares = {i*i for i in range(1, 2000+1)}\n\n\ndef closest_pair_tonum(upper_lim):\n    return next((a, b)\n        for a, b in itertools.combinations(range(upper_lim-1, 0, -1), 2)\n        if a + b in squares and a - b in squares\n    )", "def closest_pair_tonum(upper_lim):\n    sq = lambda x: int(x ** 0.5) == x ** 0.5\n    for i in range(upper_lim - 1, 1, -1):\n        for j in range(i - 1, 1, -1):\n            if sq(i + j) * sq(i - j):\n                return (i, j)"]