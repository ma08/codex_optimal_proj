["def lovefunc( flower1, flower2 ):\n    return (flower1+flower2)%2", "def lovefunc(flower1, flower2):\n    return flower1 % 2 != flower2 % 2", "def lovefunc( flower1, flower2 ):\n    return (flower1 + flower2) % 2 == 1", "def lovefunc(a, b):\n    if a % 2 == 0 and b % 2 == 0:\n        return False\n    elif a % 2 != 0 and b % 2 == 0:\n        return True\n    elif a % 2 == 0 and b % 2 != 0:\n        return True\n    else:\n        return False", "lovefunc=lambda a,b:(a+b)%2", "def lovefunc( flower1, flower2 ):\n    return bool((flower1+flower2)%2)", "def lovefunc(f1, f2):\n    return True if (f1 % 2 == 0 and f2 % 2 != 0) or (f2 % 2 == 0 and f1 % 2 != 0) else False", "def lovefunc( flower1, flower2 ):\n    if all([isinstance(i, int) for i in [flower1,flower2]]):\n        return not ((flower1+flower2)%2 == 0) # only the sum of odd and even can be odd, that is love:)\n    else:\n        print('both of the numbers must be integers!')", "def lovefunc( flower1, flower2 ):\n    if (flower1 % 2 == 0 and flower2 % 2) or (flower1 % 2 and flower2 % 2 == 0):\n        return True\n    else:\n        return False", "def lovefunc( flower1, flower2 ):\n    return True if (flower1 % 2 == 0 and flower2 % 2 != 0) or (flower2 % 2 == 0 and flower1 % 2 != 0) else False", "def lovefunc( flower1, flower2 ):\n    return (flower1 + flower2)%2 != 0", "def lovefunc( flower1, flower2 ):\n    if flower1%2 != flower2%2:\n        return True\n    else:\n        return False", "def lovefunc(a, b):\n    return a % 2 ^ b % 2", "def lovefunc( flower1, flower2 ):\n  return ((flower1 ^ flower2) & 1) == 1", "def lovefunc( flower1, flower2 ):\n    return (flower1 - flower2) % 2 == 1", "lovefunc = lambda f, s: (f + s) % 2", "lovefunc = lambda a,b: bool((a+b)%2)", "def lovefunc(*arg):\n    return sum(arg)%2", "lovefunc = lambda a, b: a % 2 ^ b % 2", "lovefunc = lambda a, b: (a ^ b) & 1", "def lovefunc( flower1, flower2 ):\n    return (flower1 ^ flower2)%2", "from typing import Tuple\n\ndef lovefunc(*flowers: Tuple[int]) -> bool:\n    \"\"\" Are Timmy & Sarah in love? \"\"\"\n    return len(list(filter(lambda _it: _it % 2, flowers))) == 1", "lovefunc = lambda x, y: x&1^y&1", "def lovefunc(seq, elem):\n    return( (seq%2==0 and elem%2!=0) or (seq%2!=0 and elem%2==0))", "def lovefunc( flower1, flower2 ):\n    return False if flower1 and flower2 == 0 or (flower1+flower2)%2 == 0 else True", "lovefunc = lambda x, y: x % 2 != y % 2", "def lovefunc( flower1, flower2 ):\n    return (flower1 + flower2) & 1# ...", "def lovefunc( flower1, flower2 ):\n    return False if (flower1 + flower2) % 2 == 0 else True\n", "def lovefunc( flower1, flower2 ):\n    # ...\n    if(flower1%2!=0 or flower2%2!=0):\n        return True\n    elif(flower1%2!=0 and flower2%2!=0):\n        return False\n    else:\n        return False", "def lovefunc( flower1, flower2 ):\n    \n    if flower1 % 2 == 0 and flower2 % 2 != 0:\n        return True\n    elif flower2 % 2 == 0 and flower1 % 2 != 0:\n        return True\n    elif flower1 % 2 == 0 and flower2 % 2 == 0:\n        return False\n    else:\n        return False", "def lovefunc( flower1, flower2 ):\n    even_odd = []\n    if flower1 % 2 == 0:\n        even_odd.append(\"even\")\n    else:\n        even_odd.append(\"odd\")\n    if flower2 % 2 == 0:\n        even_odd.append(\"even\")\n    else:\n        even_odd.append(\"odd\")\n    \n    return even_odd.count(\"odd\") == 1", "def lovefunc( flower1, flower2 ):\n    a = lambda x, y: True if (x%2 == 0 and y%2 == 1) or (x%2==1 and y%2==0) else False\n    return a(flower1, flower2)", "def lovefunc(f,f1):\n     if f%2==0 and f1%2!=0:\n        return True  \n     return True if f%2!=0 and f1%2==0 else False\n", "def lovefunc( flower1, flower2 ):\n    if flower1 %2==1 and flower2 %2==1:\n        return False\n    elif flower1 %2==0 and flower2 %2==0:\n        return False\n    else:\n        return True", "def lovefunc( flower1, flower2 ):\n    if flower1 % 2 == 0 and flower2 % 2:\n        return True\n    elif flower1 % 2 and flower2 % 2 == 0:\n        return True\n    else:\n        return False\n", "def lovefunc( flower1, flower2 ):\n    x = flower1 % 2\n    y = flower2 % 2\n    return True if x + y == 1 else False", "lovefunc = lambda a,b:(b-a)&1", "def lovefunc( flower1, flower2 ):\n    return flower1%2!=0 and flower2%2==0 or flower2%2!=0 and flower1%2==0", "def lovefunc( flower1, flower2 ):\n    petal1 = flower1 % 2\n    petal2 = flower2 % 2\n    if petal1 == 0 and petal2 > 0:\n        return True\n    if petal1 > 0 and petal2 == 0:\n        return True\n    if petal1 == 0 and petal2 == 0:\n        return False\n    if petal1 > 0 and petal2 > 0:\n        return False", "def lovefunc( flower1, flower2 ):\n    if flower1%2==flower2%2==0:\n        return False\n    elif flower1%2==flower2%2==1:\n        return False\n    else:\n        return True", "def lovefunc( flower1, flower2 ):\n    return not ((flower1 % 2 == 0 and flower2 % 2 == 0) or \\\n        (flower1 % 2 != 0 and flower2 % 2 != 0))", "def lovefunc( flower1, flower2 ):\n    if flower1 % 2 == 0:\n        return True if flower2 % 2 > 0 else False\n    else:\n        return True if flower2 % 2 == 0 else False", "def lovefunc( flower1, flower2 ):\n    def even(x):\n        return x % 2 == 0\n    \n    a = even(flower1)\n    b = even(flower2)\n    return (a and not b) or (b and not a)", "def lovefunc( f1, f2 ):\n    return not(f1 % 2 == 0 and f2 % 2 == 0 or  f1 % 2 != 0 and f2 % 2 != 0)", "def lovefunc( flower1, flower2 ):\n    if (flower1 %2 ==1 and flower2 %2 ==0) or (flower2 %2 ==1 and flower1 %2 ==0):\n        return True\n    return False", "def lovefunc( flower1, flower2 ):\n    if flower1%2>0 and flower2%2==0:\n        return True\n    elif flower1%2==0 and flower2%2>0:\n        return True\n    else:\n        return False", "def lovefunc( flower1, flower2 ):\n    if flower1%2==flower2%2==0:\n        return False\n    elif flower1%2!=0 and flower2%2!=0:\n        return False\n    else: \n        return True# ...", "def lovefunc( flower1, flower2 ):\n    if flower1 % 2 == 1 and flower2 %2 == 1 or flower1 % 2 == 0 and flower2 % 2 == 0:\n        return False\n    return True\n", "def lovefunc( flower1, flower2 ):\n    flower_1 = flower1 / 2\n    flower_2 = flower2 / 2\n    if flower1 == flower2:\n        return False\n    elif flower_1 + flower_2 == int(flower_1 + flower_2):\n        return False\n    else:\n        return True", "def lovefunc( flower1, flower2 ):\n    return (flower1%2==0) == (flower2%2!=0)\n", "def lovefunc( flower1, flower2 ):\n    if flower1 == flower2 or flower1 % 2 == 0 and flower2 % 2 == 0 or flower1 % 2 != 0 and flower2 % 2 != 0:\n        return False\n    else:\n        return True", "def lovefunc(f1, f2):\n    return (f1 % 2 + f2 % 2) % 2 == 1", "def lovefunc(f1,f2):\n    return True if abs(f1-f2) % 2 == 1 else False ", "def lovefunc( flower1, flower2 ):\n    if flower1 % 2 and not flower2 % 2 or not flower1 % 2 and flower2 % 2:\n        return True\n    else:\n        return False", "def lovefunc( flower1, flower2 ):\n    count1 =0\n    count2 = 0\n    for i in range(flower1):\n        count1+=1\n    for j in range(flower2):\n        count2+=1\n    if count1 % 2 == 1 and count2 % 2 == 0 or count1 % 2 == 0 and count2 % 2 == 1:\n        return True\n    else:\n        return False\n    \n", "def lovefunc( f1, f2 ):\n    return (abs(f1-f2))%2 != 0", "def lovefunc( flower1, flower2 ):\n    print(flower1, flower2)\n    if flower1 % 2 == 0 and flower2 % 2 != 0:\n        return True\n    if flower1 % 2 != 0 and flower2 % 2 == 0:\n        return True\n    return False", "def lovefunc( flower1, flower2 ):\n    if flower1 == 0 and flower2 == 0:\n        return False\n    elif flower1 % 2 == 0 and flower2 % 2 != 0:\n        return True\n    elif flower2 % 2 == 0 and flower1 % 2 != 0:\n        return True\n    else:\n        return False", "def lovefunc( flower1, flower2 ):\n    if (flower2 - flower1) % 2 == 0:\n        return False\n    else:\n        return True", "def lovefunc( flower1, flower2 ):\n    '''\n    Write a function that will take the number of petals of each flower\n    and return true if they are in love and false if they aren't.\n    '''\n    return flower1 % 2 != flower2 % 2", "def lovefunc( flower1, flower2 ):\n    if (flower2%2) == 0 and (flower1%2) == 1:\n        return True\n    elif (flower1%2) == 0 and (flower2%2) == 1:\n        return True\n    else:\n        return False", "def lovefunc( flower1, flower2 ):\n    return all([any([flower1 % 2 == 0, flower2 % 2 == 0]), any([flower1 % 2 == 1, flower2 % 2 == 1])])", "def lovefunc( flower1, flower2 ):\n    remainder1 = flower1 % 2\n    remainder2 = flower2 % 2\n    if remainder1 != remainder2:\n        return True\n    else:\n        return False\n", "def lovefunc( flower1, flower2 ):\n    odd = False\n    even = False\n    \n    if flower1%2 == 0:\n        even = True\n    elif flower1%2 != 0:\n        odd = True\n        \n    if flower2%2 == 0:\n        even = True\n    elif flower2%2 != 0:\n        odd = True\n    \n    if odd is True and even is True:\n        return True\n    return False", "def lovefunc( flower1, flower2 ):\n    if abs(flower1 - flower2) % 2 != 0:\n        return True\n    return False", "def lovefunc(x,s):\n    return x%2!=s%2", "def lovefunc( flower1, flower2 ):\n    odd1 = flower1 % 2\n    odd2 = flower2 % 2\n    \n    if (odd1 or odd2) and not (odd1 and odd2):\n        return True\n    else:\n        return False", "def lovefunc( flower1, flower2 ):\n    return bool(flower1 % 2 and not flower2 % 2 or flower2 % 2 and not flower1 % 2)", "def lovefunc( flower1, flower2 ):\n    # ...\n    if flower1%2==1 and flower2%2==1:\n        return True\n    elif flower1%2==0 and flower2%2==0:\n        return False\n    else:\n        return True", "def lovefunc(f1, f2):\n    i = f1 + f2\n    if i % 2 == 0:\n        return False\n    else:\n        return True", "def lovefunc( flower1, flower2 ):\n    \"\"\" Straight Up Now Tell Me\"\"\"\n    return ( flower1 + flower2 ) % 2", "def lovefunc( flower1, flower2 ):\n      if flower1%2 and not flower2%2: return True\n      elif not flower1%2 and flower2%2 : return True\n      return False", "def lovefunc( flower1, flower2 ):\n    if (flower1 + flower2) % 2 != 0:\n        return True\n    elif (flower1 + flower2) % 2 == 0 or flower1 + flower2 == 0:\n        return False", "def lovefunc( flower1, flower2 ):\n    if flower1 % 2 == 0 and flower2 % 2 != 0 or \\\n    flower1 % 2 != 0 and flower2 % 2 == 0:\n        return True\n    return False", "def lovefunc( flower1, flower2 ):\n    f1 = int(flower1)\n    f2 = int(flower2)\n    if f1 % 2 == 0 and f2 % 2 == 0:\n        return False\n    elif f1 % 2 != 0 and f2 % 2 != 0:\n        return False\n    else: \n        return True", "def lovefunc( flower1, flower2 ):\n    if (flower1 - flower2) % 2 == 1:\n        return True\n    else:\n        return False", "def lovefunc( flowers1, flowers2 ):\n    return (flowers1 + flowers2) % 2 != 0", "# codewars \n\ndef lovefunc( flower1, flower2 ):\n    if flower1 % 2 == 0 and flower2 % 2 != 0 or flower2 % 2 == 0 and flower1 % 2 != 0 :\n        return True\n    else:\n        return False\n", "def lovefunc( f1, f2 ):\n    return sum([f1,f2]) % 2", "def lovefunc( flower1, flower2 ):\n    if flower1 % 2 ==0 and flower2 % 2 !=0 :\n        return True\n    elif flower1 % 2 ==0 and flower2 % 2 ==0 :\n        return False\n    elif flower1 % 2 !=0 and flower2 % 2 !=0:\n        return False\n    return True", "def lovefunc( f1, f2 ):\n    if f1 % 2 == 0 and f2 % 2 != 0:\n        return True\n    if f2 % 2 == 0 and f1 % 2 != 0:\n        return True\n    else:\n        return False\n", "#since 1 is truthy and 0 is falsey\n#sample data - (1,4)\n#1+4 = 5\n#5%2 = 1 = true\ndef lovefunc( flower1, flower2 ):\n    return (flower1+flower2)%2", "#sample data (2,2)\n#flower1 % 2 = even\n#flower2 % 2 = even\n#even != even is false\n\n#(1,4)\n#flower1 % 2 = odd\n#flower2 % 2 = even\n#odd != even is true\n\ndef lovefunc(flower1, flower2):\n    return flower1 % 2 != flower2 % 2", "#input - two integers represting flower petals\n#output - boolean\n#edge cases - string given, no input given, decimals/flaots given\n#assumptions - solve by comparing first integer to second integer, same number is False\n#data types - integers\n#end goal - function returns True if one of the flowers has an odd number of petals\n#and the other has an even number, else False\n\n#sample data (1,4) = True\n#(6,8) = False\n#(\"4\",7) = False\n#(3.4,8) = True\n\n#function takes flower1 and flower2\ndef lovefunc(flower1, flower2):\n#check if flower1 and flower2 are both even\n  if flower1 % 2 == 0 and flower2 % 2 == 0:\n#if they are even, return false\n      return False\n#check if both flowers are odd\n  elif flower1 % 2 != 0 and flower2 % 2 != 0:\n#if they are odd, return false\n      return False\n#return True if you have one odd and one even \n  else:\n      return True\n", "def lovefunc( flower1, flower2 ):\n    return (flower1 + flower2) % 2 == 1 if (flower1 + flower2) != 0 else False", "lovefunc = lambda flower1, flower2: (flower1 + flower2) % 2", "def lovefunc( flower1, flower2 ):\n    x = flower1 % 2 == 0 and flower2 % 2 == 1\n    y = flower2 % 2 == 0 and flower1 % 2 == 1\n    return True if x or y else False", "def lovefunc( flower1, flower2 ):\n    # ...\n      if (flower1%2!=0 and flower2%2==0) or(flower1%2==0 and flower2%2!=0):  return True\n      if (flower1%2==0 and flower2%2==0)or (flower1%2!=0 and flower2%2!=0):return False", "def lovefunc( flower1, flower2 ):\n    return flower1 % 2 == 0 and flower2 % 2 == 1 or flower2 % 2 == 0 and flower1 % 2", "lovefunc = lambda flower1, flower2: not((flower1 % 2) ^ (not flower2 % 2))", "def lovefunc( f, ff ):\n    return True if (f+ff)%2==1 else False", "def lovefunc(f1, f2):\n    return f1%2==0 and f2%2!=0 or f2%2==0 and f1%2!=0", "def lovefunc( flower1, flower2 ):\n    return  (flower1 % 2 and not flower2 % 2) or \\\n            (flower2 % 2 and not flower1 % 2)", "def lovefunc( flower1, flower2 ):\n    c = 0\n    if flower1 % 2 == 0 and flower2 % 2 != 0:\n        c = c + 1\n    elif flower2 % 2 == 0 and flower1 % 2 != 0:\n        c = c + 1\n    else:\n        return False\n    return c > 0", "def lovefunc( flower1, flower2 ):\n    if flower1%2 == 0:\n        return not flower2%2 == 0\n    else:\n        return flower2%2 == 0", "def lovefunc( f1, f2 ):\n    if f1%2==0 and f2%2==0:\n        return False\n    if f1&2==1 and f%2==1: \n        return False\n    else:\n        return True", "def lovefunc(*a):\n    return sum(a) % 2", "def lovefunc( flower1, flower2 ):\n    return not (flower1 & 1) == (flower2 & 1)", "lovefunc = lambda a, b: (a - b) & 1", "def lovefunc( flower1, flower2 ):\n    return True in [i % 2 != 0 for i in [flower1, flower2]]"]