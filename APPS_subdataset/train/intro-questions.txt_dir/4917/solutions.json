["def validBraces(string):\n    braces = {\"(\": \")\", \"[\": \"]\", \"{\": \"}\"}\n    stack = []\n    for character in string:\n        if character in braces.keys():\n            stack.append(character)\n        else:\n            if len(stack) == 0 or braces[stack.pop()] != character:\n                return False\n    return len(stack) == 0  ", "def validBraces(s):\n  while '{}' in s or '()' in s or '[]' in s:\n      s=s.replace('{}','')\n      s=s.replace('[]','')\n      s=s.replace('()','')\n  return s==''", "def validBraces(s, previous = ''):\n  while s != previous: previous, s = s, s.replace('[]','').replace('{}','').replace('()','')\n  return not s", "BRACES = {\"(\":\")\", \"{\":\"}\",\"[\":\"]\"}\n\ndef validBraces(string):\n  waiting = []\n  for l in string:\n    if l in BRACES.keys():\n      waiting.append(BRACES[l])\n    elif not waiting or waiting.pop() != l:\n      return False\n  return not waiting", "def validBraces(string):\n    while '()' in string or '{}' in string or '[]' in string:\n        string = string.replace('()', '')\n        string = string.replace('{}', '')\n        string = string.replace('[]', '')\n    return False if len(string) != 0 else True", "def validBraces(string):    \n    while len(string) > 0:        \n        if \"()\" in string:\n            string = string.replace(\"()\", \"\")\n        elif \"[]\" in string:\n            string = string.replace(\"[]\", \"\")\n        elif \"{}\" in string:\n            string = string.replace(\"{}\", \"\")\n        else:\n            return False\n    return True         ", "def validBraces(string):\n    stack = []\n    delim = {'(':')', '[':']', '{':'}'}\n    for c in string:\n        if c in list(delim.keys()): stack.append(c)\n        elif c in list(delim.values()):\n            if not stack or delim[stack.pop()] != c: return False\n    return not stack\n", "def validBraces(s):\n    pairs = ['{}', '()', '[]']\n    while any(pair in s for pair in pairs):\n        for pair in pairs: \n            s = s.replace(pair, \"\")\n    return s == \"\"", "def validBraces(string):\n\n  while '()' in string or '[]' in string or '{}' in string:\n       string = string.replace('{}','')\n       string = string.replace('()','')\n       string = string.replace('[]', '')\n  \n  return not string\n", "import re\n\nclass Stack(object):\n    def __init__(self): self._vals = []\n    def push(self, i): self._vals.append(i)\n    def peek(self): return self._vals[-1] if not self.is_empty() else None\n    def pop(self): self._vals.pop()\n    def is_empty(self): return len(self._vals) == 0\n\ndef validBraces(string):\n    openers, closers = list(map(list, ('({[', ')}]')))\n    pairs = list(zip(openers, closers))\n\n    s = Stack()\n    for char in list(string):\n        if char in openers:\n            s.push(char)\n        elif (char in closers and (s.peek(), char) in pairs):\n            s.pop()\n    return s.is_empty()\n"]