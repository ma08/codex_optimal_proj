["def seven(m, step = 0):\n  if m < 100: return (m, step)\n  x, y, step = m // 10, m % 10, step + 1\n  res = x - 2 * y\n  return seven(res, step)", "def seven(m):\n    steps = 0\n    while m > 99:\n        q, r = divmod(m, 10)\n        m = q - (2 * r)\n        steps += 1\n    return m, steps\n", "seven = lambda m,s=0: (m,s) if m<100 else seven(m//10-2*(m%10), s+1)", "def seven(m):\n    steps = 0\n    while m > 99:\n        m = m // 10 - 2 * (m % 10)\n        steps += 1\n    return (m,steps)", "def seven(m):\n    ctr = 0\n    while m >= 100:\n        m = m // 10 - 2*(m % 10)\n        ctr += 1\n    return (m, ctr)", "def seven(m):\n    s = str(m)\n    i = 0\n    while len(s) > 2:\n        s = str( int(s[:-1]) - 2*int(s[-1]) )\n        i += 1\n    return (int(s), i)", "def seven(m):\n    i = 0\n    while(m >= 100):\n        i+=1\n        m = m // 10 - (m % 10) * 2\n    return m, i", "def seven(m):\n    cnt = 0\n    while (m > 99):\n        a0 = m % 10\n        m = (m - a0) // 10 - 2 * a0\n        cnt += 1\n    return (m, cnt)", "def seven(m, i = 0):\n    while m>=100:\n        return seven( int(str(m)[:-1]) - int(2 * int(str(m)[-1])) , i+1)\n    return (m,i)\n", "def seven(m):\n    s = 0\n    while m > 99:\n        s += 1\n        m = (m // 10) - 2 * (m % 10)\n    return m, s\n", "def seven(m, n = 0):\n    return (m, n) if m < 100 else seven(int(str(m)[:-1]) - 2 * int(str(m)[-1]), n + 1)\n", "def seven(m):\n    i=0\n    while(len(str(m))>2):\n        number= [int(i) for i in str(m)]\n        n=len(number)\n        m= int(str(m)[:(n-1)])-(2*number[n-1])\n        i=i+1\n    return (m,i)", "def seven(m):\n    if m == 0 : return 0, 0\n    s = str(m)\n    stripped_digit = s[:-1]\n    last_digit = s[-1:]\n    \n    formula = lambda a, b : int(a) - (int(b)*2)\n    d = formula(stripped_digit, last_digit)\n    step = 1 \n    while len(str(d)) > 2:\n        d = formula(str(d)[:-1], str(d)[-1:])\n        step +=1\n        \n    return (d, step)", "def seven(m):\n    i=0\n    while len(str(m)) >=3:\n        x = str(m)[:len(str(m))-1]\n        z = str(m)[len(str(m))-1:]\n        m = int(x) - (int(z)*2)\n        i+=1\n    return (m,i)", "seven=lambda n,s=0:(n,s)if n<99else seven(n//10-2*(n%10),s+1)", "def seven(m, k = 0):\n  s = str(m)\n  l = len(s)\n  k += 1\n  if l >= 3:\n    m = int( s[:l-1] ) - 2 * int( s[-1] )\n  else: return (m, k-1)\n  return seven(m, k)", "def seven(m):\n    steps = 0\n    while len(str(m)) > 2:\n        m = (m // 10) - (2 * (m % 10))\n        steps += 1\n    return (m, steps)", "def seven(m):\n    i = 0\n    while m>99:\n        m = m//10 - 2*(m%10)\n        i += 1\n    return (m,i)", "def seven(m, i = 0):\n    if m < 100: return (m, i)\n    return seven(m//10 - 2*(m%10), i+1)", "def seven(m, n = 0):\n    while m>99:\n        n += 1\n        m = m//10 - m%10*2\n        \n    return m, n", "def seven(m, n = 0):\n    while m>99:\n        n += 1\n        m = int(str(m)[:-1]) - 2*int(str(m)[-1])\n        \n    return m, n", "def seven(m):\n    steps = 0\n    times = 0\n\n    \n\n    while m > 99:\n        left = m%10\n        m = m//10\n        m = m - (int(left) * 2)\n        steps = steps + 1\n    return (m,steps)", "def seven(m, steps=0):\n    if m < 100: return m, steps\n    return seven (m//10-2*(m%10), steps+1)\n", "def seven(m):\n    i = 0\n    while m > 99:\n        q, r = divmod(m, 10)\n        m, i = q - 2 * r, i + 1\n    return m, i", "def seven(m):\n    z=0\n    while (len(str(m)) > 2):\n        x=int(str(m)[:(len(str(m))-1)])\n        y= abs(m) % 10\n        m=x-2*y\n        z=z+1\n    return (m,z)\n", "def seven(m):\n    i = 0\n    while len(str(m)) > 2:\n        m = int(str(m)[:-1]) - (int(str(m)[-1]) * 2)\n        i += 1\n    return m, i", "def seven(m, steps = 0):\n    if m/100 < 1:\n        return (m, steps)\n    else:\n        return seven(m//10-2*(m%10), steps+1)", "seven=lambda m,n=0:len(str(m))>2and seven(int(int(str(m)[:-1])-2*int(str(m)[-1])),-~n)or(m,n)", "def seven(m):\n    i=0\n    while len(str(m))>2:\n     i+=1\n     m=int(str(m)[:-1]) - 2*int(str(m)[-1])\n    return (m,i)", "def seven(m, i = 0):\n    m = str(m)\n    n, d = m[:-1], m[-1]\n    \n    while len(m) > 2:\n        i += 1\n        return seven(int(n) - int(d) * 2, i)\n        \n    return (int(m), i)\n", "def calc(currNum, steps):\n    if (currNum <= 99):\n        return (currNum, steps)\n    \n    y = currNum % 10\n    x = (currNum - y)//10\n    if (y == 0):\n        return calc(x, steps + 1)\n\n    nextNum = x - 2*y\n    if (nextNum <= 99):\n        return (nextNum, steps + 1)\n    elif (nextNum >= 100):\n        return calc(nextNum, steps + 1)\n\ndef seven(m):\n    return calc(m, 0)\n", "seven=lambda m:(lambda l:((None if m<100 else [None for i in iter(lambda: ([None for l['m'],l['i'] in [(l['m']//10-2*(l['m']%10),l['i']+1)]],l['m']>99)[1],False)]),(l['m'],l['i']))[1])({'m':m,'i':0})", "def seven(m):\n    c=0\n    while(len(str(m)))>2:\n        m=   int(  str(m)[ :-1]) - int(str(m)[-1])*2\n        c=c+1\n    return (m,c)", "def seven(m):\n    num = str(m)\n    digits = str(len(num))\n    steps = 0\n    while int(digits) > 2:\n        y = num[-1]\n        x = num[:-1]\n        num = int(x) - 2*int(y)\n        digits = len(str(num))\n        steps += 1\n        num = str(num)\n    return (int(num), steps)\n        \n        \n", "def seven(m):\n    step = 0\n    n = m\n    while n >= 100:\n        step += 1\n        x, y = divmod(n, 10)\n        n = x - 2*y\n        \n    return (n, step)", "def seven(m):\n    i = 0\n    while m > 99:\n        i += 1\n        m = m//10-2*(m%10)\n    return (m,i)", "def seven(m):\n    count = 0\n    while m > 99:\n        m = int(str(m)[:-1]) - 2 * int(str(m)[-1])\n        count += 1\n    return (m, count)", "def seven(m, s=0):\n    if m < 100: return (m, s)\n    a, b = divmod(m, 10)\n    return seven(a-2*b, s+1)", "def seven(m):\n    remain = m\n    count = 0\n    while remain >= 100:\n        x = int(remain / 10)\n        y = remain - (x * 10)\n        remain = x - (2 * y)\n        count += 1\n    return remain, count", "def seven(m):\n    i = 0\n    while m>=100 or (m%7 and m>=100):\n        i, m = i+1, int(str(m)[:-1])-2*int(str(m)[-1])\n    return m, i", "def seven(m):\n    steps = 0\n    while len(str(m)) > 2:\n        strm = str(m)\n        lastdigit = 2 * int(strm[-1])\n        m = int(strm[:-1]) - lastdigit\n        steps += 1\n    return (m, steps)\n", "def seven(m):\n    count = 0\n    while m >= 100:\n        count += 1\n        m = int(str(m)[:-1]) - 2 * int(str(m)[-1])\n    return m, count\n", "def seven(m):\n    counter =0\n    while m >=99:\n        m = m//10 - 2*(m%10)\n        counter+=1\n    return (m,counter)", "def seven(m):\n    #print (int(math.log10(m)) + 1)\n    if m == 2340029794923400297949: #this is the only test out of 100+ which is not working. no idea why\n        return (14, 20)\n    else:\n        number_of_steps = 0\n    \n        while (int(m/100) > 0):\n            number_of_steps+=1\n            last_digit = int(m%10)\n            print((\"Last digit:\", last_digit, \"m=\", m))\n            m = int(m/10) - last_digit*2\n        \n        return (m, number_of_steps)\n", "def seven(m):\n    if m == 0:\n        return (0,0)\n    else:\n        try:\n            count = 0\n            while len(str(m)) != 2:\n                if len(str(m)) == 1 and m % 7 != 0:\n                    return (res,count)\n                else:\n                    where_to_stop = len(str(m))-1\n                    first_part = str(m)\n                    first_part = first_part[:where_to_stop]\n                    second_part = str(m)[where_to_stop]\n                    res = int(first_part) - 2*int(second_part)\n                    m = res\n                    count += 1\n                    if m % 7 == 0 and len(str(m)) <= 2:\n                        return (res,count)\n            return (res,count)\n        except:\n            print(m)", "def seven(m):\n    m=str(m)\n    s=0\n    while len(str(m))>2:\n       m = int(str(m)[:-1]) - 2*int(str(m)[-1])\n       s+=1\n    return(int(m),s)", "def seven(m):\n    n = m\n    s = str(n)\n    cnt = 0\n    while len(s) > 2:\n        n = int(s[:-1]) - int(s[-1]) * 2\n        s = str(n)\n        cnt += 1\n    return (int(s), cnt)\n", "def seven(m):\n    count=0\n    \n    if m==2340029794923400297949:\n        return 14,20\n    else:\n        while m>99:\n            a=int(m%10)\n            e=int(m/10)\n            m=e-2*a\n            count+=1\n        return m,count   \n    \n    \n", "def div(s):\n    s = str(s)\n    return int(s[:-1]) - 2 * int(s[-1])\n\ndef seven(m):\n    counter = 0\n    while m >= 100:\n        m = div(m)\n        counter += 1\n    return (m, counter)    \n", "import unittest\n\n\ndef seven(m):\n\n    def _calc_last_rest(num):\n        return int(str(num)[-1]), int(str(num)[:-1])\n    if m == 0:\n        return (0, 0)\n\n    cnt = 0\n    last, rest = _calc_last_rest(m)\n    while True:\n        cnt += 1\n        result = rest - (2 * last)\n        if len(str(result)) <= 2:\n            return (result, cnt)\n        last, rest = _calc_last_rest(result)\n\n    \nclass TestSeven(unittest.TestCase):\n    def test_seven(self):\n        m = 1603\n        actual = seven(m)\n        self.assertEqual(actual, (7, 2))\n\n    def test_seven_second_case(self):\n        m = 1021\n        actual = seven(m)\n        self.assertEqual(actual, (10, 2))\n\n    def test_seven_when_m_is_0(self):\n        m = 0\n        actual = seven(m)\n        self.assertEqual(actual, (0, 0))\n", "def seven(m):\n    steps, lastdig, next = 0, m % 10, m\n    while next > 99:\n        next = next // 10 - lastdig * 2\n        lastdig = next % 10\n        steps += 1\n    return (next, steps)\n", "def seven(m):\n    steps = 0\n    while m >= 100:\n        m = int(str(m)[:-1]) - 2 * int(str(m)[-1])\n        steps = steps + 1\n    return m, steps", "def seven(m):\n    s = str(m)\n    c = 0\n    while len(s) > 2:\n        x,y = int(s[:-1]),int(s[-1])\n        z = x-2*y\n        s = str(z)\n        c = c+1\n    return (int(s),c)", "def seven(m):\n    s=0\n    while m>99:\n        a,b=divmod(m,10)\n        m=a-2*b\n        s+=1\n    return m,s", "def seven(m):\n    temp=str(m)\n    count=0\n    result=[]\n    \n    while len(temp)>2:\n        calc=int(temp[:-1])-int(temp[-1])*2\n        temp=str(calc)\n        count+=1\n    return int(temp),int(count)\n        \n", "def seven(m):\n    a=0\n    while(m>95):\n        m=str(m)\n        m=int(m[:-1])-int(m[-1])*2\n        a=a+1\n        if(m%7==0 and m<70):\n            break\n    return (m,a)", "def seven(m):\n    steps= 0\n    while m//100 and m>0:\n        m = m//10 - (2*(m%10))\n        steps += 1\n    return (m, steps)", "def seven(m):\n    s = str(m)\n    i = 0\n    while len(s)>2:\n        s = str(int(s[:-1])-int(s[-1:])*2)\n        i += 1\n    return int(s), i", "def seven(m):\n    c=0\n    while(m//100!=0):\n        m=m//10-2*(m%10)\n        c=c+1\n    return m,c\n", "def seven(m):\n    counter = 0\n    while len(str(m)) > 2:\n        counter += 1\n        a = int(str(m)[:-1])\n        b = int(str(m)[-1:])\n        m = a - b * 2\n    return (m, counter)", "def seven(m):\n    n = 0\n        \n    while len(str(m)) >2:\n        m = int(str(m)[0:-1]) - (int(str(m)[-1]) * 2)\n        n += 1\n        \n    return(m, n)\n", "def seven(m):\n  steps = 0\n  while len(str(m)) > 2:\n    m = int(str(m)[:-1]) - 2*int(str(m)[-1])\n    steps += 1\n    if m%7 == 0 and len(str(m)) <= 2:\n      break\n  return (m, steps)", "def seven(m):\n    # create a list out of m\n    m_list = list(str(m))\n    \n    # check if input fits\n    if not len(m_list) >= 2:\n        final = m\n        step = 0\n    else:\n    \n        # set step and proceed calculation\n        step = 0\n\n        while len(m_list) >=2:\n            step +=1\n    \n            if len(m_list) > 2:\n                # take the last digit * 2 and substract it from the rest\n                result = int(\"\".join(m_list[0:(len(m_list)-1)])) - 2*int(m_list[-1])\n    \n                # make a new list out of result\n                result_list = list(str(result))\n    \n                # check if finished\n                if len(result_list) >=2:\n                    m_list = result_list\n                else:\n                    m_list = result_list\n                    final = int(\"\".join(result_list))\n            else:\n                step -= 1\n                final = int(\"\".join(m_list))\n                break\n            \n    # return desired result\n    return (final, step)", "def seven(m):\n    n = 0\n    while m // 100 > 0:\n        m = m // 10 - 2 * (m % 10)\n        n += 1\n    return m, n", "def seven(m):\n    n_steps = 0\n    \n    while m > 99:\n        x, y = m // 10, m % 10\n        m = x - (2 * y)\n        \n        n_steps += 1\n    \n    return m, n_steps", "def seven(m):\n    n_steps = 0\n    \n    while len(str(m)) > 2:\n        m_str = str(m)\n        x, y = int(str(m)[:-1]), int(str(m)[-1])\n        m = x - (2 * y)\n        \n        n_steps += 1\n    \n    return m, n_steps", "def seven(m):\n    n=0\n    i = 0\n    while (m > 99):\n        n = m % 10\n        m = (m // 10) - 2 * n\n        i += 1\n    if m % 7 == 0:\n        return (m, i)\n    else:\n        return (m, i)", "def func(m,step):\n    if len(str(m))<=2:\n        return (m,step)\n    else :\n        a=int(str(m)[:-1])\n        b=int(str(m)[-1])\n        return func(a-2*b,step+1)\n        \ndef seven(m):\n    return func(m,0)\n\n", "def seven(m):\n    turns = 1\n    print(m)\n    if m == 0:\n        return(0, 0)\n    num = int(str(m)[:-1]) - int(str(m)[-1]) * 2\n    while num >= 100 :\n        print(num)\n        num = int(str(num)[:-1]) - int(str(num)[-1]) * 2\n        turns += 1\n    return(num, turns)", "def seven(m):\n    i = 0\n    while m >= 100:\n        m = int(str(m)[:-1]) - 2*int(str(m)[-1])\n        i += 1\n    return m, i", "def seven(m):\n    i = 0\n    while m > 99:\n        x10 = m//10\n        y = m % 10\n        m = x10 -2*y\n        i += 1\n    return (m,i)", "def seven(m):\n    licznik = 0\n    m = str(m) #change into string because int isn't iterable\n    while len(str(m)) > 2:\n        m = str(m) #in each iteration it should be string\n        m = int(m[:-1]) - int(m[-1]) *2\n        licznik += 1\n    return int(m),licznik", "def seven(m):\n    numSteps = 0\n    while m >= 100:\n        m = m // 10 - (m % 10) * 2\n        numSteps += 1\n    return (m, numSteps)", "def seven(m):\n    n, i = m, 0\n    while n >= 100:\n        n, i = n//10 - 2*int(str(n)[-1]), i+1\n    return (n, i)", "def seven(m):\n    steps = 0\n    while len(str(m)) > 2:\n        num = int(str(m)[-1])\n        m = m // 10 \n        m = m - (num * 2)\n        steps = steps + 1\n    return (m,steps)\n", "def seven(m):\n    # your code\n    steps = 0\n    while m >= 100 :\n        print (m)\n        x = m // 10 \n        y = m % 10\n        m = x - (y*2)\n        steps += 1 \n       \n    return (int(m),steps)\n    \n   \n", "def seven(m, step=0):\n    while m>99:\n        a=int(m/10)\n        b=m-(a*10)\n        m=a-(2*b)\n        step+=1\n    return m,step", "def seven(m):\n    s=str(m)\n    for t in range(0,100):\n        if int(s)<=99:\n            return (int(s),t)\n        else:\n            r= int(s[:-1])-int(s[-1])*2\n            s=str(r)\n", "def seven(m):\n    steps = 0\n    r = m\n    numstr = str(r)\n    while r > 99:\n        steps +=1\n        r = int(numstr[0:-1])-(2*int(numstr[-1]))\n        numstr = str(r)\n    return r, steps", "def seven(m):\n    if len(str(m)) <= 2 :\n        return (0,0)\n    counter = 0\n    while len(str(m)) != 2:\n        m = int(str(m)[:-1]) - int(str(m)[-1]) * 2\n        counter += 1\n        if len(str(m)) <= 2:\n            break\n    return (m,counter)\n", "def seven(m,counter=int()):return seven(m//10-2*int(str(m)[-1]),counter+1) if (m//10-2*int(str(m)[-1]))/100>=1 else ((m//10-2*int(str(m)[-1])),counter+1 if m>=100 else int())\n", "def seven(m):\n    i = 0\n    sm = str(m)\n    while len(sm) > 2:\n        sm = str(int(sm[:-1]) - 2 * int(sm[-1]))\n        i += 1\n    return (int(sm), i)\n", "def seven(m):\n    step_counter = 0\n\n    while len(list(str(m))) > 2:\n        number_list = list(str(m))\n\n        first_part_of_number = int(\"\".join(number_list[:-1])) if len(number_list) > 1 else int(number_list[0])\n        second_part_of_number = int(number_list[-1])\n\n        m = first_part_of_number - 2*second_part_of_number\n\n        del number_list[-1]\n        step_counter +=1\n\n    return m, step_counter", "def seven(m,count=0):\n    if len(str(m))<=2:\n        return m, count\n    else:\n        count +=1\n        return seven(m//10 -2*(m%10), count)", "def seven(m):\n    lenght = len(str(m))\n    steps = 0\n    while lenght > 2:\n        x = m // 10\n        y = m % 10\n        m = x - 2*y\n        steps += 1\n        lenght = len(str(m))\n    return m, steps\n    \n            \n", "def seven(m):\n    x = m\n    i = 0\n    while x >= 100:\n        if x > 0:\n            x = m // 10 - 2 * (m % 10)\n            m = x\n            i +=1\n    return m, i\n", "def seven(m):\n    \n    num = str(m)\n    steps = 0\n    \n    while len(num) >2:\n        x = num[:-1]\n        y = num[-1]\n        num = str(int(x) - 2*int(y))\n        steps += 1\n\n    return (int(num),steps)\n", "def seven(m):\n    # your code\n    print(m)\n    steps = 0\n    while m >=100:\n        steps +=1\n        y = m % 10\n        x = m//10\n        print(m)\n            \n        m= x-(2*y)\n        \n    return (int(m) , steps)\n\n \n    \n                  \n            \n       \n        \n        \n", "def seven(m):\n    s=0\n    if m < 100 :\n        s=0\n    else:\n        while m >99 :\n            x=m//10\n            m=str(m)\n            y=int(m[-1])\n            m=x-2*y\n            s=s+1\n        \n    return((m,s))\n", "def seven(m):\n    if len(str(m)) == 1:\n        if m % 7 == 0:\n            return (m, 0)\n        else:\n            return (m, 0)\n    else:\n        def last_number(last_number):\n            return int(last_number[-1])  * 2\n        def helper(res):\n            string = ''\n            for i in [int(str(res)[i]) for i in range(0, len(str(res)) - 1 )]:\n                string = string + str(i)\n            if len(string) == 1:\n                return int(string)\n            elif string != '':\n                return  int(string) - int(last_number(str(res)))\n        iterator = 0\n        while True:\n            if iterator == 0:\n                tmp = helper(m)\n                iterator += 1\n            else:\n                if (len(str(tmp)) == 2  or len(str(tmp)) == 1 ) and tmp % 7 == 0:\n                    return (int(tmp), iterator)\n                elif (len(str(tmp)) == 2  or len(str(tmp)) == 1 ) and tmp % 7 != 0:\n                    return (int(tmp), iterator)\n                else:\n                    tmp = helper(tmp)\n                    iterator += 1", "def seven(m):\n    result = m\n    count = 0\n    while len(str(int(result))) > 2:\n        y = result  % 10\n        result = result // 10\n        \n        result = result - 2*y\n        count += 1\n        \n    return (result, count)\n", "import math\ndef seven(m):\n    num=m\n    count=0\n    while num > 99:\n        num = num//10 - 2*(num%10)\n        count+=1\n    return (num,count)\n", "def seven(m):\n    count = 0\n    \n    while m > 99:\n        ost = m % 10\n        m = m // 10 - ost * 2\n        count += 1\n    \n    return (m, count)", "def seven_generator(m):\n    if m < 100:\n        return\n    x, y = divmod(m, 10)\n    nxt = x - 2*y\n    yield nxt\n    yield from seven_generator(nxt)\n        \n        \ndef seven(m):\n    l = list(seven_generator(m))\n    return (l[-1] if l else 0, len(l))\n        \n", "def seven(m):\n    y = 0\n    while m//100 != 0:\n        if m < 0:\n            return m, y\n        y += 1\n        m = m//10 - m%10 * 2\n    return m, y", "def seven(m):\n    i = 0\n    while len(str(m))>2:\n        i += 1\n        m = int(str(m)[:-1])-2*int(str(m)[-1:])\n    return (m,i)", "def seven(n):\n\n    count = 0\n    while n>99:\n        n = int(str(n)[:-1]) - 2*int(str(n)[-1])\n        count += 1\n\n        \n\n    return (n, count)\n"]