["def outcome(n, s, k):    \n    if n == 1: return 1 if 0 < k <= s else 0\n    return sum(outcome(n - 1, s, k - j - 1) for j in range(s)) if k > 0 else 0", "def outcome(n, s, k):\n    return n <= k <= n*s and (n in (1, k) or sum(outcome(n-1, s, k-x-1) for x in range(min(s, k-n+1))))", "def outcome(n, s, k):\n    if n == 0:\n        return k == 0\n    return sum(outcome(n-1, s, k-i) for i in range(1, s+1)) if n <= k <= s * n else 0", "def outcome(n, s, k):\n\n    if n * s * k == 0: \n        return 0\n    \n    dp = [[0] * (k + 1) for i in range(n + 1)]\n    \n    for i in range(1, min(s + 1, k + 1)): \n        dp[1][i] = 1\n    \n    for i in range(2, n + 1): \n        for j in range(1, k + 1): \n            for l in range(1, min(s + 1, j)): \n                dp[i][j] += dp[i - 1][j - l]\n      \n    return dp.pop().pop()", "from itertools import product\n\ndef outcome(n, s, k):\n    return sum(1 for roll in product(range(1, s + 1), repeat=n) if sum(roll) == k) ", "def outcome(n, s, k):\n    from itertools import zip_longest\n    dice = [1]\n    for _ in range(n):\n        dice = [sum(x) for x in zip_longest(*([0] * i + dice for i in range(1, s+1)), fillvalue=0)]\n    return dice[k] if k < len(dice) else 0\n\n", "def outcome(n, s, k):\n    return 0 < k <= s if n == 1 else sum(outcome(n-1, s, k-v) for v in range(1, min(k-(n-1),s)+1) if k-v > 0)", "from itertools import product\ndef outcome(n, s, k):\n    return sum(sum(x) == k for x in product(range(1, s + 1), repeat=n))", "outcome=o=lambda n,s,k:s>=k>0if n==1else sum(o(n-1,s,k-i-1)for i in range(min(s,k)))", "from itertools import product\n\ndef outcome(n, s, k):\n    return sum( sum(p) == k for p in product(range(1, s+1), repeat=n) )"]