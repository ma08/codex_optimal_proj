["class Solution:\n     def missingNumber(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if 0 not in nums:\n             return 0\n         array=sorted(nums)\n         for i in range(len(array)):\n             try:\n                 dif=array[i+1]-array[i]\n                 if dif!=1:\n                     return array[i]+1\n             except:\n                 return array[-1]+1\n", "class Solution:\n     def missingNumber(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         nums.append(nums[0])\n         for i in range(len(nums)):\n           v = nums[i]\n           while v != nums[v]:\n             nums[v], v = v, nums[v]\n         for i, num in enumerate(nums):\n           if i != num:\n             return i\n         return None", "class Solution:\n     def missingNumber(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         n = len(nums)\n         s = n*(n+1)//2\n         return s - sum(nums)\n", "class Solution:\n     def missingNumber(self, nums):\n         expected_sum = len(nums)*(len(nums)+1)//2\n         actual_sum = sum(nums)\n         return expected_sum - actual_sum", "class Solution:\n     def missingNumber(self, nums):\n         res = len(nums)\n         for i in range(len(nums)):\n             res = res ^ i\n             res = res ^ nums[i]\n         return res\n", "class Solution:\n     def missingNumber(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         res = len(nums)\n         # \u5f02\u6216\u8868\u793a\u76f8\u540c\u6570\u4e3a0\uff0c\u7d22\u5f15\u548c\u6570\u7ec4\u7684\u6570\u5e94\u8be5\u4e24\u4e24\u76f8\u5bf9\n         for i,x in enumerate(nums):\n             res ^=i\n             res ^=x\n         return res", "class Solution:\n     def missingNumber(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         n = len(nums)\n         return int((1+n)*n/2-sum(nums))", "class Solution:\n     def missingNumber(self, nums):\n         \n         return (sum(range(len(nums)+1)) - sum(nums))\n         \"\"\" \n         :type nums: List[int]\n         :rtype: int\n         \"\"\"", "class Solution:\n     def missingNumber(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         \n         length = len(nums)+1\n         total = sum(i for i in range(length))\n         \n         nums_total = sum(nums)\n         \n         return total-nums_total\n         \n         \n", "class Solution:\n     def missingNumber(self, array):\n         \"\"\" Time complexity: O(n). Space complexity: O(1).\n         \"\"\"\n         n = len(array)\n         for i, num in enumerate(array):\n             n = n ^ i ^ num\n         return n", "class Solution:\n     def missingNumber(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         s = set()\n         for num in nums:\n             s.add(num)\n         for i in range(len(nums) + 1):\n             if i in s:\n                 continue\n             else:\n                 return i", "class Solution:\n     def missingNumber(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         import functools\n         res1 = functools.reduce(lambda x,y:x^y, [i for i in range(len(nums)+1)])\n         res2 = functools.reduce(lambda x,y:x^y, nums )\n         return res1^res2\n", "class Solution:\n     def missingNumber(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         total = 0\n         for num in range(len(nums)+1):\n             total += num\n         return total - sum(nums)", "class Solution:\n     def missingNumber(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         x = [0]*(len(nums)+1)\n         for e in nums:\n             x[e] = 1\n         return x.index(0)", "class Solution:\n     def missingNumber(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         srted = sorted(nums)\n \n         for i in range(0,len(srted)):\n             if srted[i] != i:\n                 return i\n         \n         return i+1\n"]