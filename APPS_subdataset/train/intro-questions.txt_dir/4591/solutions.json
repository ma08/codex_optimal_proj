["def how_many_bees(h):\n    if not h: return 0\n    v = list(zip(*h))\n    b = [None] * len(h)\n    sf = (b[i:] + l + b[:i] for i,l in enumerate(h))\n    sb = (b[:i] + l + b[i:] for i,l in enumerate(h))\n    df = [[n for n in l if n is not None] for l in zip(*sf)]\n    db = [[n for n in l if n is not None] for l in zip(*sb)]\n    inline = '\\n'.join(map(''.join, h+v+df+db))\n    return (inline + inline[::-1]).count('bee')", "def how_many_bees(hive):\n    if not hive: return 0\n    hive = [list(x) for x in hive]\n    directions = [(0,1), (1,1), (1,0), (1,-1), (0,-1), (-1,-1), (-1,0), (-1,1)]\n    output = 0\n    for row, _ in enumerate(hive):\n        for col, val in enumerate(_):\n            curr = 'b'\n            if val == 'b':\n                for direction in directions:\n                    coord = (row+direction[0], col+direction[1])\n                    if inBounds(hive, coord) and hive[coord[0]][coord[1]] == 'e':\n                        output += traverse(hive, coord, direction, curr)\n    return output                       \n\ndef traverse(hive, coord, direction, curr):\n\n    curr += hive[coord[0]][coord[1]]\n    new_c = (coord[0]+direction[0], coord[1]+direction[1])\n\n    if curr == 'bee':\n        return 1\n    if(inBounds(hive, new_c)):\n        return traverse(hive, new_c, direction, curr)   \n    return 0\n        \n    \ndef inBounds(hive, coord):\n    row, col = len(hive), len(hive[0])\n    if 0 <= coord[0] < row and 0 <= coord[1] < col:\n        return True\n    return False", "def find_bee_heads(hive):\n    for i, row in enumerate(hive):\n        for j, x in enumerate(row):\n            if x == 'b':\n                yield i, j\n\ndef count_ee(hive, r, c, i, j):\n    return sum(\n        0 <= i + di * 2 < r and 0 <= j + dj * 2 < c and hive[i+di][j+dj] == hive[i+di*2][j+dj*2] == 'e'\n        for di, dj in [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1,1)]\n    )\n    \ndef how_many_bees(hive):\n    hive = hive or []\n    r = len(hive)\n    c = r and len(hive[0])\n    return sum(count_ee(hive, r, c, i, j) for i, j in find_bee_heads(hive))", "def how_many_bees(hive):\n    # Degenerate cases\n    if not hive or len(hive) < 3 or len(hive[0]) < 3:\n        return 0\n    # rotate +90 degrees\n    rn90 = lambda a: [list(x) for x in zip(*a[::-1])]\n    # rotate -45 degrees\n    r45 = lambda a: [[val for r, row in enumerate(a) for c, val in enumerate(row) if r + c == i][::-1] for i in range(len(a) + len(a[0]))]\n    # Count bees\n    bees = lambda a: sum(\"\".join(r).count(\"bee\") for r in a)\n    # Count diagonal bees\n    dbees = lambda a: bees(r45(a))\n    # All cardinal bees\n    result = bees(hive) + bees(rn90(hive)) + bees(rn90(rn90(hive))) + bees(rn90(rn90(rn90(hive))))\n    # All diagonal bees\n    result += dbees(hive) + dbees(rn90(hive)) + dbees(rn90(rn90(hive))) + dbees(rn90(rn90(rn90(hive))))\n    return result", "def how_many_bees(hive):\n    if type(hive)!=list: return 0\n    n=0\n    l=[(-1,-1),(-1,0),(-1,1),(0,-1),(0,1),(1,-1),(1,0),(1,1)]\n    for x in range(len(hive)):\n        for y in range(len(hive[x])):\n            if hive[x][y]=='b':\n                for i in l:\n                    if 0<=x+i[0]*2<len(hive) and 0<=y+i[1]*2<len(hive[x]) and hive[x+i[0]][y+i[1]]=='e' and hive[x+i[0]*2][y+i[1]*2]=='e':\n                        n+=1\n    return n", "def how_many_bees(hive):\n    if not hive:\n        return 0\n    r=0\n    for row in hive:\n        r+=''.join(row).count('bee')\n        r+=''.join(row[::-1]).count('bee')\n    for column in zip(*hive):\n        r+=''.join(column).count('bee')\n        r+=''.join(column[::-1]).count('bee')\n    m,n=len(hive),len(hive[0])\n    for i in range(m):\n        for j in range(n):\n            if hive[i][j]=='b':\n                if i<m-2 and j<n-2:\n                    if hive[i+1][j+1]==hive[i+2][j+2]=='e':\n                        r+=1\n                if i<m-2 and j>=2:\n                    if hive[i+1][j-1]==hive[i+2][j-2]=='e':\n                        r+=1\n                if i>=2 and j<n-2:\n                    if hive[i-1][j+1]==hive[i-2][j+2]=='e':\n                        r+=1\n                if i>=2 and j>=2:\n                    if hive[i-1][j-1]==hive[i-2][j-2]=='e':\n                        r+=1\n    return r", "def how_many_bees(hive):\n    if not hive:\n        return 0\n    def gather_bees(row,col):\n        h = col<len(hive[row])-2 \n        if h:\n            yield hive[row][col]+hive[row][col+1]+hive[row][col+2]\n        v = row<len(hive)-2\n        if v:\n            yield hive[row][col]+hive[row+1][col]+hive[row+2][col]\n        if h and v:\n            yield hive[row][col]+hive[row+1][col+1]+hive[row+2][col+2]\n            yield hive[row+2][col]+hive[row+1][col+1]+hive[row][col+2]\n    count = 0\n    for row in range(len(hive)):\n        for col in range(len(hive[row])):\n            count += sum(1 for x in gather_bees(row,col) if x in ['bee','eeb'])\n    return count", "def how_many_bees(hive):\n    if not hive:\n        return 0\n    new_hive = [[i for i in line] for line in hive]    \n    result = 0\n    for line in range(len(hive)):\n        for i in range(len(hive[0])):\n            if hive[line][i] == \"b\":\n                if len(hive[0]) - i > 2 and hive[line][i+1] == \"e\" and hive[line][i+2] == \"e\":\n                    result +=1\n                if i > 1 and hive[line][i-1] == \"e\" and hive[line][i-2] == \"e\":\n                    result +=1\n                if len(hive) - line > 2 and hive[line+1][i] == \"e\" and hive[line+2][i] == \"e\":                    \n                    result +=1\n                if line > 1 and hive[line-1][i] == \"e\" and hive[line-2][i] == \"e\":\n                    result +=1\n                if len(hive[0]) - i > 2 and len(hive) - line > 2 and hive[line+1][i+1] == \"e\" and hive[line+2][i+2] == \"e\":\n                    result +=1\n                if i > 1 and line > 1 and hive[line-1][i-1] == \"e\" and hive[line-2][i-2] == \"e\":\n                    result +=1\n                if len(hive[0]) - i > 2 and line > 1 and hive[line-1][i+1] == \"e\" and hive[line-2][i+2] == \"e\":\n                    result +=1\n                if i > 1 and len(hive) - line > 2 and hive[line+1][i-1] == \"e\" and hive[line+2][i-2] == \"e\":\n                    result +=1\n                \n    return result", "def how_many_bees(hive):\n    if not hive:\n        return 0\n    \n    hive_matrix = [list(line) for line in hive]\n    \n    max_col = len(hive_matrix[0])\n    max_row = len(hive_matrix)\n    \n    cols = [[] for _ in range(max_col)]\n    rows = [[] for _ in range(max_row)]\n    fdiag = [[] for _ in range(max_row + max_col - 1)]\n    bdiag = [[] for _ in range(len(fdiag))]\n    min_bdiag = -max_row + 1\n    \n    for x in range(max_col):\n        for y in range(max_row):\n            cols[x].append(hive_matrix[y][x])\n            rows[y].append(hive_matrix[y][x])\n            fdiag[x+y].append(hive_matrix[y][x])\n            bdiag[x-y-min_bdiag].append(hive_matrix[y][x])\n            \n    h1 = '\\n'.join([''.join(line) for line in cols])\n    h11 = h1.count('bee') + h1.count('eeb')\n    \n    v1 = '\\n'.join([''.join(line) for line in rows])\n    v11 = v1.count('bee') + v1.count('eeb')\n    \n    d1 = '\\n'.join(''.join(line) for line in fdiag)\n    d11 = d1.count('bee') + d1.count('eeb')\n    \n    d2 = '\\n'.join(''.join(line) for line in bdiag)\n    d22 = d2.count('bee') + d2.count('eeb')\n    return h11 + v11 + d11 + d22", "def how_many_bees(hive):\n    if not(hive) or not(len(hive)) or not(len(hive[0])):\n        return 0\n    class Model(object):\n        def __init__(self):\n            self.bees = 0\n        def checker(self, row, col):\n            if row > 1 and hive[row - 1][col] == 'e' and hive[row - 2][col] == 'e':\n                self.bees += 1\n            if row < len(hive) - 2 and hive[row + 1][col] == 'e' and hive[row + 2][col] == 'e':\n                self.bees += 1\n            if col > 1 and hive[row][col - 1] == 'e' and hive[row][col - 2] == 'e':\n                self.bees += 1\n            if col < len(hive[0]) - 2 and hive[row][col + 1] == 'e' and hive[row][col + 2] == 'e':\n                self.bees += 1\n            if row > 1 and col > 1 and hive[row - 1][col - 1] == 'e' and hive[row - 2][col - 2] == 'e':\n                self.bees += 1\n            if row < len(hive) - 2 and col > 1 and hive[row + 1][col - 1] == 'e' and hive[row + 2][col - 2] == 'e':\n                self.bees += 1\n            if row > 1 and col < len(hive[0]) - 2 and hive[row - 1][col + 1] == 'e' and hive[row - 2][col + 2] == 'e':\n                self.bees += 1\n            if row < len(hive) - 2 and col < len(hive[0]) - 2 and hive[row + 1][col + 1] == 'e' and hive[row + 2][col + 2] == 'e':\n                self.bees += 1\n    b = Model()\n    for i in range(len(hive)):\n        for j in range(len(hive[i])):\n            if hive[i][j] == 'b':\n                b.checker(i, j)\n    return b.bees"]