["from functools import reduce\ndef product(ar):\n    return reduce(lambda x,y:x*y, ar)\n\ndef something_acci(num_digits):\n    seq = [1, 1, 2, 2, 3, 3]\n    \n    while(len(str(seq[-1])) < num_digits):\n        seq.append(product(seq[-3:]) - product(seq[-6:-3]))\n    \n    return (len(seq), len(str(seq[-1])))\n", "def something_acci(num_digits):\n    a,b,c,d,e,f = 1,1,2,2,3,3\n    count = 6\n    while True:\n        sf = str(f)\n        if len(sf) >= num_digits:\n            return (count, len(sf))\n        a,b,c,d,e,f = b,c,d,e,f, d*e*f-a*b*c\n        count += 1", "from functools import lru_cache\n\n@lru_cache()\ndef f(n):\n    return (1, 1, 2, 2, 3, 3)[n] if n < 6 else (f(n-1) * f(n-2) * f(n-3)) - (f(n-4) * f(n-5) * f(n-6))\n    \ndef something_acci(num_digits):\n    n, l = 8, 4\n    while l < num_digits:\n        n += 1\n        l = len(str(f(n)))\n    return n + 1, l", "from functools import reduce\nfrom operator import mul\ndef something_acci(n):\n    li = [1, 1, 2, 2, 3, 3]\n    while True:\n        li.append(reduce(mul, li[-3:]) - reduce(mul, li[-6:-3]))\n        if len(str(li[-1])) >= n : return len(li),len(str(li[-1]))", "def something_acci(num_digits):\n    x = [1, 1, 2, 2, 3, 3]\n    while True:\n        if len(str(x[-1])) >= num_digits: return (len(x), len(str(x[-1])))\n        else: x.append(x[-1] * x[-2] * x[-3] - x[-4] * x[-5] * x[-6])", "from math import log10\n\nseq = {0:1, 1: 1, 2:2, 3:2, 4:3, 5:3}\nlen_seq = {0:1, 1:1, 2:1, 3:1, 4:1, 5:1}\n\nnext_term = lambda n: seq[n-1] * seq[n-2] * seq[n-3] - seq[n-4] * seq[n-5] * seq[n-6]\ncount_digits = lambda n: int(log10(n))+1\n\ndef something_acci(num_digits):\n    i = 0\n    while True:\n        if i not in seq:\n            n = next_term(i)\n            seq[i], len_seq[i] = n, count_digits(n)\n        if len_seq[i] >= num_digits: return i+1, len_seq[i]\n        i += 1", "def something_acci(num_digits):\n    a = [1,1,2,2,3,3]\n    while a[-1] < 10**(num_digits-1):\n        a.append(a[-1]*a[-2]*a[-3]-a[-4]*a[-5]*a[-6])\n        \n    return (len(a),len(str(a[-1])))", "def something_acci(num_digits):\n    a=[1,1,2,2,3,3]\n    while(len(str(a[-1]))<num_digits):\n        a.append(a[-1]*a[-2]*a[-3]-a[-4]*a[-5]*a[-6])\n    return (len(a), len(str(a[-1])))"]