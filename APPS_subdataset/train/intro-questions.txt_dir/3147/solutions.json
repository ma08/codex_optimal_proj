["import numpy as np\nfrom itertools import accumulate\ndef sieve_primes(n):\n    sieve = np.ones(n // 2, dtype = np.bool)\n    limit = 1 + int(n ** 0.5)\n\n    for a in range(3, limit, 2):\n        if sieve[a // 2]:\n            sieve[a * a // 2::a] = False\n\n    prime_indexes = 2 * np.nonzero(sieve)[0].astype(int) + 1\n    prime_indexes[0] = 2\n    return set(map(str, prime_indexes))\n\nprimes = sieve_primes(10 ** 6)\n\ndef all_primes(s):\n    if int(s) < 10:\n        return s in primes\n    for n in accumulate(s[:-1]):\n        if n in primes:\n            m = s[len(n):]\n            if m in primes or all_primes(m):\n                return True\n\ndef total_primes(a, b):\n    return [int(a) for a in map(str, range(max(10, a), b + 1)) if a in primes and all_primes(a)]"]