["import re\n\ndef polynomialize(roots):\n    \n    def deploy(roots):\n        r = -roots[0]\n        if len(roots) == 1: return [r, 1]\n        \n        sub = deploy(roots[1:]) + [0]\n        return [c*r + sub[i-1] for i,c in enumerate(sub)]\n    \n    coefs = deploy(roots)\n    poly  = ' + '.join([\"{}x^{}\".format(c,i) for i,c in enumerate(coefs) if c][::-1])\n    poly  = re.sub(r'x\\^0|\\^1\\b|\\b1(?=x)(?!x\\^0)', '', poly).replace(\"+ -\", \"- \") + ' = 0'\n    return poly", "def poly(lst):\n    ans = [1, -lst.pop()]\n    while lst:\n        ans.append(0)\n        r = lst.pop()\n        for i in range(len(ans)-1, 0, -1):\n            ans[i] -= r*ans[i-1]\n    return ans            \n\nimport re\ndef polynomialize(roots):\n    if len(roots) == 1:\n        if roots[0] == 0:\n            return 'x = 0'\n        elif roots[0] < 0:\n            return 'x + ' + str(abs(roots[0])) + ' = 0'\n        else:\n            return 'x - ' + str(roots[0]) + ' = 0'\n    if len([i for i in roots if i != 0]) == 0:\n        return 'x^' + str(len(roots)) + ' = 0'\n    \n#    ans =  np.poly(roots)\n    ans = poly(roots)\n    ans1 = ans[:]\n    \n    final = []\n    for i in range(len(ans[:-1])):\n        try:\n            if int(ans[i]) == 0:\n                continue\n        except:\n            continue\n        if int(ans[i]) == 1:\n            num = len(ans1[:-1])-i\n            if num == 1:\n                final.append('x')\n            else:\n                final.append('x^{}'.format(str(num)))\n        else:\n            num = len(ans1[:-1])-i\n            if num == 1:\n                final.append(str(int(ans[i])) + 'x')\n            else:\n                final.append(str(int(ans[i])) + 'x^{}'.format(str(num)))\n    if int(ans[-1]) != 0:\n        final.append(str(int(ans[-1])))\n    if isinstance(final[0], list):\n        final = final[-1]\n    answer = '+'.join(final)\n\n    answer = answer.replace('+-', ' - ')\n    answer = answer.replace('+', ' + ')\n    answer = re.sub(\" 1x\", ' x', answer)\n    return answer + ' = 0'", "def polynomialize(roots):\n    coeffs = [1]\n    for root in roots:\n        coeffs = [1] + [coeffs[i] + coeffs[i-1] * -root for i in range(1,len(coeffs))] + [-root * coeffs[-1]] \n    coeffs = [d for d in list(enumerate(coeffs[::-1]))[::-1] if d[1] != 0]\n    r = ['{:+0d}x^{}'.format(d[1], d[0]) for d in coeffs if d[0]>1]\n    r += ['{:+0d}x'.format(d[1]) for d in coeffs if d[0]==1]\n    r += ['{:+0d}'.format(d[1]) for d in coeffs if d[0]==0]\n    f = ' '.join(r).replace('+1x', '+x').replace('-1x', '-x').replace('-', '- ').replace('+', '+ ').lstrip('+').strip(' ')\n    return f + ' = 0'", "import numpy as np\n\nstring = lambda v: \"\" if not v else \"x\" if v == 1 else f\"x^{v}\"\n\ndef coefficients(roots):\n    coeffs = [1, -roots.pop()]\n    while roots:\n        coeffs.append(0)\n        r = roots.pop()\n        for i in reversed(range(1, len(coeffs))):\n            coeffs[i] -= r * coeffs[i-1]\n    return coeffs\n\n# numpy.poly1d gives slighty different coeffs\ndef polynomialize(roots):\n    #coeffs = list(map(int, np.poly1d(roots, True)))\n    coeffs = coefficients(roots)\n    z = zip(reversed(range(len(coeffs))), coeffs)\n    res = [string(next(z)[0])]\n    res.extend(f\" {'-+'[b > 0]} {(abs(b), '')[a and abs(b) == 1]}{string(a)}\" for a,b in z if b)\n    res.append(\" = 0\")\n    return ''.join(res)", "def polynomialize(roots):\n    space_sign_space = lambda c: ' + ' if 0 < c else ' - '\n    space_sign_space_num = lambda c: space_sign_space(c)  + (str(abs(c)) if abs(c) != 1 else '')\n    max_power = len(roots)\n    # Calculate coefficients\n    coefs = [1, -roots[0]]\n    if max_power > 1:\n        for r in roots[1:]:\n            coefs = [1,] + [c[0]-r*c[1] for c in zip(coefs[1:], coefs[:-1])] + [-r*coefs[-1],]\n    # Construct equation (first line, separately as it needs no leading +)\n    eq = 'x' + ('^' + str(max_power) if max_power > 1 else '')\n    power = max_power\n    # Loop for x^(max_power -1) up to x^2 if it exists\n    for c in coefs[1:-2]:\n        power -= 1\n        if c == 0:\n            continue\n        eq += space_sign_space_num(c)\n        eq += 'x^' + str(power)\n    # Coefficient for x\n    if (max_power > 1) and coefs[-2] != 0:\n        eq += space_sign_space_num(coefs[-2])\n        eq += 'x'\n    # Coefficient for const\n    if coefs[-1] != 0:\n        eq += space_sign_space(coefs[-1]) + str(abs(coefs[-1]))\n    eq += ' = 0'\n    return eq", "def polynomialize(roots):\n    def add_root(poly, root):\n        # Multiply poly * (x - root)\n        poly1 = poly + [0] # Increase order (multiply by x)\n        poly2 = [0] + [-root * coef for coef in poly] # Multiply by -root\n        poly = [coef1 + coef2 for coef1, coef2 in zip(poly1, poly2)] # Add\n        return poly\n    def poly2str(poly):\n        spoly = \"\"\n        for i, coef in enumerate(poly):\n            if i == 0:\n                signum = \"\"\n            elif coef > 0:\n                signum = \" + \"\n            elif coef < 0:\n                signum = \" - \"\n            else:\n                continue\n                \n            if abs(coef) == 1:\n                scoef = \"\"\n            else:\n                scoef = str(abs(coef))\n            \n            exp = len(poly)-i-1\n            if exp == 1:\n                sexp = \"x\"\n            elif exp == 0:\n                if scoef == \"\":\n                    sexp = \"1\"\n                else:\n                    sexp = \"\"\n            else:\n                sexp = \"x^\"+str(exp)\n            spoly += signum + scoef + sexp\n        spoly += \" = 0\"\n        return spoly\n    \n    poly = [1, -roots[0]]\n    for root in roots[1:]:\n        poly = add_root(poly, root)\n        \n    return poly2str(poly)\n        \n    \n        \n", "from functools import reduce\n\ndef toTerm(coef, power):\n    if not coef or coef == 0: return ''\n    if power == 0: \n        p = ''\n    elif power == 1:\n        p = 'x'\n    else:\n        p = 'x^' + str(power)\n    \n    term = ('' if abs(coef) == 1 and power > 0 else str(abs(coef))) + p\n    return (' - ' if coef < 0 else ' + ') + str(term) if term else ''\n\ndef co2poly(coefs):\n    terms = [toTerm(c, i) for i, c in enumerate(coefs)]\n    terms.reverse()\n    t = ''.join(terms)\n    return (t[3:] if t.startswith(' +') else t[1:]) + ' = 0'\n\ndef toCoefs(coefs, root):\n    return [ n * -root + c for (c, n) in zip([0] + coefs, coefs + [0]) ]\n\ndef polynomialize(roots):\n    coefs = reduce(toCoefs, roots, [1])\n    return co2poly(coefs)\n", "def monomial(factor, index):\n    if factor < 0:\n        if factor == -1:\n            if not index:\n                return \" - 1\"\n            return \" - x\" if index == 1 else \" - x^{}\".format(index)\n        else:\n            if not index:\n                return \" - {}\".format(abs(factor))\n            return \" - {}x\".format(abs(factor)) if index == 1 else \" - {}x^{}\".format(abs(factor), index)\n    else:\n        if factor == 1:\n            if not index:\n                return \" + 1\"\n            return \" + x\" if index == 1 else \" + x^{}\".format(index)\n        else:\n            if not index:\n                return \" + {}\".format(factor)\n            return \" + {}x\".format(factor) if index == 1 else \" + {}x^{}\".format(factor, index)\n\ndef polynomialize(roots):\n    length, roots, parameters = len(roots), filter(lambda i : i, roots), [1]\n    for root in roots:\n        parameters = [1] + [parameters[i+1] - root*parameters[i] for i in range(len(parameters)-1)] + [-parameters[-1]*root]\n    return \"\".join([monomial(param, length-i) for i, param in enumerate(parameters) if param])[3:] + \" = 0\"", "def monomial(factor, index):\n    if factor < 0:\n        if factor == -1:\n            if not index:\n                return \" - 1\"\n            return \" - x\" if index == 1 else \" - x^{}\".format(index)\n        else:\n            if not index:\n                return \" - {}\".format(abs(factor))\n            return \" - {}x\".format(abs(factor)) if index == 1 else \" - {}x^{}\".format(abs(factor), index)\n    else:\n        if factor == 1:\n            if not index:\n                return \" + 1\"\n            return \" + x\" if index == 1 else \" + x^{}\".format(index)\n        else:\n            if not index:\n                return \" + {}\".format(factor)\n            return \" + {}x\".format(factor) if index == 1 else \" + {}x^{}\".format(factor, index)\n\n\ndef polynomialize(roots):\n    zeros, roots2, length = roots.count(0), [r for r in roots if r], len(roots)\n    parameters = [1]\n    for root in roots2:\n        parameters = [1] + [parameters[i+1] - root*parameters[i] for i in range(len(parameters)-1)] + [-parameters[-1]*root]\n    return \"\".join([monomial(param, length-i) for i, param in enumerate(parameters) if param])[3:] + \" = 0\"", "def polynomialize(roots):\n    poly = [1]\n    for root in roots:\n        new_poly = [1]\n        for i in range(1, len(poly)):\n            new_poly.append(poly[i] - root * poly[i - 1])\n        new_poly.append(poly[-1] * -root)\n        poly = new_poly\n    \n    str_poly = []\n    for i, coeff in enumerate(poly):\n        power = len(roots) - i\n        if coeff < 0:\n            str_poly.append(' - ')\n        elif coeff > 0:\n            if i:\n                str_poly.append(' + ')\n        else:\n            continue\n        coeff = abs(coeff)\n        if power == 0 or coeff != 1:\n            str_poly.append(str(coeff))\n        if power != 0:\n            str_poly.append('x')\n        if power >= 2:\n            str_poly.append('^')\n            str_poly.append(str(power))\n    return f'{\"\".join(str_poly)} = 0'"]