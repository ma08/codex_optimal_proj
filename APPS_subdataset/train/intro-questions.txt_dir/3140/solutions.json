["def is_happy(n):\n    seen = set()\n    while n not in seen:\n        seen.add(n)\n        n = sum( int(d)**2 for d in str(n) )\n    return n == 1\n\n\ndef happy_numbers(n):    \n    return [x for x in range(1, n+1) if is_happy(x)]", "# Code reuse: https://www.codewars.com/kata/reviews/5ac53889cd661be6ee0013ff/groups/5ac54c24cd661b3753001fba\n# if you like this go the link and upvote StefanPochmanns's solution :)\ndef is_happy(n):\n    while n > 4:\n        n = sum(int(d)**2 for d in str(n))\n    return n == 1\n\n\nhappy_numbers = lambda n: list(filter(is_happy, range(1, n+1)))", "def happy_numbers(n):\n    HappyNumbers = []\n    for i in range(n+1):\n        AlreadyGoneThrough = []\n        a = i\n        while a != 1 and a not in AlreadyGoneThrough:\n            b = 0\n            AlreadyGoneThrough.append(a)\n            \n            for digit in str(a):\n                b = b + int(digit)**2\n                \n            a = b\n            \n        if a in AlreadyGoneThrough:\n            pass\n            \n        elif a == 1:\n            HappyNumbers.append(i)\n    return HappyNumbers", "def _sum_squares(num):\n    ss = 0\n    while num > 0:\n        div, digit = num // 10, num % 10\n        ss += digit * digit\n        num = div\n    return ss\n\n\ndef _is_happy_number(num):\n    # Check if num is happy number.\n    seens = set()\n    while num > 1:  # stop when num == 1\n        ss = _sum_squares(num)\n        if ss in seens:\n            return False\n\n        seens.add(ss)\n        num = ss\n    return True\n\n\ndef happy_numbers(n):\n    result = []\n    for num in range(1, n + 1):\n        # Check if a num is happy number.\n        if _is_happy_number(num):\n            result.append(num)\n    return result\n", "def happy_numbers(n):\n    return [q for q in range(n+1) if isHappy(q)]\n    \ndef isHappy(o, lister=[]):\n    \n    #Terminator\n    if len(lister)>len(set(lister)): return False \n    \n    #Test for Happiness\n    summer=sum([int(p)**2 for p in str(o)])\n    return True if summer==1 else isHappy(summer, lister+[summer])", "from functools import lru_cache\n\nvisited = set()\n@lru_cache(maxsize=None)\ndef happy(n):\n    if n == 1 or n in visited:\n        visited.clear()\n        return n == 1\n    visited.add(n)\n    n = sum(int(digit)**2 for digit in str(n))\n    return happy(n)\n\ndef happy_numbers(n):\n    return [i for i in range(1, n+1) if happy(i)]", "def happy_number(number):\n    # Check 1: only happy numbers under 10 are (1,7)\n    if number == 7 or number == 1: return True\n\n    # Check 2: happy numbers if the sum of the square of each number == 1 (or 7)\n    while number >= 10:\n        number = sum(int(x)**2 for x in str(number))\n    if number == 1 or number == 7: return True\n    else: return False\nprint(happy_number(1112))\n\ndef happy_numbers(limit):\n    return [number for number in range(1, limit+1) if happy_number(number)]", "def _sum_squares(number):\n    result = 0\n    while number > 0:\n        carry, digit = number // 10, number % 10\n        result += digit * digit\n        number = carry\n    return result\n\ndef _is_happy_number(number):\n    seens = set()\n    while number > 1:\n        # print('number:', number)\n        sum_squares = _sum_squares(number)\n        # print('sum_squares:', sum_squares)\n        if sum_squares in seens:\n            return False\n        seens.add(sum_squares)\n        # print('seens:', seens)\n        number = sum_squares\n    return True\n\ndef happy_numbers(n):\n    result = []\n    for number in range(1, n + 1):\n        if _is_happy_number(number):\n            result.append(number)\n    return result", "def sum_square(num):\n    num2 = str(num)\n    sum_sqr = 0\n    for val in num2:\n        sum_sqr += int(val) ** 2\n    return sum_sqr\n\n\ndef happy_numbers(n):\n    happy = []\n    for val in range(1,n+1):\n        val_list = []\n        wag = 100\n        val2 =  val\n        for iii in range(wag):\n            sum_sqr = sum_square(val2)\n            if sum_sqr == 1:\n                happy.append(val)  # happy\n                break\n            elif sum_sqr in val_list: # infinate loop\n                break\n            else:\n                val_list.append(sum_sqr)\n                val2 = sum_sqr\n\n    return happy\n", "def happy_numbers(n):\n    return [k for k in range(1,n+1) if is_happy(k)]\n\ndef is_happy(n):\n    seen = {n}\n    while n != 1:\n        n = sum(int(d)**2 for d in str(n))\n        if n in seen: return False\n        seen.add(n)\n    return True"]