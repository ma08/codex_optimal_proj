["def find_digit(num, nth):\n    if nth <= 0:\n        return -1\n    try:\n        return int(str(num).lstrip('-')[-nth])\n    except IndexError:\n        return 0", "def find_digit(num, nth):\n    num = str(num)\n    if nth<=0: return -1\n    elif nth> len(num): return 0\n    else:\n        num = num[::-1]\n        return int(num[nth-1])", "def find_digit(num, nth):\n    return 0 if nth>len(str(num)) else -1 if nth<=0 else int(str(num)[-nth])", "def find_digit(num, n):\n    num = str(abs(num))\n    return -1 if n < 1 else 0 if n > len(num) else int(num[-n])", "def find_digit(n, nth):\n    if nth <= 0:\n        return -1\n    s = str(abs(n))\n    return int(s[-nth]) if nth <= len(s) else 0", "def find_digit(num, nth):\n    if nth<=0:\n        return -1\n    if num<0: \n        num = -num\n    return int((num/10 ** (nth-1))%10)", "def find_digit(num, nth):\n    try:\n        return int(str(abs(num))[-nth]) if nth > 0 else -1\n    except:\n        return 0", "def find_digit(num, nth):\n    if nth < 1: return -1\n    s = str(num)\n    if nth > len(s): return 0\n    return int(s[len(s) - nth])", "def find_digit(num, nth):\n    if nth <= 0:\n        return -1\n\n    num = abs(num)\n\n    while num != 0 and nth > 1:\n        num //= 10\n        nth -= 1\n\n    return num % 10\n", "def find_digit(num, nth):\n    return int(str(abs(num)).zfill(nth)[-nth]) if nth > 0 else -1", "def find_digit(num, nth):\n    num = str(num).replace('-','')[::-1]\n    if nth <=0:\n        return -1\n    elif len(num) >= nth:\n        return int(num[nth-1])\n    else:\n        return 0", "def find_digit(num, nth):\n    try:\n        return -1 if nth<1 else int(str(abs(num))[::-1][nth-1])\n    except:\n        return 0", "def find_digit(num, nth):\n    try:\n        return int(str(num)[-nth]) if nth > 0 else -1\n    except:\n        return 0", "def find_digit(num, nth):\n    if nth <= 0:\n        return -1\n    try:\n        return int(str(num)[-nth])\n    except IndexError:\n        return 0", "def find_digit(num, nth):\n    str_num = str(num)\n    if nth < 1:\n        return -1\n    if nth > len(str_num):\n        return 0\n    return int(str_num[::-1][nth - 1])", "def find_digit(num, n):\n    if n <= 0:\n        return -1\n    return abs(num) % 10**n // 10**(n-1)", "def find_digit(num, nth):\n    num = str(abs(num))\n    return -1 if nth <= 0 else int(num[-nth]) if len(num) >= nth else 0", "def find_digit(num, nth):\n    if len(str(num)) < nth: return 0\n    return int(str(num)[-nth]) if nth > 0 else -1 ", "def find_digit(num, nth):\n    if nth <=0 :\n      return -1\n    if num <0 :\n      num = abs(num)\n    if nth>len(str(num)):\n      return 0\n    else :\n      strin = str(num)\n      return int(strin[len(strin)-nth])", "def find_digit(num, nth):\n    return abs(num) % 10**nth // 10**(nth-1) if nth > 0 else -1", "find_digit=lambda n,d:-(d<1)or abs(n)//10**~-d%10", "def find_digit(num, nth):\n    return -1 if nth <= 0 else find_digit(-num, nth) if num < 0 else int(str(num).zfill(nth)[-nth])", "def find_digit(num, nth):\n    if nth <= 0:\n        return -1\n    return int(str(abs(num)).zfill(nth)[-nth])", "def find_digit(num, nth):\n    return int(f'{num:0{-~nth}}'[-nth]) if nth > 0 else -1", "def find_digit(num, nth):\n    return ~0 if nth <= 0 else (abs(num) // 10 ** (nth-1)) % 10", "def find_digit(num, nth):\n    #your code here\n    num_str = str(num)\n    if nth < 1:\n        return -1\n    elif nth > len(num_str):\n        return 0\n    else:\n        return int(num_str[-1*nth])", "def find_digit(num, nth):\n    n = str(num)\n    if len(n) < nth:\n        return 0\n    if nth <= 0:\n        return -1\n    return int(n.replace(\"-\",\"0\")[::-1][nth - 1])", "def find_digit(num, n):\n    if n <= 0: return -1\n    num = str(abs(num))\n    return len(num) >= n and int(num[-n])", "def find_digit(num, nth):\n    num = abs(num)\n    num = str(num)\n    num = num[::-1]\n    \n    if nth<1:\n        return -1\n    \n    elif nth<=len(num):\n        return int(num[nth-1])\n\n    else:\n        return 0", "def find_digit(num, nth):\n    if nth <= 0: return -1\n    n = str(abs(num))\n    return int(n[-nth]) if nth <= len(n) else 0", "def find_digit(num, nth):\n    try:\n        if nth>0:\n            return int(list(str(num))[-nth])\n        else:\n            return -1\n    except:\n        return 0", "def find_digit(num, nth):\n    if nth > 0:\n        try:\n            return int(list(str(num)[::-1])[nth-1])\n        except IndexError:\n            return 0\n    else:\n        return -1", "def find_digit(num, nth):\n    num = str(num)\n    if nth < 1: return -1\n    if nth > len(num): return 0\n    i = [char for char in num]\n    return int(i[-nth])", "def find_digit(num, nth):\n    if nth>len(str(num).replace('-','')) and nth>0:\n        return 0\n    elif nth<=0:\n        return -1\n    else:\n        return int(str(num).replace('-','')[-nth])", "def find_digit(num, nth):\n    if nth <= 0 :\n        return -1\n    \n    string = str(num).replace('-','')\n    \n    if nth > len(string):\n        return 0\n    \n    return int(string[-1*nth])", "def find_digit(num, nth):\n    s = str(num)\n    if nth in range(1, len(s) + 1):\n        return int(s[-nth])\n    if nth == 0 or nth <= 0:\n        return -1\n    else:\n        return 0\n", "def find_digit(num, nth):\n    \n    if nth<=0:\n        \n        return -1\n    \n    n = abs(num)\n    \n    d = [int(x) for x in str(n)]\n    \n    l = len(d)\n    \n    if nth>l:\n        \n        return 0\n    \n    else:\n    \n        p = d[::-1]\n    \n        for i,j in enumerate(p,1):\n        \n            if i==nth:\n            \n                return j\n", "def find_digit(num, nth):\n    if nth < 1:\n        return -1\n    \n    num = str(abs(num))\n    if nth > len(num):\n        return 0\n    calc = len(num) - nth\n    return int(num[calc])\n", "def find_digit(num, nth):\n    try:\n        if nth>0:\n            return int(str(num)[-nth])\n        return -1\n    except:\n        return 0", "def find_digit(num, nth):\n    \n    if nth <= 0:\n        return -1 \n    else: \n        num = str(num)\n        num_digits = \"\"\n\n        for x in num:\n            if x != \"-\":\n                num_digits += x\n\n        if len(num_digits) < nth:\n            return 0\n        else:\n            nth = nth * -1\n            result = num[nth]\n            return int(result)", "def find_digit(num, nth):\n    num = str(abs(num))\n    return -1 if nth <= 0 else int(num.zfill(nth)[-nth])\n", "def find_digit(num, nth):\n    if nth <= 0:\n        return -1\n    elif nth <= len(str(num)):\n        num = str(num)\n        number = num[-nth]\n        return int(number)\n    else:\n        return 0", "def find_digit(num, nth):\n    print(num, nth)\n    if nth <= 0: return -1\n    s = str(abs(num))\n    if nth > len(s): return 0\n    return int(s[-nth])", "def find_digit(num, nth):\n    if nth <= 0:\n        return -1\n    else:\n        num = str(abs(num))\n        num = num.zfill(nth)\n        num = num[::-1]\n        return int(num[nth-1])", "def find_digit(num, nth):\n    if nth < 1: return -1\n    n = [int(x) for x in str(abs(num))]\n    return 0 if len(n) < nth else n[len(n) - nth]", "def find_digit(num, nth):\n    if nth <= 0:\n        return -1\n    elif nth > abs(num) or nth > len(str(abs(num))):\n        return 0\n    else:\n        return int(str(abs(num))[-nth])", "def find_digit(num, nth):\n    if nth <= 0:\n        return -1\n    x = abs(num)\n    for i in range(1, nth):\n        x //=  10\n    return x % 10", "def find_digit(num, nth):\n    if nth <= 0:\n        return -1\n    elif len(str(num)) < nth:\n        return 0\n    return int(str(num)[::-1][nth-1])\n", "def find_digit(num, nth):\n    m= str(abs(num))\n    if nth <= 0:\n        return -1\n    elif num !=0 and len(m) >= nth:        \n        return int(m[-nth])\n    else:\n        return 0", "def find_digit(num, nth):\n    if nth > len(str(num).replace(\"-\", \"\")):\n        return 0\n    if nth <= 0:\n        return -1\n    else:\n        return int(str(num)[::-1][nth-1])\n", "def find_digit(n, m):\n    return int(f\"{n:099d}\"[::-1][m-1]) if m>0 else -1", "def find_digit(num, nth):\n    n = str(abs(num))[::-1]\n    return -1 if nth < 1 else 0 if nth > len(n) else int(n[nth-1])", "def find_digit(num, nth):\n    if nth < 1:\n        return -1\n    if num < 0:\n        num *= -1\n    num = str(num)\n    if nth > len(num):\n        return 0\n    return int(num[len(num) - nth])", "def find_digit(num, nth):\n    print(num)\n    num=abs(num)\n    if nth > len(str(num)):\n        return 0\n    if nth <= 0:\n        return -1\n    if nth <= len(str(num)):\n        num= str(num)\n        return int(num[-nth])", "def find_digit(num, nth):\n    if nth<=0:\n        return -1\n    num_mod=str(abs(num))[::-1]\n    if nth>len(num_mod):\n        return 0\n    else:\n        return int(num_mod[nth-1])\n", "def find_digit(n, i):\n    return (abs(n)//10**(i-1))%10 if i > 0 else -1", "def find_digit(num, nth):\n    if nth <= 0:\n        return -1\n    \n    if num < 0:\n        num = num * -1\n        \n    if len(str(num)) < nth:\n        return 0\n    \n    return int(str(num)[::-1][nth-1])\n", "def find_digit(num, nth):\n    num = str(num)\n    try:\n        if nth <= 0 :\n            return -1\n        else:\n            return int(num[-nth])\n    except IndexError:\n        return 0", "def find_digit(num,n):\n    return int(str(abs(num)).zfill(n+1)[-n]) if n>0 else -1", "def find_digit(num, nth):\n    snum=str(num)\n    if nth<=0:\n        return -1\n    try:\n        if snum[(-nth)].isnumeric:\n            return int(snum[(-nth)])\n    except:\n        return 0", "def find_digit(num, nth):\n    nList = []\n    num = str(num)\n    for i in num:\n        nList.append(i)\n    \n    if nth <= 0:\n        return -1\n    elif nth > len(nList):\n        return 0\n    \n    for index,curr in enumerate(nList):\n        if index == len(nList) - nth:\n            return int(curr)\n", "def find_digit(num, nth):\n    #your code here\n    strnum = str(num)\n    if nth <= 0:\n        return -1\n    elif nth > len(strnum):\n        return 0\n    else:\n        return int(strnum[len(strnum)-nth])", "def find_digit(num, nth):\n    if int(nth) <= 0:\n        return -1\n    elif int(num) < 0:\n        num = int(num) * -1\n    return int(num) // 10**(nth-1) % 10\n", "def find_digit(num, nth):\n    if nth<=0 : return -1\n    s=str(num).strip(\"-\")\n    if len(s)<nth : return 0\n    return int(s[-nth])", "def find_digit(num, nth):\n    try:\n        if nth > 0:\n            return int(str(abs(num))[::-1][nth - 1])\n        return -1\n    except:\n        return 0", "def find_digit(num, nth):\n      \n    num1 = abs(num)\n    \n    res = [int(x) for x in str(num1)]\n    nnum = len(res)\n    if nth <= 0:\n        return (-1)\n    if nth > nnum:\n        return (0)\n    else:    \n        return (res[-nth])\n\n", "def find_digit(num, nth):\n    if nth<=0:\n        return -1\n    \n    else:\n        num=abs(num)\n        if nth>len(str(num)):\n            return 0\n        else:\n            return int(str(num)[len(str(num))-nth])", "def find_digit(num, nth):\n    \n    try :\n        return -1 if nth < 1 else int(str(num)[-nth])\n    except :\n        return 0", "def find_digit(num, nth):\n    if nth<0:\n        return -1\n    elif nth == 0:\n        return -1\n    try:\n        \n        k = nth\n        i = str(num)\n        final = i[-k]\n        m = int(final)\n        return m\n    \n    except:\n        \n        return 0", "def find_digit(n1, n2):\n    try:\n        if n2 < 0 or n2 == 0:\n            return -1\n        n3 = str(abs(n1))\n        n4 = int('-' + str(n2))\n        return int(n3[n4])\n    except IndexError:\n        return 0\n", "def find_digit(num: int, nth: int) -> int:\n    if nth < 1:\n        return -1\n    try:\n        return int(str(abs(num))[-nth])\n    except IndexError:\n        return 0\n\n", "def find_digit(num, nth):\n    \n    numStr = str(abs(num))\n          \n    if nth > len(numStr):\n        return 0\n                 \n    elif nth <= 0:\n        return -1\n                 \n    return int(numStr[len(numStr) - nth])", "def find_digit(num, nth):\n    # if nth is <= 0\n    if nth <= 0:\n        # return -1\n        return -1\n    # convert the num to a string\n    num = str(num)\n    # find the index moving right to left\n    index = len(num) - nth\n    if index >= 0:\n        # return number at that index\n        return int(num[index])\n    else:\n        return 0", "def find_digit(num, nth):\n    if nth < 1:\n        return -1\n    else:\n        try:\n            number = int(str(num)[-nth])\n        except:\n            number = 0\n        return number\n", "def find_digit(num, nth):\n    return int((f'{abs(num):0{nth}}'[::-1])[nth-1]) if nth > 0 else -1", "def find_digit(num, nth):\n    if nth <= 0: return -1\n    num = str(abs(num))\n    return 0 if nth > len(num) else int(num[::-1][nth-1])\n", "def find_digit(num, nth):\n    print((num, nth))\n    num = str(abs(num))[::-1]\n    \n    if nth <= 0:\n        return -1\n    if nth > len(num):\n        return 0\n    else:\n        return int(num[nth-1])\n    \n", "def find_digit(num, nth):\n    if (nth <= 0):\n        return -1\n    num = abs(num)\n    a = []\n    while(num!=0):\n        a.append(num%(10))\n        num = num//10\n    if nth >len(a):\n        return 0\n    else:\n        return a[nth-1]", "def find_digit(num, nth):\n    if nth <= 0:\n        return -1\n    elif len(str(num)) < nth:\n        return 0\n    else:\n        num = abs(num)\n        num = [int(d) for d in str(num)]\n        return num[-nth]\n", "def find_digit(num, nth):\n    if nth<1: return -1\n    num = abs(num)\n    d = nth - 1\n    return (num//pow(10,d))%10", "def find_digit(num, nth):\n    if nth <= 0: return -1\n    else: return int((str(abs(num))[::-1] + '0'*nth)[nth-1])\n", "def find_digit(num, nth):\n    if nth > 0 :\n        return int(str(abs(num))[::-1].ljust(nth, '0')[nth-1]) \n    else:\n        return -1\n", "def find_digit(num, nth):\n    string = str(abs(num)).zfill(nth)\n    return int(string[-1*nth]) if nth > 0 else -1", "def find_digit(num, nth):\n    if nth <= 0:\n        return -1\n        \n    s = str(abs(num))[::-1]\n    if nth > len(s):\n        return 0\n        \n    return int(s[nth-1])", "def find_digit(num, nth):\n    if nth <= 0:\n        return -1\n    elif nth <= len(str(num)):\n        return int(str(num)[::-1][nth-1])\n    else:\n        return 0", "def find_digit(BLM, BlM):\n    if BlM <= 0: return -1\n    return 0 if BlM > len(str(BLM)) else int(str(BLM)[::-1][BlM-1])", "def find_digit(num, nth):\n    if nth<1:\n        return -1\n    num = str(abs(num))\n    if nth > len(num):\n        return 0\n    print(num,nth)\n    return int(num[len(num)-nth])", "def find_digit(n, i):\n    if i < 1: return -1\n    try: return int(str(abs(n)).zfill(i)[-i])\n    except: return -1", "def find_digit(num, nth):\n    if nth <= 0:\n        return -1\n    return int([*reversed(str(num))][nth-1]) if nth < len(str(num)) + 1  else 0", "def find_digit(num, nth):\n    if nth > len(str(num)):\n      return 0\n    elif nth <= 0:\n      return -1\n    return int(str(num)[-nth])", "def find_digit(num, nth):\n    if nth <= 0:\n        return -1\n        \n    number = str(abs(num))\n    \n    if nth > len(number):\n        return 0\n    else:\n        return int(number[-nth])\n", "def find_digit(num, nth):\n    num = abs(num)\n    return -1 if nth < 1 else 0 if len(str(num)) < nth else int(str(num)[len(str(num)) - nth])", "def find_digit(num, nth):\n    num = str(abs(num))[::-1]\n    if nth <= len(num) and nth > 0: \n        return int(num[nth-1])\n    elif nth >= len(num): \n        return 0 \n    else: \n        return -1", "def find_digit(num,nth):\n    if nth <= 0:\n        return -1\n    else:\n        num = str(abs(num))\n        if nth > len(num):\n            return 0\n        else:\n            return int(num[-nth])", "\ndef find_digit(num, nth):\n  y = list(str(num))\n  if nth > len(y):\n      return 0\n  if nth <= 0 :\n     return -1\n  else:\n    return int(str(num) [-nth])\n", "def find_digit(num, nth):\n    #your code here\n    if nth>len(str(abs(num))) : return 0\n    if nth>0 : return int(str(abs(num))[::-1][nth-1])\n    else : return -1", "def find_digit(num, nth):\n    if nth <= 0:\n        return -1;\n    else:\n        num = abs(num)\n        while nth > 0:\n            mod = int(num % 10)\n            num /= 10\n            nth -= 1\n        return mod", "import unittest\n\n\ndef find_digit(num, nth):\n    num = abs(num)\n    if nth <= 0:\n        return -1\n    if len(str(num)) < nth:\n        return 0\n    return int(str(num)[::-1][nth-1])\n    \n    \nclass TestFindDigit(unittest.TestCase):\n    def test_should_return_negative_one_given_nth_is_negative(self):\n        negative_nth = -123\n        self.assertEqual(find_digit(num=-12345, nth=negative_nth), -1)\n\n    def test_should_return_negative_one_given_nth_is_zero(self):\n        zero = 0\n        self.assertEqual(find_digit(num=-12345, nth=zero), -1)\n\n    def test_should_return_0_given_nth_is_greater_than_length_of_num(self):\n        self.assertEqual(find_digit(num=0, nth=20), 0)\n\n    def test_should_return_0_given_nth_is_greater_than_length_of_num_with_negative_sign(self):\n        self.assertEqual(find_digit(num=-456, nth=4), 0)\n\n    def test_should_return_4_when_given_num_is_5673(self):\n        self.assertEqual(find_digit(num=5673, nth=4), 5)\n", "def find_digit(num, nth):\n    #your code here\n    if nth>len(str(abs(num))):\n        return 0\n    elif nth>0 and abs(num)>=nth:\n        y = str(abs(num))\n        return int(y[-nth])\n    return -1\n"]