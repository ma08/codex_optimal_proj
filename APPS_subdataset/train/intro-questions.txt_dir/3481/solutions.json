["def get_char_count(s):\n    counts = {}\n    for c in (c.lower() for c in s if c.isalnum()):\n        counts[c] = counts[c] + 1 if c in counts else 1\n    m = {}\n    for k, v in counts.items():\n        m[v] = sorted(m[v] + [k]) if v in m else [k]\n    return m", "from collections import Counter, defaultdict\nfrom bisect import insort\n\ndef get_char_count(s):\n    D = defaultdict(list)\n    for k,v in Counter(map(str.lower, filter(str.isalnum, s))).items():\n        insort(D[v], k)\n    return D", "from collections import Counter, defaultdict\ndef get_char_count(s):\n    d = defaultdict(list)\n    c = Counter(sorted(s.lower()))\n    for i,j in c.items():\n        if i.isalnum() : d[j].append(i)\n    return dict(sorted(d.items())[::-1])", "from collections import Counter\ndef get_char_count(s):\n    con = Counter([e for e in s.lower() if any((e.isalpha(), e.isdigit()))])\n    return { v:sorted([e for e in con.keys() if con[e] == v]) for v in sorted(con.values(), reverse = 1 ) }", "def get_char_count(s):\n    lst = filter(lambda x: x.isalnum(), s.lower())\n    result = {}\n    for i in set(lst):\n        result[s.lower().count(i)] = sorted(result.get(s.lower().count(i), []) + [i])\n    return result", "\ndef get_char_count(s):\n    print(s)\n    ls = []\n    ls2 = []\n    d ={}\n    nd = {}\n    s = s.lower()\n    for i in s:\n        if i.isalpha() or i.isnumeric():\n            ls.append(i)\n    st = set(ls)\n    for i in st: \n        ls2.append((s.count(i), i))\n        \n   \n    for i in st:\n        d[s.count(i)] = []\n    x = 0\n    for i in ls2:\n        d[ls2[x][0]].append(ls2[x][1])\n        x += 1\n    \n    for i in sorted(d,reverse = True):\n        nd[i] = sorted(d[i])\n        \n    return(nd)\n\n        \n    \n", "from itertools import groupby\nfrom collections import defaultdict\ndef get_char_count(s):\n    d = defaultdict(list)\n    for k, g in groupby(filter(str.isalnum, sorted(s.lower()))):\n        d[len(list(g))].append(k)\n    return d", "from collections import Counter\nfrom itertools import groupby\n\ndef get_char_count(s):\n    cnt = Counter(c for c in s.lower() if c.isalnum()).most_common()\n    return {k: sorted(map(lambda x: x[0], vs)) for k, vs in groupby(cnt, key=lambda x: x[1])}", "from collections import Counter\n\ndef get_char_count(stg):\n    result = {}\n    for char, count in Counter(sorted(c for c in stg.lower() if c.isalnum())).items():\n        result.setdefault(count, []).append(char)\n    return result", "def get_char_count(s):\n    newDict = {}\n    s = s.lower()\n    s = \"\".join(sorted(s))\n    for element in s:\n        if element.isalnum():\n            newDict.setdefault(element, 0)\n            newDict[element] += 1\n    inverse = {}\n    for key in newDict:\n        value = newDict[key]\n        inverse.setdefault(value, []).append(key)\n    return inverse\n        \n"]