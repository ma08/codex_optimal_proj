["class Solution:\n    def balancedStringSplit(self, s: str) -> int:\n        lCount = rCount = 0\n        retVal = 0\n        \n        for char in s:\n            if char == 'R':\n                rCount += 1\n            else:\n                lCount += 1\n                \n            if rCount == lCount:\n                retVal += 1\n                lCount = rCount = 0\n        return retVal\n", "class Solution:\n    def balancedStringSplit(self, s: str) -> int:\n        l_cnt = r_cnt = 0\n        output = 0\n        for i in range(len(s)):\n            if s[i] == 'R':\n                r_cnt += 1\n            else:\n                l_cnt += 1\n            if l_cnt == r_cnt:\n                output += 1\n        return output\n", "class Solution:\n    def balancedStringSplit(self, s: str) -> int:\n        r = 0\n        l = 0\n        result = 0\n        for st in s:\n            if st == 'R':\n                r += 1\n            else:\n                l += 1\n            if r > 0 and l > 0:\n                if r == l:\n                    result += 1\n                    r, l = 0,0\n        return result", "class Solution:\n    def balancedStringSplit(self, s: str) -> int:\n        count1 = 0\n        count2 = 0\n        counter = 0\n        for i in s:\n            if i == 'R':\n                \n                count1 +=1\n            else:\n                \n                count2 +=1\n            if count1 == count2:\n                \n                counter +=1\n        return counter", "class Solution:\n    def balancedStringSplit(self, s: str) -> int:\n        n,c=0,0\n        for v in s:\n            if v=='R':\n                n+=1\n            else:\n                n-=1\n            if(n==0):\n                c+=1\n        return c"]