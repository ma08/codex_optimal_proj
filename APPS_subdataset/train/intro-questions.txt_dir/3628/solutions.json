["def rotate(arr, n):\n    # ...\n    n = n % len(arr)\n    return arr[-n:] + arr[:-n]", "from collections import deque\n\n\ndef rotate(arr, n):\n    \"\"\"Return a given array, rotated by n spaces.\"\"\"\n    rotator = deque(arr)\n    rotator.rotate(n)\n    return list(rotator)\n", "def rotate(arr, n):\n    dex = -(n % len(arr))\n    return arr[dex:] + arr[:dex]\n", "def rotate(arr, n):\n    return arr[-n%len(arr):] + arr[:-n%len(arr)]", "def rotate(lst, n):\n    n %= len(lst)\n    return lst[-n:] + lst[:-n]", "def rotate(arr, n):\n    new_arr = arr[:]\n    for idx in range(len(arr)):\n        new_idx = (idx + n) % len(arr)\n        new_arr[new_idx] = arr[idx]\n    return new_arr", "def rotate(arr, n):\n    rot = (-n)%len(arr)\n    return arr[rot:] + arr[:rot]", "def rotate(arr, n):\n    if n > 0:\n        n = n % len(arr)\n    elif n < 0:\n        n = len(arr) - (abs(n) % len(arr))\n\n    arr = arr[-n:] + arr[0:-n]\n    return arr", "from numpy import roll\n\ndef rotate(arr, n):\n  return list(roll(arr, n))", "def rotate(l, n):\n    return l[(len(l) - ((n % len(l)) + len(l)) % len(l)):] + l[:(len(l) - ((n % len(l)) + len(l)) % len(l))]"]