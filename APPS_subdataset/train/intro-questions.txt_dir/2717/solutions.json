["def scf(lst):\n    return next((k for k in range(2, 1 + min(lst, default=1)) if all(n % k == 0 for n in lst)), 1)\n", "from functools import reduce\nfrom math import floor, gcd, sqrt\n\ndef smallest_factor(n):\n    return next((d for d in range(2, floor(sqrt(n)) + 1) if n % d == 0), n)\n\ndef scf(nums):\n    return 1 if nums == [] else smallest_factor(reduce(gcd, nums))", "def scf(arr):\n    factors_list = []\n    dict = {}\n    min_list = []\n    for element in arr:                               \n        for factor in range(1, element + 1):\n            if element % factor == 0:\n                factors_list.append(factor)     \n    for factor in factors_list:\n        if factor in dict and factor != 1:\n            dict[factor] += 1\n        else:\n            dict[factor] = 1\n    for factor in factors_list:\n        if dict[factor] == len(arr):\n            min_list.append(factor) \n    if min_list != []:\n        return min_list[0]\n    else:\n        return 1", "def scf(lst):\n    for k in range(2, min(lst, default=1) + 1):\n        if all(n % k == 0 for n in lst):\n            return k\n    return 1", "def scf (arr):\n    print(arr)\n    if arr == []:\n        return 1\n    ret = []\n    for j in arr:\n        for i in range(1, int(j**0.5)+1):\n            if j%i == 0:\n                ret.append(i)\n                ret.append(j//i)\n    if len(ret) == len(arr)*2:\n        return 1\n    print(ret)\n    ret1 = []\n    for k in set(ret):\n        if ret.count(k) >= len(arr) and k != 1:\n            ret1.append(k)\n    if ret1 == []:\n        return 1\n    else:\n        return min(ret1)", "def scf (arr): ##\n    return next((i for i in range(2, min(arr, default=1)+1)if all(x%i==0 for x in arr)),1)", "def scf (arr):\n    div, all_div, diz=[], [], {}\n    for x in arr:\n        for i in range(2, x+1):\n            if not x%i:\n                div.append(i)\n        diz[x]=div\n        all_div.extend(div)\n        div=[]\n    all_div=sorted(set(all_div))\n    return next((x for x in all_div if all(x in diz[it] for it in diz)),1)", "def scf(arr):\n    return next((i for i in range(2,min(arr)+1) if all(v%i==0 for v in arr)),1) if arr else 1", "from math import gcd, sqrt\nfrom functools import reduce\n\ndef scf(xs):\n  try:\n    d = reduce(gcd, xs)\n  except TypeError:\n    return 1\n  else:\n    return next((i for i in range(2, int(sqrt(d)) + 1) if d % i == 0), d)", "def scf(xs):\n  return next((i for i in range(2, min(xs, default=1) + 1) if all(x % i == 0 for x in xs)), 1)"]