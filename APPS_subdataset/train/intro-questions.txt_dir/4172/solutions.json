["def solve(s):\n    t = None\n    while t != s:\n        t, s = s, s.replace('()', '')\n    return -1 if len(s) % 2 else sum(1 + (a == tuple(')(')) for a in zip(*[iter(s)] * 2))", "class Stack:\n    def __init__(self):\n        self.items = []\n\n    def is_empty(self):\n        return self.items == []\n\n    def push(self, item):\n        self.items.append(item)\n\n    def pop(self):\n        return self.items.pop()\n\n    def peek(self):\n        return self.items[-1]\n\n    def size(self):\n        return len(self.items)\n\n\ndef solve(s):\n    l = len(s)\n    if l % 2 != 0: return -1\n    stack = Stack(); count = 0; i = 0\n    while i < len(s):\n        if s[i] == \"(\":\n            stack.push(s[i])\n        else:\n            if stack.is_empty():\n                count += 1\n            else: stack.pop()\n        i += 1\n    q = (count + stack.size())//2\n    return q if count % 2 == 0 and stack.size() % 2 == 0 else q + 1\n", "def solve(s):\n    if len(s) % 2: return -1\n    #imagine a simple symmetric random walk; '(' is a step up and ')' is a step down. We must stay above the original position\n    height = 0; counter = 0\n    for x in s:\n        if x == '(':\n            height += 1\n        else:\n            height -= 1\n        if height < 0: \n            counter += 1\n            height += 2\n    #counter is the number of flips from ')' to '(', height//2 number of opposite flips\n    return counter + height // 2", "def solve(s):\n    if len(s) % 2: return -1\n    count, swap = 0, 0\n    for i,c in enumerate(s):\n        count += (c == '(') - (c == ')')\n        if count < 0:\n            swap += 1 ; count = 1\n        elif count > len(s)-i: \n            swap += 1 ; count -= 2\n    return swap", "def solve(s):\n    while \"()\" in s:\n        s = s.replace(\"()\",\"\")\n    count = 0\n    while len(s)>1:\n        count+=s.count(\"((\")\n        s = s.replace(\"((\",\"\")\n        count+=s.count(\"))\")\n        s = s.replace(\"))\",\"\")\n        count+=(s.count(\")(\")*2)\n        s = s.replace(\")(\",\"\")\n    return count if len(s)==0 else -1", "def solve(s, r={'((': 1, '))': 1, ')(': 2}):\n    if len(s) % 2 == 1:\n        return -1\n    while '()' in s:\n        s = s.replace('()', '')\n    return sum(\n        r[x]\n        for x in map(''.join, zip(*[iter(s)] * 2))\n    )", "def solve(s):\n    if len(s)&1: return -1\n    inv = open = 0\n    for c in s:\n        if c == '(':\n            open += 1\n        elif open:\n            open -= 1\n        else:\n            open = 1\n            inv += 1\n    return inv + open//2", "import re\ndef solve(s):\n    while '()' in s : s=re.sub(r'\\(\\)','',s)\n    ss = re.sub(r'\\(\\(|\\)\\)','',s)\n    sss = re.sub(r'\\)\\(','',ss)\n    return [-1,(len(s)-len(ss))//2+len(ss)][not bool(sss)]", "def dellall(s):\n    n=0\n    while True: \n        if n==len(s)-1 or len(s)==0:\n            return True\n        if s[n]=='(' and s[n+1]==')':\n            del s[n]\n            del s[n]\n            n=0\n        else:\n            n+=1\n        \ndef solve(s):\n    s=list(s)\n    count=0\n    if len(s) %2 !=0:\n        return -1\n    dellall(s)\n    while len(s)!=0:\n        n=0\n        if s[n]=='(' and s[n+1]==')':\n            del s[n]\n            del s[n]\n        elif s[n]==')' and s[n+1]=='(':\n            s[n]='('\n            s[n+1]=')'\n            count+=2\n        elif s[n]=='(' and s[n+1]=='(':\n            s[n+1]=')'\n            count+=1\n        elif s[n]==')' and s[n+1]==')':\n            s[n]='('\n            count+=1\n    return count", "def solve(s):\n    if len(s) % 2 != 0:\n        return -1\n    res, k = 0, 0\n    for c in s:\n        k += 1 if c == '(' else -1\n        if k < 0:\n            k += 2\n            res += 1\n    return res + k // 2"]