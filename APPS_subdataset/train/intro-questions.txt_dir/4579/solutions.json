["def pattern(n):\n    return \"\\n\".join(\n        \"\".join(\n            str((n - min(j, i)) % 10) for j in range(n)\n        )\n        for i in range(max(n, 0))\n    )", "def pattern(n):\n    return '\\n'.join(''.join(str((n - min(i, j))%10) for j in range(n)) for i in range(n))", "def pattern(n):\n    return \"\\n\".join([\"\".join([str(j % 10) for j in range(n, n - i, - 1)]).ljust(n, str((n-i) % 10)) for i in range(n)])", "def pattern(n):\n    return \"\\n\".join(\"\".join(str(max(r, c) % 10) for c in range(n, 0, -1)) for r in range(n, 0, -1))\n", "def pattern(n):\n  return '\\n'.join(''.join(str(j%10) for j in range(n, i, -1)) + str(i%10) * i for i in range(n, 0, -1))", "def pattern(n):\n    s = ''.join(str(x%10) for x in reversed(range(1,n+1)))\n    return '\\n'.join( s[:x+1] + s[x]*(n-x-1) for x in range(n) )", "def pattern(n):\n    if n < 1: return ''\n    res = []\n    current = str(n)[-1]\n    strng = ''\n    res.append(current*n)\n    for i in range(1,n):\n        strng = (strng + current)\n        if current == '0':\n            res.append(strng.ljust(n, '9'))\n            current = '9'\n        else:\n            res.append(strng.ljust(n, str(int(current) - 1)))\n            current = str(int(current)-1)\n    return '\\n'.join(res)", "def pattern(n):\n\n    pattern = \"\"\n    pattern_sub = \"\"\n\n    for x in range(n, 0, -1):\n        pattern += pattern_sub\n        pattern += str(x % 10) * x\n        pattern_sub += str(x%10)\n        if x > 1: pattern += \"\\n\"\n\n    return pattern", "def pattern(n):\n    if n < 1: return ''\n    if n == 1: return '1'\n    res = []\n    for i in range(1, n+1):\n        res.append(''.join([str(i%10)]*i + [str(s%10) for s in range(i+1, n+1)])[::-1])\n    return '\\n'.join(res[::-1])", "def pattern(n):\n    d = int(str(n)[-1])\n    ptn = str(d) * n\n    arr = [ptn]\n    for i in range(n-1):\n        if ptn[-1] != '0':\n            ptn = ptn[:i+1] + str(int(ptn[-1])-1) * (n-i-1)\n        else:\n            ptn = ptn[:i+1] + '9' * (n-i-1)\n        arr.append(''.join(ptn))\n    result = ('\\n').join(arr)\n    return result\n"]