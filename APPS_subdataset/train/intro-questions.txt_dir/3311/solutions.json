["from math import copysign as sign\n\ndef reverse_invert(lst):\n    return [-int(sign(int(str(abs(x))[::-1]),x)) for x in lst if isinstance(x,int)]  ", "def reverse_invert(lst):\n    return [(-1,1)[x<0]*int(str(abs(x))[::-1]) for x in lst if isinstance(x,int)]", "reverse_invert=lambda l: [(-1 if n>0 else 1)*int(str(abs(n))[::-1]) for n in l if type(n)==int]", "def reverse_invert(lst):\n    r = []\n    for i in lst:\n        if isinstance(i,int):\n            if i < 0:\n                i = int(str(i)[1:][::-1])\n            else:\n                i = -int(str(i)[::-1])\n            r.append(i)\n    return r", "def reverse_invert(lst):\n    return [(-1)**(n>0) * int(str(abs(n))[::-1]) for n in lst if type(n)==int]", "def reverse_invert(lst):\n    return [int(str(x).lstrip('-')[::-1]) * (1 if x < 0 else -1) for x in lst if isinstance(x, int)]", "def reverse_invert(lst):\n    return [(-1*int(str(i)[::-1])) if i>=0 else (int(str(i)[1:][::-1])) for i in lst if type(i)==int]", "def reverse_invert(lst):\n    step1 = [str(-1*int(str(n)))[::-1] for n in lst if type(n)==int]\n    step2 = [int(x) if '-' not in x else -1*int(x.replace('-',''))for x in step1]\n    return step2", "def reverse_invert(lst):\n    return [(-1)**(v>0)*int(str(abs(v))[::-1]) for v in lst if isinstance(v,int)]"]