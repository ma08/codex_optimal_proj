["from collections import Counter\n\ndef highest_rank(arr):\n    if arr:\n        c = Counter(arr)\n        m = max(c.values())\n        return max(k for k,v in c.items() if v==m)", "def highest_rank(arr):\n    return sorted(arr,key=lambda x: (arr.count(x),x))[-1]", "def highest_rank(arr):\n    return max(sorted(arr,reverse=True), key=arr.count)", "def highest_rank(arr):\n    best = 0\n    occs = 0\n    for item in arr:\n        times = arr.count(item)\n        if times > occs:\n            best = item\n            occs = times\n        elif times == occs:\n            if best < item:\n                best = item\n    return best", "def highest_rank(arr):\n    frequent = {}\n    for i in arr:\n        if i not in frequent:\n            frequent[i] = 0\n        frequent[i] += 1\n    ordered_inv = sorted(list(frequent.items()), key=lambda x: (x[1],x[0]), reverse=True)\n    return ordered_inv[0][0]\n", "def highest_rank(a):\n    b = set(a)\n    c = 0\n    for i in b:\n        d = a.count(i)\n        if d > c or (d == c and i > m):\n            c = d\n            m = i             \n    return m            ", "from collections import Counter\n\ndef highest_rank(arr):\n    return max(Counter(arr).items(), key=lambda x: [x[1], x[0]])[0]", "from collections import Counter\n\ndef highest_rank(arr):\n    c = Counter(arr)\n    return max(c, key=lambda x: (c[x], x))", "from collections import Counter\ndef highest_rank(arr):\n    return sorted(Counter(arr).items(), key=lambda x: (x[1], x[0]))[-1][0]", "def highest_rank(arr):\n    print(arr)\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n            mx = [0,0]\n    maxes = []\n    for num in freq:\n        if freq[num] > mx[1]:\n            mx[0] = num\n            mx[1] = freq[num]\n            maxes = [num]\n        elif freq[num] == mx[1]:\n            maxes.append(num)\n\n    return max(maxes)\n"]