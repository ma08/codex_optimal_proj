["class Solution:\n     def longestPalindrome(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         re = 0\n         set_s = set(s)\n         flag = False\n         for x in set_s:\n             if s.count(x) % 2 == 0:\n                 re += s.count(x)\n             elif s.count(x) >= 3 :\n                 re += s.count(x)-1\n                 flag =True\n             elif s.count(x) == 1:\n                 flag =True\n         if flag == True :\n             re += 1\n         return re\n                 \n", "class Solution:\n     def longestPalindrome(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         dict = {}\n         for w in s:\n             if w not in dict:\n                 dict[w] = 1\n             else:\n                 dict[w] += 1\n         f = 0\n         rlen = 0\n         for w in dict:\n             if not dict[w]%2:\n                 rlen += dict[w]\n             else:\n                 if not f:\n                     rlen += 1\n                 rlen += dict[w] - 1\n                 f = 1\n         return rlen", "class Solution:\n     def longestPalindrome(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         c = {}\n         cnt,flag = 0,0\n         for i in s:\n             c[i] = c.get(i, 0) + 1\n         for i in c:\n             cnt += (c[i]//2)*2\n             if c[i]%2 != 0:\n                 flag = 1\n         return cnt+flag", "class Solution:    \n     def longestPalindrome(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         tmp = [False] * 58\n         res = 0\n         for x in s :\n             t = ord(x) - 65\n             if tmp[t] :\n                  res += 2\n             tmp[t] = not tmp[t]\n         if res != len(s) :\n             res += 1 \n         return res", "class Solution:\n     def longestPalindrome(self, s):\n \n         l = list(s)\n         result = 0\n \n         for x in set(s):\n             x_count = l.count(x)\n             if x_count % 2 == 0:\n                 result += x_count\n             else:\n                 result += x_count-1\n \n         if len(l) > result:\n             result += 1\n \n         return result", "class Solution:\n     def longestPalindrome(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         base, extra, result = {}, 0, 0\n         for letter in s:\n             if letter in base:\n                 base[letter] += 1\n             else:\n                 base[letter] = 1\n         for value in base.values():\n             if extra == 0 and value % 2 == 1:\n                     extra += 1\n             result += value // 2 * 2\n         return result + extra", "class Solution:\n     def longestPalindrome(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         dic = {}\n         for ss in s:\n             dic[ss] = dic.get(ss, 0) + 1\n         \n         res = 0\n         for _, value in list(dic.items()):\n             res += (value//2)*2\n         \n         \n         if res < len(s):\n             res += 1\n         \n         return res\n             \n", "class Solution:\n     def longestPalindrome(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         dic ={}\n         max_odd = 0\n         for i in s :\n             if i in dic :\n                 dic[i] += 1\n             else :\n                 dic[i] = 1\n                 \n         ans = 0\n         single = 0\n         for c in dic:\n             if dic[c] % 2 == 0 :\n                 ans += dic[c]\n             else :\n                 ans += dic[c] - 1\n                 single = 1\n         \n         return ans + single\n         \n", "class Solution:\n     def longestPalindrome(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         counter = {}\n         longest = 0\n         for char in s:\n             counter[char] = counter.get(char,0) + 1\n         for key,val in counter.items():\n             if val%2 == 0:\n                 longest += val\n             else:\n                 longest += val -1\n         if longest < len(s):\n             longest += 1\n         return longest", "class Solution:\n     def longestPalindrome(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         count_map, has_odd, ans = {}, 0, 0\n         \n         for c in s:\n             try:\n                 count_map[c] += 1\n             except KeyError:\n                 count_map[c] = 1\n                 \n         for count in list(count_map.values()):\n             if ans % 2 != 0 and count % 2 != 0:\n                 ans += count - 1\n             else:\n                 ans += count\n                 \n         return ans\n"]