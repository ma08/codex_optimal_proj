["def number(lines):\n  return ['%d: %s' % v for v in enumerate(lines, 1)]", "def number(lines):\n  return [f\"{n}: {ligne}\" for n, ligne in enumerate(lines, 1)]\n", "def number(lines):\n    return ['{}: {}'.format(n, s) for (n, s) in enumerate(lines, 1)]", "def number(lines):\n    return [f\"{counter}: {line}\" for counter, line in enumerate(lines, start=1)]", "def number(lines):\n    return [\"{}: {}\".format(*line) for line in enumerate(lines, start=1)]", "def number(lines):\n    return [str(x+1) + \": \" + lines[x] for x in range(len(lines))]\n", "def number(lines):\n    #your code here\n    a=[]\n    for i,c in enumerate(lines,1):\n        str_var = str(i) + ': ' + str(c) #make sure to add another space\n        a.append(str_var)\n    return a\n", "def number(lines):\n    return [f\"{i}: {j}\" for i,j in enumerate(lines,1)] ", "from itertools import starmap\n\ndef number(lines):\n    return list(starmap(\"{}: {}\".format, enumerate(lines,1)))", "def number(lines):\n    x = 1\n    for i in range(len(lines)):\n        lines[i] = str(x) + \": \" + lines[i]\n        x+=1\n    return lines", "number=lambda l:list(f\"{i}: {e}\"for i,e in enumerate(l,1))", "def number(lines):\n    #your code here\n    i=1\n    l=[]\n    for item in lines:\n        l.append((str(i)+\": \"+item))     \n        i+=1                              # for line counter\n    return l", "def number(lines):\n    cur_index = 0\n    for l in lines:\n        lines [cur_index] = \"{}: {}\".format (cur_index + 1, l)\n        cur_index += 1\n    return lines\n\n        \n        \n", "def number(lines):\n    #your code here\n    result = {}\n    count = 1\n    for i in lines:\n        result[count] = i\n        count +=1\n    final = []\n    for i in result:\n        final.append(str(i)+\":\"+\" \"+result[i])\n    \n    return(final)\n", "def number(a):\n    \n    lineCount = 1\n    lineList = []\n\n\n    while a:    #Scenario: While the list is not empy... \n        lineList.append( str(lineCount) + ': ' + a.pop(0) )\n        lineCount +=1\n\n    return lineList\n#end function number\n", "def number(lines):\n    ans = []\n    for x in range(1, len(lines) + 1):\n        ans.append(f'{x}: {lines[x - 1]}')\n    return ans", "def number(lines):\n    formatted=[]\n    for x in range(len(lines)):\n        formatted.append(str(x+1)+\": \"+lines[x])\n    return formatted", "def number(lines):\n    count,dictionary = 1,{}\n    for element in lines:\n        dictionary[count] = element\n        count += 1\n    return [(str(key) + \": \" + str(value)) for key,value in list(dictionary.items())]\n", "def number(lines):\n    lines = [f\"{i}: {j}\" for i, j in enumerate(lines, start = 1)]\n    return lines", "def number(lines):\n    return [f\"{idx}: {x}\" for idx, x in enumerate(lines, 1)]", "def number(lines):\n    return [f\"{n+1}: {l}\" for n,l in enumerate(lines)]", "def number(coder):\n    return  [ str(x+1) + \": \" + coder[x] for x in range(len(coder))  ]", "import itertools\n\ndef number(lines):\n    counter=itertools.count(1)\n    return [str( next(counter) ) + \": \" + x for x in lines]", "def number(lines):\n    if len(lines) == 0:\n        return []\n    \n    results = []\n    for i, value in enumerate(lines, start=1):\n        results.append(str(i) + \": \" + value)\n    return results", "def number(lines):\n    return [\"%i: %s\" % (i+1, x) for i, x in enumerate(lines)]", "def number(lines):\n    n = 1\n    n1 = []\n    for i in lines:\n        x = (str(n) + \": \" + i)\n        n1.append(x)\n        n = n + 1\n    return n1\n", "def number(lines):\n    return ['{}: {}'.format(*xs) for xs in enumerate(lines, 1)]", "def number(lines):\n    return ['{}: {}'.format(i, x) for i, x in enumerate(lines, 1)]", "def number(lines):\n    return [str(i+1) + ': ' + str(j) for i,j in enumerate(lines)]", "def number(lines):\n    return list('%d: %s' % (n, s) for (n, s) in enumerate(lines, 1))", "number = lambda ___:[str(_+1)+': '+__ for _,__ in enumerate(___)]", "def number(arr):\n    return ['%d: %s' % i for i in enumerate(arr, 1)]", "def number(lines):\n    return [\"{0}: {1}\".format(x+1, lines[x]) for x in range(len(lines))]", "def number(lines):\n    return ['{}: {}'.format(i, a) for i, a in enumerate(lines, 1)]\n", "def number(lines):\n    return list(map(lambda x,y: str(y) + \": \" + x, lines, range(1, len(lines)+1)))", "from typing import List\n\ndef number(lines: List[str]) -> List[str]:\n    \"\"\" Add a line number (starting at 1) to every element of the list. \"\"\"\n    return list(map(lambda _it: \"{}: {}\".format(*_it), enumerate(lines, start=1)))", "def number(lines):\n    return [str(i + 1) + ': ' + str(line) for i, line in enumerate(lines)]", "def number(lines):\n    return [str(i+1)+\": \"+line for i, line in enumerate(lines)]", "def number(lines):\n\n    out = []    \n    for i in range(len(lines)):\n        out.append('{}: {}'.format(i+1,lines[i]))\n    \n    return out", "def number(lines):\n    s=[]\n    [s.append(str(i+1)+': '+lines[i])for i in range(len(lines))]\n    return s \n", "def number(lines):\n    index = 0\n    for line in lines:\n        lines[index] = str(index+1) + \": \" + line\n        index += 1\n    return lines", "def number(lines):\n    i=1\n    res=[]\n    for line in lines:\n        res.append(f\"{i}: {line}\")\n        i+=1\n    return res", "def number(lines):\n    #your code here\n    #x=lines.split(\" \")\n    x=lines\n    y=[]\n    z=0\n    for i in range(len(lines)):\n        z+=i\n        y.append(str(i+1)+\":\"+\" \"+x[i])\n    return y\n", "def number(lines):\n    new_list = []\n    index = 0\n    new_el = 1\n    while len(lines) != index:\n        el = lines[index]\n        sum_el = f\"{new_el}: {el}\"\n        new_list.append(sum_el)\n        index+=1\n        new_el+=1\n    return(new_list)", "def number(lines):\n    sum=[]\n    for i in range(len(lines)):\n        a = str(i+1)+\": \"+lines[i]\n        sum.append(a)\n    return sum", "def number(lines):\n    return [str(i+1) + ': ' + k for i,k in enumerate(lines)]", "def number(l): return [f\"{i+1}: {l[i]}\" for i in range(0,len(l))]", "def number(lines):\n    for i in lines:\n        lines[lines.index(i)] = '{0}: {1}'.format(lines.index(i) + 1, i)\n    return lines", "def number(lines):\n    keks = []\n    for index, i in enumerate(lines):\n        keks.append(str(index + 1) + \": \" + i)\n    return keks", "def number(lines):\n    ls = []\n    for i, l in enumerate(lines):\n        ls.append(str(i+1) + ': ' + l)\n    return ls", "def number(lines):\n    count = 1\n    out = []\n    for i in lines:\n        out.append(str(count) + \": \" + i)\n        count += 1\n    return out", "def number(lines):\n    return list(f'{no}: {line}'for no, line in enumerate(lines, 1))", "def number(lines):\n    line_number = 1\n    formatted = []\n    for string in lines:\n        formatted.append(str(line_number) + \": \" + string)\n        line_number += 1\n    return formatted", "def number(lines):\n    count = 0\n    temp_list = []\n\n    for i in lines:\n        count += 1\n        temp_list.append(str(count) + \": \" + i)\n\n    return temp_list", "def number(lines):\n    return [str(x)+\": \"+str(y) for x,y in enumerate(lines,1)]", "def number(lines):\n    output = []\n    for i, v in enumerate(lines, 1):\n        output.append(str(i) + ': ' + str(v))\n    return output\n", "def number(lines):\n    i = 0;\n    \n    if lines == []:\n        return [];\n    else:\n        while i < len(lines):\n            lines[i] = (str(i+1)+': '+lines[i]);\n            i = i + 1;\n    return (lines);", "def number(lines):\n    return [f\"{str(x+1)}: {y}\" for x,y in enumerate(lines)]", "def number(lines):\n    return [f\"{num}: {line}\"  for num, line in zip([i for i in range(1,len(lines) + 1)],lines)]", "def number(lines):\n    numlist = []\n    numb = 1\n    for x in lines:\n        numlist.append(str(numb) + \": \" + x)\n        numb+=1\n\n    return numlist", "def number(lines):\n    if len(lines) == 0:\n        return []\n    else:\n        count = 1\n        for x in lines:\n            lines[count-1] = str(count) + \": \" + x\n            count += 1\n        return lines", "def number(lines):\n    i = 1\n    list_lines = []\n    for x in lines:\n        list_lines.append(f'{i}: {x}')\n        i += 1\n    return list_lines", "def number(lines):\n    line_number = 1\n    text_editor = []\n    for line in lines:\n        text_editor.append(f\"{line_number}: {line}\")\n        line_number += 1\n    return text_editor\n", "def number(lines):\n    res = []\n    for i, v in enumerate(lines, 1):\n        item = \"{}: {}\".format(i, v)\n        res.append(item)\n        \n    return res\n", "def number(lines):\n    res = []\n    for i in range(1, len(lines)+1):\n        res.append(f'{i}: {lines[i-1]}')\n    return res", "def number(lines):\n    if not lines: return []\n    return [f'{x}: {y}' for x,y in enumerate(lines, 1)]", "def number(lines):\n    if lines == []:\n        return []\n    \n    out = []\n    num = 1\n    for line in lines:\n        res = str(num) + \": \" + line\n        out.append(res)\n        num += 1\n    \n    return out", "def number(lines):\n    ans =[]\n    if len(lines)>0:\n        for i in range(len(lines)):\n            ans.append(str(i+1)+': '+ lines[i])\n        return ans\n    else:\n        return ans\n        \n", "def number(lines):\n    return [f\"{x[0]}: {x[1]}\" for x in enumerate(lines, 1)]", "def number(lines):\n    return ['%s: %s' % (n, lines[n-1]) for n in range(1,len(lines)+1) ] if lines else lines\n\n \n\n\n\n\n\n\n", "def number(lines):\n    new_lines=[]\n    cadena = ''\n    if lines != []:\n        \n        for i in range(len(lines)):\n            cadena = str(i+1)+':'+' '+lines[i]\n            new_lines.append(cadena)\n        return new_lines\n    else:\n        return lines\n        \n    #your code here\n", "def number(lines):\n    if lines != [] or None:\n        for i in range(len(lines)):\n            lines[i] = str(i+1) + \": \" + lines[i]\n        return lines\n    else:\n        return []", "def number(lines):\n    enum_array = list(enumerate(lines, 1))\n    return [f'{i}: {letter}' for i, letter in enum_array]", "def number(lines):\n    lines = [] if lines==[] else [(str(i+1)+\": \"+str(lines[i])) for i in range(len(lines))]\n    return lines", "def number(lines):\n    lis = []\n    x = 1\n    for i in lines:\n        lis.append(str(str(x) + \": \" + i))\n        x += 1\n    return(lis)", "def number(lines):\n    return [str(num)+': '+line for num,line in enumerate(lines, start=1)]", "def number(lines):\n    \"\"\"Returns a list with each line prepended with the line number.\"\"\"\n    return [f\"{n}: {string}\" for n, string in enumerate(lines, 1)]", "def number(lines):\n    # If lines is empty, return empty\n    if len(lines) == 0:\n        return []\n    \n    # If not empty, return enumeration into string formatting\n    return [\"{}: {}\".format(i + 1, item) for i, item in enumerate(lines)]", "def number(lines):\n    out_lst = []\n    line_num = 1\n    for item in lines:\n        out_lst.append(f'{line_num}: {item}')\n        line_num += 1\n    return out_lst", "def number(lines):\n    if len(lines)>0:\n        for i in range(0,len(lines)):\n          lines[i] = f\"{i+1}: {lines[i]}\"\n    return lines\n    #your code here\n", "def number(lines):\n    \n    output = []\n    char = 1\n    \n    for n in lines:\n        output.append(str(char) + \": \" + n)\n        char += 1\n        \n    return output\n    \n", "def number(lines):\n    x2 = 1\n    new_list = []\n    for x in lines:\n        new_list.append(f\"{str(x2)}: {x}\")\n        x2+=1\n    return new_list", "def number(lines):\n    new_lines= []\n    for i, ele in enumerate(lines):\n        new_lines.append(str(i+1) + \": \" + ele)\n    return new_lines", "def number(lines):\n    result = []\n    for i,j in enumerate(lines):\n        result.append(str(i+1)+\": \"+str(j))\n    \n    return result", "def number(arr):\n    new_list = []\n    for index, value in enumerate(arr):\n        new_list.append(\"{}: {}\".format(index +1, value))\n    return new_list", "def number(lines):\n    res = []\n    count = 0\n    for item in lines:\n        st = str(count + 1) + \": \" + item\n        count += 1\n        res.append(st)\n    return res", "def number(lines):\n    _=1\n    for i in range (0, len(lines)):\n        lines[i]=str(_)+\": \"+str(lines[i])\n        _+=1\n        \n    return lines\n        \n\n        \n    #your code here\n", "def number(lines):\n    n = 0\n    l = []\n    for i in lines:\n        n += 1\n        l.append(str(n) +': '+ i)\n    return l", "def number(lines):\n    print(lines)\n    if not lines:\n        return lines\n    lelist = []\n    \n    for c, value in enumerate(lines, 1):\n        lelist.append(str(c) + \": \" + value)\n    \n    return lelist\n        \n    #your code here\n", "def number(lines):\n    lines = [f\"{str(i+1)}: {lines[i]}\" for i in range(len(lines))]\n    return lines", "def number(lines):\n    new_lines = [\n        \": \".join([str(i+1), line]) for i, line in enumerate(lines)\n    ]\n    \n    return new_lines", "def number(lines):\n    lt = []\n    for i,j in enumerate(lines,1):\n        lt.append(f\"{i}: {j}\") \n    return lt", "def number(lines):\n\n    for index, char in enumerate(lines):\n        lines[index] = f\"{index + 1}: {char}\"\n    \n    return lines", "def number(l):\n    return [f\"{idx+1}: {i}\" for idx, i in enumerate(l)]", "def number(lines):\n    if not lines:\n        return []\n    else:\n        return ['%s: %s'%(str(i),str(j)) for i,j in enumerate(lines,start=1)]", "def number(lines):\n    for i in range(len(lines)):\n        n=i+1\n        n=str(n)\n        s=str(lines[i])\n        lines[i]= n +\":\" +\" \" + s\n        n=int(n)\n    return lines", "def number(lines):\n    list = []\n    for i, c in enumerate(lines, 1):\n        value = str(i) + \": \" + str(c)\n        list.append( value)\n    return (list)\n        \n    \n    \n    #your code here\n", "def number(lines):\n    r = []\n    n = 1\n    for s in lines:\n        r.append(str(n) + ': '+ s)\n        n +=1\n    return r", "def number(lines):\n    numbered_lst = []\n    line_num = 1\n    for line in lines:\n        numbered_lst.append(str(line_num)+\": \"+line)\n        line_num += 1\n    return numbered_lst\n    \n"]