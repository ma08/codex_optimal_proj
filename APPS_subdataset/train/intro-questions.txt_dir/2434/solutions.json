["class Solution:\n     def isOneBitCharacter(self, bits):\n         \"\"\"\n         :type bits: List[int]\n         :rtype: bool\n         \"\"\"\n         \n         \"\"\"\n         i = 0\n         while i < len(bits)-1:\n             if bits[i] == 1:\n                 i += 2\n                 \n             else: # bits[i] is 0\n                 i += 1\n         # index: 0,1,2,..., L-2, L-1, where L denotes len(bits)\n         if i == len(bits): # i comes from i+=2 case, bits[L-2] is 1, current i is one more of the last index, i.e. len(bits)\n             return False   # ...10\n         \n         else:              # i comes from i+=1 case, bits[L-2] is 0, current i is the last index, len(bits)-1\n             return True    # ...00\n         \"\"\"\n         \n         # Approach 2, much faster, scan from the back, till see a zero or exhaust the list\n         # count how many one's there is.\n         # Reason: ????...???0xxxx0  Only xxxx0 matters.  After a 0, start the process again.\n         # 0 always marks the end of the earlier bits.\n         count = 0\n         i = len(bits)-2 # s[len(s)-1] the last item in s is always 0.\n         while i>=0 and bits[i] is not 0:\n             count += 1\n             i -= 1\n         \n         if (count % 2) == 0:\n             return True\n         else:\n             return False\n         \n             \n             \n", "class Solution:\n     def isOneBitCharacter(self, bits):\n         \"\"\"\n         :type bits: List[int]\n         :rtype: bool\n         \"\"\"\n         if not bits: return False\n         n = len(bits)\n     \n         index = 0\n         while index < n:\n             if index == n-1 : return True\n             if bits[index] == 1: \n                 index += 2              \n             else: index += 1\n         return False", "class Solution:\n     def isOneBitCharacter(self, bits):\n         \"\"\"\n         :type bits: List[int]\n         :rtype: bool\n         \"\"\"\n         bits.insert(0,0)\n         for i in range(len(bits)-2,-1,-1):\n             if bits[i]==0 or i==0:\n                 return (len(bits)-i)%2==0\n     def isOneBitCharacter(self, bits):\n         parity = bits.pop()\n         while bits and bits.pop(): parity ^= 1\n         return parity == 0\n     def isOneBitCharacter(self, bits):\n         i = 0\n         while i < len(bits) - 1:\n             i += bits[i] + 1\n         return i == len(bits) - 1", "class Solution:\n     def isOneBitCharacter(self, bits):\n         \"\"\"\n         :type bits: List[int]\n         :rtype: bool\n         \"\"\"\n         if not bits: return False\n         n = len(bits)\n         index = 0\n         while index < n:\n             if index == n-1 : return True\n             if bits[index] == 1: \n                 index += 2              \n             else: index += 1\n         return False\n             \n", "class Solution:\n     def isOneBitCharacter(self, bits):\n         \"\"\"\n         :type bits: List[int]\n         :rtype: bool\n         \"\"\"\n         i = 0\n         n = len(bits)\n         while i < n-1:\n             if bits[i]==1: i+=2\n             else: i+=1\n         return i==n-1\n", "class Solution:\n     def isOneBitCharacter(self, bits):\n         \"\"\"\n         :type bits: List[int]\n         :rtype: bool\n         \"\"\"\n         l = len(bits)  \n         if l == 1:\n             if bits[0]==0:\n                 return True\n             else:\n                 return False\n         i = 0\n         while 1 :\n             if bits[i]==1:\n                 l -= 2\n                 i += 2\n             else:\n                 l -= 1\n                 i += 1\n             if l == 1:\n                 return True\n             if l == 0:\n                 return False", "class Solution:\n     def isOneBitCharacter(self, bits):\n         n = len(bits)\n         if bits[n-1] != 0:\n             return False\n         else:\n             i = 0\n             while i < n-2: # -1 for we have considered the last bit, another -1, we may use two bits at a time\n                 print((bits[i], ', '))\n                 if bits[i] == 1:\n                     if bits[i+1] == 0 or bits[i+1] == 1:\n                         i += 1\n                     else:\n                         return False\n                 elif bits[i] == 0:\n                     pass\n                 i += 1\n             if bits[i] == 1:\n                 return False\n             return True\n", "class Solution:\n     def isOneBitCharacter(self, bits):\n         \"\"\"\n         :type bits: List[int]\n         :rtype: bool\n         \"\"\"\n         if len(bits)==1 and bits[0]==1: \n             return False\n         n = len(bits)\n         i = 0\n         while(i < n):\n             if i == n-1: return True\n             else:\n                 if bits[i] == 1:\n                     i += 2\n                 else: i+=1\n         return False", "class Solution:\n     def isOneBitCharacter(self, bits):\n         \"\"\"\n         :type bits: List[int]\n         :rtype: bool\n         \"\"\"\n         i = 0\n         while i < len(bits) - 1:\n             if bits[i] == 0: i += 1\n             elif bits[i] == 1: i += 2\n         return i==len(bits)-1\n", "class Solution:\n     def isOneBitCharacter(self, bits):\n         \"\"\"\n         :type bits: List[int]\n         :rtype: bool\n         \"\"\"\n         i=len(bits)\n         res=False\n         while bits != []:\n             e=bits.pop(0)\n             if bits==[] and e == 0:\n                 return True\n             if e == 1 and bits!=[]:\n                 bits.pop(0)\n             i-=1\n         return res", "class Solution:\n     def isOneBitCharacter(self, bits):\n         \"\"\"\n         :type bits: List[int]\n         :rtype: bool\n         \"\"\"\n         n=len(bits)\n         flag=[0 for i in range(n)]\n         i=0\n         while i <n-1:\n             print(i)\n             if bits[i]==1:\n                 flag[i+1]=1\n             i=i+1+flag[i+1]\n         result=True if flag[-1]==0 else False\n         return result\n", "class Solution:\n     def isOneBitCharacter(self, bits):\n         \"\"\"\n         :type bits: List[int]\n         :rtype: bool\n         \"\"\"\n         bits = ''.join(map(str, bits))\n         return self.dfs(bits)\n         \n     def dfs(self, bits):\n         if len(bits) == 0:\n             return False\n         elif len(bits) == 1:\n             if bits[0] == '0':\n                 return True\n         else:\n             if bits[:2] == '10':\n                 if self.dfs(bits[2:]):\n                     return True\n             elif bits[:2] == '11':\n                 if self.dfs(bits[2:]):\n                     return True\n             elif bits[0] == '0':\n                 if self.dfs(bits[1:]):\n                     return True\n             return False\n", "class Solution:\n     def isOneBitCharacter(self, bits):\n         \"\"\"\n         :type bits: List[int]\n         :rtype: bool\n         \"\"\"\n         n = len(bits)\n         i = 0\n         current = 0\n \n         while i < n:\n             if bits[i] == 1:\n                 current = 2\n                 i += 2\n             else:\n                 current = 1\n                 i += 1\n \n         if current == 1:\n             return True\n         else:\n             return False\n", "class Solution:\n     def isOneBitCharacter(self, bits):\n         \"\"\"\n         :type bits: List[int]\n         :rtype: bool\n         \"\"\"\n         i = 0\n         while i < (len(bits)-1):\n             if bits[i] == 1:\n                 i += 2\n             else:\n                 i += 1\n         if i == len(bits):\n             return False\n         else:\n             return True", "class Solution:\n     def isOneBitCharacter(self, bits):\n         \"\"\"\n         :type bits: List[int]\n         :rtype: bool\n         \"\"\"\n         n = 0\n         for i in range(-2, -len(bits)-1, -1):\n             if bits[i] == 1:\n                 n += 1\n             else:\n                 break\n         return n % 2 == 0", "class Solution:\n     def isOneBitCharacter(self, bits):\n         \"\"\"\n         :type bits: List[int]\n         :rtype: bool\n         \"\"\"\n         bits.insert(0,0)\n         for i in range(len(bits)-2,-1,-1):\n             if bits[i]==0 or i==0:\n                 return (len(bits)-i)%2==0\n                 \n"]