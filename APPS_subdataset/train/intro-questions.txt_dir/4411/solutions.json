["def find_missing_number(a):\n    n = len(a) + 1\n    return n * (n + 1) // 2 - sum(a)", "def find_missing_number(numbers):\n    if numbers == []:return 1\n    diff = list(set(range(1, len(numbers)+1))- set(numbers))\n    if diff == []:return max(numbers)+1\n    return diff[0]", "def find_missing_number(nums):\n    return sum(range(1,len(nums)+2))-sum(nums)", "def find_missing_number(numbers):\n    return sum(list(range(1, len(numbers)+2))) - sum(numbers) ", "def find_missing_number(n):\n    return sum(list(range(1,len(n)+2))) - sum(n)", "def find_missing_number(numbers):\n    x = len(numbers)\n    total = sum(numbers)\n    rest = ((x+1)*(x+2))\n    rest = rest/2\n    missing = rest - total\n    \n    return missing", "def find_missing_number(numbers):\n    a = [False for i in range(len(numbers) +1)]\n    for i in numbers:\n        a[i-1] = True\n    return a.index(False) +1        ", "def find_missing_number(numbers):\n    s = set(numbers)\n    m = max(s, default=0)\n    try:\n        return (set(range(1, m)) - s).pop()\n    except KeyError:\n        return m + 1", "def find_missing_number(numbers):\n    t1 = sum(numbers)\n    t2 = sum(range(1, len(numbers)+2))\n    return (t2 - t1)", "def find_missing_number(numbers):\n    n = len(numbers) + 1\n    expected = (n * (n + 1))/2\n    return expected - sum(numbers)"]