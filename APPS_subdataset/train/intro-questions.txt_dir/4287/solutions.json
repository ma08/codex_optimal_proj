["from math import ceil\n\ndef get_participants(h):\n    return int(ceil(0.5 + (0.25 + 2 * h) ** 0.5))\n", "def get_participants(handshakes, n = 1):\n    return get_participants(handshakes, n + 1) if (n * n - n)/2 < handshakes else n", "def get_participants(handshakes):\n    from math import ceil\n    \n    \"\"\"\n        Person #1 can shake hands with (n-1) people, person #2\n        can shake hands with (n-2) people... etc. Therefore,\n        n people can at most shake hands h = n*(n-1)/2 different times.\n        \n        If we flip this equation we get the amount\n        of people necessary:\n        n = 1/2 +(-) sqrt((8*h + 1)/4)\n        \n        The number of handshakes given might be smaller than\n        the max amount possible for n people, so we need to round up.\n    \"\"\"\n    \n    return ceil(0.5 + ((8*handshakes + 1)/4)**0.5)", "def get_participants(handshakes):\n    return int(1.5 + (2 * handshakes)**0.5)", "def get_participants(h):\n    n = 0\n    counter = 0\n    while h > 0:\n        h -= counter\n        n += 1\n        counter += 1\n    return n or 1", "from bisect import bisect_left\n\nns = [n*(n+1)//2 for n in range(1000)]\n\ndef get_participants(handshakes):\n    return bisect_left(ns, handshakes) + 1", "def get_participants(h):\n  from math import ceil, sqrt\n  return ceil(.5 + sqrt(.25 + 2*h))", "import math\ndef get_participants(h):\n    return math.ceil((1+math.sqrt(1+8*h))/2)", "def get_participants(handshakes):\n    farmers = 1\n    maxshakes = 0\n    while maxshakes < handshakes:\n        maxshakes += farmers\n        farmers += 1\n    return farmers", "from math import ceil \n\ndef get_participants(hs):\n    return ceil((1+(1+8*(hs))**.5)/2)"]