["def converter(mpg):\n    '''Converts mpg to kpl. Rounds to two decimal places.'''\n    kpl = round(mpg * 1.609344/4.54609188, 2)\n    return kpl", "\ndef converter(mpg):\n    #your code here\n    return round(mpg / 4.54609188 * 1.609344    , 2)\n", "def converter(mpg):\n    return round((mpg *  1.609344 / 4.54609188), 2)", "converter = lambda x: round(x * 0.354006043538, 2)", "def converter(mpg):\n    gallon_to_liter_rate = 4.54609188\n    mile_to_km_rate = 1.609344\n    return round( ((mpg * mile_to_km_rate) / gallon_to_liter_rate), 2)", "def converter(mpg):\n    return round(mpg/4.54609188*1.609344 ,2) if mpg else 0", "converter = lambda mpg, g=4.54609188, m=1.609344: round(mpg*(m/g), 2)", "KM_PER_MILE = 1.609344\nLITERS_PER_UK_GALLON = 4.54609188\n\ndef converter(mpg):\n    return round(mpg * KM_PER_MILE / LITERS_PER_UK_GALLON, 2)\n", "def converter(mpg):\n  L_PER_G = 4.54609188 # L\n  KM_PER_MI = 1.609344 # km\n  return round(mpg * KM_PER_MI / L_PER_G, 2)", "def converter(mpg):\n    return round(1.609344/4.54609188*mpg,2)", "def converter(mpg):\n    return round(mpg*0.35400604353,2) ", "converter = lambda mpg: round(mpg * 35.400604353) / 100", "def converter(mpg: int) -> float:\n    \"\"\" Convert miles per imperial gallon into kilometers per liter. \"\"\"\n    return round(mpg / (4.54609188 / 1.609344), 2)", "def converter(mpg):\n    x=4.54609188\n    y=1.609344\n    return round(mpg*y/x,2)", "def converter(mpg):\n    c= ( mpg / 4.54609188 * 1.609344)\n    return round(c,2)", "def converter(mpg):\n    km_new = round ((mpg  * 1.609344 ) / 4.54609188, 2)\n    return km_new\n", "def converter(mpg):\n    lit=4.54609188\n    Km=mpg*1.609344\n    return round(Km/lit,2)", "def converter(mpg):\n    lr, km = 1.609344, 4.54609188\n    return round(mpg * (lr / km), 2)", "GALLON_LITRE_RATE = 4.54609188\nMILE_KM_RATE = 1.609344\n\ndef converter(mpg):\n    return round(mpg / GALLON_LITRE_RATE * MILE_KM_RATE, 2)\n", "\n\ndef converter(mpg):\n    return round(0.3540061*mpg,2)\n", "def converter(mpg):\n    GALLON_IN_LITRES = 4.54609188\n    MILE_IN_KM = 1.609344\n    LITRES_PER_KM_SCALEFACTOR = GALLON_IN_LITRES / MILE_IN_KM\n    return round(mpg / LITRES_PER_KM_SCALEFACTOR, 2) ", "def converter(mpg):\n    litre = 4.54609188\n    mile = 1.609344\n    return round(mpg * mile / litre, 2)", "def converter(mpg):\n    conversion_factor = 1.609344 / 4.54609188\n    kpl = mpg * conversion_factor\n    return round(kpl,2)", "def converter(mpg):\n    ldReturn = mpg / 4.54609188\n    ldReturn *= 1.609344\n    return float(\"%.2f\" % ldReturn)", "def converter(mpg):\n    mpk=4.54609188/1.609344\n    return round(mpg/mpk,2)", "def converter(mpg):\n    kpl = 1.609344 / 4.54609188 * mpg\n    r = round(kpl, 2)\n    if type(r) is int:\n        return int(r)\n    elif type(r*10) is int:\n        return round(r, 1)\n    else:\n        return r", "def converter(mpg):\n    return round(mpg * 0.354006043,2)", "def converter(mpg):\n    res =  (mpg/4.54609188)* 1.609344\n    temp = f'{res:.2f}'\n    if temp[-1] == '0':\n            temp = f'{res:.1f}'\n    erg = float(temp)\n    return erg\n", "def converter(mpg):\n    km_in_mile = 1.609344\n    litres_in_gallon = 4.54609188\n    return round(mpg * km_in_mile / litres_in_gallon, 2)", "import numpy as np\ndef converter(mpg):\n    return np.round(mpg * 0.354006, 2)", "def converter(mpg):\n    \n    miles_to_km = 1.609344\n    gallon_to_liter = 4.54609188\n    \n    return round((mpg / gallon_to_liter) * miles_to_km,2)\n", "def converter(mpg):\n    k = 1.609344 / 4.54609188\n    return round(k * mpg, 2)", "def converter(mpg):\n    conver = 1.609344/4.54609188\n    return round(mpg*conver,2)", "def converter(mpg):\n    ans=mpg*1.609344/4.54609188\n    return round(ans,2)", "def converter(mpg):\n    Imperial_Gallon = 4.54609188 \n    Mile = 1.609344\n    \n    kml = Mile/Imperial_Gallon\n    return round(kml*mpg,2)\n", "def converter(mpg):\n    gallon = 4.54609188\n    miles = 1.609344\n    return round(mpg * miles / gallon, 2)", "def converter(mpg: int):\n    return round(mpg * 1.609344 / 4.54609188, 2)", "imperial_gallon = 4.54609188\nmile = 1.609344\ndef converter(mpg):\n    return round((mpg / imperial_gallon) * mile, 2)", "converter=lambda n:round(n*1.609344/4.54609188,2)", "def converter(mpg):\n    print(4.54609188/1.609344)\n    return round(mpg / 2.8248105314960625, 2)", "def converter(mpg):\n    mile = 1.609344\n    gallon = 4.54609188\n    kpl = mpg * mile / gallon\n    return round(kpl, 2)", "def converter(mpg):\n    gallon = 4.54609188\n    mile = 1.609344\n    kpl = round(mpg * mile/gallon, 2)\n    return kpl\n", "def converter(mpg: int) -> float:\n    return round(mpg * (1.609344 / 4.54609188), 2)\n", "def converter(mpg):\n    answer = mpg / 2.82481053\n    return round(answer,2)\n", "def converter(mpg):\n    klm = mpg * 1.609344 / 4.54609188\n    return round(klm, 2)", "R = 4.54609188 / 1.609344\n\ndef converter(mpg):\n    return round(mpg / R, 2)", "def converter(mpg):\n    kml = (mpg * 1.609344) / 4.54609188\n    return round(kml, 2)", "def converter(mpg):\n    miles_to_km = 1.609344\n    gallon_to_litre = 4.54609188\n    return round (mpg * miles_to_km / gallon_to_litre, 2)", "def converter(mpg):\n    Lpg = 4.54609188\n    Kpm = 1.609344\n    return round(mpg * Kpm / Lpg, 2)\n   \n   #Lpg= leterPerGallon\n   #Kpm= KilometeresPerMeter\n", "def converter(mpg):\n    kmpg = mpg * 1.609344\n    \n    kmpl = kmpg / 4.54609188\n    return float(format(kmpl, '.2f'))", "def converter(mpg):\n    l = 4.54609188\n    k = 1.609344 \n    kpl = k/l*mpg\n    return round (kpl,2)\n", "def converter(mpg):\n    result = \"{:.2f}\".format(mpg * 1.609344 / 4.54609188)\n    return float(result) if result[-1] != '0' else float(result[:-1])", "def converter(mpg):\n    \n    kpl = mpg * 1.609344 / 4.54609188 \n    kpl = round(kpl * 100) / 100\n    \n    return kpl\n    \n     \n", "def converter(mpg):\n    return float(\"{:.2f}\".format(mpg/(4.54609188/1.609344)))", "def converter(mpg):\n    KM_PER_MILE = 1.609344\n    LITRE_PER_GALLON = 4.54609188\n    tmp = round((mpg * KM_PER_MILE / LITRE_PER_GALLON), 2) * 100\n    return (tmp // 10) / 10 if tmp % 10 == 0 else tmp / 100", "#k/l\ndef converter(mpg):\n    return round(mpg * (1.609344/ 4.54609188), 2)", "def converter(mpg):\n    m = 1.609344 \n    g = 4.54609188\n    res_round = round(mpg*m/g,2)\n    return res_round\n    \n    \n    #your code here\n", "def converter(mpg):\n    gln = 4.54609188\n    ml = 1.609344\n    return round(mpg * ml / gln,2)", "def converter(mpg):\n    litres = 4.54609188\n    km = 1.609344\n    kpl = km/litres*mpg\n    return round(kpl,2)\n \n\n    \n", "def converter(mpg): return round(mpg / 2.82481, 2)", "def converter(m):\n    return round(m*0.354006044,2)\n    \n    #your code here\n", "converter = lambda mpg: round(mpg * 0.354006043538, 2)\n", "def converter(mpg):\n    gallit = 1.609344 / 4.54609188\n    lit = round(mpg * gallit,2)\n    return lit", "def converter(mpg):\n    return round(mpg * 1.609344 / 4.54609188, 2)\n    #mpg = m / g\n    \n    #kpl = k / l\n    \n    #m to k = m * 1.609344\n    #g to l = g * 4.54609188\n", "def converter(mpg):\n    m = 1.609344\n    g = 4.54609188\n    return round(mpg*m/g, 2)", "def converter(mpg):\n    x=round(mpg*1.609344/4.54609188,2)\n    return x if str(x)[-1]!='0' else float(str(x)[:-1])", "def converter(mpg):\n    km = mpg * (1.609344) \n    kpl = km / 4.54609188\n    return round(kpl, 2)", "def converter(mpg):\n    km = mpg * (1.609344) \n    kml = km / 4.54609188\n    return round(kml, 2)", "def converter(mpg):\n    return round(1/4.54609188*1.609344*mpg,2)", "def converter(mpg):\n    kmpl = (mpg) * (1.609344) * (1/4.54609188)\n    return round(kmpl, 2)", "def converter(mpg):\n    liter_per_mile = 1.609344 / 4.54609188\n    return round(liter_per_mile * mpg,2)", "def converter(mpg):\n    km = 1.609344\n    liters = 4.54609188\n    return round(mpg / liters * km,2)", "def converter(mpg):\n    return round(mpg / 2.8248105, 2)", "def converter(mpg):\n    M =1.609344\n    g =  4.54609188\n    kpg = (mpg *M)/g\n    return round(kpg,2)", "def converter(mpg):\n    conv = 1.609344/4.54609188\n    return round(mpg * conv, 2)", "def converter(mpg):\n    t1, t2 = (4.54609188, 1.609344)\n    return round(mpg * t2 / t1, 2)", "import math\n\ndef converter(mpg):\n    res =  mpg * 0.354006\n    \n    s = str(res)\n    dot = s.index('.')\n    if [len(s) -1] =='0':\n      return float(s[:dot + 1])\n    else:\n      return round(res,2)\n", "def converter(mpg):\n    '''convert miles per imperial gallon into kilometers per liter'''\n    kpl = round(mpg * 1.609344/4.54609188, 2)\n    return kpl", "def converter(mpg):\n    kilo = round(mpg * 1.609344 / 4.54609188, 2)\n    return kilo", "def converter(mpg):\n    coef = 4.54609188/1.609344\n    return round(mpg/coef, 2)", "def converter(mpg):\n    '''\n    takes miles per gallon as input\n    converts it to kilometers per hour\n    '''\n    ans = (mpg*1.609344)/4.54609188\n    return round(ans,2)", "def converter(mpg):\n    #your code here\n    #mpg is number of miles/1 gallon\n    # 1 mpg is 1.609344/4.54609188\n    a = mpg * 1.609344/4.54609188\n    return(round(a, 2))", "def converter(mpg):\n    kpl = mpg * 4.54609188**-1 * 1.609344\n    return round(kpl, 2)", "def converter(mpg):\n    kml = (mpg*1.609344)/4.54609188\n    return float(\"%.2f\" % round(kml,2))", "def converter(mpg):\n    return round(mpg/2.824810531,2)\n#Solved on 29th Sept, 2019 at 04:24 PM.\n", "def converter(mpg):\n    return round(mpg*(1.609344/4.54609188),2)  #I solved this Kata on  [27-Sept-2019] ^_^ [04:51 AM]...#Hussam'sCodingDiary", "def converter(x):\n    return(round((x/(4.54609188/1.609344)),2))", "def converter(mpg):\n    km = round((mpg * 1.609344 / 4.54609188), 2)\n    return km\n", "def converter(mpg):return round(mpg*1.609344/4.54609188,2) if str(round(mpg*1.609344/4.54609188,2))[-1]!=0 else round(mpg*1.609344/4.54609188,1)\n", "def converter(mpg):\n    conv = 1.609344/4.54609188\n    return float(\"{:.2f}\".format(mpg * conv))", "g = 4.54609188; m = 1.609344\nconverter = lambda mpg: round(mpg * m / g, 2)", "def converter(mpg):\n    kl = round(((mpg * 1.609344)/4.54609188),2)\n    return kl\n\n\n", "def converter(mpg):\n    imperial_gallon_in_litres = 4.54609188\n    mile_in_km = 1.609344\n    lpk = mpg * mile_in_km / imperial_gallon_in_litres\n    return float(\"{0:.2f}\".format(lpk))", "def converter(mpg):\n    imperial_gallon_in_litres = 4.54609188\n    mile_in_km = 1.609344\n    kpl = mpg * mile_in_km / imperial_gallon_in_litres\n    return float(\"{0:.2f}\".format(kpl))", "def converter(mpg):\n    conversionFactor = 1.609344/4.54609188\n    return round (mpg * conversionFactor, 2)\n", "converter=lambda mpg:round(0.354006*mpg,2)", "def converter(mpg):\n   kpl = mpg/2.8248105314960629921259842519685\n   return float(\"{:.2f}\".format(kpl))", "def converter(mpg):\n    ans = mpg/2.8248105314960629921259842519685\n    return float(\"{:.2f}\".format(ans))", "def converter(mpg):\n    kof = 4.54609188 / 1.609344\n    a = mpg / kof\n    return round(a, 2)\n    #your code here\n", "import math\n#Miles per gallon to kilometers per liter\ndef converter(mpg):\n    return round(mpg/(4.54609188/1.609344 ),2)", "def converter(mpg):\n    g=4.54609188\n    m=1.609344\n    return (round((mpg*m/g),2))", "MILE  = 1.609344\nGALLON = 4.54609188\n\ndef converter(mpg):\n    return round(mpg/GALLON * MILE ,2)", "def converter(mpg):\n    ig = 4.54609188\n    M = 1.609344 \n    return round (mpg * M / ig, 2)\n    #your code here\n", "IMP_GALLON_IN_LITRES = 4.54609188\nMILE_IN_KMS = 1.609344\n\n\ndef converter(mpg):\n    return round((mpg / IMP_GALLON_IN_LITRES) * MILE_IN_KMS, 2)", "def converter(mpg):\n    converted_value = mpg * 1.609344 / 4.54609188\n    return round(converted_value, 2)", "import decimal\n\ndef converter(mpg):\n    mpg = decimal.Decimal(mpg)\n    m2km = decimal.Decimal(1.609344)\n    g2l = decimal.Decimal(4.54609188)\n    r = mpg * m2km / g2l\n    return float(r.quantize(decimal.Decimal(\"1.00\")).normalize())\n    # Cmon, having to type beck to float because of assert?\n    # This is so broken.\n", "def converter(mpg):\n    \n    \"\"\"Converts mile/gallon to kilometre/litre.\"\"\"\n    \n    # constants\n    mile_to_kilometre = 1.609344\n    gallon_to_litre = 4.54609188 \n    \n    # make some calculations\n    formula = mpg * (mile_to_kilometre / gallon_to_litre)\n    \n    # round the result\n    result = round(formula, 2)\n    \n    return result", "def converter(mpg):\n    return round(mpg * (1/4.54609188) * (1.609344/1), 2)", "def converter(mpg):\n    lpg = 4.54609188\n    kpm = 1.609344\n    n = mpg * kpm / lpg\n    return float(str('{:.2f}'.format(n)).rstrip('0'))"]