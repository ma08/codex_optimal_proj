["squares_needed = int.bit_length", "def squares_needed(grains):\n    return grains.bit_length()", "def squares_needed(grains):\n    if grains < 1:\n        return 0\n    else:\n        return 1 + squares_needed(grains // 2)", "from math import log2, ceil\n\ndef squares_needed(grains):\n    return grains and ceil(log2(grains+1))", "def squares_needed(grains):\n    #your code here\n    sum_wheat=0\n    if grains==0:\n        return 0\n    else:\n        for i in range(64):\n            sum_wheat+=2**i\n            if sum_wheat>=grains:\n                return i+1\n", "def squares_needed(grains):\n    return next(i for i in range(99) if 1<<i > grains)", "from math import log2\ndef squares_needed(grains):\n    return int(log2(grains))+1 if grains else 0", "def squares_needed(grains):\n    if not grains: return grains\n    squares = 1\n    while 2**squares <= grains:\n        squares += 1\n    return squares", "def squares_needed(grains):\n    return 0 if grains==0 else len(bin(grains)[2::])", "import math\ndef squares_needed(grains): return 0 if grains==0 else 1+math.floor(math.log2(grains))", "def squares_needed(grains):\n    stepCount = 0\n    while grains >= 1:\n        grains = grains / 2\n        stepCount += 1\n    return stepCount", "from math import log2\nfrom math import ceil\n\ndef squares_needed(grains):\n    return 0 if not grains else ceil(log2(grains+1))", "def squares_needed(grains):\n    \n    if grains == 0:\n        return 0\n    c = 1\n    while 1:\n        for i in range(1,65):\n            if c > grains:\n                return i-1\n            c = c + c\n", "import math\ndef squares_needed(grains):\n    if grains == 0:\n      return 0\n    return int(math.log2(grains)) + 1", "def squares_needed(grains):\n    if grains==0:\n        return 0\n    stop=1\n    sum=1\n    while sum<grains:\n        sum=sum+(2**stop)\n        stop+=1\n    return stop", "def squares_needed(grains):\n    return 1 + squares_needed(grains//2) if grains else 0\n    \n", "def squares_needed(grains):\n    n = 0\n    while sum(2**i for i in range(n)) < grains:\n        n += 1\n    return n\n        \n", "def squares_needed(grains):\n    i = 0\n    while grains:\n        grains >>= 1\n        i += 1\n    return i", "def squares_needed(grains): return 1 + squares_needed(grains>>1) if grains else 0", "def squares_needed(grains):\n    if not grains:\n        return 0\n    else:\n        return len(str(bin(grains)))-2", "def squares_needed(grains):\n    import math\n    try:\n        x = math.log(grains)\n        y = math.log(2)\n        n = (x / y) + 1\n    except ValueError:\n        return 0\n    return math.floor(n)", "def squares_needed(grains):\n    return (len(bin(grains)) - 2) if grains != 0 else 0", "def squares_needed(g):\n    y=0\n    z=0\n    for x in range(64):\n        if x == 0 and g == 0:\n            return (x)\n            break\n        elif x >= 1:\n            if g / 2 ** x < 2 and g / 2 ** x > 1:\n                y = g/2 ** x\n                return (x + 1)\n                break\n            elif g / 2 ** x <= 0.5:\n                return (x)\n                break\n\n\ny = squares_needed(562949953421312)\nprint (y)\n", "def squares_needed(grains):\n    count = 0\n    square = 1\n    while square <= grains:\n        count += 1\n        square = square * 2    \n    return count\n        \n", "def squares_needed(grains):\n    square = 0\n    square_grains = 0\n    while square_grains < grains:\n        square += 1\n        square_grains = max(square_grains * 2, 1)\n    if grains == 3 or grains > 4:\n        square -= 1\n    return square", "import math\ndef squares_needed(grains):\n    if grains == 0:\n        return 0\n    #2**(n-1) = grains\n    a = math.ceil(math.log( grains +1, 2))\n    return a\n", "def squares_needed(grains):\n    my_dict = {}\n    initial = 1\n    value = 0\n    for x in range(1,65):\n        my_dict[x] = initial\n        initial *= 2\n    listofvalues = list(my_dict.values())\n    for y in listofvalues:\n        if grains == None:\n            return 0\n            break\n        elif grains == 0:\n            return 0\n        elif grains < y:\n            continue\n        else:\n            value = y\n    for keys,values in list(my_dict.items()):\n        if my_dict[keys] == value:\n            return keys\n\n", "squares_needed=lambda n: 1+squares_needed(n>>1) if n else n", "def squares_needed(grains):\n    if grains==0:\n        return 0\n    i=0\n    while (2**i-1)//grains<1:       \n        i += 1\n    return i\n", "squares_needed=lambda g:0 if g==0 else int(__import__('math').log(g,2)+1)", "def squares_needed(grains):\n    return 0 if grains < 1 else 1 + squares_needed(grains // 2)", "def squares_needed(grains, v = 0, sum = 0):\n    if sum >= grains:\n        return 0\n    v = (v * 2) if v > 0 else (v + 1)\n    return 1 + squares_needed(grains, v, sum + v)", "def squares_needed(grains):\n    g = 0\n    count = 0\n    for i in range(0,65):\n        if g<grains:\n            g = g+2**i\n            count += 1\n        else:\n            return count", "def squares_needed(grains):\n    grain = 1\n    count_cell = 0\n    while grains > 0:\n        grains -= grain\n        grain *=2\n        count_cell += 1\n    return count_cell   \n", "def squares_needed(grains):\n    grain = 1\n    cell_count = 0\n    while grains > 0:\n        grains -= grain\n        grain *= 2\n        cell_count += 1\n    return cell_count", "def squares_needed(grains):\n    grain = 1\n    cell_count = 0\n    while grains > 0:\n        grains = grains - grain\n        grain = grain * 2\n        cell_count += 1\n    return cell_count\n        \n        \n \n", "def squares_needed(grains):\n    import math\n    a= math.log(grains+1,2)\n    return math.ceil(a)\n", "def squares_needed(grains, s = 1,k=1):\n    if grains == 0 : return 0\n    while s*2 <= grains:\n        s*=2\n        k+=1\n    return k", "def squares_needed(grains):\n    curr, sq = 1, 0\n    while grains > 0:\n        grains -= curr\n        curr *= 2\n        sq += 1\n    return sq", "def squares_needed(grains):\n    if grains<1:\n        return 0\n    else:\n        return squares_needed(grains//2) +1\n", "def squares_needed(grains):\n    if not grains:\n        return 0\n    square = 0\n    base = 1\n    total = 0\n    while total < grains:\n        total += base\n        base *= 2\n        square += 1\n    return square ", "def squares_needed(grains):\n    return len(\"{:b}\".format(grains)) if grains else 0\n", "def squares_needed(grains):\n    sm, i = grains, 0\n    while sm > 0:\n        sm -= 2 ** i\n        i += 1\n    return i\n", "def squares_needed(grains):\n    return grains and len(f\"{grains:b}\")", "def squares_needed(grains):\n    cnt = 0\n    n = 1\n    while n <= grains:\n        n = n * 2\n        cnt = cnt + 1\n    return cnt", "def squares_needed(grains):\n    # condition: when does the recursion stop?\n    if grains < 1 :\n        return 0\n    # what changes in each iteration? The grains are halved\n    grains = grains//2\n    # since the final iteration returns 0, you add 1 to each result\n    print(grains)\n    return 1 + squares_needed(grains)\n", "def squares_needed(grains):\n    square, comp = 0, 0\n    while comp < grains:\n        square += 1\n        comp += 2 ** (square - 1)\n    return square", "def squares_needed(grains):\n    return len('{0:b}'.format(grains)) if grains > 0 else 0", "def squares_needed(grains):\n    if grains < 1:\n        return 0\n    total_wheat_rice = 0\n    for i in range(64):\n        total_wheat_rice += 2**i\n        if total_wheat_rice >= grains:\n            return i+1", "def squares_needed(grains):\n    \n    def sum_of_squares(sqr):\n        return ((2**(sqr))-1)/(2-1)\n    \n    sqr = 0\n    while True:\n        if sum_of_squares(sqr) >= grains:\n            return sqr\n            break\n        sqr += 1\n", "def squares_needed(grains):\n    count_of_grains = 0\n    count_of_square = 0\n    grains_in_square = 1\n    while count_of_grains < grains:\n        count_of_square += 1\n        count_of_grains += grains_in_square\n        grains_in_square *= 2\n    return count_of_square", "import math\ndef squares_needed(n):\n    if n == 0:\n        return 0\n    return int(math.log(n, 2) + 1)", "def squares_needed(grains):\n    for i in range(0,100):\n        if 2**i>grains:\n            return i\n", "def squares_needed(grains, field=0):\n    return field if grains < 2**field else squares_needed(grains, field+1)", "from math import log2\ndef squares_needed(grains):\n    if grains == 0: return 0\n    return int(log2(grains))+1", "def squares_needed(g):\n    r = 0 \n    while g >= 2:\n        g = g>>1\n        r += 1\n        \n    return r+(g!=0)", "import math\ndef squares_needed(grains):\n    if grains==0:\n        return 0\n    else:\n        x=math.log(grains)//math.log(2)+1\n        return x\n", "import math\ndef squares_needed(grains):\n    return 0 if not grains else int(math.log(grains)/math.log(2) + 1)", "import math\n\ndef squares_needed(grains):\n    return grains and int(math.log(grains, 2) + 1)", "def squares_needed(grains):\n    if grains == 0:\n        return 0\n    square = 1\n    grain_in_square = 1\n    total_grains = 1\n    while grains > total_grains:\n        square += 1\n        grain_in_square *= 2\n        total_grains += grain_in_square\n    return square", "def squares_needed(grains):\n    \n    from math import ceil, log\n#    squares = 64\n    print(grains)\n    \n    if grains == 0: return 0\n    else: return ceil(log(grains+1, 2))\n    \n    \n\n    \n    \n    \n", "def squares_needed(n):\n    if n == 0: return 0\n    if n == 1: return 1\n\n    i = 1\n    cont = 1\n    sum = 1\n    while sum < n:\n        i *=2\n        sum += i\n        cont+=1\n\n    return cont", "import math\ndef squares_needed(grains):\n    return grains if grains < 3 else math.ceil(math.log(grains+1,2))", "def squares_needed(grains):\n    #your code here\n    if grains == 0:\n        return 0\n    elif grains == 1:\n        return 1\n    else:\n        return 1 + squares_needed(grains//2)", "from math import log\n\ndef squares_needed(n):\n    if not n : return 0\n    return int(log(n+0.0001, 2))+1", "def squares_needed(grains):\n    mysum = 0\n    sq = 0\n    while mysum < grains:\n        mysum += 2**sq\n        sq += 1\n    return sq", "def squares_needed(grains):\n    t = 0\n    while grains > 0:\n        t += 1\n        grains = grains // 2\n    return t", "def squares_needed(grains):\n    total=0\n    square=0\n    while grains>total:\n        \n        square+=1\n        total+=2**(square-1)\n    return square", "def squares_needed(grains):\n    if grains==0: return 0\n    return squares_needed(grains//2)+1", "import math\ndef squares_needed(grains):\n    if grains == 0: return 0\n    if grains == 1: return 1\n    res = math.floor(math.log(grains,2))+1\n    return res\n", "def squares_needed(grains):\n    #your code here\n    if grains == 0:\n        return 0\n    else:\n        return len(str(bin(grains)))-2", "def squares_needed(grains):\n    if (grains==0):\n    \n        return 0\n    \n    else:\n    \n        high_square = 0\n    \n        tablet = []\n    \n        print (tablet)\n        \n        for i in range (0,64):\n            \n            tablet.append(2**i)\n    \n        for i in range (0,64):\n    \n            if (sum(tablet[:i+1])>=grains):\n    \n                high_square = i+1\n    \n                break\n    \n        return high_square", "def squares_needed(grains):\n    s = 0\n    cells = 0\n    grains_in_cell = 1\n    while s < grains:\n      s += grains_in_cell \n      grains_in_cell *= 2\n      cells += 1\n    return cells", "def squares_needed(grains):\n    s = 0\n    cells = 0\n    gr_in_cell = 1\n    while s < grains: \n        s = s + gr_in_cell\n        gr_in_cell *= 2\n        cells += 1 \n    return cells", "def squares_needed(grains):\n    counter = 0\n    if grains == 0:\n        return 0\n    if grains == 1:\n        return 1\n    for square in range(1, 64+1):\n            while grains > 0:\n                counter += 1\n                grains = grains // 2\n    return counter\n", "def squares_needed(grains,b=1,c=0):\n    if c == 0:\n        b = 1\n    else:\n        b *= 2\n    if grains <= 0:\n        return c\n    c += 1\n\n    return squares_needed(grains-b,b,c)\n    return c\n", "def squares_needed(grains):\n    n = 0\n    needed = 0\n    while grains > needed:\n        needed+= 2**n\n        n+=1\n    return n", "import math\ndef squares_needed(grains):\n    if grains == 0:\n        return 0\n    if grains %2 == 0:\n        needed  = (int(math.log2(grains)))+1\n    elif grains == 1:\n        return 1\n    else:\n        needed = (int(math.log2(grains-1)))+1\n\n\n    return needed", "def squares_needed(grains):\n    n = 0\n    while 2**n - 1 < grains:\n        n += 1\n    return n\n", "def squares_needed(grains, squares=0):\n    if grains == 0:\n        return 0\n    while grains >= 2<<squares :\n        squares += 1\n    return squares+1\n", "def squares_needed(grains):\n    import math\n    #base case\n    if grains==0:\n        return 0\n    elif grains==1:\n        return 1\n    n=math.log(grains+1,2)\n    return math.ceil(n)", "# Okay, why not try an \"upwards\" recursive solution\n# Note: The BASE CASE is the one that supplies the final result back to the calling (test) code\n#       so we still only get one value passed back to the calling code.\n# Madness or magic? Such is the curse of recursive code!\n\ndef squares_needed(grains, steps_taken = 0):   # added an extra param. Initial call (from test) defaults to 0\n    if  grains < 2 ** steps_taken:             # if the # of grains can be met by the 0-index square we're on...\n        return steps_taken                     # ...return that square\n    else:\n        steps_taken += 1                       # ...if not, increase the square we're on by 1...\n        return squares_needed(grains, steps_taken) # ...and try again\n        \n        \n# Previous submission was iterative (basic but fairly easy to grasp I think)\n#def squares_needed(grains):\n#    if grains == 0:\n#        return grains \n        \n#    total = 0\n\n#    for i in range(0, 65):\n#        total += 2**i\n        \n#        if  grains <= total:\n#            return i + 1\n", "def squares_needed(grains):\n\n    if grains == 0:\n        return grains \n        \n    total = 0\n\n    for i in range(0, 65):\n        total += 2**i\n        \n        if  grains <= total:\n            return i + 1\n            \n##################\n\n", "from math import log2\n\ndef squares_needed(grains):\n    return 0 if not grains else int(log2(grains)) + 1", "def squares_needed(grains):\n    if grains <= 1:\n        return grains\n        \n    grain_ammount = [grains]\n    while(grains>=2):\n        grain_ammount.append(grains/2)\n        grains = grains/2\n\n    return len(grain_ammount)", "def squares_needed(grains):\n    ct = 0\n    i = 0\n    while ct < grains:\n        ct += 2 ** i\n        i += 1\n    return i  ", "import math\n\ndef squares_needed(grains):\n    if grains == 0:\n        return 0\n    return int(math.log2(grains)) + 1\n#     for i in range(64):\n#         while grains <= (2 ** i):\n#             return i\n", "def squares_needed(grains, step = 0, cell = 1):\n    # base case\n    if grains <= 0:\n        return step\n    \n    # recursive case\n    else:\n        grains -= cell\n        cell = cell * 2\n        step += 1\n        return squares_needed(grains, step, cell)\n            \n", "def squares_needed(grains):\n    s, r = 0, 0\n    while grains > r:\n        s += 1\n        r += 2**(s-1)\n    return s", "def squares_needed(grains):\n    if grains==0:\n        return 0\n    else:\n        for i in range(1,65):\n            if grains<2**i:\n                return i\n", "def squares_needed(grains):\n    if grains == 0:\n        return 0\n    else:\n        return squares_needed(grains//2) + 1", "from math import ceil, log\n\ndef squares_needed(grains):\n    return ceil(log(grains + 1, 2)) if grains else 0", "def squares_needed(grains):\n    count = 0\n    total = 1\n    while total <= grains:\n        a = total * 2\n        total = a\n        count += 1\n    return count\n", "def squares_needed(grains):\n    count = 0\n    print(grains)\n    if grains == 0:\n        return grains\n    product = 1\n    while grains>=1:\n        count+=1\n        grains-=product\n        product*=2\n        \n    return count\n        \n", "def squares_needed(grains):\n    chess = []\n    rice = 1\n    for i in range(1,65):\n        chess.append(rice)\n        rice *= 2\n    return max([chess.index(i) for i in chess if grains >= i])+1 if grains else 0", "def squares_needed(grains):\n    count = 0\n    i = 0\n    while count < grains:\n        count += 2**i\n        i += 1\n    return i\n", "from math import log, floor\n\ndef squares_needed(grains):\n    if grains == 0:\n        return 0\n    return floor(log(grains, 2)) + 1", "from math import log, ceil\n\ndef squares_needed(grains):\n    return ceil(1.4423*log(grains) + 0.0347) if grains else 0", "def squares_needed(grains):\n    if grains == 0:\n        return 0\n    else:\n        p = 1\n        boxes = 1\n        i = 1\n        while i < grains:\n            i += p * 2 \n            p *= 2\n            boxes += 1\n        return boxes\n            \n"]