["def difference_of_squares(x):\n    r = range(1,x+1,1)\n    return (sum(r) ** 2) - (sum( z**2 for z in r))", "difference_of_squares = lambda n: n ** 2 * (n + 1) ** 2 / 4 - n * (n + 1) * (2 * n + 1) / 6", "def difference_of_squares(x):\n    \n    # Initialize\n    square_sum = 0\n    sum_squares = 0\n    \n    # Loop over x numbers to create the sum and add all squares\n    for i in range(1,x+1):\n        square_sum += i\n        sum_squares += i**2\n    \n    # Power the sum of the x values\n    square_sum **= 2\n    \n    # Return the difference\n    return (square_sum - sum_squares)", "difference_of_squares=lambda n:(n*n-1)*(n*n/4+n/6)", "def difference_of_squares(n):\n    return (3*n**4+2*n**3-3*n**2-2*n)/12", "def difference_of_squares(x):\n    return (3*x**4 + 2*x**3 - 3*x**2 - 2*x) // 12", "def difference_of_squares(n):\n    sum_of_squares = n * (n + 1) * (2 * n + 1) // 6\n    square_of_sum = (n * (n + 1) // 2) ** 2\n    return square_of_sum - sum_of_squares", "def difference_of_squares(n):\n    sum_of_squares = 0\n    square_of_sum = 0\n    for i in range(1, n+1):\n        square_of_sum += i\n        sum_of_squares += i**2\n    return (square_of_sum**2) - sum_of_squares", "def difference_of_squares(n):\n    return sum(i for i in range(1,n+1))**2 - sum(i*i for i in range(1,n+1)) ", "def difference_of_squares(n):\n    return sum(range(n + 1))**2 - sum(map(lambda x: x ** 2, range(n + 1)))", "def difference_of_squares(n):\n    return sum([i for i in range(1, n + 1)]) ** 2 - sum([i ** 2 for i in range(1, n + 1)])", "def difference_of_squares(n):\n    return sum(i for i in range(1,n+1)) ** 2 - sum(i ** 2 for i in range(1,n+1))", "def difference_of_squares(n):\n    return sum(range(n+1))**2 - sum(i**2 for i in range(n+1))", "def difference_of_squares(x):\n    return sum(range(x+1))**2 - sum(i**2 for i in range(x+1))", "def difference_of_squares(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i ** 2\n    return ((n * (n + 1)) / 2) ** 2 - sum", "def difference_of_squares(n):\n    return sum(n - i for i in range(0, n))**2 - sum((n - i)**2 for i in range(0, n))", "def difference_of_squares(x):\n    return sum(i for i in range(1, x+1))**2 - sum(i**2 for i in range(1, x+1))", "def difference_of_squares(x):\n    return sum(i * i * (i-1) for i in range(x+1))", "def difference_of_squares(x):\n    return x * (x+1) * (x*(x+1)/4 - (2*x+1)/6)", "def difference_of_squares(n):\n    a=sum([i for i in range(1,n+1)])**2\n    b=sum([i**2 for i in range(1,n+1)])\n    return a-b", "def difference_of_squares(n):\n    if 1<=n<=100:\n        lst = []\n        for i in range(1, n+1):\n            lst.append(i)\n            s = sum(lst)**2\n        l = []\n        for i in range(1, n+1):\n            l.append(i**2)\n            t = sum(l)                \n    return s - t\n", "def difference_of_squares(n):\n    s1 = 0\n    for i in range(1,n+1):\n        s1+=i**2\n    somme2 = [i for i in range(1,n+1)]\n    s2 = (sum(somme2))**2\n    \n    return abs(s1-s2)", "def difference_of_squares(n):\n    n1 = sum(range(1, n + 1))\n    \n    return n1 * n1 - sum([i * i for i in range(1, n + 1)])", "def difference_of_squares(n):\n    sum1 = 0\n    sum2 = 0\n    for x in range(n):\n        sum1 += x + 1 \n        sum2 += (x+1) ** 2\n    return (sum1 ** 2) - sum2", "def difference_of_squares(n):\n    print(n)\n    a = sum(range(n + 1)) ** 2\n    b = sum([(i+1)**2 for i in range(n)])\n    return a - b\n", "def difference_of_squares(n):\n    return square_of_sum(n) - sum_of_squares(n)\n\ndef square_of_sum(n):\n    return sum(range(1, n+1)) **2\n    \ndef sum_of_squares(n):\n    return sum(i*i for i in range(1, n+1))", "def difference_of_squares(n):\n    sq_sums = 0\n    sum_sqs = 0\n    for i in range(1,n+1):\n        sq_sums += i**2\n    for j in range(1,n+1):\n        sum_sqs += j\n    return (sum_sqs ** 2) - sq_sums", "def difference_of_squares(n):\n    sum1 = 1\n    sum2 = 1\n    i = 1\n    while i < n:\n        sum1 += (i + 1)\n        sum2 += (i + 1)**2\n        i += 1\n    return sum1**2 - sum2", "def difference_of_squares(n):\n    sum_squares = 0\n    sum_num = 0\n    for i in range (1, n+1):\n        sum_squares = sum_squares + i*i\n        sum_num = sum_num +i\n    return (sum_num)**2 -(sum_squares) \n", "def difference_of_squares(n):\n    a=0\n    b=0\n    for i in range (1,n+1):\n        a=a+i\n        b=b+i**2\n    return a**2 - b\n", "def difference_of_squares(n):\n    a = (sum(n for n in range(1, n+1)))**2\n    b = sum(n**2 for n in range(1, n+1))\n    return a-b", "def difference_of_squares(n):\n    return (n*(n+1)/2)**2 - sum(x**2 for x in range(1,n+1))", "def difference_of_squares(n):\n    nat_num=0\n    for i in range(0,n+1):\n        nat_num += i\n    sqr_nat = nat_num **2\n    \n    sum_sqr = 0\n    for b in range(0,n+1):\n        sum_sqr += b**2\n    \n    \n        \n    return sqr_nat - sum_sqr", "import numpy as np\ndef difference_of_squares(n):\n    return sum(range(1,n+1))**2 - sum(np.array(range(1,n+1))**2)", "def difference_of_squares(n):\n    s1, s2 = 0, 0\n    for i in range(1, n + 1):\n        s1 += i\n        s2 += i ** 2\n    return s1 ** 2 - s2", "def difference_of_squares(n):\n    rng = []\n    sqs = []\n    for i in range(1, n + 1):\n        rng.append(i)\n        sqs.append(i ** 2)\n    return sum(rng) ** 2 - sum(sqs)", "def difference_of_squares(n):\n    return - sum([i**2 for i in range(n+1)]) + sum(range(n+1))**2", "def difference_of_squares(n):\n    # ...\n    return (((n*(1+n))/2)**2)-((n*(n+1)*(2*n+1))/6)", "def difference_of_squares(n):\n    a = sum(list(range(1, n+1)))**2\n    b = sum([i**2 for i in list(range(1, n+1))])\n    return abs(a-b)", "def difference_of_squares(n):\n    output = 0\n    output2 = 0\n    for i in range(0,n+1):\n        output += i\n        output2 += i ** 2\n    return output ** 2 - output2", "def difference_of_squares(n):\n    sum=0\n    square=0\n    for i in range(1,n+1):\n        sum+=i**2\n    \n    for num in range(1,n+1):\n        square+=num\n        \n    square**=2\n    \n    return(square-sum)", "def difference_of_squares(n):\n    a = b = 0\n    for i in range(1, -~n):\n        a += i\n        b += i * i\n    return abs(a * a - b)", "def difference_of_squares(n):\n    arr_pow = []\n    two = 0\n    for i in range(1,n+1):\n        arr_pow.append(i)\n        two+=i**2\n    one = sum(arr_pow)\n    return (one**2) - two\n", "def difference_of_squares(n):\n    a = list(range(1,n+1))\n    s1 = sum(a) ** 2\n    arr = [el ** 2 for el in a]\n    s2 = sum(arr)\n    return s1 - s2", "def difference_of_squares(n):\n    return (n**2-1)*(3*n+2)*n//12", "def difference_of_squares(n):\n    s1=(1+n)/2*n\n    s2=0\n    for i in range(1,n+1):\n        s2+=i**2\n    return abs(s2-s1**2)", "def difference_of_squares(n):\n    return n * (n + 1) * (3 * n * n - n - 2) // 12", "def difference_of_squares(n):\n    x = sum([i for i in range(1,n+1)])\n    return x*x - sum([i*i for i in range(1,n+1)])", "def difference_of_squares(n):\n    r = list(range(n+1))\n    return sum(r)**2 - sum([x**2 for x in r])", "def difference_of_squares(num):\n    return sum([n for n in list(range(1, num+1))])**2 - sum([n**2 for n in list(range(1, num+1))])", "def difference_of_squares(n):\n    a = sum([x*x for x in range(1,n+1)])\n    # print(a)\n    b = sum(range(1,n+1))\n    # print(b)\n    return (b*b)-a", "def difference_of_squares(n):\n    a=0\n    s=0\n    for i in range(n+1):\n        a+=i\n        s+=i*i\n    return a*a-s", "def difference_of_squares(n):\n    return ((n * (n + 1) // 2) ** 2) - (sum(i ** 2 for i in range(1,n+1)))", "def difference_of_squares(n):\n    return sum(el for el in range(n+1)) ** 2 - sum(el**2 for el in range(n+1))", "def difference_of_squares(n):\n    return n*(n+1)*(n-1)*(3*n+2)//12\n", "def difference_of_squares(n):\n    a, b = 0, 0\n    for x in range(1, n +1):\n        a += x\n        b += x **2\n    return a **2 - b\n    # Flez\n", "def difference_of_squares(n):\n    a, b = 0, 0\n    for x in range(1, n +1):\n        a += x\n    for x in range(1, n +1):\n        x = x **2\n        b += x\n    return a **2 - b\n    # Flez\n    \n    \n", "def difference_of_squares(n):\n    square_sum, sum_square = 0, 0\n    for i in range(1,n+1):\n        square_sum += i\n        sum_square += i**2\n    \n    return square_sum**2 - sum_square", "def difference_of_squares(n):\n    sum_n_range = sum([i for i in range(n+1)])**2\n    square_n_range = sum([i**2 for i in range(n+1)])\n    return sum_n_range - square_n_range", "def difference_of_squares(n):\n    sum_n = 0\n    sum_n2 = 0\n    for i in range(1,n + 1):\n        sum_n += i\n        sum_n2 += i ** 2\n    sum_n = sum_n ** 2\n    return sum_n - sum_n2", "def difference_of_squares(n):\n    sum_num = 0\n    sum_squares = 0\n    for i in range(1, n + 1):\n        sum_num = sum_num + i\n        sum_squares = sum_squares + i ** 2\n    return sum_num ** 2 - sum_squares", "def difference_of_squares(n):\n    xs = range(1, n+1)\n    return sum(xs)**2 - sum(x*x for x in xs)", "def difference_of_squares(n):\n    return (sum(range(0,n+1))**2)-(sum(x**2 for x in range(0, n+1)))", "def difference_of_squares(n):\n    return sum(range(1, n+1))**2 - sum(map(lambda x: x*x, range(1, n+1))) ", "def difference_of_squares(n):\n    fuck = (sum(range(n + 1)))**2\n    cunt = sum(map(lambda x: x**2, range(1, n + 1)))\n    return fuck - cunt", "def difference_of_squares(n):\n    # ...\n    return (n * (n + 1) // 2) ** 2 - sum(x ** 2 for x in range(1,n+1)) ", "def difference_of_squares(n):\n    squares_sum = sum([i for i in range(1,n+1)])**2\n    sum_squares = sum([i**2 for i in range(1,n+1)])\n    return squares_sum - sum_squares", "def difference_of_squares(n):\n    return n*(n+1)*(n-1)*(3*n+2)/12", "def difference_of_squares(n: int) -> int:\n    return 0.25 * n ** 2 * (n + 1) ** 2 - (n * (n + 1) * (2 * n + 1) / 6)\n", "difference_of_squares = lambda n: n ** 4 // 4 + n ** 3 // 6 - n ** 2 // 4 - n // 6", "def difference_of_squares(n):\n    \n# =============================================================================\n#     This function returns the difference between the sum of the squares of the \n#     first n natural numbers (1 <= n <= 100) and the square of their sum.\n#     \n#     Example:\n#         When n = 10:\n#         The square of the sum of the numbers is:\n#         (1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10)2 = 552 = 3025\n#         The sum of the squares of the numbers is:\n#         12 + 22 + 32 + 42 + 52 + 62 + 72 + 82 + 92 + 102 = 385\n#         \n#         The difference between square of the sum of the first ten natural numbers\n#         and the sum of the squares of those numbes is: 3025 - 385 = 2640\n# =============================================================================\n    \n    sum_1 = 0\n    \n    sum_2 = 0\n    \n    for num in range (1,(n+1)):\n       sum_1 += num      \n       sum_2 += num**2\n       \n    return ((sum_1**2) - sum_2)", "\ndef difference_of_squares(n):\n    num1 = sum(i for i in range(1,n+1))**2\n    num2 = sum(i**2 for i in range(1,n+1))\n    return abs(num1-num2)", "def difference_of_squares(n):\n    return (n * (n + 1) // 2) ** 2 - (n * (n + 1) * (n * 2 + 1)) // 6", "def difference_of_squares(n):\n\n    return (sum(list(range(1,n+1))))**2 - sum([num**2 for num in range(1,n+1)])", "def difference_of_squares(n):\n    sume1,sume2=0,0\n    for i in range(1,n+1):\n        sume1+=i\n        sume2+=(i**2)\n    sume1=sume1**2\n    return sume1-sume2", "def difference_of_squares(n):\n    a=0\n    b=0\n    for i in range(1,n+1):\n        a+=i\n        b+=i**2\n    c=a**2\n    return c-b", "def difference_of_squares(n):\n    sum1=0\n    sum2=0\n    for i in range(n+1):\n       sum1 += i**2\n       sum2 += i\n    return sum2**2-sum1", "def difference_of_squares(n):\n    sum_sqr=0\n    sum_sqrs=0\n    for n in range(1,n+1):\n        sum_sqr += n\n        sum_sqrs += n**2\n    sum_sqr = sum_sqr**2\n    return sum_sqr-sum_sqrs\n", "def difference_of_squares(n):\n    sum_up_to_n = n * (n + 1) // 2\n    return sum_up_to_n ** 2 - sum(num ** 2 for num in range(1, n + 1))", "def difference_of_squares(n):\n    summa = 0\n    atseviski = 0\n    for i in range(1,n+1):\n       summa += i\n    summa = summa **2\n    for x in range(1,n+1):\n        atseviski += x**2\n    return abs(summa - atseviski)", "def difference_of_squares(n):\n    sumOfSquares = 0\n    sum = 0\n    for x in range (1, n+1):\n        sumOfSquares += x*x\n        sum += x\n    return sum*sum - sumOfSquares", "def difference_of_squares(n):\n    sum = 0\n    sum_square = 0\n    num = 1\n    for i in range(n):\n        sum += num\n        sum_square += num*num\n        num += 1\n    return sum**2 - sum_square\n", "def difference_of_squares(n):\n    # ...\n    total = 0\n    sums = 0\n    for i in range(1, n + 1):\n        sums += i ** 2\n        total += i\n    return total ** 2 - sums\n", "def difference_of_squares(n):\n    sum_1=0\n    sum_2=0\n    for i in range(1,n+1):\n       sum_1=sum_1 + (i*i)\n    for i in range(1,n+1):\n       sum_2=sum_2 + i\n    return ((sum_2*sum_2)-sum_1)", "def difference_of_squares(n):\n    return sum(range(1,n+1))**2 - sum(map(lambda a: a**2, range(1,n+1)))", "def difference_of_squares(n):\n    n = range(n +1)\n    new = [i for i in n]\n    sum_1 = sum(new)**2\n    new_x = [i**2 for i in n]\n    sum_2 = sum(new_x)\n    res = sum_1 -sum_2\n    print(res)\n    return res", "def difference_of_squares(n):\n    return (n*n*(n+1)*(n+1))/4 - ((n*(n+1)*(2*n+1))/6)", "def difference_of_squares(n):\n    return (n*(n+1)*.5)**2 - (n)*(n+1)*(2*n+1)/6", "def difference_of_squares(n):\n    # ...\n    y = sum(i for i in range(1,n+1))\n    z = sum(i**2 for i in range(1,n+1))\n    return (y**2)-z", "def difference_of_squares(n):\n    total=0\n    total_2=0\n    for i in range (0,(n)+1):\n        total+=int(i)\n    \n    total=(total)**2\n    \n    \n    for i in range(0,int(n)+1):\n        total_2+=(i)**2\n        \n    return(total-total_2)", "def difference_of_squares(n):\n    sum_square=0\n    sum_numbers=0\n    for i in range (1,n+1):\n        sum_square+=(i**2)\n    for i in range (1,n+1):\n        sum_numbers+=i\n    squared=(sum_numbers)**2\n    return(squared-sum_square)", "def difference_of_squares(n):\n    x1 =(sum([i for i in range(1,n+1)])**2)\n    x2 = sum([i ** 2 for i in range(1,n+1)])\n    return x1-x2\n", "def difference_of_squares(n):\n    n_sum = 0\n    sum_of_squares = 0\n    for number in range(n+1):\n        n_sum += number\n        sum_of_squares += number ** 2\n    square_of_sum = n_sum ** 2\n    return square_of_sum - sum_of_squares", "def difference_of_squares(n):\n    # ...\n    sq_of_sum = sum(i for i in range(n+1))**2\n    sum_of_sq = sum(i**2 for i in range(n+1))\n    \n    return sq_of_sum - sum_of_sq", "def difference_of_squares(n):\n    size = range(1,n+1)\n    return  sum(x for x in size)**2  - sum(x**2 for x in size) ", "def difference_of_squares(n):\n    \n    return  (sum(x for x in range(n+1)) * sum(x for x in range(n+1))) -  sum(x*x for x in range(n+1)) \n", "difference_of_squares = lambda n: (lambda r, s: s(sum(r)) - sum(map(s, r)))(range(1, n + 1), (2).__rpow__)", "def difference_of_squares(n):\n    return ((1 + n) * n // 2) ** 2 - sum(map(lambda x: x * x, range(1, n + 1)))", "def difference_of_squares(n):\n    return abs(sum(x**2 for x in range(1,n+1)) - sum(x for x in range(1,n+1))**2)", "def difference_of_squares(n):\n    lst1 = [(x+1) for x in range(n)]\n    lst2 = [(x+1)**2 for x in range(n)]\n    return abs(sum(lst2) - (sum(lst1))**2)"]