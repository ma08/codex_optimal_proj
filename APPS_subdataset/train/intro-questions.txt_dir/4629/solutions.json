["def penalty(lst):\n    lst, maxLen = list(map(str, lst)), max(map(len, lst))\n    return ''.join(sorted(lst, key=lambda s: s.ljust(maxLen, s[-1])))", "#return str of the smallest value of the combined numbers in a_list\ndef penalty(a_list):\n  return ''.join(sorted(a_list, key = lambda n: n + n[:1]))", "penalty=lambda a:''.join(sorted(a,key=lambda n:2*n))", "def penalty(a_list):\n    for i in range(len(a_list)):\n        for j in range(i+1,len(a_list)):\n            a,b = a_list[i],a_list[j]\n            if int(a+b) >= int(b+a):\n                a_list[i],a_list[j] = b,a\n    s = \"\"\n    for k in a_list:\n        s += k\n    return s", "import functools\n\ndef penalty(lis):\n    custom = lambda i, j: -1 if str(j) + str(i) > str(i) + str(j) else 1\n    res = sorted(lis, key=functools.cmp_to_key(custom))\n    return \"\".join(map(str, res))", "def penalty(nos):\n    print(nos)\n    pos = 0\n    ret = []\n    for x in range(len(nos)):\n        low = 10\n        tmp = ''\n        for x in nos:\n            if int(x[0])<=int(low):\n                if tmp != '':\n                    tmp = getLowest(tmp,x)\n                else:\n                    tmp = x\n                low = tmp[0]\n        ret.append(tmp)\n        #print(ret,'\\t',tmp)\n        nos.remove(tmp)\n    return ''.join(ret)\n        \ndef getLowest(s1,s2):\n    res = {s1:s1,s2:s2}\n    if len(s2)<len(s1):\n        res[s2] = equalPad(s2,len(s1))\n    elif len(s2)>len(s1):\n        res[s1] = equalPad(s1,len(s2))\n    #print('res',res)\n    for x in range(len(res[s1])):\n        if res[s1][x] < res[s2][x]:\n            return s1\n        elif res[s2][x] < res[s1][x]:\n            return s2\n    return s1\n\ndef equalPad(s0,w):\n    return s0.ljust(w,s0[-1])", "def penalty(p):\n    n = len(max(p, key=int))\n    return ''.join(sorted(p, key=lambda x: (x.ljust(n, x[-1]), -len(x))))", "def penalty(a_list):\n    return ''.join(sorted(a_list,key=lambda x:x*10))", "from functools import cmp_to_key\n\ndef cmp_func(a, b):\n    ab, ba = (a + b), (b + a)\n    return (ab > ba) - (ab < ba)\n\n\ndef penalty(l):\n    return ''.join(sorted(l, key=cmp_to_key(cmp_func)))"]