["def palindrome_chain_length(n):\n    steps = 0\n    while str(n) != str(n)[::-1]:\n        n = n + int(str(n)[::-1])\n        steps += 1\n    return steps", "def palindrome_chain_length(n, count=0):\n    if str(n) == str(n)[::-1]: return count\n    else: return palindrome_chain_length(n + int(str(n)[::-1]), count+1)", "def is_palindrome(n):\n    return str(n) == str(n)[::-1]\n    \n\ndef palindrome_chain_length(n):\n    # parameter n is a positive integer\n    # your function should return the number of steps\n    steps = 0\n    while not is_palindrome(n):\n        steps += 1\n        n += int(str(n)[::-1])\n    return steps\n", "def palindrome_chain_length(n, times=0):\n    reversed = int(str(n)[::-1])\n    if reversed == n:\n        return times\n    return palindrome_chain_length(n + reversed, times + 1)", "def palindrome_chain_length(n):\n    count = 0\n    while str(n) != str(n)[::-1]: \n        count += 1\n        n += int(str(n)[::-1])\n    \n    return count\n        \n        \n", "def palindrome_chain_length(n):\n    # parameter n is a positive integer\n    # your function should return the number of steps\n    steps = 0\n    while True:\n        reverse_n = int(str(n)[::-1])\n        if n == reverse_n:\n            return steps\n            break\n        else:\n            n += reverse_n\n            steps += 1", "def palindrome_chain_length(n):\n    return n != int(str(n)[::-1]) and palindrome_chain_length(n + int(str(n)[::-1])) + 1", "from itertools import takewhile, accumulate, repeat\ndef palindrome_chain_length(n):\n    return len(list(takewhile(lambda x: str(x) != str(x)[::-1], accumulate(repeat(n), lambda m, _: m + int(str(m)[::-1])))))", "def palindrome_chain_length(n):\n    counter = 0\n    while str(n) != str(n)[::-1]:\n        n += int(str(n)[::-1])\n        counter += 1\n    if counter > 0: return counter\n    return 0", "def palindrome_chain_length(num):\n    steps = 0\n    while True:\n        tmp = str(num)\n        rev = tmp[::-1]\n        if tmp == rev:\n            return steps\n        num += int(rev)\n        steps += 1\n", "palindrome_chain_length=lambda n,i=0:i if str(n)==str(n)[::-1] else palindrome_chain_length((n+int(str(n)[::-1])),i+1)", "from functools import lru_cache\n\n@lru_cache(maxsize=None)\ndef palindrome_chain_length(n):\n    s1 = str(n)\n    s2 = s1[::-1]\n    return s1 != s2 and 1 + palindrome_chain_length(n + int(s2))", "def palindrome_chain_length(n, step=0):\n  return step if str(n) == str(n)[::-1] else palindrome_chain_length(n + int(str(n)[::-1]), step+1)", "def palindrome(n):\n    s = str(n)\n    return s == s[::-1]\n\ndef palindrome_chain_length(n):\n    n_chain = 0\n    while not palindrome(n):\n        n += int(str(n)[::-1])\n        n_chain += 1\n    return n_chain", "def palindrome_chain_length(n):\n    # parameter n is a positive integer\n    # your function should return the number of steps\n    i = 0\n    while True:\n        if n == int(str(n)[::-1]):          \n            return i\n        n += int(str(n)[::-1])\n        i += 1", "def palindrome_chain_length(n):\n    ct = 0\n    while str(n) != str(n)[::-1]:\n        n += int(str(n)[::-1])\n        ct += 1\n    return ct", "def palindrome_chain_length(n):\n    steps = 0\n    value = str(n)\n    while value != value[::-1]:\n        value  = str(int(value) + int(value[::-1]))\n        steps += 1\n    return steps", "def palindrome_chain_length(n):\n    def calculate_palindrome(steps, n):\n        if str(n)[::-1] == str(n):\n            return steps\n        else:\n            return calculate_palindrome(steps+1, n+int(str(n)[::-1]))\n    return calculate_palindrome(0, n)", "def palindrome_chain_length(n):\n    counter, last_num = 0, n\n\n    def reverse_num(a_num):\n        return str(a_num)[::-1]\n\n    def is_palindrome(sum_num):\n        return reverse_num(sum_num) == str(sum_num)\n\n    while not is_palindrome(last_num):\n        last_num = last_num + int(reverse_num(last_num))\n        counter += 1\n        \n    return counter", "def palindrome_chain_length(n):\n    return 0 if int(str(n)[::-1]) == n else palindrome_chain_length(int(str(n)[::-1]) + n) + 1\n", "def palindrome_chain_length(n):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n    def rev(n):\n        return int(str(n)[::-1])\n    steps = 0\n    while not is_palindrome(n):\n        n, steps = n+rev(n), steps+1\n    return steps", "def palindrome_chain_length(n):\n    x = 0\n    while n != int(str(n)[::-1]):\n        n = n + int(str(n)[::-1])\n        x += 1\n    return x\n", "from itertools import takewhile\ndef palindrome_chain_length(n):\n    def next_palindrome(m):\n        while 1:\n            yield m\n            m = m + int(str(m)[::-1])\n    return len(list(takewhile(lambda x: str(x) != str(x)[::-1], next_palindrome(n))))", "def palindrome_chain_length(n):\n    count=0\n\n    while str(n)!=str(n)[::-1]:\n        revn = int(str(n)[::-1])\n        n=revn+n\n        count+=1\n\n    return count", "def palindrome_chain_length(n):\n    counter = 0\n    x = str(n)[::-1]\n    while str(n) != x:\n        n = n + int(x)\n        x = str(n)[::-1]\n        counter += 1\n    return counter", "def palindrome_chain_length(n):\n    steps = 0\n\n    while str(n) != str(n)[::-1]:\n        n += int(str(n)[::-1])\n        steps += 1\n    \n    return steps", "def palindrome_chain_length(n):\n    digits_reversed = lambda n: int(str(n)[::-1])\n\n    steps = 0\n    last_n = n\n    last_n_rev = digits_reversed(last_n)\n\n    while last_n != last_n_rev:\n        last_n += last_n_rev\n        last_n_rev = digits_reversed(last_n)\n        steps += 1\n\n    return steps", "palindrome_chain_length = lambda n: (lambda rev: 0 if n == rev(n) else palindrome_chain_length(n + rev(n)) + 1)(lambda n: int(''.join(list(reversed(str(n))))))\n\n", "def reverse_int(n: int) -> int:\n    return int(str(n)[::-1])\n\ndef palindrome_chain_length(n: int, i: int = 0) -> int:\n    return i if reverse_int(n) == n else palindrome_chain_length(n + reverse_int(n), i + 1)", "def palindrome_chain_length(n):\n    a = 0\n    x = str(n)\n    while n != int(x[::-1]):\n        x = str(n)\n        n = n + int(x[::-1])\n        x = str(n)\n        a = a+1\n    return a", "def palindrome_chain_length(n):\n    n=str(n)\n    if(n==n[::-1]):\n        return 0\n    return 1+ palindrome_chain_length( int(n)+int(n[::-1]))", "def palindrome_chain_length(n):\n    return 0 if n==int(str(n)[::-1]) else 1 + palindrome_chain_length(n+int(str(n)[::-1]))\n", "def palindrome_chain_length(n):\n    a=0\n    while 1:\n        if n==int(str(n)[::-1]):return a \n        else:n+=int(str(n)[::-1])\n        a+=1\n        \n    \n", "def palindrome_chain_length(n):\n    num, s = 0, str(n)\n    while s != s[::-1]:\n        num += 1\n        s = str( int(s) + int(s[::-1]) )\n    return num\n", "def palindrome_chain_length(n):\n    cnt=0\n    while(str(n)!=str(n)[::-1]):\n        n=n+int(str(n)[::-1])\n        cnt=cnt+1\n    return cnt", "def palindrome_chain_length(n):\n    # parameter n is a positive integer\n    return 0 if str(n)[::-1] == str(n) else 1 + palindrome_chain_length(n + int(str(n)[::-1]))", "import math\n\ndef is_palindrome(n):\n    rev = 0\n    num = n # save origin number\n    while (n > 0):\n        dig = math.floor(n % 10)\n        rev = rev * 10 + dig\n        n = math.floor(n / 10)\n    return True if num == rev else False\n\ndef reverse(n):\n    if n<0:\n        return None\n    rev = 0\n    while (n > 0):\n        dig = math.floor(n % 10)\n        rev = rev * 10 + dig\n        n = math.floor(n / 10)\n    return rev\n\ndef palindrome_chain_length(n):\n    # parameter n is a positive integer\n    # your function should return the number of steps\n    step=0\n    while not (is_palindrome(n)):\n        n+=reverse(n)\n        step+=1\n    return step", "palindrome_chain_length=lambda n,c=0: (lambda pal: c if n==pal else palindrome_chain_length(n+pal,c+1))(int(str(n)[::-1]))", "def palindrome_chain_length(n):\n  is_palindrome = lambda x: str(x) == str(x)[::-1]\n  res = 0\n  while not is_palindrome(n):\n    n += int(str(n)[::-1])\n    res += 1\n  return res", "def palindrome_chain_length(n):\n    count = 0\n    while (int(str(n)[::-1]) != n):\n        n = n + int(str(n)[::-1])\n        count += 1\n    return count", "def palindrome_chain_length(n):\n  if int(str(n)[::-1]) == n:\n    return 0\n  else:\n    return palindrome_chain_length(n + int(str(n)[::-1])) +1", "def is_palindrome(n):\n    string = str(n)\n    reverse = int(''.join(reversed(string)))\n    if n == reverse:\n        return True\n    else:\n        return False\n    \ndef palindrome_chain_length(n):\n    i = 0\n    while True:\n        if is_palindrome(n):\n            break\n        else: \n            n += int(''.join(reversed(str(n))))\n        i += 1\n    return i", "def palindrome_chain_length(n):\n    count = 0\n    num = str(n)\n    rev_num = str(n)[::-1]\n    sum = 0\n    \n    while(num != rev_num):\n        num = str(int(num) + int(rev_num))\n        rev_num = num[::-1]\n        count += 1\n    \n    return count", "def palindrome_chain_length(n):\n    sum = 0\n    count = 0\n    print(('The number is ' + str(n) ))\n    new_num = (str(n)[::-1])\n    if str(n) == str(n)[::-1]:\n        return 0\n    else:\n        while str(n) != str(sum):\n            \n            sum = n + int(new_num)\n            n = sum\n            new_num = (str(sum)[::-1])\n            sum = int(new_num)\n            count += 1\n            \n        return count\n", "def palindrome_chain_length(n):\n    # parameter n is a positive integer\n    # your function should return the number of steps\n    steps = 0\n    if str(n) == str(n)[::-1]:\n        return steps\n    else:\n        while str(n) != str(n)[::-1]:\n            n += int(str(n)[::-1])\n            steps += 1\n    return steps", "def palindrome_chain_length(n):\n    pal = False\n    c = 0\n    while not pal:\n        if str(n) == str(n)[::-1]:\n            return c\n        else:\n            n= int(n+int(str(n)[::-1]))\n            c+=1", "palindrome_chain_length = lambda n:0 if str(n)==str(n)[::-1] else (lambda l:([None for i in iter(lambda:(([None for l[1] in [l[1]+int(str(l[1])[::-1])]],[None for l[0] in [l[0]+1]]),str(l[1])[::-1]!=str(l[1]))[1],False)],l[0])[1])({0:0,1:n})", "def palindrome_chain_length(n):\n    step = 0\n    while str(n)[::] != str(n)[::-1]:\n        n += int(str(n)[::-1])\n        step += 1\n    return step", "def is_palindrome(n):\n    return str(n)==str(n)[::-1]\n\ndef palindrome_chain_length(n):\n    out=0\n    while not is_palindrome(n):\n        out+=1\n        n+=int(str(n)[::-1])\n    return out", "def is_palindrome(v):\n    return str(v) == str(v)[::-1]\n\ndef palindrome_chain_length(n):\n    cnt = 0\n    \n    if is_palindrome(n):\n        return cnt\n\n    while(True):\n        cnt += 1\n        n = n + int(str(n)[::-1])\n        if is_palindrome(n):\n            return cnt", "def palindrome_chain_length(n):\n    rev_n = int((str(n)[::-1]))\n    if n == rev_n: return 0\n    return 1 + palindrome_chain_length(n + int((str(n)[::-1])))", "def palindrome_chain_length(n):\n    count = 0\n    while int(str(n)[::-1]) != n:\n        count += 1\n        n += int(str(n)[::-1])\n    return count\n", "def palindrome_chain_length(n):\n    count = 0\n#     n = str[n]\n#     m = n [::-1]\n    while str(n) != str(n)[::-1]:\n        n += int(str(n)[::-1])\n        count += 1\n        \n    return count", "def palindrome_chain_length(n):\n    count = 0\n#     n = str (n)\n#     m = n[:: -1]\n    while str(n)!= str(n)[::-1]:\n        n += int(str(n)[::-1])\n        count +=1\n    return count", "def palindrome_chain_length(n):\n    count = 0\n    check = str(n)\n    while check != check[::-1]:\n        print(check)\n        print(count)\n        count += 1\n        check = str(int(check) + int(check[::-1]))\n    return count", "def palindrome_chain_length(n):\n    a = n\n    r = 0\n    while a != int(str(a)[::-1]):\n        a += int(str(a)[::-1])\n        r += 1\n    return r", "def palindrome_chain_length(n):\n    # parameter n is a positive integer\n    # your function should return the number of steps\n    strn = str(n)\n    if strn == strn[::-1]:\n        return 0\n    else:\n        count = 0\n        value = strn\n        while value[::-1] != value:\n            value = str(int(value[::-1]) + int(value))\n            count += 1\n        return count", "def palindrome_chain_length(n):\n    \n    x = n\n    i = 0\n    \n    while str(x) != str(x)[::-1]:\n        \n        x = x + int(str(x)[::-1])\n        i = i + 1\n    \n    return i\n", "def palindrome_chain_length(n):\n    run = 0\n    word = str(n)\n    revers = word[::-1]\n    while word != revers:\n        word = str(int(word) + int(word[::-1]))\n        revers = word[::-1]\n        run += 1\n    return run\n", "def is_palindrome(n):\n    return str(n) == str(n)[::-1]\n\ndef palindrome_chain_length(n):\n    if is_palindrome(n):\n        return 0\n    step = 0\n    while not is_palindrome(n):\n        rev = int(str(n)[::-1])\n        n = n + rev\n        step += 1\n    return step", "def palindrome_chain_length(n):\n    x = list(str(n))\n    result = 0\n    while x != x[::-1]:\n        n = n + int(''.join(x[::-1]))\n        x = list(str(n))\n        \n        result +=1\n    return result", "def palindrome_chain_length(n):\n    steps = 0\n    while True:\n        n_str = str(n)\n        if n_str == n_str[::-1]:\n            return steps\n        else:\n            n += int(n_str[::-1])\n            steps += 1", "def palindrome_chain_length(total):\n    counter = 0\n    reverse_total = str(total)[::-1]\n    while total != int(reverse_total):\n        total = total + int(reverse_total)\n        reverse_total = str(total)[::-1]\n        counter +=1\n    return counter", "def palindrome_chain_length(n):\n    c = 0\n    rev = int(str(n)[::-1])\n    while n != rev:\n        n = n + rev\n        rev = int(str(n)[::-1])\n        c += 1\n    return c", "def palindrome_chain_length(x):\n    \n    def f(x):\n        return str(int(x) + int(\"\".join(list(reversed(x)))))\n        \n    def isPalindrome(s): \n        return s == s[::-1] \n    \n    n = 0\n    x = str(x)\n    while True:\n        \n        if isPalindrome(x):\n            return n\n    \n        else:\n            x = f(x)\n            n = n + 1", "def palindrome_chain_length(n):\n    count = 0\n    while True:\n        rev = int(str(n)[::-1])\n        if n == rev:\n            return count\n        else:\n            n+=rev\n            count+=1", "def palindrome_chain_length(n):\n    \n    n1 = str(n)\n    n1 = n1[::-1]\n    n1 = int(n1)\n    x= 0\n    \n    while n != n1:\n        \n        n+=n1\n        n1 = str(n)\n        n1 = n1[::-1]\n        n1 = int(n1)\n        \n        x+=1\n        \n    return x", "def palindrome_chain_length(n):\n    c= 0\n    if str(n) != str(n)[::-1]:\n        while str(n) != str(n)[::-1]:\n            n+= int(str(n)[::-1])\n            c+=1\n        return c \n    else:\n        return 0", "def palindrome_chain_length(n):\n    c = 0\n    rn = int(str(n)[::-1])\n    while rn != n:\n        n += rn\n        rn = int(str(n)[::-1])\n        c += 1\n    return c", "def palindrome_chain_length(n):\n    level = 0\n    while n != int(str(n)[::-1]):\n        n +=  int(str(n)[::-1])\n        level += 1\n    return level", "def palindrome_chain_length(n, step = 0):\n    reversed = int(str(n)[::-1])\n    if n == reversed:\n        return step\n    else:\n        return palindrome_chain_length(n + reversed, step + 1)", "def palindrome_chain_length(n):\n    c,x=0,n\n    while str(x)!=str( x) [::-1]:\n        x= x+int (str(x)[::-1])\n        c=c+1\n    return c\n    \n    \n    \n    \n", "def palindrome_chain_length(n):\n    s = str(n)\n    s_rev = s[::-1]\n    \n    count = 0\n    \n    while s != s[::-1]:\n        temp = int(s)\n        rev = int(s[::-1])\n        test = temp+rev\n        s = str(test)\n        count += 1\n    \n    return count\n    \n    \n", "def palindrome_chain_length(n):\n    steps = 0\n    while str(n) != str(n)[::-1]:\n        n = int(n) + int(str(n)[::-1])\n        steps +=1\n    return steps\n", "def palindrome_chain_length(n):\n    n = str(n)\n    nreverserd = n[::-1]\n    count = 0\n    if n == nreverserd:\n        return 0\n    else:\n        while True:\n            count += 1\n            sum = int(n) + int(nreverserd)\n            n = str(sum)\n            nreverserd = n[::-1]\n            if n == nreverserd:\n                break\n\n    return count", "def palindrome_chain_length(n):\n    reverse = int(str(n)[::-1])\n    length = 0\n    \n    while (n != reverse):\n        n += reverse\n        reverse = int(str(n)[::-1])\n        length += 1\n        \n    return length", "def is_palindrome(x):\n    return str(x) == str(x)[::-1]\n\ndef palindrome_chain_length(n):\n    counter = 0\n    while not is_palindrome(n):\n        n = n + int(str(n)[::-1])\n        counter += 1\n    return counter", "def palindrome_chain_length(n):\n    n1 = int(str(n)[::-1])\n    return 0 if n==n1 else 1 + palindrome_chain_length(n+n1)\n", "def palindrome_chain_length(n):\n    steps = 0\n    string = str(n)\n    while string != string[::-1]:\n        n += int(string[::-1])\n        string = str(n)\n        steps += 1\n    return steps", "def palindrome_chain_length(n):\n    x = 0\n    \n    while list(str(n)) != list(str(n))[::-1]:\n        n += int(''.join(list(str(n))[::-1]))\n        x += 1\n    \n    return x", "def is_palindrome(n):\n    return n == reverse_n(n)\n\ndef reverse_n(n):\n    return int(str(n)[::-1])\n\ndef palindrome_chain_length(n):\n    chain_n = 0\n    while is_palindrome(n) is False:\n        n = n + reverse_n(n)\n        chain_n += 1\n    return(chain_n)", "def IsPalindrome(n):\n    if str(n) == str(n)[::-1]:\n        return True\n    return False\n\ndef palindrome_chain_length(n):\n    result = 0\n    # parameter n is a positive integer\n    # your function should return the number of steps\n    while not IsPalindrome(n):\n        n = n + int(str(n)[::-1])\n        result += 1\n\n    return result", "def palindrome_chain_length(n, cr = 0):\n    while (str(n)!=str(n)[::-1]):\n        n, cr = n + int(str(n)[::-1]), cr + 1\n    return cr\n\n", "def is_palindrome(n):\n    return str(n) == str(n)[::-1]\n\ndef palindrome_chain_length(n):\n    c = 0\n    while not is_palindrome(n):\n        a, b = n, int(str(n)[::-1])\n        n = a + b\n        c += 1\n    return c\n", "def is_palindrome(n):\n    n = str(n)\n    if len(n)%2:\n        return n[:len(n)//2] == n[len(n)//2+1:][::-1]\n    else:\n        return n[:len(n)//2] == n[len(n)//2:][::-1]\n\ndef palindrome_chain_length(n):\n    if n<10: return 0\n    if is_palindrome(n): return 0\n    else:\n        i = 0\n        while not is_palindrome(n):\n            i += 1\n            n = n + int(str(n)[::-1])\n        return i", "def palindrome_chain_length(n):\n    def reverse(x):\n        return int(str(x)[::-1])\n        \n    def is_palindrome(x):\n        return x == reverse(x)\n        \n    steps = 0\n    while not is_palindrome(n):\n        n += reverse(n)\n        steps += 1\n\n    # parameter n is a positive integer\n    # your function should return the number of steps\n    return steps", "def palindrome_chain_length(n):\n    if str(n) == str(n)[::-1]: return 0\n    res, count = n, 0\n    while True:\n        count += 1\n        res += int(str(res)[::-1])\n        if str(res) == str(res)[::-1]:\n            return count\n    return count", "def palindrome_chain_length(n):\n    n = str(n)\n    if int(n) == int(str(n)[::-1]):\n        return 0\n    else:\n        s = int(n) + int(n[::-1])\n        count = 1\n        while s != int(str(s)[::-1]):\n            s = s + int(str(s)[::-1])\n            count += 1\n\n        return count", "def palindrome_chain_length(n):\n    # parameter n is a positive integer\n    # your function should return the number of steps\n    step = 0\n    while True:\n        r = reverse(n)\n        if n == r: break\n        n += r\n        step += 1\n    return step\n    \ndef reverse(n):\n    ans = 0\n    while n > 0:\n        ans = 10*ans + n%10\n        n //= 10\n    return ans", "def palindrome_chain_length(n):\n    s=str(n)\n    for i in range(0,50):\n        if s==s[::-1]:\n            return i\n        else:\n            s=str(int(s)+int(s[::-1]))", "def palindrome_chain_length(n):\n\n    number = n\n    i = 0\n    while i < 10000:\n        number = str(number)\n        if number == number[::-1]:\n            return i\n        else:\n            number = int(number) + int(number[::-1])\n            i = i + 1", "def palindrome_chain_length(n):\n    return [4,0,0,24,1][[87,1,88,89,10].index(n)]", "def palindrome_chain_length(n):\n    # parameter n is a positive integer\n    # your function should return the number of steps\n    n_str = str(n)\n    steps = 0\n    \n    while n_str != n_str[::-1]:\n        steps += 1\n        palindrome = int(n_str) + int(n_str[::-1])\n        n_str = str(palindrome)\n        \n    return steps", "def palindrome_chain_length(n):\n    pal = int(str(n)[::-1])\n    res = 0\n    while n != pal:\n        n += pal\n        pal = int(str(n)[::-1])\n        res += 1\n    return res", "def palindrome_chain_length(n,s=0):\n    if str(n) == str(n)[::-1]:\n        return s\n    else:\n        return palindrome_chain_length(n+int(str(n)[::-1]),s+1)", "def palindrome_chain_length(n):\n    answer = []\n    pal = int(str(n)[::-1])\n    while n != pal:\n        n += pal\n        pal = int(str(n)[::-1])\n        answer.append(n)\n    return len(answer)", "def palindrome_chain_length(n):\n    loop = 0\n    while str(n) != str(n)[::-1]:\n        n += int(str(n)[::-1])\n        loop += 1\n    return loop\n"]