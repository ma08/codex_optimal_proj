["def get_char(c):\n    return chr(c)", "get_char=chr", "def get_char(value):\n    '''Return the ASCII char for a given value'''\n    return chr(value)", "get_char = lambda c: chr(c)", "def get_char(num_of_char):\n  return chr(num_of_char)", "def get_char(c):\n  c = chr(c)\n  return c", "def get_char(c: int) -> str:\n    \"\"\" Get the corresponding ASCII char for given value. \"\"\"\n    return chr(c)", "get_char = lambda c: chr(c)\n\n# def get_char(c):\n#   return chr(c)\n", "import unittest\n\n\ndef get_char(c):\n    return chr(c)\n    \n    \nclass TestGetChar(unittest.TestCase):\n    def test_get_char_should_return_capital_a_when_given_c_is_65(self):\n        self.assertEqual(get_char(65), 'A')\n", "def get_char(c):\n  string = chr(c)\n  return string", "def get_char(c):\n  \n  n = chr(c)\n  \n  return n", "def get_char(c):\n  # My code goes here ^_^\n  return chr(c)", "def get_char(c):\n    print (chr(c))\n    return chr(c)", "def get_char(c):\n    \"\"\"Return the asci character corresponding to c\"\"\"\n    return chr(c)", "def get_char(c):\n    ascii_char = chr(c)\n    return ascii_char", "def get_char(c):\n  d=str(chr(c))\n  return d", "def get_char(c):\n  # Your code goes here ^_^\n  return chr(c) # chr predefined function that return number ascii to ordinary letter \n                # ord() is the opposite\n", "def get_char(c):\n  # Your code goes here ^_^\n  key=chr(c)\n  return key", "def get_char(c: int):\n  # Your code goes here ^_^\n  return chr(c)", "import string\ndef get_char(c):\n  # Your code goes here ^_^\n  return chr(c)", "def get_char(c):\n  # izi\n  return chr(c)", "def get_char(c):\n  f = chr(c)\n  return f", "def get_char(lie_sheen_sober):\n\n  return chr(lie_sheen_sober)", "def get_char(c):\n  # Your code goes here ^_^\n  print(c, str(chr(c)))\n  return str(chr(c))", "def get_char(c):\n  # Your code goes here ^_^\n  return chr(c)\n\nprint(get_char(65))", "def get_char(c):\n  result = chr(c)\n  return result", "def get_char(c):\n    a = str(chr(c))\n    return a", "def get_char(c):\n    get_char = chr(c)  \n    return get_char", "def get_char(c):\n  print(c)\n  return chr(c)", "get_char = lambda n: chr(n)", "def get_char(c):\n    return chr(c)\n    # Zelf\n", "def get_char(c):\n    # c|:v\n    return chr(c)", "def get_char(c):\n  t=chr(c)\n  return t", "def get_char(c):\n    output = chr(c)\n    return output", "def get_char(c: int) -> str:\n  return chr(c)", "def get_char(c):\n  ASCII='\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\t\\n\\x0b\\x0c\\r\\x0e\\x0f\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f !\"#$%&\\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\\x7f\\x80\\x81\\x82\\x83\\x84\\x85\\x86\\x87\\x88\\x89\\x8a\\x8b\\x8c\\x8d\\x8e\\x8f\\x90\\x91\\x92\\x93\\x94\\x95\\x96\\x97\\x98\\x99\\x9a\\x9b\\x9c\\x9d\\x9e\\x9f\\xa0\\xa1\\xa2\\xa3\\xa4\\xa5\\xa6\\xa7\\xa8\\xa9\\xaa\\xab\\xac\\xad\\xae\\xaf\\xb0\\xb1\\xb2\\xb3\\xb4\\xb5\\xb6\\xb7\\xb8\\xb9\\xba\\xbb\\xbc\\xbd\\xbe\\xbf\\xc0\\xc1\\xc2\\xc3\\xc4\\xc5\\xc6\\xc7\\xc8\\xc9\\xca\\xcb\\xcc\\xcd\\xce\\xcf\\xd0\\xd1\\xd2\\xd3\\xd4\\xd5\\xd6\\xd7\\xd8\\xd9\\xda\\xdb\\xdc\\xdd\\xde\\xdf\\xe0\\xe1\\xe2\\xe3\\xe4\\xe5\\xe6\\xe7\\xe8\\xe9\\xea\\xeb\\xec\\xed\\xee\\xef\\xf0\\xf1\\xf2\\xf3\\xf4\\xf5\\xf6\\xf7\\xf8\\xf9\\xfa\\xfb\\xfc\\xfd\\xfe\\xff'\n  return ASCII[c]", "from builtins import chr as get_char", "def get_char(c):\n  return \"{:c}\".format(c)", "def get_char(c):\n  return '%c' % c", "def get_char(c):\n    '''\n    Accepts decimal input\n    returns extended ascii character representation of input\n    '''\n    return bytes.fromhex(hex(c)[2:]).decode(encoding=\"latin1\")\n", "def get_char(c):\n  return '{0:{base}}'.format(c, base='c')", "def get_char(ascii_value: int) -> str:\n  \n  return chr(ascii_value)", "def get_char(c):\n  # Your code goes here ^_^\n  return str(chr(c))", "def get_char(c):\n    return [chr(i) for i in range(255)][c]", "def get_char(c):\n  return chr(ord(chr(c)))", "def get_char(c):\n    ascii = [chr(x) for x in range(0, 256)]\n    return ascii[c]", "def get_char(c):   \n#def get_char(c):\n    '''\n    Accepts decimal input\n    returns extended ascii character representation of input\n    '''\n    return bytes.fromhex(hex(c)[2:]).decode(encoding=\"latin1\")", "def get_char(c):\n    \n    myascii = {}\n    myascii['32'] = ' '\n    myascii['33'] = '!'\n    myascii['34'] = '\"'\n    myascii['35'] = '#'\n    myascii['36'] = '$'\n    myascii['37'] = '%'\n    myascii['38'] = '&'\n    myascii['39'] = ''\n    myascii['40'] = '('\n    myascii['41'] = ')'\n    myascii['42'] = '*'\n    myascii['43'] = '+'\n    myascii['44'] = ','\n    myascii['45'] = '-'\n    myascii['46'] = '.'\n    myascii['47'] = '/'\n    myascii['48'] = '0'\n    myascii['49'] = '1'\n    myascii['50'] = '2'\n    myascii['51'] = '3'\n    myascii['52'] = '4'\n    myascii['53'] = '5'\n    myascii['54'] = '6'\n    myascii['55'] = '7'\n    myascii['56'] = '8'\n    myascii['57'] = '9'\n    myascii['58'] = ':'\n    myascii['59'] = ';'\n    myascii['60'] = '<'\n    myascii['61'] = '='\n    myascii['62'] = '>'\n    myascii['63'] = '?'\n    myascii['64'] = '@'\n    myascii['65'] = 'A'\n    myascii['66'] = 'B'\n    myascii['67'] = 'C'\n    myascii['68'] = 'D'\n    myascii['69'] = 'E'\n    myascii['70'] = 'F'\n    myascii['71'] = 'G'\n    myascii['72'] = 'H'\n    myascii['73'] = 'I'\n    myascii['74'] = 'J'\n    myascii['75'] = 'K'\n    myascii['76'] = 'L'\n    myascii['77'] = 'M'\n    myascii['78'] = 'N'\n    myascii['79'] = 'O'\n    myascii['80'] = 'P'\n    myascii['81'] = 'Q'\n    myascii['82'] = 'R'\n    myascii['83'] = 'S'\n    myascii['84'] = 'T'\n    myascii['85'] = 'U'\n    myascii['86'] = 'V'\n    myascii['87'] = 'W'\n    myascii['88'] = 'X'\n    myascii['89'] = 'Y'\n    myascii['90'] = 'Z'\n    myascii['91'] = '['\n    myascii['92'] = '\\\\'\n    myascii['93'] = ']'\n    myascii['94'] = '^'\n    myascii['95'] = '_'\n    myascii['96'] = '`'\n    myascii['97'] = 'a'\n    myascii['98'] = 'b'\n    myascii['99'] = 'c'\n    myascii['100'] = 'd'\n    myascii['101'] = 'e'\n    myascii['102'] = 'f'\n    myascii['103'] = 'g'\n    myascii['104'] = 'h'\n    myascii['105'] = 'i'\n    myascii['106'] = 'j'\n    myascii['107'] = 'k'\n    myascii['108'] = 'l'\n    myascii['109'] = 'm'\n    myascii['110'] = 'n'\n    myascii['111'] = 'o'\n    myascii['112'] = 'p'\n    myascii['113'] = 'q'\n    myascii['114'] = 'r'\n    myascii['115'] = 's'\n    myascii['116'] = 't'\n    myascii['117'] = 'u'\n    myascii['118'] = 'v'\n    myascii['119'] = 'w'\n    myascii['120'] = 'x'\n    myascii['121'] = 'y'\n    myascii['122'] = 'z'\n    myascii['123'] = '{'\n    myascii['124'] = '|'\n    myascii['125'] = '}'\n    myascii['126'] = '~'\n    \n    if c in myascii:\n        out = myascii[str(c)]\n    else:\n        out = chr(c)\n    return out", "def get_char(c):\n  ascii = '\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\t\\n\\x0b\\x0c\\r\\x0e\\x0f\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f !\"#$%&\\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\\x7f\\x80\\x81\\x82\\x83\\x84\\x85\\x86\\x87\\x88\\x89\\x8a\\x8b\\x8c\\x8d\\x8e\\x8f\\x90\\x91\\x92\\x93\\x94\\x95\\x96\\x97\\x98\\x99\\x9a\\x9b\\x9c\\x9d\\x9e\\x9f\\xa0\u00a1\u00a2\u00a3\u00a4\u00a5\u00a6\u00a7\u00a8\u00a9\u00aa\u00ab\u00ac\\xad\u00ae\u00af\u00b0\u00b1\u00b2\u00b3\u00b4\u00b5\u00b6\u00b7\u00b8\u00b9\u00ba\u00bb\u00bc\u00bd\u00be\u00bf\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00da\u00db\u00dc\u00dd\u00de\u00df\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fa\u00fb\u00fc\u00fd\u00fe\u00ff' \n  return ascii[c]", "# ascii = [chr(i) for i in range(256)]\nascii = ['\\x00', '\\x01', '\\x02', '\\x03', '\\x04', '\\x05', '\\x06', '\\x07', '\\x08', '\\t', '\\n', '\\x0b', '\\x0c', '\\r', '\\x0e', '\\x0f', '\\x10', '\\x11', '\\x12', '\\x13', '\\x14', '\\x15', '\\x16', '\\x17', '\\x18', '\\x19', '\\x1a', '\\x1b', '\\x1c', '\\x1d', '\\x1e', '\\x1f', ' ', '!', '\"', '#', '$', '%', '&', \"'\", '(', ')', '*', '+', ',', '-', '.', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '<', '=', '>', '?', '@', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '[', '\\\\', ']', '^', '_', '`', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '{', '|', '}', '~', '\\x7f', '\\x80', '\\x81', '\\x82', '\\x83', '\\x84', '\\x85', '\\x86', '\\x87', '\\x88', '\\x89', '\\x8a', '\\x8b', '\\x8c', '\\x8d', '\\x8e', '\\x8f', '\\x90', '\\x91', '\\x92', '\\x93', '\\x94', '\\x95', '\\x96', '\\x97', '\\x98', '\\x99', '\\x9a', '\\x9b', '\\x9c', '\\x9d', '\\x9e', '\\x9f', '\\xa0', '\u00a1', '\u00a2', '\u00a3', '\u00a4', '\u00a5', '\u00a6', '\u00a7', '\u00a8', '\u00a9', '\u00aa', '\u00ab', '\u00ac', '\\xad', '\u00ae', '\u00af', '\u00b0', '\u00b1', '\u00b2', '\u00b3', '\u00b4', '\u00b5', '\u00b6', '\u00b7', '\u00b8', '\u00b9', '\u00ba', '\u00bb', '\u00bc', '\u00bd', '\u00be', '\u00bf', '\u00c0', '\u00c1', '\u00c2', '\u00c3', '\u00c4', '\u00c5', '\u00c6', '\u00c7', '\u00c8', '\u00c9', '\u00ca', '\u00cb', '\u00cc', '\u00cd', '\u00ce', '\u00cf', '\u00d0', '\u00d1', '\u00d2', '\u00d3', '\u00d4', '\u00d5', '\u00d6', '\u00d7', '\u00d8', '\u00d9', '\u00da', '\u00db', '\u00dc', '\u00dd', '\u00de', '\u00df', '\u00e0', '\u00e1', '\u00e2', '\u00e3', '\u00e4', '\u00e5', '\u00e6', '\u00e7', '\u00e8', '\u00e9', '\u00ea', '\u00eb', '\u00ec', '\u00ed', '\u00ee', '\u00ef', '\u00f0', '\u00f1', '\u00f2', '\u00f3', '\u00f4', '\u00f5', '\u00f6', '\u00f7', '\u00f8', '\u00f9', '\u00fa', '\u00fb', '\u00fc', '\u00fd', '\u00fe', '\u00ff']\n\ndef get_char(c):\n  return ascii[c] if c in range(len(ascii)) else ''", "def get_char(c):\n    # chr gives the character corresponding with the ASCII value\n    return chr(c)", "def get_char(c):\n    print(c)\n    try:\n        asciiDict = {i: chr(i) for i in range(256)}\n        return asciiDict[c]\n    except:\n        return None", "def get_char(c):\n    \"\"\"\n        Returns the corresponding ASCII char for 'c'.\n    \"\"\"\n    return chr(c)", "def get_char(c):\n    res = chr(c)\n    return  res", "def get_char(c):\n  # Your code goes here ^_^\n    g = chr(c)\n    return g", "def get_char(c):\n  return chr(c)\n#Completed by Ammar on 5/8/2019 at 02:19AM.\n", "def get_char(c):\n  # Your code goes here ^_^\n  if c < 0 or c > 255:\n      print('ASCII out of range')\n      return -1      \n  return chr(c)", "def get_char(c):\n  ascii_code = chr(c)\n  return ascii_code", "def get_char(c):\n  return chr(int(c))", "def get_char(c):\n  # Your code goes here ^_^\n  return chr(c)\n  return", "def get_char(c):\n  a=chr(c)\n  return a", "def get_char(c):\n    b = chr(c)\n    return b", "def get_char(c):\n  d=chr(c)\n  return(d)", "def get_char(num):\n  # Your code goes here ^_^\n  return chr(num)", "def get_char(value):\n    return chr(value)", "def get_char(c):\n  \n  return chr(c)#I solved this Kata on 6/27/2019 01:59 AM #hussamSindhuCodingDiary", "get_char = chr # Well, that was easy!", "def get_char(ascii):\n    return chr(ascii)", "get_char = lambda i: chr(i)\n", "def get_char(c):\n  x = chr(c)\n  return x", "def get_char(c):\n  if c:\n      return chr(c)", "def get_char(c):\n      answer = str(chr(c))\n      return answer", "def get_char(c):\n  letter = chr(c)\n  return letter", "def get_char(c):\n  return chr(c)\nget_char(65)", "def get_char(c):\n    character = chr(c)\n    return character", "def get_char(n):\n    return chr(n)", "get_char = lambda x: chr(x)", "import html\n\ndef get_char(c):\n  # Your code goes here ^_^\n  return(chr(c))", "def get_char(c):\n  ASCII=chr(c)\n  return ASCII", "def get_char(c):\n  char = chr(c)\n  return char"]