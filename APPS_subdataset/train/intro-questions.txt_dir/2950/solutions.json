["def solve(arr):\n    return sum( y-x == z-y for i,x in enumerate(arr[:-2])\n                           for j,y in enumerate(arr[i+1:-1])\n                           for _,z in enumerate(arr[j+1:]))", "from itertools import combinations\n\ndef solve(xs):\n    return sum(1 for a, b, c in combinations(xs, 3) if a - b == b - c)", "def solve(arr):\n    return sum(x<y and y*2-x in arr for x in arr for y in arr)", "def solve(arr):\n    return sum(num + i in arr and num + 2 * i in arr for i in range(1, arr[-2] + 1)\\\n        for num in arr[:-2])\n", "from itertools import combinations\n\ndef solve(arr):\n    S = set(arr)\n    return sum(2*y-x in S for x,y in combinations(arr, 2))", "from itertools import combinations\n\ndef solve(a):\n    return sum(q + (q - p) in a for p, q in combinations(a, 2))", "from itertools import combinations\n\ndef solve(arr):\n    return sum(b-a == c-b for a, b, c in combinations(arr, 3))", "import itertools\n\ndef solve(arr):\n    n = 0\n    nums = set(arr)\n    for com in itertools.combinations(arr, 2):\n        diff = com[1] - com[0]\n        if (com[1] + diff in nums):\n            n += 1            \n    return n", "from itertools import combinations\n\ndef help67(arr):\n    S = set(arr)\n    for a, b in combinations(arr, 2):\n        if 2*b - a in S:\n            yield a, b, 2*b - a\n            \ndef solve(arr):\n    c = 0\n    for i in help67(arr):\n        c +=1\n    return c     \n", "from itertools import combinations\n\ndef solve(xs):\n    return sum(a - b == b - c for a, b, c in combinations(xs, 3))"]