["def my_crib(n):\n    roof = \"\\n\".join(\"%s/%s\\\\%s\"%(\" \"*(n-i),\" \"*i*2,\" \"*(n-i)) for i in range(n))\n    ceiling = \"\\n/%s\\\\\\n\"%(\"_\"*(n*2))\n    walls = (\"|%s|\\n\"%(\" \"*(n*2)))*(n-1)\n    floor = \"|%s|\"%(\"_\"*(n*2))\n    \n    return roof + ceiling + walls + floor", "def my_crib(n):\n    roof = [(\"/\" + \" \"*k + \"\\\\\").center(2*n+2) for k in range(0, 2*n, 2)]\n    ceiling = [\"/\" + \"_\"*2*n + \"\\\\\"]\n    walls = [\"|\" + \" \"*2*n + \"|\"]*(n-1)\n    floor = [\"|\" + \"_\"*2*n + \"|\"]\n    return \"\\n\".join(roof + ceiling + walls + floor)", "def my_crib(n):\n    return '\\n'.join([' '*(n-i) + '/' + ' '*2*i + '\\\\' + ' '*(n-i) for i in range(n)] + ['/' + '_'*2*n + '\\\\'] + ['|' + ' '*2*n + '|'] *(n-1) + ['|' + '_'*2*n + '|'])", "def my_crib(n):\n    l, res = n+1 << 1, []\n    res.extend('/' + ' '*(2*i) + '\\\\' for i in range(n))\n    res.append('/' + '_'*(2*n) + '\\\\')\n    res.extend('|' + ' '*(l-2) + '|' for _ in range(n-1))\n    res.append('|' + '_'*(l-2) + '|')\n    return '\\n'.join(s.center(l) for s in res)", "def my_crib(n):\n    crib = [f\"{mult(n-i)}/{mult(i*2)}\\\\{mult(n-i)}\" for i in range(n)]\n    crib.append(f\"/{mult(n*2, '_')}\\\\\")\n    crib.extend(f\"|{mult(n*2)}|\" for _ in range(n-1))\n    crib.append(f\"|{mult(n*2, '_')}|\")\n    return \"\\n\".join(crib)\n\n\ndef mult(n, char=\" \"):\n    return char * n", "def my_crib(n):\n    w = n * 2\n    return '\\n'.join(\n        [('/' + ' ' * (i * 2) + '\\\\').center(w + 2) for i in range(n)]\n        + ['/' + '_' * (w) + '\\\\']\n        + ['|' + ' ' * w + '|'] * (n-1)\n        + ['|' + '_' * w + '|']\n    )", "import itertools\n\n\ndef my_crib(n):\n    \"\"\"Return an ASCII art house with 'n' floors.\"\"\"\n    def format(chars, fill_width):\n        return (\"{chars[0]}{chars[2]:{chars[1]}>{width}}\"\n            .format(chars=chars, width=fill_width + 1)\n            .center(2 * n + 2))\n    return \"\\n\".join(itertools.chain(\n        (format('/ \\\\', 2 * i) for i in range(n)),\n        (format('/_\\\\', 2 * n), ),\n        (format(\"| |\", 2 * n) for _ in range(n - 1)),\n        (format('|_|', 2 * n), ),\n        ))", "my_crib=lambda n:\"\\n\".join([('/'+[' ','_'][i==n]*(i*2)+'\\\\').center(n*2+2,' ')for i in range(n+1)])+'\\n'+\"\\n\".join(['|'+[' ','_'][i==n-1]*(n*2)+'|'for i in range(n)])", "def my_crib(n):\n    roof = '\\n'.join('{0}/{1}\\\\{0}'.format(' '*(n-i),' _'[n==i]*i*2) for i in range(n+1))\n    x = lambda a: '\\n|'+a*n*2+'|'\n    return roof + x(' ')*(n-1) + x('_')", "class House(object):\n    roofleft, roofright = '/', '\\\\'\n    wall = '|'\n    bottom = '_'\n    \n    def __init__(self, floors):\n        self.floors = floors\n        \n    def __new__(cls, floors):\n        a = super(House, cls).__new__(cls)\n        a.__init__(floors)\n        return str(a)\n        \n    @property\n    def width(self):\n        return self.floors * 2 + 2\n        \n    @property\n    def height(self):\n        return self.floors * 2 + 1\n        \n    @property\n    def roofparts(self):\n        return list(range(self.floors))\n        \n    @property\n    def gutterparts(self):\n        return list(range(max(self.roofparts) + 1, max(self.roofparts) + 2))\n        \n    @property\n    def floorparts(self):\n        return list(range(max(self.gutterparts) + 1, self.height - 1))\n        \n    @property\n    def groundparts(self):\n        return list(range(self.height -1, self.height))\n    \n    def genpart(self, index):\n        if index in self.roofparts:\n            return self.genroof(index, outerfill=\" \", innerfill=\" \")\n        if index in self.gutterparts:\n            return self.genroof(index, outerfill=\"\", innerfill=\"_\")\n        if index in self.floorparts:\n            return self.genfloor(index, outerfill=\"\", innerfill=\" \")\n        if index in self.groundparts:\n            return self.genfloor(index, outerfill=\"\", innerfill=\"_\")\n            \n    def genroof(self, index, innerfill, outerfill):\n        margin = \"{:{outerfill}^{width}}\".format(\"\", outerfill=outerfill, width=(self.floors - index))\n        roofpart = \"{margin}{roofleft}{centerfill}{roofright}{margin}\".format(\n            margin=margin,\n            roofleft=self.roofleft,\n            roofright=self.roofright,\n            centerfill=innerfill * 2 * index)\n        return roofpart\n        \n    def genfloor(self, index, innerfill, outerfill):\n        margin = \"{outerfill:{innerfill}^{width}}\".format(innerfill=innerfill, outerfill=outerfill, width=self.width)\n        roofpart = \"{wall}{centerfill}{wall}\".format(\n            wall=self.wall,\n            centerfill=innerfill * (self.width - 2))\n        return roofpart\n            \n    def draw(self):\n        lines = []\n        for index in range(self.height):\n            part = self.genpart(index)\n            if not part:\n                part = \"X\" * self.width\n            lines.append(part)\n        return '\\n'.join(lines)\n    \n    def bounding_box(self):\n        lines = []\n        for row in range(self.height):\n            lines.append('X' * self.width)\n        return '\\n'.join(lines)\n        \n    @property\n    def __name__(self):\n        return [objname for objname,oid in list(globals().items()) if id(oid)==id(self)]\n        \n    def allnames(self):\n        results = [n for n, v in list(globals().items()) if v is arg]\n        return results[0] if len(results) is 1 else results if results else None\n    \n    def __repr__(self):\n        #return 'House({})'.format(self.floors)\n        return repr(self.draw())\n        \n    def __str__(self):\n        return self.draw()\n    \n    def describe(self):\n        return 'a bVectorian era {} story home called \"{}\" {{ signified as {}, identified as {} }}'.format(self.floors, self.__name__, repr(self), id(self))\n        \nmy_crib = House\n\ndef testings():\n    commonhouse = House(1)\n    middleclasshouse = House(2)\n    ritzyhouse = House(3)\n    bigscaryhouse = House(4)\n    cribs = [commonhouse,middleclasshouse,ritzyhouse,bigscaryhouse]\n    for crib in cribs:\n        print(crib)\n        print(crib.draw())\n        print(crib.roofparts, crib.gutterparts, crib.floorparts, crib.groundparts)\n"]