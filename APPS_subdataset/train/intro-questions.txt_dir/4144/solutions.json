["def abundant(h):\n    for n in range(h,0,-1):\n        s = sum(i for i in range(1,n) if n % i == 0)\n        if s > h:\n            return [[n],[s-n]]", "from operator import itemgetter\nfrom bisect import bisect\n\nLIMIT = 2000\n\nmemo, result = [0]*LIMIT, {}\nfor x in range(1, LIMIT):\n    if memo[x] > x:\n        result[x] = memo[x]-x\n    if x < LIMIT//2:\n        for y in range(x, LIMIT, x):\n            memo[y] += x\nvalues = list(result.keys())\n\ndef abundant(h):\n    x = values[bisect(values, h)-1]\n    return [[x], [result[x]]]", "def ab(n):\n    s = 1\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            s += i\n            if i * i != n:\n                s += n // i\n    return s - n\n\ndef abundant(h):\n    for i in range(h, 0, -1):\n        a = ab(i)\n        if a > 0:\n            return [[i], [a]]", "def abundant(limit):\n    for n in range(limit, 0, -1):\n        div_sum = sum(x for x in range(1, n//2 + 1) if n%x == 0)\n        if div_sum > n:\n            return [ [n], [div_sum - n] ]", "def abundant(h):\n    for n in range(h, 0, -1):\n        s = sum(d + n // d for d in range(2, int(n ** .5) + 1) if not n % d) \\\n            - n ** .5 * (not n ** .5 % 1) + 1\n        if s > n: return [[n], [s - n]]", "def abundant(h):\n    for i in range(h+1)[::-1]:\n        sum = 0\n        for j in range(1,i):\n            if i%j==0:\n                sum += j\n        if sum>h:\n            return [[i],[sum-i]]", "def abundant(h):\n    s = sigma(h)\n    while s < h:\n        h -= 1\n        s = sigma(h)\n    return [[h], [s-h]]\n\ndef sigma(x):\n    sq,s,i = x**.5,1,2\n    while i<=sq :\n        if x%i==0 : s += i+x/i\n        if i==sq  : s -= i\n        i += 1\n    return s", "def abundant(n):\n    gen_div=lambda a:set(sum([[a//i,i]for i in range(1,int(a**.5)+1)if a%i==0],[]))\n    r = []\n    for i in range(n, 0, -1):\n        div_sum = sum(gen_div(i))\n        if div_sum - i > i : return [[i],[div_sum - i*2]]", "def abundant(h):\n    for i in range(h, 11, -1):\n        temp = set([1])\n        for j in range(2, int(i**0.5)+1):\n            if i%j == 0:\n                temp.add(j)\n                temp.add(i//j)\n        x = sum(temp)\n        if x > i:\n            return [[i], [x-i]]\n    return 12", "def abundant(h):\n    for n in range(h,0,-1):\n        s = sum(i for i in range(1,n//2+1) if not n%i)\n        if s > n:\n            return [[n],[s-n]]"]