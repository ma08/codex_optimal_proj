["import re\ndef string_parse(string):\n    return re.sub(r'(.)\\1(\\1+)', r'\\1\\1[\\2]', string) if isinstance(string, str) else 'Please enter a valid string'", "import re\ndef string_parse(s):\n    if not isinstance(s, str): return \"Please enter a valid string\"\n    for l in set(s):\n        s = re.sub(r\"(%s%s)(%s+)\" % (l, l, l), r\"\\1[\\2]\", s)\n    return s", "import re\n\n\ndef string_parse(s):\n    if isinstance(s, str):\n        return re.sub(r\"(.)\\1(\\1+)\", r\"\\1\\1[\\2]\", s)\n    return \"Please enter a valid string\"", "from functools import partial\nfrom re import compile\n\nREGEX = partial(compile(r\"(.)\\1(\\1+)\").sub, r\"\\1\\1[\\2]\")\n\ndef string_parse(string):\n    return REGEX(string) if type(string) == str else \"Please enter a valid string\"", "import re\ndef string_parse(string):\n    try:\n        def replace(match):\n            return '{0}{0}[{1}]'.format(*match.group(1, 2))\n        return re.sub(r'(.)\\1(\\1+)', replace, string)\n    except TypeError:\n        return 'Please enter a valid string'", "from itertools import groupby\n\ndef string_parse(string):\n    if isinstance(string,str):\n        gs = groupby(string)\n        f = lambda s : s if len(s) < 3 else s[:2] + '[' + s[2:] + ']'\n        return ''.join([ f(''.join(list(g))) for _, g in groupby(string)])\n    else:\n        return 'Please enter a valid string'\n\n", "from itertools import groupby\n\ndef string_parse(string):\n  return ''.join(f'{x*2}[{x*(c-2)}]' if c > 2 else x * c for x, c in [(x, len(list(gp))) for x, gp in groupby(string)]) if isinstance(string, str) else 'Please enter a valid string'", "# Attempt without regex, let's use classic generator function.\n\ndef string_parse_gen(string):\n    counter, prev_char = 0, ''\n    for char in string:\n        if char == prev_char:\n            counter += 1\n            if counter == 2:\n                yield '['\n        else:\n            if counter >= 2:\n                yield ']'\n            prev_char = char;\n            counter = 0;\n        yield char;\n        \n    if counter >= 2:\n        yield ']'\n\n\ndef string_parse(string):\n    return ''.join(list(string_parse_gen(string))) if isinstance(string, str) else \"Please enter a valid string\"", "def string_parse(s):\n    from itertools import groupby\n    if not isinstance(s, str):\n        return 'Please enter a valid string'\n    \n    x = [(i, sum([1 for j in group])) for i, group in groupby(s)]\n    x = [i[0] * 2 + '[' + i[0] * (i[1] - 2) + ']' if i[1] >= 2 else i[0] for i in x]\n    x = ''.join(x)\n    x = x.replace('[]','')\n    return x", "import re\ndef string_parse(string):\n    if not isinstance(string, str):\n        return 'Please enter a valid string'\n    def repl(Match):\n        \n        s = Match[0]\n        n = len(s)\n        c = s[0]\n        \n        return s if n <= 2 else c * 2 + f'[{c * (n - 2)}]'\n    return re.sub(r'(\\w)\\1*', repl, string)", "import re\ndef string_parse(s):\n    try:\n        return re.sub(r'(.)\\1+', lambda m:  m.group()[0:2] + \"[\" +  m.group()[2:] + \"]\" if len(m.group())>2 else m.group()  , s)    \n        #lambda x: True if x % 2 == 0 else False\n    except TypeError:\n        return \"Please enter a valid string\"", "import re\n\ndef string_parse(s):\n    return re.sub(r'((.)\\2*)', lambda x: f'{2 * x[2]}[{x[1][:len(x[1]) - 2]}]' \\\n                          if len(x[1]) > 2 else x[1], s) if isinstance(s, str) \\\n                          else \"Please enter a valid string\"", "def string_parse(string):\n    if not isinstance(string, str):\n        return 'Please enter a valid string'\n    res = []\n    count = 0\n    last_char = None\n    for c in string:\n        if c != last_char:\n            if count > 2:\n                res.append(']')\n            count = 0\n        elif count == 2:\n            res.append('[')\n        count += 1\n        last_char = c\n        res.append(c)\n    if count > 2:\n        res.append(']')\n    return \"\".join(res)\n", "from itertools import groupby\n\ndef string_parse(str_in):\n    if not isinstance(str_in, str):\n        return \"Please enter a valid string\"\n    str_out= []\n    for _, group in groupby(str_in):\n        s = ''.join(group)\n        str_out.append(s if len(s) < 3 else f'{s[:2]}[{s[2:]}]')\n    return ''.join(str_out)", "def string_parse(string):\n    if type(string)!=str:return \"Please enter a valid string\"\n    try:\n        out=string[:2]\n        temp=''\n        for i in string[2:]:\n            if i==out[-1]==out[-2]:\n                temp+=i\n            else:\n                if temp!='':out+='['+temp+']'\n                out+=i\n                temp=''\n        if temp!='':out+='['+temp+']'\n        return out\n    except:\n        return \"Please enter a valid string\"\n        \n", "def string_parse(string):\n    if not isinstance(string, str):\n        return 'Please enter a valid string'\n    letters = ['0']\n    for i in string:\n        if i == letters[-1][-1]:\n            letters[-1] += i\n        else:\n            letters.append(i)\n    return ''.join([i if len(i) < 3 else f'{i[:2]}[{i[2:]}]' for i in letters][1:])", "import re\n\ndef string_parse(string):\n    if not type(string) == str:\n        return \"Please enter a valid string\"\n    \n    return re.sub(r'(([a-zA-Z])\\2)(\\2+)', lambda x: x.group(1) + '[' + x.group(3) + ']', string)", "def string_parse(string):\n    #your code here\n    if string == None or not isinstance(string,str)  : return \"Please enter a valid string\"\n    if string == '' : return ''\n    res = ''\n    current_char = string[0]\n    char_counter = 1\n    for i in range(1, len(string)) :\n        \n        if current_char == string[i]:\n            if char_counter + 1 <=2 :\n                res += current_char\n                char_counter +=1\n                continue\n            elif char_counter + 1 == 3 :\n                res = res + current_char +  '[' \n                char_counter +=1\n                continue\n            elif char_counter + 1 > 3 :\n                res += current_char\n                char_counter +=1\n        else :\n            if char_counter > 2 :\n                res = res + current_char + ']' \n            else :\n                res += current_char\n            current_char = string[i]    \n            char_counter = 1\n    res = res + current_char if char_counter <= 2 else res + current_char + ']'    \n    return res", "import re\n\ndef string_parse(string):\n    if type(string) != str:\n        return 'Please enter a valid string'\n    for c in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ':\n        string = re.sub(c + '{2}(' + c + '+)', c * 2 + '[\\g<1>]', string) \n    return string", "def string_parse(string):\n    \n    if not isinstance(string, str):\n        return \"Please enter a valid string\"\n    if len(string) ==0:\n        return \"\"\n    Di = {}\n    text = \"\"\n    f=0\n    i = 0\n    f2=0\n    for i in range(len(string)-1):\n        Di.setdefault(string[i], 0)\n        text += string[i]\n        Di[string[i]] +=1\n        \n        if not f and Di[string[i]] >=2 and string[i] == string[i+1]:\n            text += \"[\"\n            f = 1\n        if f and Di[string[i]] >=2 and string[i] != string[i+1]:\n            text += \"]\"\n            f = 0\n            f2 =1\n        if not f and string[i] != string[i+1]:\n            Di[string[i]] =0\n        \n            \n    text += string[-1]\n    if f:\n        text += \"]\"\n    return text\n"]