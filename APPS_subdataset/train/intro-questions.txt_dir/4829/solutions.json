["def compose(f,g):\n  return lambda *x: f(g(*x))", "def pow(x, y):\n  return x**y\n\n# assuming python 3 where print is a function\nprintPow = compose(print, pow)\n# compose would return\nlambda *x: print(pow(*x))\n# because f is bound to print and g is bound to pow.\n\nprintPow(2, 3)\n# this would call the lambda with x bound to [2, 3]\n# so that gives you the expression:\nprint(pow(*[2, 3]))\n# or equivalently:\nprint(pow(2, 3))\n", "def compose(f,g):\n    return lambda *args: f( g(*args) )", "def compose(f,g):\n    # Compose the two functions here!\n    def z(*arg,**kw):\n      return f(g(*arg,**kw))\n    return z", "def compose(f,g):\n    def composing(*args, **kwargs):\n        return f(g(*args, **kwargs))\n    return composing", "def compose(f,g):\n    # Compose the two functions here!\n    def newfunc(*args):\n      return f(g(*args))\n    return newfunc\n", "def compose(f,g):\n    return lambda *a,**kw: f(g(*a, **kw))", "def compose(f,g):\n    def h(*args, **kwargs):\n        return f(g(*args, **kwargs))\n    return h", "def compose(f,g):\n  def inner(*args, **kwargs):\n    return f(g(*args, **kwargs))\n  return inner", "def compose(f,g):\n    return lambda *args, **kwargs: f(g(*args, **kwargs))", "def compose(*func):\n    return C(func)\n    \nclass C:\n    def __init__(self,func):\n        self.func = list(func)[::-1]\n        \n    def __call__(self,*value):\n        value = sum(value)  \n        for f in self.func:\n            value = f(value)\n        return value"]