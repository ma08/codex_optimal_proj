["import re\n\nmy_regexp = (r'(?P<sign>[+\\-]?)'\n             r'(?P<coeff>\\d*)'\n             r'x'\n             r'(?:\\^(?P<exp>\\d+))?')\n\nas_int = lambda s: int(s) if s else 1\n\ndef derivative(eq):\n    result = ''\n    for monom in re.finditer(my_regexp, eq):\n        sign, coeff, exp = monom.groups()\n        coeff,exp = list(map(as_int, (coeff,exp)))\n        coeff *= exp\n        exp -= 1\n        result += ('{sign}{coeff}' if exp==0 else \n                   '{sign}{coeff}x' if exp==1 else\n                   '{sign}{coeff}x^{exp}'\n                  ).format(sign=sign, coeff=coeff, exp=exp)\n    return result if result else '0'\n        \n", "import re\n\nDERIVATE = re.compile(r'([+-]?)(\\d*)x\\^?(\\d*)')\n\ndef derivative(eq):\n    rawDerivate = ''.join('{}{}x^{}'.format(sign, int(coef or '1')*int(exp or '1'), int(exp or '1')-1) \n                          for sign,coef,exp in DERIVATE.findall(eq))\n    derivate    = re.sub(r'x\\^0|\\^1\\b', '', rawDerivate)\n    return derivate or '0'", "from re import finditer, sub\n\ndef derivative(equation):\n    mx = ''\n    \n    for exp in finditer(r'([\\+\\-])?(\\d*)?x\\^?(\\d+)?', equation):\n        sign = -1 if exp.group(1) == '-' else 1\n        scalar = int(exp.group(2)) if exp.group(2) else 1\n        power = int(exp.group(3)) if exp.group(3) else 1\n\n        mx += f'{sign*power*scalar}x^{(power - 1)}+'   \n    mx = sub(r'x\\^0\\b', '', mx)\n    mx = sub(r'x\\^1\\b', 'x', mx)\n    mx = sub('\\+\\-', '-', mx)\n    if not mx:\n        return '0'\n    return mx[:-1]\n", "import re\nderivative=lambda s:re.sub(r'\\^1(?=[-+])','',re.sub(r'\\+-','-','+'.join([['',f'{int(i[0]if i[0]and i[0]not in\"+-\"else[1,-1][i[0]==\"-\"])*int(i[-1]or 1)}'][bool(i[-2])]+(f'x^{[0,int(i[-1])-1][bool(i[-2])]}'if i[-1]else'') for i in re.findall(r'([-+]?\\d*)(x?)\\^?(\\d*)', s)]))).strip('+') or '0'", "import re\n\ndef derivative(eq):\n    monos = re.findall(r'([+-]?)(\\d*)x\\^?(\\d*)', eq)\n    result = ''\n    for sign, coef, exp in monos:\n        exp = int(exp or '1')\n        coef = int(coef or '1') * exp\n        result += f'{sign}{coef}x^{exp-1}'\n    result = re.sub(r'x\\^0|\\^1\\b', '', result)\n    return result or '0'", "import re\n\ndef derivative(eq):\n    res = []\n    \n    # change bare \"x\"s to \"1x\" for easier processing\n    eq = re.sub(r'\\bx', '1x', eq)\n    \n    # extract constants, variables and exponents\n    for const, var, exp in re.findall(r'([+-]?\\d+)(x?)\\^?(\\d*)', eq):\n        \n        # if constant only, derivative = 0\n        if not var:\n            continue\n        \n        # if no exponent found (= 1), derivative = const\n        if not exp:\n            res.append(const)\n            continue\n        \n        # if exponent > 1, calculate derivative\n        const, exp = int(const), int(exp)\n        const *= exp\n        if exp == 2:\n            res.append('%+dx' % const)\n        else:\n            res.append('%+dx^%d' % (const, exp - 1))\n        \n    # construct the final result and return it\n    res = ''.join(res).strip('+')   \n    return res if res else '0'\n", "import re\nnomial = re.compile(r'(?P<sign>[\\+-]?)(?P<coef>[0-9]*)(?P<x>[a-z]?)\\^?(?P<exp>[0-9]*)')\n\ndef derive(eq):\n    if not eq: return ''\n    m = nomial.match(eq)\n    c = int(m.group('coef') or '1')\n    exp = int(m.group('exp') or '1')\n    if not m.group('x'): r = \"\" \n    elif not m.group('exp'): r = m.group('sign')+ str(c)\n    elif m.group('exp') == '2': r = m.group('sign')+str(c * 2)+m.group('x')\n    else: r = m.group('sign')+str(c*exp)+m.group('x')+'^'+str(exp-1)\n    return r + derive(eq[m.end():])\n\ndef derivative(eq):\n    return derive(eq) or '0'", "import re\nstr2int = lambda s: int(s + '1' * (not s[-1:].isdigit()))\n\ndef monomial(args):\n    c, p = map(str2int, args)\n    return '%+d' % (c * p) + 'x' * (p > 1) + '^%d' % (p - 1) * (p > 2)\n\ndef derivative(eq):\n    return ''.join(map(monomial, re.findall(\"(-?\\d*)x\\^?(\\d*)\", eq))).lstrip('+') or '0'", "def derivative(eq):\n    r = '+'.join([s for s in [derive(w) for w in eq.replace('+', ' ').replace('-', ' -').replace('-x', '-1x').split()] if s])\n    return r.replace('+-','-') if r else '0'\n\ndef derive(term):\n    if 'x' not in term: return ''\n    if '^' not in term:    \n        return term.split('x')[0] if term.split('x')[0] else '1'\n    a, b = [int(w) if w else 1 for w in term.split('x^')]\n    a, b = a * b, b - 1\n    return ('' if a == 1 else str(a)) + 'x' + ('^' + str(b) if b > 1 else '')", "from re import findall\n\ndef derivative(eq):\n    monos = [\"{}\", \"{}x\", \"{}x^{}\"]\n\n    res = \"\"\n    for t in findall(\"(\\+|-)?(\\d+)?x(?:\\^(\\d+))?\", eq):\n        a, b = (int(x) if x else 1 for x in t[1:])\n        res += t[0] + monos[(b>1) + (b>2)].format(a*b, b-1)\n    \n    return res if res else \"0\""]