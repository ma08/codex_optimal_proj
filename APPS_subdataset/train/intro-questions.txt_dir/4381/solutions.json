["def min_unfairness(arr,k):\n    arr = sorted(arr)\n    return min(b - a for a, b in zip(arr, arr[k-1:])) if arr and k else 0", "def min_unfairness(arr,k):\n    if len(arr) < 2 or k < 2:\n        return 0\n    t = sorted(arr)\n    diff = float('inf')\n    for i in range(len(t)-k+1):\n        x= t[i+k-1]-t[i]\n        if x < diff:\n            diff = x\n    return diff", "def min_unfairness (arr, k): \n  if k < 2 or len(arr) < 2:\n    return 0\n  \n  arr = sorted(arr)\n  return min(arr[i+k-1] - arr[i] for i in range(0, len(arr)-k+1))", "def min_unfairness(arr,k):\n    #your code here\n    if k<2 or len(arr)<2:\n        return 0\n    \n    arr.sort()\n\n\n#    return min([(arr[k+i-1]-arr[i]) for i in range(len(arr)-k+1)])\n    mindist = float('inf')\n    \n    for i in range(len(arr)-k+1):\n        dist = arr[k+i-1] - arr[i]\n        \n        if dist<mindist:\n            mindist = dist\n    \n    return mindist", "def min_unfairness (arr,k): \n  if k == 0 or len(arr) < 2:\n    return 0\n  \n  arr.sort()\n  return min( (arr[i+k-1] - arr[i]) for i in range(0, len(arr) - k + 1) )\n", "import numpy as np\ndef min_unfairness(arr,k):\n    arr=np.sort(np.array(arr))\n    if arr.size<2 or k in (0,1):\n        return 0\n    return np.min(arr[k-1:]-arr[:-k+1])", "min_unfairness=lambda a,k:a.sort()or k>0<len(a)and min(b-a for a,b in zip(a,a[k-1:]))", "def min_unfairness(arr,k):\n    \n    if not arr or k ==0: return 0\n    arr.sort()\n    \n    min_unf = float('inf')\n    \n    for i in range(len(arr)-k+1):\n        \n        subarr_min = arr[i]\n        subarr_max = arr[i+k-1]\n        \n        min_unf = min(min_unf, subarr_max-subarr_min)\n        \n    return min_unf\n", "def min_unfairness(arr,k):\n    #your code here\n    if k < 2: return 0\n    arr.sort()\n    ans = float(\"inf\")\n    i = k - 1\n    while i < len(arr):\n      if abs(arr[i] - arr[i - k + 1]) < ans:\n        ans = abs(arr[i] - arr[i - k + 1])\n      i += 1\n    return ans"]