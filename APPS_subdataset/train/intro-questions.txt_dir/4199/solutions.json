["def squares(x,n):\n    return [x**(2**i) for i in range(n)]", "from itertools import accumulate, repeat\ndef squares(x, n):\n    return list(accumulate(repeat(x, n), lambda a, _: a * a))", "def squares(x, n):\n    result = [x] if n > 0 else []\n    for i in range(0, n-1):\n        result.append(result[-1]**2)\n    return result", "def squares(x, n):\n    r = [x]\n    return [r[-2] for i in range(n) if not r.append(r[-1]**2)]", "from typing import List\n\ndef squares(x: int, n: int) -> List[int]:\n    \"\"\" Get an array of length `n`, starting with the given number `x` and the squares of the previous number. \"\"\"\n    result = [x]\n    for _ in range(1, n):\n        result.append(pow(result[-1], 2))\n    return result if n > 0 else []", "def squares(x, n):\n    return [x**(2**k) for k in range(n)]", "def squares(x, n):\n    fun = lambda x,n: x if n <= 1 else fun(x, n-1) ** 2\n    return [fun(x, i) for i in range(1, n+1)]\n    \n    \n    \n", "def squares(x, n):\n    if n < 0:\n        return []\n    return [] if n == 0 else [x] + squares(x**2, n-1)", "def squares(x, n):\n    return [pow(x, pow(2, i)) for i in range(n)]", "def squares(x, n):\n    mx = [x]\n    while len(mx)<n:\n        mx.append(mx[-1]**2)\n    return mx if n>0 else []"]