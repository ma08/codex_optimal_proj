["def automorphic(n):\n    return \"Automorphic\" if str(n*n).endswith(str(n)) else \"Not!!\"", "def automorphic(n):\n    return \"Automorphic\" if str(n**2).endswith(str(n)) else \"Not!!\"", "def automorphic(n):\n    return ('Not!!', 'Automorphic')[str(n ** 2).endswith(str(n))]", "def automorphic(n):\n    return \"Automorphic\" if n == (n ** 2) % 10 ** len(str(n)) else \"Not!!\"", "def automorphic(n):\n    n2 = n*n\n    return \"Automorphic\" if str(n) == str(n2)[-len(str(n)):] else \"Not!!\"", "def automorphic(n):\n    result = n**2\n    if str(n) in str(result):\n        return \"Automorphic\"\n    else: \n        return \"Not!!\"\n", "def automorphic(n):\n    pow = 10 ** len(str(n))\n    return 'Automorphic' if n == n*n % pow else 'Not!!'", "def automorphic(n):\n    l = len(str(n))\n    return 'Automorphic' if n * n % 10 ** l == n else 'Not!!'", "automorphic = lambda n:[\"Not!!\",\"Automorphic\"][str(n**2).endswith(str(n))]", "def automorphic(n):\n    return('Not!!', 'Automorphic')[str(n**2)[-len(str(n)):] == str(n)]", "def automorphic(n):\n    return ['Not!!', 'Automorphic'][str(n) in str(n**2)]", "def automorphic(n):\n    n, s = str(n), str(n*n)\n    return 'Automorphic' if n == s[len(n)*-1:] else 'Not!!'", "def automorphic(n):\n    s = str(n)\n    t = str(n*n)\n    return \"Automorphic\" if t[-len(s):] == s else \"Not!!\"\n", "def automorphic(n):\n    return 'Automorphic' if (n ** 2) % 10 ** len(str(n)) == n else 'Not!!'", "def automorphic(n):\n     return \"Automorphic\" if n in [0, 1, 5, 6, 25, 76, 625, 376, 9376, 90625, 890625, 109376, 2890625, 7109376, 12890625, 87109376, 212890625, 787109376, 8212890625, 1787109376] else \"Not!!\"    #your code here", "def automorphic(n):\n    return ('Automorphic', 'Not!!')[(n**2 - n) % (10**(len(str(n)))) and 1]", "def automorphic(n):\n    return 'Automorphic' if str(n) in str(n**2)[-len(str(n)):]  else \"Not!!\"", "def automorphic(n):\n    return \"Automorphic\" if n == int(str(n * n)[-len(str(n)) :]) else \"Not!!\"", "def automorphic(n):\n    l=len(str(n))\n    return 'Automorphic'  if str(n) ==  str(n**2)[-l:] else 'Not!!'", "def automorphic(n):\n    return {True: \"Automorphic\", False: \"Not!!\" }[str(n) == str(n**2)[-len(str(n)):]]", "def automorphic(n):\n    if n == 1 or n == 25:\n        return \"Automorphic\"\n    return \"Automorphic\" if str(n**2)[len(str(n)):] == str(n) else \"Not!!\"", "def automorphic(n):\n    return \"Automorphic\" if str(n) == str(n**2)[-1*len(str(n)):] else \"Not!!\"", "def automorphic(n):\n    print(n)\n    #your code here\n    sqr = n**2\n    l = len(str(n))\n    if str(sqr)[-l:]==str(n):\n        return \"Automorphic\"\n    else:\n        return 'Not!!'", "def automorphic(n):\n    print(n)\n    if str(n ** 2)[-len(str(n)):] == str(n):\n        return 'Automorphic'\n    return 'Not!!'", "def automorphic(n):\n    res = n**2\n    if str(n) in str(res):\n        return 'Automorphic'\n    else:\n        return 'Not!!'", "def automorphic(n):\n    s1 = str(n ** 2)\n    if s1.endswith(str(n)):\n        return \"Automorphic\"\n    return \"Not!!\"", "def automorphic(n):\n    print(n)\n    print((str(n**2)))\n    print((str(n**2-n)[-1]))\n    print((str(n**2-n)))\n    if n<10:\n        if str(n**2-n)[-1]=='0' :\n            print((n**2))\n            return \"Automorphic\"\n    if n>9 and n<100:\n        if str(n**2-n)[-1]=='0' and  str(n**2-n)[-2]=='0' :\n            print((n**2))\n            return \"Automorphic\"\n    if n>100 :\n        if str(n**2-n)[-1]=='0' and  str(n**2-n)[-2] and  str(n**2-n)[-3]=='0' :\n            print()\n            print((n**2))\n\n            return \"Automorphic\"\n    \n    return \"Not!!\"\n    \n", "def automorphic(n):\n    end_n = str(n)\n    sq = n * n\n    end_sq = str(sq)\n    end_sq = end_sq[len(end_sq)-len(end_n):]\n    if (end_n == end_sq):\n        return ('Automorphic')\n    return ('Not!!')\n", "def automorphic(n):\n    s = str(n)\n    l = len(s)\n    return \"Automorphic\" if str(n**2)[-l:]==s else \"Not!!\"", "def automorphic(n):\n    result = {True: 'Automorphic',\n              False: 'Not!!'}\n    square = str(n**2)\n    number = str(n)\n     \n    return result[number == square[-len(number):]]", "def automorphic(n):\n    return \"Automorphic\" if str(n) == str(n ** 2)[len(str(n ** 2)) - len(str(n))::] else \"Not!!\"", "def automorphic(n):\n    ls=n**2\n    return 'Automorphic' if str(n)==str(n**2)[-len(str(n)):] else 'Not!!'\n", "def automorphic(n):\n    a = len(str(n))\n    q = str(n**2)\n    a1 = len(q)\n    \n    \n    return 'Automorphic' if str(n) == q[a1 - a:] else 'Not!!'\n", "def automorphic(n):\n    if n==1:\n        return \"Automorphic\"\n    else:\n        x = str(int(n**2))\n        n = str(n)\n        print((x[(len(x)-len(n)):]))\n        if n!= x[(len(x)-len(n)):]:\n            return \"Not!!\"\n        else:\n            return \"Automorphic\"\n        \n        \n", "def automorphic(n):\n    total = n * n\n    total_lst = [i for i in str(total)]\n    check_lst = [i for i in str(n)]\n    back = len(check_lst)\n    if check_lst == total_lst[-back:]:\n        return(\"Automorphic\")\n    else:\n        return(\"Not!!\")", "def automorphic(n):\n    n1 = len(str(n))\n    n2 = n*n\n    n3 = str(n2)\n    if int(n3[-(int(n1)):]) == n:\n        return \"Automorphic\"\n    return \"Not!!\"", "def automorphic(n):\n    squared = n**2\n    squared_str = str(squared)\n\n    len_n = len(str(n))\n    ends = int(squared_str[-int(len_n):])\n\n    val = 'Automorphic' if ends == n else 'Not!!'\n    \n    return val\n\n\n", "automorphic = lambda n: ['Not!!', 'Automorphic'][str(n*n).endswith(str(n))]", "def automorphic(n):\n    n2 = n**2\n    if str(n2)[-len(str(n)):] == str(n):\n        return 'Automorphic'\n    else:\n        return 'Not!!'", "def automorphic(n):\n    square_num = str(n ** 2)\n    num_size = len(str(n))\n    if square_num[-num_size:] == str(n):\n        return(\"Automorphic\")\n    else:\n        return(\"Not!!\")", "def automorphic(n):\n    x = n ** 2\n    return 'Automorphic' if str(n) in str(x) else 'Not!!'", "def automorphic(n):\n    size = len(str(n))\n    return \"Automorphic\" if str(n * n)[-size:] == str(n) else \"Not!!\"\n", "def automorphic(n):\n    flag = str(n**2).endswith(str(n))\n    return \"Automorphic\" if flag else \"Not!!\"", "def automorphic(n):\n    #your code here\n    if n == 10:\n        return \"Not!!\"\n    return \"Automorphic\" if str(n) in  str(n * n) else \"Not!!\"", "def automorphic(n):\n    end= int(str(n**2)[-len(str(n)):])\n    return \"Automorphic\" if end==n else \"Not!!\" ", "def ordern(n):\n    p=1\n    while n>0:\n        n=n//10\n        p=p*10\n    return p\ndef automorphic(n):\n    square=n*n\n    order=ordern(n)\n    if square%order==n:\n        return \"Automorphic\"\n    else:\n        return \"Not!!\"", "def automorphic(n):\n    n2 = n*n\n    if str(n2).find(str(n))==-1:\n        return \"Not!!\"\n    else:\n        if str(n) in str(n2):\n            return \"Automorphic\"\n        else:\n            return \"Not!!\"\n", "def automorphic(n):\n    if str(n**2)[-len(str(n)):] == str(n)[-len(str(n)):]:\n        return 'Automorphic'\n    else:\n        return 'Not!!'", "def automorphic(n):\n    if str(n*n)[-len(str(n)):]==str(n) : return \"Automorphic\"\n    return \"Not!!\"", "def automorphic(n):\n    m = str(n)\n    b = str(n**2)\n    return \"Automorphic\" if b[slice(len(b)-len(m), len(b), 1)] == m else \"Not!!\"", "def automorphic(n):\n    square=str(n*n)\n    n=str(n)\n    last_digits=square[-len(n):]\n    if last_digits==n:\n       return \"Automorphic\"\n    return \"Not!!\"   ", "def automorphic(n):\n    \n    if (n**2) % 10**(len(str(n))) == n:\n        return \"Automorphic\"\n    else:\n        return \"Not!!\"\n", "def automorphic(n):\n    a = n * n\n    b = list(str(a))\n    c = list(str(n))\n    if len(c) == 1:\n        if b[-1] == c[-1]:\n            return \"Automorphic\"\n        else:\n            return \"Not!!\"\n    elif len(c) == 2:\n        if b[-1] == c[-1] and b[-2] == c[-2]:\n            return \"Automorphic\"\n        else:\n            return \"Not!!\"\n    elif len(c) == 3:\n        if b[-1] == c[-1] and b[-2] == c[-2] and b[-3] == c[-3]:\n            return \"Automorphic\"\n        else:\n            return \"Not!!\"\n    elif len(c) == 4:\n        if b[-1] == c[-1] and b[-2] == c[-2] and b[-3] == c[-3] and b[-4] == c[-4]:\n            return \"Automorphic\"\n        else:\n            return \"Not!!\"\n    elif len(c) == 5:\n        if b[-1] == c[-1] and b[-2] == c[-2] and b[-3] == c[-3] and b[-4] == c[-4] and b[-4] == c[-4]:\n            return \"Automorphic\"\n        else:\n            return \"Not!!\"", "def automorphic(n):\n    n_sqr_str = str(n**2)\n    return \"Automorphic\" if n_sqr_str[-len(str(n)):] == str(n) else \"Not!!\"", "def automorphic(num):\n    squared = num ** 2\n    squared = str(squared)\n    num = str(num)\n    \n\n    \n\n    if squared.endswith(num):\n        return \"Automorphic\"\n    return \"Not!!\"\n", "def automorphic(n):\n    l=len(str(n))\n    m=10**l\n    return \"Automorphic\" if n*n%m==n else \"Not!!\" ", "def automorphic(n):\n    s = n ** 2\n    s = str(s)\n    if s[-len(str(n)):] == str(n):\n        return \"Automorphic\"\n    else:\n        return \"Not!!\"", "def automorphic(n):\n    lth = len(str(n))\n    last = str(n ** 2)[-lth:]\n    if str(n) == last:\n        return \"Automorphic\"\n    else: \n        return \"Not!!\"", "true = \"Automorphic\"\nfalse = \"Not!!\"\n\ndef automorphic(n):\n    return true if str(n) == str(n*n)[-len(str(n)):] else false", "def automorphic(n):\n    return {0 : 'Not!!', 1: 'Automorphic'}[str(n*n)[-(len(str(n))):] == str(n)]", "def automorphic(n):\n    if n == int(str(n**2)[-len(str(n)):]):\n        return \"Automorphic\"\n    else:\n        return \"Not!!\"", "def automorphic(n):\n    #your code here\n    f = list(map(int,str(n)))\n    z = list(map(int,str(n**2)))\n    m = len(f)\n\n    if f[:] == z[-m:]:\n        return \"Automorphic\"\n    else:\n        return \"Not!!\"\n", "def automorphic(n):\n    cpy=str(n)\n    n_square=n**2\n    n_square=str(n_square)\n    if n_square.endswith(cpy):\n        return\"Automorphic\"\n    else:\n        return \"Not!!\"\n    #your code here\n", "def automorphic(n):\n    end = str(n**2)[-len(str(n)):]\n    return 'Automorphic' if end==str(n) else 'Not!!'", "def automorphic(number):\n    data = str(number)\n\n    res = str(number**2)\n    l = len(data)\n\n    return \"Automorphic\" if res[-l:] == data else \"Not!!\"", "def automorphic(n):\n    \"\"\"\n    given an integer n\n    test to see if n's square ends in the same digits as the number itself.\n    return boolean\n    \"\"\"\n    charLength = len(str((n)))\n    squared = str(n ** 2)\n\n    automorphicTest = int(squared[-(charLength):])\n\n    if automorphicTest == n: return \"Automorphic\"\n    else:\n        return \"Not!!\"", "def automorphic(n):\n    x = len(str(n))\n    sq = str(n**2)\n    return \"Automorphic\" if sq[-x:] == str(n) else \"Not!!\"", "def automorphic(n):\n    square = n ** 2\n    return \"Automorphic\" if str(n)[::-1] == str(square)[::-1][:len(str(n))] else \"Not!!\"", "def automorphic(n):\n    #print(str(n**2)[(len(str(n))-1):])\n    #print(str(n**2)[-1:len(str(n))+1])\n    return \"Automorphic\" if str(n) in str(n**2) else \"Not!!\"", "def automorphic(n):\n    return ['Not!!', 'Automorphic'][all(a==b for a,b in zip(str(n)[::-1], str(n**2)[::-1]))]", "def automorphic(num):\n     return \"Automorphic\" if str(num * num).endswith(str(num)) else \"Not!!\"\n", "def automorphic(n):\n    if str(n) == str(n*n)[len(str(n*n))-len(str(n)):]:\n        return \"Automorphic\"\n    else:\n        return \"Not!!\"", "def automorphic(n):\n    list = [num for num in str(n**2)]\n    if str(n) in \"\".join(list[-len(str(n)):]):\n        return \"Automorphic\"\n    else:\n        return \"Not!!\"", "def automorphic(n):\n    new_n = n**2\n    n = str(n)\n    new_n = str(new_n)\n    if new_n[-len(n):] == n:\n        return \"Automorphic\"\n    else:\n        return \"Not!!\"", "def automorphic(n):\n    X = (n**2)-n\n    return \"Automorphic\" if X%(10**len(str(n)))==0 else \"Not!!\"", "def automorphic(number):\n    num = number\n    squ = num ** 2\n\n    str_num = str(num)\n    str_squ = str(squ)\n\n    len_num = len(str_num)\n    len_squ = len(str_squ)\n\n\n    i = len_squ - len_num\n    j = 0\n    return_value = 0\n    for i in range( (len_squ-len_num), len_squ):\n        if str_num[j] != str_squ[i]:\n            return_value +=1\n        i += 1\n        j += 1\n    if return_value == 0:\n        return \"Automorphic\"\n    else:\n        return \"Not!!\"", "def automorphic(n):\n    return \"Automorphic\" if int(str((n*n)-n)[-len(str(n)):])==0 else \"Not!!\"", "def automorphic(n):\n    square = str(n*n)\n    convertedN = len(str(n))\n    return 'Automorphic' if square[-convertedN::]==str(n) else 'Not!!'", "def automorphic(n):\n    kvad=n**2\n    m=[]\n\n    stroki=str(n)\n\n    stroka=str(kvad)\n    mass=list(stroka)\n\n    leni=len(stroka)\n    leni2=len(stroki)\n\n\n    mass = list(reversed(mass))\n\n\n\n    while leni != leni2:\n            leni = leni - 1\n            mass.pop()\n    mass=list(reversed(mass))\n    b=str(n)\n    b=list(b)\n    if b==mass:\n        return(\"Automorphic\")\n    else:\n        return(\"Not!!\")", "def automorphic(n):\n    suka=str(n)\n    print(suka,\" SUKA\", len(suka))\n    \n    blyat=str(n**2)\n    print(blyat,\" BLYAT\", blyat[-len(suka):])\n    if suka == blyat[-len(suka):]:\n        print(\"YES\")\n        return \"Automorphic\"\n    else:\n        print(\"Not\")\n        return \"Not!!\"", "def automorphic(n):\n    i = n\n    d = 1\n    while i >= 1:\n        d *= 10\n        i /= 10\n    if n == (n * n) % d:\n            return \"Automorphic\"\n    return \"Not!!\"", "def automorphic(n):\n    squared_number = n ** 2\n    if str(squared_number)[-len(str(n)):] == str(n): return \"Automorphic\"\n    else: return \"Not!!\"", "def automorphic(n):\n    x = n ** 2\n    c = len(str(x))\n    for i in str(n)[::-1]:\n        if i != str(x)[c - 1]:\n            return \"Not!!\"\n        c -= 1\n    return \"Automorphic\"", "automorphic = lambda n:(\"Automorphic\",\"Not!!\")[n!=int(str(n*n)[-len(str(n)):])]", "def automorphic(n):\n    squared = str(n**2)\n    n = str(n)\n    if squared[-len(n):] == n:\n        return \"Automorphic\"\n    return \"Not!!\"", "def automorphic(n):\n\n    if str(n**2)[-len(str(n))::]==str(n): \n        return \"Automorphic\"\n    return \"Not!!\"\n", "def automorphic(n):\n    return \"Automorphic\" if f\"{n * n}\".endswith(f\"{n}\") else \"Not!!\"", "automorphic = lambda n: \"Automorphic\" if n == int(str(n ** 2)[-len(str(n)):]) else \"Not!!\"\n# inspired from JavaScript best solution\n", "def automorphic(n):\n    a = ([int(x) for x in str(n)])\n    b = ([int(x) for x in str(n*n)])\n    for i in range(1, len(a)+1):\n        if a[len(a) - i] != b[len(b) - i]:\n            return \"Not!!\"\n    return \"Automorphic\"", "def automorphic(n):\n    ns = str(n)\n    nsq = str(n**2)\n    return \"Automorphic\" if nsq[-len(ns):] == ns else \"Not!!\"", "def automorphic(n):\n    number = str(n**2)[-len(str(n)):]\n    return \"Automorphic\" if number == str(n) else \"Not!!\"\n", "def automorphic(n:int)->str:\n    return \"Automorphic\" if int(str(n**2)[-len(str(n)):])==n else \"Not!!\"", "def automorphic(n):\n    #your code here\n    strnum = str(n)\n    lenstr = len(strnum)\n    strnumsqr = str((n*n))\n    if strnumsqr.endswith(strnum):\n        return \"Automorphic\"\n    else:\n        return \"Not!!\"", "def automorphic(n):\n    return ( \"Not!!\", \"Automorphic\")[int( str(n**2)[-len( str(n) ):] ) == n]", "def automorphic(n):\n    pow_n = n**2\n    result = str(pow_n)[-len(str(n)):]\n\n    return \"Automorphic\" if int(result) == n else \"Not!!\"", "def automorphic(n):\n    num=list(map(int, str(n**2)))\n    num=num[::-1]\n    num2=list(map(int, str(n)))\n    num2=num2[::-1]\n    for i in range(len(num2)):    \n        if num2[i]==num[i]:\n            continue\n        else:\n            return \"Not!!\"\n    return \"Automorphic\"", "def automorphic(n):\n    n1 = len(str(n))\n    sqr = str(n**2)\n    if int(sqr[-n1: len(sqr)])==n:\n        return 'Automorphic'\n    else:\n        return 'Not!!'\n        \n    # easy way how to slice\n    \n", "import re\n\ndef automorphic(n):\n    return 'Automorphic' if str(n) == str(n**2)[-len(str(n)):] else 'Not!!'", "import re\ndef automorphic(n):\n    reg = re.compile(r'.*%s$' % n)\n    if reg.search(str(n * n)) != None:\n        return \"Automorphic\"\n    return \"Not!!\"", "def automorphic(n):\n    \n    sq = n * n\n    \n    if str(sq).endswith(str(n)):\n        return \"Automorphic\"\n        \n    else:\n        return \"Not!!\""]