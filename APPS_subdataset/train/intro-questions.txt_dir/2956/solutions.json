["def encode(stg):\n    return \"\".join(digit * 3 for char in stg for digit in f\"{ord(char):08b}\")\n\n\ndef decode(binary):\n    reduced = (get_digit(triplet) for triplet in chunks(binary, 3))\n    return \"\".join(get_char(byte) for byte in chunks(\"\".join(reduced), 8))\n\n\ndef chunks(seq, size):\n    return (seq[i:i+size] for i in range(0, len(seq), size))\n\n        \ndef get_digit(triplet):\n    return max(triplet, key=triplet.count)\n\n\ndef get_char(byte):\n    return chr(int(byte, 2))", "def encode(uncoded):\n    encoded = ''.join(''.join(b * 3 for b in bin(ord(c))[2:].zfill(8)) for c in uncoded)\n    return encoded\n\ndef decode(encoded):\n    patches = {'000':'0','001':'0','010':'0','100':'0','011':'1','101':'1','110':'1','111':'1'}\n    patched = ''.join(patches[encoded[i:i + 3]] for i in range(0, len(encoded), 3))\n    decoded = ''.join(chr(int(patched[i:i + 8], 2)) for i in range(0, len(patched), 8))\n    return decoded", "def encode(string):\n    return ''.join(map('{:08b}'.format, string.encode())).replace('0', '000').replace('1', '111')\n\ndef decode(bits):\n    bytes_ = ('01'['11' in a+b+c+a] for a,b,c in zip(* [iter(bits)] * 3))\n    return bytes(int(''.join(b), 2) for b in zip(* [iter(bytes_)] * 8)).decode()", "def encode(string):\n    values = \"\".join(format(x, \"08b\") for x in map(ord, string))\n    return values.replace(\"0\", \"000\").replace(\"1\", \"111\")\n\n\ndef decode(bits):\n    bs = \"\".join(\"0\" if xs.count(\"0\") >= 2 else \"1\" for xs in zip(*[iter(bits)] * 3))\n    return \"\".join(chr(int(\"\".join(b), 2)) for b in zip(*[iter(bs)] * 8))", "def encode(string):\n    bits = \"\"\n    for i in string:\n        bits += '{0:08b}'.format(ord(i))\n        \n    return bits.replace('1', '111').replace('0', '000')\n\ndef decode(bits):\n    x = 3\n    res=[bits[y-x:y] for y in range(x, len(bits)+x,x)]\n    \n    decoded = \"\"\n    for i in res:\n        sorti = sorted(i)\n        decoded += sorti[1]\n            \n    x = 8\n    bin=[decoded[y-x:y] for y in range(x, len(decoded)+x,x)]\n    \n    return \"\".join([chr(int(x, 2)) for x in bin])", "def encode(string):\n    return ''.join([(i*3) for i in ''.join([(bin(i)[2:]).zfill(8) for i in [ord(i) for i in string]])])\n\ndef decode(bits):\n    three = [i for i in bits]\n    for i in range(3,len(bits)//3*4,4): three.insert(i,' ')\n    three = ''.join(three).split()\n    binar = ['0' if i.count('0')>i.count('1') else '1' for i in three]\n    for i in range (8,len(binar)//8*9,9): binar.insert(i,' ')\n    binar = ''.join(binar).split()\n    asci = [int(i,2) for i in binar]\n    string = ''.join([chr(i) for i in asci])\n    return string", "def encode(string):\n    ASCII = [ord(c) for c in string]\n    #print(ASCII)\n    BIN = [format(i, '08b') for i in ASCII]\n    #print(BIN)\n    bits = ''.join([BIN[i].replace(\"1\", \"111\").replace(\"0\", \"000\") for i in range(0,len(BIN))])\n    return bits\n\ndef decode(bits):\n    a = [list(bits[i:i+3]) for i in range(0, len(bits), 3)]\n    b = [int(a[i][j]) for i in range(0, len(a)) for j in range(0,3)]\n    c = [list(b[i:i+3]) for i in range(0, len(bits), 3)]\n    #d = [sum(c[i]) for i in range(0, len(bits)//3)]\n    d = []\n    for i in  range(0, len(bits)//3):\n        if sum(c[i]) >= 2:\n            d.append('1')\n        else:\n            d.append('0')\n    e = ''.join(d)\n    n = int(e, 2)\n    return n.to_bytes((n.bit_length() + 7) // 8, 'big').decode()", "def encode(string):\n    bits = ''.join([format(i, '#010b').replace('0b', '') for i in [ord(i) for i in string]])\n    return ''.join([i * 3 for i in bits])\n\ndef decode(bits):\n    parts = [(bits[i:i+3]) for i in range(0, len(bits), 3)]\n    bits = ''.join(['1' if i.count('1') > i.count('0') else '0' for i in parts])\n    return ''.join([chr(int(bits[i:i+8], 2)) for i in range(0, len(bits), 8)])", "def packets(it, n):\n    for i in range(0, len(it), n):\n        yield it[i:i+n]\n\ndef encode(string):\n    return ''.join(x*3 for c in string for x in f\"{ord(c):08b}\")\n\ndef decode(bits):\n    tmp = ''.join(s[0] if s[0] in s[1:] else s[1] for s in packets(bits, 3))\n    return ''.join(chr(int(x, 2)) for x in packets(tmp, 8))", "def encode(string):\n    ascii_bits = []\n    for char in string:\n        ascii_bits.append(f'{ord(char):08b}'.replace('0', '000').replace('1', '111'))\n        \n    return \"\".join(ascii_bits)\n\ndef decode(bits):\n    chunked_bits = []\n    for i in range(0, len(bits), 3):\n        chunked_bits.append(bits[i:i+3])\n    dechunked_bits = []\n\n    for bit in chunked_bits:\n        if bit.count('1') >= 2:\n            dechunked_bits.append('1')\n        else:\n            dechunked_bits.append('0')\n            \n    dechunked_bits = \"\".join(dechunked_bits)\n    converted_ascii = []\n\n    for j in range(0, len(dechunked_bits), 8):\n        converted_ascii.append(chr(int(dechunked_bits[j:j+8], 2)))\n        \n    converted_ascii = \"\".join(converted_ascii)\n    print(converted_ascii)\n            \n    return converted_ascii"]