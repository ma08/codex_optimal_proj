["def validPhoneNumber(phoneNumber):\n    import re\n    return bool(re.match(r\"^(\\([0-9]+\\))? [0-9]+-[0-9]+$\", phoneNumber))", "# This is actually quite a bit more complicated in real life\n# I'd use https://github.com/googlei18n/libphonenumber\nimport re\n\nprog = re.compile('^\\(\\d{3}\\) \\d{3}-\\d{4}$')\n\ndef validPhoneNumber(phone_number):\n    return prog.match(phone_number) is not None", "def validPhoneNumber(phoneNumber):\n    number = ''\n    template = '(xxx) xxx-xxxx'\n    for l in phoneNumber:\n        if l.isdigit():\n            number += 'x'\n        else:\n            number += l\n    \n    return number == template\n\n", "validPhoneNumber = lambda x: bool(__import__('re').match('\\(\\d{3}\\) \\d{3}-\\d{4}$', x))", "import re\n\ndef validPhoneNumber(phoneNumber):\n    return any(re.findall(\"^\\([0-9]{3}\\)\\s[0-9]{3}-[0-9]{4}$\", phoneNumber))", "import re\ndef validPhoneNumber(phoneNumber):\n    if re.match('^\\([0-9]{3}\\) [0-9]{3}-[0-9]{4}$',phoneNumber):\n        return True\n    return False", "import re\n\ndef validPhoneNumber(phoneNumber):\n    pattern = \"^\\(\\d{3,3}\\) \\d{3,3}-\\d{4,4}$\"\n    compiled_pattern = re.compile(pattern)\n    return True if re.match(compiled_pattern, phoneNumber) else False", "import re\n\nnums = '1234567890'\n\ndef validPhoneNumber(pn):\n    if len(pn) != len(\"(123) 456-7890\"):\n        return False  \n    elif pn[0] != '(':\n        return False\n    elif pn[1] not in nums or pn[2] not in nums or pn[3] not in nums:\n        return False\n    elif pn[4] != ')':\n        return False\n    elif pn[5] != ' ':\n        return False\n    elif pn[6] not in nums or pn[7] not in nums or pn[8] not in nums:\n        return False\n    elif pn[9] != '-':\n        return False\n    elif pn[10] not in nums or pn[11] not in nums or pn[12] not in nums or pn[13] not in nums:\n        return False\n    else:\n        return True", "def validPhoneNumber(s):\n    if s.count(' ') == s.count('-') == 1 and len(s) == 14:\n        a = s.replace('(','').replace(')','').replace('-',' ')\n        b = a.split()\n        return [len(x) for x in b] == [3,3,4]\n    return False", "import re\ndef validPhoneNumber(num):\n    return bool(re.match(\"^[(][0-9]{3}[)] [0-9]{3}-[0-9]{4}$\", num))"]