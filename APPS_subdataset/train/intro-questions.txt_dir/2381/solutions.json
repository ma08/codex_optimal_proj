["for i in range(int(input())):\n    s='R' + input() + 'R'\n    prev=0\n    ma=-1\n    for i in range(1,len(s)):\n        if s[i]=='R':\n            ma=max(ma,i-prev)\n            prev=i\n    print(ma)        \n        \n", "#!/usr/bin/env python3\nimport sys\ninput = sys.stdin.readline\n\nt = int(input())\nfor _ in range(t):\n    s = input().rstrip() + \"#\"\n    max_l = 0\n    seq_l = 0\n    for ch in s:\n        if ch == \"L\":\n            seq_l += 1\n        else:\n            max_l = max(max_l, seq_l)\n            seq_l = 0\n    print(max_l + 1)", "def main():\n    import sys\n    input = sys.stdin.readline\n\n    for _ in range(int(input())):\n        S = input().rstrip('\\n')\n        cnt = 0\n        ans = 1\n        for s in S:\n            if s == 'L':\n                cnt += 1\n                ans = max(ans, cnt+1)\n            else:\n                cnt = 0\n        print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "from bisect import bisect_left, bisect_right\n\n\ndef go():\n    # n = int(input())\n    # a = list(map(int, input().split()))\n    s= input()\n    prev=-1\n    mx=0\n    for i, aa in enumerate(s):\n        if aa=='R':\n            mx=max(mx,i-prev)\n            prev=i\n    return max(mx,len(s)-prev)\n\nt = int(input())\nfor _ in range(t):\n    print(go())\n", "t = int(input())\nfor i in range(t):\n    s = input() + \"R\"\n    mx = -float('inf')\n    cur = 0\n    while s.find('R', cur) != -1:\n        nxt = s.find('R', cur)\n        d = nxt - cur\n        if d > mx:\n            mx = d\n        cur = nxt + 1\n    print(mx + 1)\n", "t = int(input())\nwhile t!=0:\n    t-=1\n    s=input()\n    pos = 0\n    ans = 0\n    for i in range(len(s)):\n        if s[i] == 'R':\n            ans = max(ans, i-pos+1)\n            pos = i+1\n    ans = max(ans, len(s)+1-pos)\n    print(ans)\n", "from heapq import heappush,heappop,heapify\nfrom collections import deque,defaultdict,Counter\nfrom itertools import permutations,combinations,groupby\nimport functools \nimport sys\nimport bisect\nimport string\nimport math\nimport time\nimport random\ndef Golf():*a,=map(int,open(0))\ndef I():return int(input())\ndef S_():return input()\ndef IS():return input().split()\ndef LS():return [i for i in input().split()]\ndef LI():return [int(i) for i in input().split()]\ndef LI_():return [int(i)-1 for i in input().split()]\ndef NI(n):return [int(input()) for i in range(n)]\ndef NI_(n):return [int(input())-1 for i in range(n)]\ndef StoLI():return [ord(i)-97 for i in input()]\ndef ItoS(n):return chr(n+97)\ndef LtoS(ls):return ''.join([chr(i+97) for i in ls])\ndef GI(V,E,Directed=False,index=0):\n    org_inp=[];g=[[] for i in range(n)]\n    for i in range(E):\n        inp=LI();org_inp.append(inp)\n        if index==0:inp[0]-=1;inp[1]-=1\n        if len(inp)==2:\n            a,b=inp;g[a].append(b)\n            if not Directed:g[b].append(a)\n        elif len(inp)==3:\n            a,b,c=inp;aa=(inp[0],inp[2]);bb=(inp[1],inp[2]);g[a].append(bb)\n            if not Directed:g[b].append(aa)\n    return g,org_inp\ndef GGI(h,w,search=None,replacement_of_found='.',mp_def={'#':1,'.':0}):\n#h,w,g,sg=GGI(h,w,search=['S','G'],replacement_of_found='.',mp_def={'#':1,'.':0}) # sample usage\n    mp=[1]*(w+2);found={}\n    for i in range(h):\n        s=input()\n        for char in search:\n            if char in s:\n                found[char]=((i+1)*(w+2)+s.index(char)+1)\n                mp_def[char]=mp_def[replacement_of_found]\n        mp+=[1]+[mp_def[j] for j in s]+[1]\n    mp+=[1]*(w+2)\n    return h+2,w+2,mp,found\ndef TI(n):return GI(n,n-1)\ndef bit_combination(k,n=2):\n    rt=[]\n    for tb in range(n**k):\n        s=[tb//(n**bt)%n for bt in range(k)]\n        rt+=[s]\n    return rt\ndef show(*inp,end='\\n'):\n    if show_flg:print(*inp,end=end)\n\nYN=['YES','NO'];Yn=['Yes','No']\nmo=10**9+7\ninf=float('inf')\nl_alp=string.ascii_lowercase\n#sys.setrecursionlimit(10**7)\ninput=lambda: sys.stdin.readline().rstrip()\n \ndef ran_input():\n    n=random.randint(4,16)\n    rmin,rmax=1,10\n    a=[random.randint(rmin,rmax) for _ in range(n)]\n    return n,a\n\nshow_flg=False\nshow_flg=True\n\nt=I()\nfor _ in range(t):\n    s=input()+'R'\n    ans=1\n    c=1\n    for i in s:\n        if i=='L':\n            c+=1\n        else:\n            ans=max(ans,c)\n            c=1\n    print(ans)\n\n\n", "from bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nimport heapq\nimport math\nfrom collections import *\nfrom functools import reduce,cmp_to_key\nimport sys\ninput = sys.stdin.readline\n \nM = mod = 10**9 + 7\ndef factors(n):return sorted(set(reduce(list.__add__, ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0))))\ndef inv_mod(n):return pow(n, mod - 2, mod)\n \ndef li():return [int(i) for i in input().rstrip('\\n').split()]\ndef st():return input().rstrip('\\n')\ndef val():return int(input().rstrip('\\n'))\ndef li2():return [i for i in input().rstrip('\\n')]\ndef li3():return [int(i) for i in input().rstrip('\\n')]\n\nfor _ in range(val()):\n    s = st()\n    n = len(s)\n    l = [0 for i in range(n + 2)]\n    d = -1\n    last = n + 1\n    # print(s)\n    for i in range(len(s),0,-1):\n        if s[i-1] == 'R':\n            l[i] = last - i\n            last = i\n            d = max(d,l[i])\n    d = max(d,last - 0)\n    print(d if d > 0 else n + 1)\n        \n", "import sys\ninput = sys.stdin.readline\nfrom collections import Counter\n\nt=int(input())\nfor tests in range(t):\n    S=input().strip()\n\n    NOW=0\n    ANS=0\n    for s in S:\n        if s==\"L\":\n            NOW+=1\n        else:\n            ANS=max(ANS,NOW)\n            NOW=0\n    ANS=max(ANS,NOW)\n    print(ANS+1)\n", "\nt = int(input())\n\nfor loop in range(t):\n\n    s = input()\n\n    ans = 0\n\n    now = 0\n    for i in s:\n\n        if i == \"R\":\n            now = 0\n        else:\n            now += 1\n            ans = max(ans,now)\n\n    print(ans + 1)\n", "def one():\n    return int(input())\n\n\ndef more():\n    return list(map(int, input().split()))\n\n\nfor _ in range(one()):\n    s = input() + 'R'\n    cur = 0\n    mx = -1\n    for ind, i in enumerate(s):\n        if i == 'R':\n            d = ind + 1 - cur\n            mx = max(mx, d)\n            cur = ind + 1\n\n    print(mx)\n", "t = int(input())\nwhile(t):\n    t -= 1\n    a = input()\n    n = len(a)\n    inds = [-1]\n    for i in range(n):\n        if(a[i] == 'R'):\n            inds.append(i)\n    inds.append(n)\n    ans = 0\n    for i in range(1, len(inds)):\n        ans = max(ans, inds[i]-inds[i-1])\n    print(ans)", "q = int(input())\nfor i in range(q):\n    s = list(input()) + ['R']\n    ans = 0\n    cur = 0\n    for x in s:\n        if x == 'L': cur += 1\n        else:\n            if ans < cur: ans = cur\n            cur = 0\n    print(ans + 1)", "import sys\ninput = sys.stdin.readline\n\nQ = int(input())\nQuery = [list(input().rstrip()) for _ in range(Q)]\n\n\nfor S in Query:\n    tmp = 0\n    ans = 0\n    for i, s in enumerate(S):\n        if s == \"L\":\n            tmp += 1\n        else:\n            ans = max(tmp+1, ans)\n            tmp = 0\n    ans = max(tmp+1, ans)\n    print(ans)", "import sys\n\ninput = sys.stdin.readline\n\nq = int(input())\n\nfor _ in range(q):\n    S = 'R' + input().rstrip() + 'R'\n    ans = -1\n    prv = 0\n    for i in range(1, len(S)):\n        if S[i] == 'R':\n            diff = i - prv\n            ans = max(ans, diff)\n            prv = i\n    print(ans)", "t=int(input())\nwhile t:\n    s=input()\n    ans=0\n    temp=0\n    for i in range(len(s)):\n        if(s[i]=='L'):\n            temp+=1\n        else:\n            ans=max(ans,temp+1)\n            temp=0\n    ans=max(ans,temp+1)  \n    print(ans)\n    t-=1", " \nimport sys\ninput=sys.stdin.readline\nfor j in range(int(input())):\n    a = input()\n    a = a + 'R'\n    ans = 1\n    count =0\n    for j in a:\n        if(j=='L'):\n            count= count + 1\n        else:\n            count = count + 1\n            if(count>ans):\n                ans = count\n            count = 0\n    print(ans)\n            \n", "def run_length_compress(string):\n    string = string + \"@\"\n    n = len(string)\n    begin = 0\n    end = 1\n    cnt = 1\n    ans = []\n    while True:\n        if end >= n:\n            break\n        if string[begin] == string[end]:\n            end += 1\n            cnt += 1\n        else:\n            ans.append((cnt, string[begin]))\n            begin = end\n            end = begin + 1\n            cnt = 1\n\n    return ans\n\n  \nimport sys\ninput = sys.stdin.readline\n\n\nt = int(input())\nfor i in range(t):\n    s = input()\n    s = run_length_compress(s[0:-1])\n    ans = 1\n    for num, char in s:\n        if char == \"L\":\n            ans = max(num + 1, ans)\n    print(ans)"]