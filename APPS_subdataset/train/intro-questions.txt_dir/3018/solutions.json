["from re import compile, finditer\n\nOMIT = {'a', 'the', 'on', 'at', 'of', 'upon', 'in', 'as'}\nREGEX = compile(r'[a-z]+')\n\n\ndef word_count(s):\n    return sum(a.group() not in OMIT for a in finditer(REGEX, s.lower()))\n", "def word_count(s):\n    return sum(1 for w in \"\".join(c if c.isalpha() else \" \" for c in s.lower()).split() if w not in [\"a\", \"the\", \"on\", \"at\", \"of\", \"upon\", \"in\", \"as\"])", "from re import sub\ndef word_count(s):\n    alpha = sub(\"(^|\\s)(a|the|on|at|of|in|as)(?=(\\s|$))\", ' ', sub(\"[^a-z]\", ' ', s.lower().replace('\u00e6', 'ae')))\n    return len(alpha.split())", "from re import split\n\ndef word_count(s):\n    return len( [ w for w in split(\"[^a-z]+\", s.lower()) if not w in [\"a\",\"the\",\"on\",\"at\",\"of\",\"upon\",\"in\",\"as\",\"\"] ] )", "import re\n\ndef word_count(s):\n    words = re.findall(r'[a-z]+', s, re.I)\n    return sum(not re.match(r'(a|the|on|at|of|upon|in|as)$', w, re.I) for w in words)", "import re\n\nexcluded = re.compile(r'\\b(a[ts]?|the|o[nf]|upon|in)\\b')\nnon_char = re.compile(r'[^a-z]+')\n\ndef word_count(s):\n    return len(re.sub(excluded, '', re.sub(non_char, ' ', s.lower())).split())", "from re import findall\n\ndef word_count(s):\n    forbidden = ['a', 'on', 'the', 'at', 'of', 'upon', 'in', 'as']\n    words = ' '.join(findall(r'[a-z]+', s.lower()))\n    return len([w for w in words.split() if w not in forbidden])", "import re\nfrom collections import Counter\n\nEXCLUDE = {\"a\", \"the\", \"on\", \"at\", \"of\", \"upon\", \"in\", \"as\"}\n\ndef word_count(s):\n    return sum(v for k, v in Counter(re.findall('(?i)[a-z]+', s.lower())).items() if k not in EXCLUDE)", "import re\n\nFORBIDDENS = set(\"a the on at of upon in as\".split())\n\ndef word_count(s):\n    return sum(m[0] not in FORBIDDENS for m in re.finditer(r'[a-z]+',s.lower()))"]