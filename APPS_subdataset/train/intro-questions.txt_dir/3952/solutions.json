["from math import log\n\ndef half_life(N0, N, t):\n    return t / log(N0/N, 2)", "from math import log2\n\ndef half_life(ini, rem, t):\n    return t / log2(ini / rem)", "from math import log\n\n\ndef half_life(initial, remaining, time):\n    return time*log(2.0)/log(initial/remaining)", "from math import log2\n\ndef half_life(initial, remaining, time):\n    return time / log2(initial / remaining)", "from math import log2\n\ndef half_life(initial, remaining, time):\n    return -time/log2(remaining/initial)", "import math\ndef half_life(q0, q1, t):\n   return 1/(math.log(q0/q1)/(t*math.log(2)))", "from math import log; half_life=lambda i,r,t: t/log(i/r,2)", "import math\ndef half_life(initial, remaining, time):\n    return time / math.log2( initial / remaining )", "from math import *\n\ndef half_life(initial, remaining, time):\n    return time*log(.5) / log(remaining/initial)", "from math import log2 as lg\n\ndef half_life(initial, remaining, time):\n    return time / lg(initial / remaining)"]