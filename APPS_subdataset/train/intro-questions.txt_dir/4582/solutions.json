["group=lambda arr: [[n]*arr.count(n) for n in sorted(set(arr), key=arr.index)]", "from collections import Counter, OrderedDict\n\nclass OrderedCounter(Counter, OrderedDict): \n    pass\n\ndef group(arr):\n    return [[k] * v for k, v in OrderedCounter(arr).items()]", "from collections import OrderedDict\n\ndef group(arr):\n    d = OrderedDict()\n    for x in arr:\n        d.setdefault(x, []).append(x)\n    return list(d.values())", "def group(arr):\n    return [[n]*arr.count(n) for i, n in enumerate(arr) if arr.index(n) == i]", "def group(arr):\n    st, res = set(arr), []\n    for n in arr:\n        if n in st:\n            st.remove(n)\n            res.append([n] * arr.count(n))\n    return res", "def group(arr):\n    #your code here\n    lst = [[i]*arr.count(i) for i in arr]\n    re = []\n    for n in lst:\n        if n not in re:\n            re.append(n)\n    return re", "from collections import Counter\n\ndef group(a):\n    return sorted([[k]*v for k, v in Counter(a).items()], key=lambda k: a.index(k[0]))", "from collections import Counter\n\ndef group(arr):\n    return [[k] * n for k, n in Counter(arr).items()]", "def group(arr):\n    answer, brac, counter, already = [], [], 0, []\n    for i in arr:\n        if arr.count(i) > 1 and i not in already:\n            already.append(i)\n            while counter < arr.count(i):\n                counter += 1\n                brac.append(i)\n                if counter == arr.count(i):\n                    answer.append(brac)\n                    brac = []\n                    counter = 0\n                    break\n        elif arr.count(i) == 1:\n            answer.append([i])\n    return answer", "def group(lst):\n    return [[n] * lst.count(n) for n in sorted(set(lst), key=lst.index)]"]