["def find_missing(sequence):\n    t = sequence\n    return (t[0] + t[-1]) * (len(t) + 1) / 2 - sum(t)\n", "def find_missing(sequence):\n    interval = (sequence[-1] - sequence[0])/len(sequence)\n    for previous, item in enumerate(sequence[1:]):\n        if item - sequence[previous] != interval:\n            return item - interval\n", "def find_missing(sequence):\n    return (sequence[-1] + sequence[0]) * (len(sequence) + 1) / 2 - sum(sequence)\n", "def find_missing(nums):\n    a, b, c = nums[:3]\n    diff = min(b - a, c - b, key=abs)\n    for d in nums:\n        if d != a:\n            return a\n        a += diff\n", "def find_missing(sequence):\n    totalGap=sequence[len(sequence)-1]-sequence[0]\n    eachGap = totalGap/len(sequence)\n    for i in range(len(sequence)-1):\n        if sequence[i]+eachGap != sequence[i+1]:\n            return sequence[i]+eachGap", "def find_missing(s):\n       return (len(s)+1)*(s[0]+s[len(s)-1])/2-sum(s)       \n    \n\n", "def find_missing(se):\n    step = (se[-1] - se[0])/len(se)\n    ls = [se[0] + i*step for i in range(0, len(se)+1)]\n    \n    return sum(ls) - sum(se)", "def find_missing(sequence):\n    \"\"\"Identify the missing element in an arithmetic expression\n    following a constant rule\n    \"\"\"\n    # A linear list of differences between each element in sequence.\n    dif = [sequence[x + 1] - sequence[x] for x in range(len(sequence) - 1)]\n\n    # An array of individual elements and their frequency in dif; [[element, frequency],]\n    dif_freq = [[x, dif.count(x)] for x in set(dif)]\n\n    # Sorting by ascending frequency\n    sorted_dif_freq = sorted(dif_freq, key=lambda x: x[1])\n\n    outlier = sorted_dif_freq[0][0]\n    constant = sorted_dif_freq[-1][0]\n\n    return sequence[dif.index(outlier)] + constant\n", "def find_missing(sequence):\n    s = set(sequence)\n    m1, m2 = min(s), max(s)\n    for i in range(m1, m2 + 1, (m2 - m1) // len(s)):\n        if i not in s:\n            return i", "find_missing=lambda s:(s[0]+s[-1])*(len(s)+1)/2-sum(s)"]