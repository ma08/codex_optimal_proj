["L = (\n     (' #### ', '  ##  ', ' #### ', ' #### ', '##  ##', '######', '   ## ', '######', ' #### ', ' #### ').__getitem__,\n     ('##  ##', ' ###  ', '##  ##', '##  ##', '##  ##', '##    ', '  ##  ', '##  ##', '##  ##', '##  ##').__getitem__,\n     ('##  ##', '# ##  ', '   ## ', '   ## ', '##  ##', '##### ', ' #### ', '   ## ', ' #### ', '##  ##').__getitem__,\n     ('##  ##', '  ##  ', '  ##  ', '   ## ', ' #####', '    ##', '##  ##', '  ##  ', ' #### ', ' #### ').__getitem__,\n     ('##  ##', '  ##  ', ' ##   ', '##  ##', '    ##', '    ##', '##  ##', ' ##   ', '##  ##', '  ##  ').__getitem__,\n     (' #### ', '######', '######', ' #### ', '    ##', '##### ', ' #### ', ' ##   ', ' #### ', ' ##   ').__getitem__\n)\n\ndef print_number(number, char): \n    s1, s2, l = '#'*40, f\"#{' '*38}#\", list(map(int, f\"{number:05}\"))\n    return '\\n'.join([s1, s2] + [f\"#  {' '.join(map(L[i], l))}  #\" for i in range(6)] + [s2, s1]).replace('#', char)", "# Build digit templates from the given examples in the instructions\nexample_text = r\"\"\"\n//*    **    ****   ****  **  ** ******  *\\n\n//*   ***   **  ** **  ** **  ** **      *\\n\n//*  * **      **     **  **  ** *****   *\\n\n//*    **     **      **   *****     **  *\\n\n//*    **    **    **  **     **     **  *\\n\n//*  ****** ******  ****      ** *****   *\\n\n//@     @@  @@@@@@  @@@@   @@@@   @@@@   @\\n\n//@    @@   @@  @@ @@  @@ @@  @@ @@  @@  @\\n\n//@   @@@@     @@   @@@@  @@  @@ @@  @@  @\\n\n//@  @@  @@   @@    @@@@   @@@@  @@  @@  @\\n\n//@  @@  @@  @@    @@  @@   @@   @@  @@  @\\n\n//@   @@@@   @@     @@@@   @@     @@@@   @\\n\n\"\"\"\n# Clean/standardise the source text\nexample_text = [\n    l[5:-4] \n    for l in example_text.replace('@', '*').split('\\n') \n    if l.strip()\n]\n# Extract the 7x6 super digits\nSUPER_DIGITS = []\nfor super_line in [example_text[:6], example_text[6:]]:\n    for i in range(5):\n        SUPER_DIGITS.append([line[i * 7:(i + 1) * 7] for line in super_line])\n# Move the 0 from the end to start\nSUPER_DIGITS.insert(0, SUPER_DIGITS.pop(-1))\n\n\ndef print_number(number, char): \n    # Pad to 5 digits\n    digits = str(number).rjust(5, '0')\n    \n    # Add the digits (each one has a trailing space)\n    lines = ['' for _ in range(6)]\n    for d in digits:\n        for i in range(6):\n            lines[i] += SUPER_DIGITS[int(d)][i]\n    \n    # Justify\n    lines = [f'  {l} ' for l in lines]\n    width = len(lines[0])\n    # Add header\n    lines.insert(0, '*' * width)\n    lines.insert(1, ' ' * width)\n    # Add footer\n    lines.append(' ' * width)\n    lines.append('*' * width)\n    # Add border\n    lines = [f'*{l}*' for l in lines]\n    # Concatenate and substitute\n    return '\\n'.join(lines).replace('*', char)\n", "def print_number(number, char):     \n    separator_arr = [' ' for i in range(10)]\n    separator_arr[0] = char\n    separator_arr[9] = char\n    border_arr = [char for i in range(10)]    \n    char_2 = char * 2\n    char_3 = char * 3\n    char_4 = char * 4\n    char_5 = char * 5\n    char_6 = char * 6\n    space_2 = ' ' * 2\n    space_3 = ' ' * 3\n    space_4 = ' ' * 4\n    space_6 = ' ' * 6\n    sccccs = f' {char_4} '\n    ccsscc = f'{char_2}{space_2}{char_2}'\n    ssccss = f'{space_2}{char_2}{space_2}'\n    sssccs = f'{space_3}{char_2} '\n    sccsss = f' {char_2}{space_3}'\n    sssscc = f'{space_4}{char_2}'\n    ccssss = f'{char_2}{space_4}'\n    cccccs = f'{char_5} '\n    sssccs = f'{space_3}{char_2} '\n    digits = {\n        '0' : [char_6, space_6, sccccs,  ccsscc, ccsscc, \n               ccsscc, ccsscc, sccccs, space_6, char_6],\n        '1' : [char_6, space_6, ssccss,  f' {char_3}{space_2}', f'{char} {char_2}{space_2}', \n               ssccss, ssccss, char_6, space_6, char_6],\n        '2' : [char_6, space_6, sccccs,  ccsscc, sssccs, \n               ssccss, sccsss, char_6, space_6, char_6],\n        '3' : [char_6, space_6, sccccs,  ccsscc, sssccs, \n               sssccs, ccsscc, sccccs, space_6, char_6],\n        '4' : [char_6, space_6, ccsscc,  ccsscc, ccsscc, \n               f' {char_5}', sssscc, sssscc, space_6, char_6],\n        '5' : [char_6, space_6, char_6,  ccssss, cccccs, \n               sssscc, sssscc, cccccs, space_6, char_6],\n        '6' : [char_6, space_6, sssccs,  ssccss, sccccs, \n               ccsscc, ccsscc, sccccs, space_6, char_6],\n        '7' : [char_6, space_6, char_6, ccsscc, sssccs, \n               ssccss, sccsss, sccsss, space_6, char_6],\n        '8' : [char_6, space_6, sccccs,  ccsscc, sccccs, \n               sccccs, ccsscc, sccccs, space_6, char_6],\n        '9' : [char_6, space_6, sccccs, ccsscc, ccsscc, \n               sccccs, ssccss, sccsss, space_6, char_6],        \n    }\n    \n    def normalize(n):\n        if n > 9999:\n            return str(n)\n        else:\n            return str(n).rjust(5, '0')\n    num = normalize(number)\n    final_result = []\n    for i in range(10):\n        final_result.append(f'{border_arr[i]}{separator_arr[i]}{separator_arr[i]}{digits[num[0]][i]}{separator_arr[i]}'\n        f'{digits[num[1]][i]}{separator_arr[i]}{digits[num[2]][i]}{separator_arr[i]}' \n        f'{digits[num[3]][i]}{separator_arr[i]}{digits[num[4]][i]}{separator_arr[i]}{separator_arr[i]}{border_arr[i]}')\n\n    return '\\n'.join(final_result)\n    \n    \n        \n        \n        \n", "import sys\ndef print_number(num, char): \n    num = str(num).rjust(5,'0')\n    A = [[\" **** \",\"  **  \",\" **** \",\" **** \",\"**  **\",\"******\",\"   ** \",\"******\",\" **** \",\" **** \"],\n         [\"**  **\",\" ***  \",\"**  **\",\"**  **\",\"**  **\",\"**    \",\"  **  \",\"**  **\",\"**  **\",\"**  **\"],\n         [\"**  **\",\"* **  \",\"   ** \",\"   ** \",\"**  **\",\"***** \",\" **** \",\"   ** \",\" **** \",\"**  **\"],\n         [\"**  **\",\"  **  \",\"  **  \",\"   ** \",\" *****\",\"    **\",\"**  **\",\"  **  \",\" **** \",\" **** \"],\n         [\"**  **\",\"  **  \",\" **   \",\"**  **\",\"    **\",\"    **\",\"**  **\",\" **   \",\"**  **\",\"  **  \"],\n         [\" **** \",\"******\",\"******\",\" **** \",\"    **\",\"***** \",\" **** \",\" **   \",\" **** \",\" **   \"]]\n    Out = '\\n'.join([char*40,char+\" \"*38+char,\"\"])\n    for r in range(6):\n        Out +=char+\"  \"+' '.join(A[r][int(c)].replace(\"*\",char) for c in num)+'  '+char+'\\n'\n    Out += '\\n'.join([char+\" \"*38+char,char*40])\n    return Out\n", "def print_number(number, char): \n    dct = {'1': ['  **  ', ' ***  ', '* **  ', '  **  ', '  **  ', '******'],\n           '2': [' **** ', '**  **', '   ** ', '  **  ', ' **   ', '******'],\n           '3': [' **** ', '**  **', '   ** ', '   ** ', '**  **', ' **** '],\n           '4': ['**  **', '**  **', '**  **', ' *****', '    **', '    **'],\n           '5': ['******', '**    ', '***** ', '    **', '    **', '***** '],\n           '6': ['   ** ', '  **  ', ' **** ', '**  **', '**  **', ' **** '],\n           '7': ['******', '**  **', '   ** ', '  **  ', ' **   ', ' **   '],\n           '8': [' **** ', '**  **', ' **** ', ' **** ', '**  **', ' **** '],\n           '9': [' **** ', '**  **', '**  **', ' **** ', '  **  ', ' **   '],\n           '0': [' **** ', '**  **', '**  **', '**  **', '**  **', ' **** '] }\n    s = str(number).zfill(5)\n    top = [char*40, char + ' '*38 + char]\n    bottom = [char + ' '*38 + char, char*40]\n    middle = []\n    for i in range(6):\n        row = []\n        for dig in s:\n            row.append(dct[dig][i].replace('*', char) + ' ')    \n        middle.append('{0}  {1} {0}'.format(char, ''.join(row)))\n    return '\\n'.join(top + middle + bottom)\n\n        \n", "def print_number(number, char): \n    def str_cif(tupl, sym):\n        rez = ''\n        for i in tupl:\n            if i == 1:\n                rez += sym\n            else:\n                rez += ' '\n        return rez\n    razv  = (((0,1,1,1,1,0),\n              (1,1,0,0,1,1),\n              (1,1,0,0,1,1),\n              (1,1,0,0,1,1),\n              (1,1,0,0,1,1),\n              (0,1,1,1,1,0)),\n             \n             ((0,0,1,1,0,0),\n              (0,1,1,1,0,0),\n              (1,0,1,1,0,0),\n              (0,0,1,1,0,0),\n              (0,0,1,1,0,0),\n              (1,1,1,1,1,1)),\n             \n             ((0,1,1,1,1,0),\n              (1,1,0,0,1,1),\n              (0,0,0,1,1,0),\n              (0,0,1,1,0,0),\n              (0,1,1,0,0,0),\n              (1,1,1,1,1,1)),\n             \n             ((0,1,1,1,1,0),\n              (1,1,0,0,1,1),\n              (0,0,0,1,1,0),\n              (0,0,0,1,1,0),\n              (1,1,0,0,1,1),\n              (0,1,1,1,1,0)),\n             \n             ((1,1,0,0,1,1),\n              (1,1,0,0,1,1),\n              (1,1,0,0,1,1),\n              (0,1,1,1,1,1),\n              (0,0,0,0,1,1),\n              (0,0,0,0,1,1)),\n             \n             ((1,1,1,1,1,1),\n              (1,1,0,0,0,0),\n              (1,1,1,1,1,0),\n              (0,0,0,0,1,1),\n              (0,0,0,0,1,1),\n              (1,1,1,1,1,0)),\n             \n             ((0,0,0,1,1,0),\n              (0,0,1,1,0,0),\n              (0,1,1,1,1,0),\n              (1,1,0,0,1,1),\n              (1,1,0,0,1,1),\n              (0,1,1,1,1,0)),\n             \n             ((1,1,1,1,1,1),\n              (1,1,0,0,1,1),\n              (0,0,0,1,1,0),\n              (0,0,1,1,0,0),\n              (0,1,1,0,0,0),\n              (0,1,1,0,0,0)),\n             \n             ((0,1,1,1,1,0),\n              (1,1,0,0,1,1),\n              (0,1,1,1,1,0),\n              (0,1,1,1,1,0),\n              (1,1,0,0,1,1),\n              (0,1,1,1,1,0)),\n             \n             ((0,1,1,1,1,0),\n              (1,1,0,0,1,1),\n              (1,1,0,0,1,1),\n              (0,1,1,1,1,0),\n              (0,0,1,1,0,0),\n              (0,1,1,0,0,0)))\n    shap = char * 40 + '\\n' + char + ' ' * 38 + char + '\\n'\n    podv =  char + ' ' * 38 + char + '\\n' + char * 40\n    str_number = '0' * (5 - len(str(number))) + str(number)\n    num_prn = [int(i) for i in str_number]\n    body = ''\n    for i in range(6):\n        body += char + '  '\n        for n in num_prn:\n            body += str_cif(razv[n][i], char) + ' '\n        body += ' ' + char + '\\n'\n    return shap + body + podv\n", "L = (\n    (\" .... \", \"..  ..\", \"..  ..\", \"..  ..\", \"..  ..\", \" .... \"),\n    (\"  ..  \", \" ...  \", \". ..  \", \"  ..  \", \"  ..  \", \"......\"),\n    (\" .... \", \"..  ..\", \"   .. \", \"  ..  \", \" ..   \", \"......\"),\n    (\" .... \", \"..  ..\", \"   .. \", \"   .. \", \"..  ..\", \" .... \"),\n    (\"..  ..\", \"..  ..\", \"..  ..\", \" .....\", \"    ..\", \"    ..\"),\n    (\"......\", \"..    \", \"..... \", \"    ..\", \"    ..\", \"..... \"),\n    (\"   .. \", \"  ..  \", \" .... \", \"..  ..\", \"..  ..\", \" .... \"),\n    (\"......\", \"..  ..\", \"   .. \", \"  ..  \", \" ..   \", \" ..   \"),\n    (\" .... \", \"..  ..\", \" .... \", \" .... \", \"..  ..\", \" .... \"),\n    (\" .... \", \"..  ..\", \"..  ..\", \" .... \", \"  ..  \", \" ..   \")\n)\n\ndef print_number(number, char): \n    s1, s2, l = '.'*40, f\".{' '*38}.\", list(map(int, f\"{number:05}\"))\n    return '\\n'.join([s1, s2] + [f\".  {' '.join(L[x][i] for x in l)}  .\" for i in range(6)] + [s2, s1]).replace('.', char)", "def modify(M,n,r,c):\n    if n==0:\n        M[r][c]=' '\n        M[r][c+5]=' '\n        M[r+1][c+2]=' '\n        M[r+1][c+3]=' '\n        M[r+2][c+2]=' '\n        M[r+2][c+3]=' '\n        M[r+3][c+2]=' '\n        M[r+3][c+3]=' '\n        M[r+4][c+2]=' '\n        M[r+4][c+3]=' '\n        M[r+5][c]=' '\n        M[r+5][c+5]=' '\n    if n==1:\n        M[r][c]=' '\n        M[r][c+1]=' '\n        M[r][c+4]=' '\n        M[r][c+5]=' '\n        M[r+1][c]=' '\n        M[r+1][c+4]=' '\n        M[r+1][c+5]=' '\n        M[r+2][c+1]=' '\n        M[r+2][c+4]=' '\n        M[r+2][c+5]=' '\n        M[r+3][c]=' '\n        M[r+3][c+1]=' '\n        M[r+3][c+4]=' '\n        M[r+3][c+5]=' '\n        M[r+4][c]=' '\n        M[r+4][c+1]=' '\n        M[r+4][c+4]=' '\n        M[r+4][c+5]=' '\n    if n==2:\n        M[r][c]=' '\n        M[r][c+5]=' '\n        M[r+1][c+2]=' '\n        M[r+1][c+3]=' '\n        M[r+2][c]=' '\n        M[r+2][c+1]=' '\n        M[r+2][c+2]=' '\n        M[r+2][c+5]=' '\n        M[r+3][c]=' '\n        M[r+3][c+1]=' '\n        M[r+3][c+4]=' '\n        M[r+3][c+5]=' '\n        M[r+4][c]=' '\n        M[r+4][c+3]=' '\n        M[r+4][c+4]=' '\n        M[r+4][c+5]=' '\n    if n==3:\n        M[r][c]=' '\n        M[r][c+5]=' '\n        M[r+1][c+2]=' '\n        M[r+1][c+3]=' '\n        M[r+2][c]=' '\n        M[r+2][c+1]=' '\n        M[r+2][c+2]=' '\n        M[r+2][c+5]=' '\n        M[r+3][c]=' '\n        M[r+3][c+1]=' '\n        M[r+3][c+2]=' '\n        M[r+3][c+5]=' '\n        M[r+4][c+2]=' '\n        M[r+4][c+3]=' '\n        M[r+5][c]=' '\n        M[r+5][c+5]=' '\n    if n==4:\n        M[r][c+2]=' '\n        M[r][c+3]=' '\n        M[r+1][c+2]=' '\n        M[r+1][c+3]=' '\n        M[r+2][c+2]=' '\n        M[r+2][c+3]=' '\n        M[r+3][c]=' '\n        M[r+4][c]=' '\n        M[r+4][c+1]=' '\n        M[r+4][c+2]=' '\n        M[r+4][c+3]=' '\n        M[r+5][c]=' '\n        M[r+5][c+1]=' '\n        M[r+5][c+2]=' '\n        M[r+5][c+3]=' '\n    if n==5:\n        M[r+1][c+2]=' '\n        M[r+1][c+3]=' '\n        M[r+1][c+4]=' '\n        M[r+1][c+5]=' '\n        M[r+2][c+5]=' '\n        M[r+3][c]=' '\n        M[r+3][c+1]=' '\n        M[r+3][c+2]=' '\n        M[r+3][c+3]=' '\n        M[r+4][c]=' '\n        M[r+4][c+1]=' '\n        M[r+4][c+2]=' '\n        M[r+4][c+3]=' '\n        M[r+5][c+5]=' '\n    if n==6:\n        M[r][c]=' '\n        M[r][c+1]=' '\n        M[r][c+2]=' '\n        M[r][c+5]=' '\n        M[r+1][c]=' '\n        M[r+1][c+1]=' '\n        M[r+1][c+4]=' '\n        M[r+1][c+5]=' '\n        M[r+2][c]=' '\n        M[r+2][c+5]=' '\n        M[r+3][c+2]=' '\n        M[r+3][c+3]=' '\n        M[r+4][c+2]=' '\n        M[r+4][c+3]=' '\n        M[r+5][c]=' '\n        M[r+5][c+5]=' '\n    if n==7:\n        M[r+1][c+2]=' '\n        M[r+1][c+3]=' '\n        M[r+2][c]=' '\n        M[r+2][c+1]=' '\n        M[r+2][c+2]=' '\n        M[r+2][c+5]=' '\n        M[r+3][c]=' '\n        M[r+3][c+1]=' '\n        M[r+3][c+4]=' '\n        M[r+3][c+5]=' '\n        M[r+4][c]=' '\n        M[r+4][c+3]=' '\n        M[r+4][c+4]=' '\n        M[r+4][c+5]=' '\n        M[r+5][c]=' '\n        M[r+5][c+3]=' '\n        M[r+5][c+4]=' '\n        M[r+5][c+5]=' '\n    if n==8:\n        M[r][c]=' '\n        M[r][c+5]=' '\n        M[r+1][c+2]=' '\n        M[r+1][c+3]=' '\n        M[r+2][c]=' '\n        M[r+2][c+5]=' '\n        M[r+3][c]=' '\n        M[r+3][c+5]=' '\n        M[r+4][c+2]=' '\n        M[r+4][c+3]=' '\n        M[r+5][c]=' '\n        M[r+5][c+5]=' '\n    if n==9:\n        M[r][c]=' '\n        M[r][c+5]=' '\n        M[r+1][c+2]=' '\n        M[r+1][c+3]=' '\n        M[r+2][c+2]=' '\n        M[r+2][c+3]=' '\n        M[r+3][c]=' '\n        M[r+3][c+5]=' '\n        M[r+4][c]=' '\n        M[r+4][c+1]=' '\n        M[r+4][c+4]=' '\n        M[r+4][c+5]=' '\n        M[r+5][c]=' '\n        M[r+5][c+3]=' '\n        M[r+5][c+4]=' '\n        M[r+5][c+5]=' '\n        \ndef print_number(number, char): \n    M=[[char for _ in range(40)] for _ in range(10)]\n    for i in range(1,39):\n        M[1][i]=' '\n        M[8][i]=' '\n    for i in range(2,8):\n        for j in [1,2,9,16,23,30,37,38]:M[i][j]=' '\n    N=str(number).zfill(5)\n    P=[(2,3),(2,10),(2,17),(2,24),(2,31)]\n    for i in range(5):\n        r,c=P[i]\n        modify(M,int(N[i]),r,c)\n    o=''\n    for e in M:o+=''.join(e)+'\\n'\n    return o[:-1]"]