["def binary_string_to_int(string):\n    return sum((d == '1') * 2**i for i, d in enumerate(string[::-1]))\n\ndef add(a, b):\n    return '{:b}'.format(binary_string_to_int(a) + binary_string_to_int(b))", "from itertools import zip_longest\n\nADDER = {\n    ('0', '0', '0'): ('0', '0'),\n    ('0', '0', '1'): ('1', '0'),\n    ('0', '1', '0'): ('1', '0'),\n    ('0', '1', '1'): ('0', '1'),\n    ('1', '0', '0'): ('1', '0'),\n    ('1', '0', '1'): ('0', '1'),\n    ('1', '1', '0'): ('0', '1'),\n    ('1', '1', '1'): ('1', '1'),\n}\n\n\ndef add(x, y):\n    x = x.lstrip('0')\n    y = y.lstrip('0')\n\n    if not x:\n        return y or '0'\n    elif not y:\n        return x\n\n    sum_digits, carry = [], '0'\n    for x_digit, y_digit in zip_longest(x[::-1], y[::-1], fillvalue='0'):\n        sum_digit, carry = ADDER[(x_digit, y_digit, carry)]\n        sum_digits.append(sum_digit)\n\n    if carry == '1':\n        sum_digits.append(carry)\n\n    return ''.join(sum_digits)[::-1]\n", "\ndef add(a,b):\n  out, ap, bp, r = '', list(a.lstrip('0')), list(b.lstrip('0')), 0\n  while (len(ap) > 0 or len(bp) > 0 or r > 0):\n    ac, bc = ap.pop() if len(ap) > 0 else None, bp.pop() if len(bp) else None\n    total = r + (ac == '1') + (bc == '1')\n    out = ('1' if total % 2 else '0') + out\n    r = 0 if total < 2 else 1\n  return out or '0'", "def b2i(b):\n    return sum(1 << i for i, x in enumerate(b[::-1]) if x == '1')\n\ndef add(a, b):\n    return format(b2i(a) + b2i(b), 'b')", "def bitAdd(b, co):\n    if b == '00':\n        if co: \n            return '1', False\n        else:\n            return '0', False\n        \n    if b in ['01', '10']: \n        if co: \n            return '0', True\n        else:\n            return '1', False\n        \n    if b == '11':\n        if co: \n            return '1', True\n        else:\n            return '0', True\n        \n\ndef add(a, b):\n    if len(a) < len(b):\n        a = ((len(b)-len(a))*'0')+a\n    else:\n        b = ((len(a)-len(b))*'0')+b\n    #\n    bits=[i+j for i, j in zip(reversed(a),reversed(b))]\n    co = False\n    ans = ['' for i in range(len(a))]\n    for i,b in enumerate(bits):\n        ans[i], co = bitAdd(b, co)\n    #\n    if co: ans.append('1')\n    ans = ''.join(reversed(ans)).lstrip('0')\n    #\n    if ans == '': return '0'\n    return ans", "from itertools import zip_longest\ndef add(a, b):\n    d = ('00', '01', '10', '11')\n\n    arr, k = [], '0'\n    for m, n in zip_longest(a[::-1], b[::-1], fillvalue = '0'):\n        k, r = d[(m, n, k).count('1')]\n        arr.append(r)\n    arr.append(k)\n    return ''.join(arr[::-1]).lstrip('0') or '0'\n\n", "def add(a,b):\n    out = \"\"\n    carry = 0\n    \n    a = a.lstrip(\"0\")\n    b = b.lstrip(\"0\")\n    \n    max_l = max(len(a), len(b))\n    a = a.rjust(max_l, \"0\")\n    b = b.rjust(max_l, \"0\")\n\n    for i in range(1, max_l + 1):\n        s, carry = carry, 0\n        s += 1 if a[-i] == \"1\" else 0\n        s += 1 if b[-i] == \"1\" else 0\n        \n        carry = s > 1\n        out += \"01\"[s%2]\n        \n    out += \"1\"*carry\n    return out[::-1] if len(out) > 0 else \"0\"", "def add(a, b):\n    longer = max(len(a), len(b))\n    a, b = [x.zfill(longer) for x in [a, b]]\n    p = {'000': '00', '001': '10',\n         '010': '10', '011': '01',\n         '100': '10', '101': '01',\n         '110': '01', '111': '11'}\n    result = []\n    c = '0'\n    for x, y in zip(reversed(a), reversed(b)):\n        r, c = p[x + y + c]\n        result.append(r)\n    if c == '1': result.append(c)\n    return ''.join(reversed(result)).lstrip('0') or '0'"]