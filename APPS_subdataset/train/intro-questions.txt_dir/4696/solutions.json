["def same_encryption(s1, s2):\n    return (s1[0], s1[-1], len(s1) % 9) == (s2[0], s2[-1], len(s2) % 9)", "def same_encryption(s1, s2):\n    encrypt = lambda s: f\"{s[0]}{len(s[1:-1]) % 9}{s[-1]}\"\n    return encrypt(s1) == encrypt(s2)", "def same_encryption(s1, s2):\n  return (     s1[0] == s2[0]\n           and s1[-1] == s2[-1]\n           and len(s1) % 9 == len(s2) % 9 )", "def same_encryption(s1, s2):\n  def single_digit(s):\n      total = len(s) - 2\n      while total > 9:\n          total = sum(int(d) for d in str(total))\n          \n      return \"{}{}{}\".format(s[0], total, s[-1])\n      \n  return single_digit(s1) == single_digit(s2)", "def same_encryption(s1,s2):\n    l1,l2=str(len(s1)-2),str(len(s2)-2)\n    while int(l1)//10 or int(l2)//10:\n        l1,l2=str(sum(map(int,l1))),str(sum(map(int,l2)))\n    return l1==l2 and s1[0]==s2[0] and s1[-1]==s2[-1]", "def encrypt(s):\n    n = len(s[1:-1])\n    while n > 9:\n        n = sum(map(int, str(n)))\n    return f'{s[0]}{n}{s[-1]}'\n\ndef same_encryption(s1, s2):\n    return encrypt(s1) == encrypt(s2)", "def encrypt(s):\n    n = len(s[1:-1])\n    while n > 10:\n        n = sum(map(int, str(n)))\n    return f'{s[0]}{n}{s[-1]}'\n\ndef same_encryption(s1, s2):\n    return encrypt(s1) == encrypt(s2)", "from string import ascii_lowercase as alphabet\n\ndef same_encryption(s1, s2):\n    sum_s1 = len(s1[1:-1])\n    sum_s2 = len(s2[1:-1])\n    while len(str(sum_s1)) > 1:\n        sum_s1 = sum(map(int, str(sum_s1)))\n    while len(str(sum_s2)) > 1:\n        sum_s2 = sum(map(int, str(sum_s2)))\n    return '{}{}{}'.format(s1[0], sum_s1, s1[-1]) == '{}{}{}'.format(s2[0], sum_s2, s2[-1])", "def same_encryption(a, b):\n    f = lambda s: f\"{s[0]}{(len(s) - 2) % 9 or 9}{s[-1]}\"\n    return f(a) == f(b)", "def same_encryption(s1, s2):\n  return s1[0] == s2[0] and s1[-1] == s2[-1] and (len(s1) - 2) % 9 == (len(s2) - 2) % 9"]