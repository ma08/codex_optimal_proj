["from collections import Counter\ndef obtain_max_number(arr):\n    c = Counter(arr)\n    while 1:\n        find = next((k for k in c if c[k] > 1), None)\n        if not find:return max(c)\n        c[find] -= 2\n        c[find*2] = c.get(find*2,0) + 1", "from bisect import insort\n\ndef obtain_max_number(arr):\n    arr = sorted(arr)\n    while True:\n        prev = -1\n        for i, x in enumerate(arr):\n            if x == prev:\n                break\n            prev = x\n        else:\n            return max(arr)\n        insort(arr, arr.pop(i) + arr.pop(i-1))", "from collections import Counter\n\ndef obtain_max_number(arr):\n    count = Counter(arr)\n    while any(value > 1 for value in list(count.values())):\n        n = next(key for key in count if count[key] > 1)\n        count[n] -= 2\n        count[n * 2] += 1\n    return max(count)\n\n\n\n\n# without import\n#\n#def obtain_max_number(arr):\n#    s = set(arr)\n#    while any(arr.count(n) > 1 for n in s):\n#        c = next(n for n in s if arr.count(n) > 1)\n#        arr.remove(c)\n#        arr.remove(c)\n#        arr.append(c*2)\n#    return max(arr)\n", "from collections import Counter\n\ndef obtain_max_number(arr):\n    tmp, prevLen = arr[:], 0\n    while len(tmp) != prevLen:\n        c, tmp, prevLen   =   Counter(tmp), [], len(tmp)\n        for k,v in c.items(): tmp.extend( [2*k] * (v//2) + [k] * (v%2))\n    return max(c)", "def obtain_max_number(arr):\n    last_len = 0\n    while len(arr) != last_len:\n        last_len = len(arr)\n        for n in arr:\n            if arr.count(n) > 1:\n                arr.remove(n)\n                arr.remove(n)\n                arr.append(n*2)\n    \n    return max(arr)", "from collections import Counter\nfrom functools import lru_cache\nfrom itertools import chain\n\n@lru_cache(maxsize=None)\ndef func(n):\n    return [n] if n&1 else 2*func(n>>1)\n\ndef obtain_max_number(arr):\n    return max(k * (1<<(v.bit_length()-1)) for k,v in Counter(chain.from_iterable(map(func, arr))).items())", "from collections import Counter; obtain_max_number=lambda arr: (lambda n: max(n) if len(arr)==len(n) else obtain_max_number(n))(sum([[2*k]*(v//2)+[k]*(v%2) for k,v in Counter(arr).items()],[]))", "def obtain_max_number(arr):\n    used = [False] * len(arr)\n    i = 0\n    while i < len(arr):\n        if not used[i]:\n            j = i + 1\n            while j < len(arr):\n                if arr[j] == arr[i]:\n                    arr[j] += arr[i]\n                    arr[i] = 0\n                    used[i] = True\n                    i = -1\n                    break\n                j += 1\n        i += 1\n    return max(arr)\n", "from collections import Counter\n\ndef obtain_max_number(arr):\n    c=dict(Counter(arr))\n    s=set(c)\n    r=0\n    while s:\n        m=min(s)\n        v=c[m]\n        s-={m}\n        M=m*2\n        if v//2:\n            c[M]=c.get(M,0)+v//2\n            s|={M}\n        r=max(r,m)\n    return r", "def obtain_max_number(arr):\n    while sorted(arr) != sorted(list(set(arr))):\n        new_arr = []\n        checked = []\n        for i in arr:\n            if arr.count(i) >= 2 and i not in checked:\n                checked.append(i)\n                n = [i * 2] * (arr.count(i) // 2) if arr.count(i) % 2 == 0 else [i * 2] * (((arr.count(i) - 1)) // 2) + [i] \n                new_arr.extend(n)\n            elif arr.count(i) < 2 and i not in checked:\n                checked.append(i)\n                new_arr.append(i)\n                \n        arr = new_arr[:]\n        \n    return max(arr)"]