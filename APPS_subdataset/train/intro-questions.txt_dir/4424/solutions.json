["def expression_matter(a, b, c):\n    return max(a*b*c, a+b+c, (a+b)*c, a*(b+c))", "def expression_matter(a, b, c):\n     return max(a + b + c, (a + b) * c, a * (b + c), a * b * c)", "def expression_matter(a, b, c):\n    cases = [a + b + c]\n    cases.append(a * b * c)\n    cases.append((a * b) + c)\n    cases.append((a + b) * c)\n    cases.append(a + (b * c))\n    cases.append(a * (b + c))\n    return max(cases)", "def expression_matter(a, b, c):\n  return max(max(eval(f'{a}{op1}({b}{op2}{c})'), eval(f'({a}{op1}{b}){op2}{c}')) for op1 in '+*' for op2 in '+*')", "def expression_matter(a, b, c):\n    return max(a+b+c, a*b*c, (a+b)*c, a*(c+b))", "def expression_matter(a, b, c): return max(a*b*c, a+b+c, a*(b+c), (a+b)*c)", "def expression_matter(a, b, c):\n    if a == 1: b += 1\n    if c == 1: b += 1\n    if b == 1:\n        if a < c: a += 1\n        else: c += 1\n    return a * b * c", "def expression_matter(a, b, c):\n    return max(\n        a+b+c,\n        a+b*c,\n        (a+b)*c,\n        a*b+c,\n        a*(b+c),\n        a*b*c\n        )", "def expression_matter(a, b, c):\n    operations = '+*'\n    return max(\n        max(eval(f'({a}{op1}{b}){op2}{c}'), eval(f'{a}{op1}({b}{op2}{c})'))\n        for op1 in operations\n        for op2 in operations\n    )", "def expression_matter(a, b, c):\n    li=[]\n    li.append(a*b*c)\n    li.append(a+b+c)\n    li.append(a+(b*c))\n    li.append(a*(b+c))\n    li.append((a+b)*c)\n    li.append((a*b)+c)\n    return max(li)", "def expression_matter(a, b, c):\n    return max(a+b+c,a*b*c,(a+b)*c,a*(b+c))", "def expression_matter(a, b, c):\n    if 1 not in [a, b, c]:\n        return a * b * c\n    elif a == 1 and c == 1:\n        return a + b + c\n    elif a == 1 or (b == 1 and a < c):\n        return (a + b) * c\n    else:\n        return a * (b + c)", "def expression_matter(a, b, c):\n    largest_number = 0\n    rlt1 = a * (b + c)\n    rlt2 = a * b * c\n    rlt3 = a + b * c\n    rlt4 = (a + b) * c\n    rlt5 = a + b + c \n    rlt6 = a * b + c\n    list = [rlt1, rlt2, rlt3, rlt4, rlt5, rlt6]\n    \n    for li in list:\n        if li > largest_number:\n            largest_number = li\n    \n    return largest_number", "def expression_matter(a, b, c):\n    res=[]\n    res.append((a+b)+c)\n    res.append(a+(b+c))\n    res.append((a*b)*c)\n    res.append(a*(b*c))\n    res.append((a+b)*c)\n    res.append(a+(b*c))\n    res.append((a*b)+c)\n    res.append(a*(b+c))\n    return max(res)", "def expression_matter(a, b, c):\n    d = a + b + c\n    e = a * b * c\n    f = (a + b) * c\n    g = a * (b + c)\n    return max(d, e, f, g)", "def expression_matter(a, b, c):\n    numbers = [a, b, c]\n\n    total = 0\n    iCount = 0\n\n    ttl2 = 0\n    if 1 in numbers:\n        iCount = numbers.count(1)\n\n        for i in numbers:\n            if(iCount == 1):\n                if(numbers[1] == 1):\n                    if(numbers[0] == max(numbers)): ttl2 = 1\n                    if(numbers.count(max(numbers)) == 2):\n                        ttl2 += i\n                    else:\n                        if(i != max(numbers)):\n                            ttl2 += i\n                    total = ttl2 * max(numbers)\n                elif(numbers[0] == 1):\n                    ttl2 = numbers[0] + numbers[1]\n                    total = ttl2 * numbers[2]\n                elif(numbers[2] == 1):\n                    ttl2 = numbers[2] + numbers[1]\n                    total = ttl2 * numbers[0]\n            elif(iCount == 2):\n                if(numbers[0] == numbers[1] or numbers[1] == numbers[2]):\n                    total = max(numbers) * 2\n                else:\n                    total += i\n            elif(iCount == 3):\n                total += i\n            else:\n                if(i == max(numbers)):\n                    if(numbers[0] == max(numbers)): total = 1\n                    total *= i\n                else:\n                    total += i\n    else:\n        total = 1\n        for i in numbers:\n            total *= i\n\n    return(total)", "def expression_matter(a, b, c):\n    expressions = [\n        a * (b + c),\n        a * b * c,\n        a + b * c,\n        (a + b) * c,\n        a + b + c\n    ]\n    max_value = 0\n    for expression in expressions:\n        value = expression\n        if value > max_value:\n            max_value = value\n    return max_value", "def expression_matter(a, b, c):\n    m1 = a*(b+c)\n    m2 = a*b*c\n    m3 = a+b*c\n    m4 = (a+b)*c\n    m5 = a+b+c\n    large = m1\n    if m2 > large:\n        large = m2\n    if m3 > large:\n        large = m3\n    if m4 > large:\n        large = m4\n    if m5 > large:\n        large = m5\n    return large", "def expression_matter(a, b, c):\n    val1 = a * b * c\n    val2 = (a + b) * c\n    val3 = a * (b + c)\n    val4 = a + b * c\n    val5 = a * b + c\n    val6 = a + b + c \n    a = [val1, val2, val3, val4, val5, val6]\n    return max(a)", "def expression_matter(a, b, c):\n    return max(a + b + c, a * (b + c), (a + b) * c, a * b * c)", "expression_matter=lambda a, b, c: max(a + b + c, a * (b + c), (a + b) * c, a * b * c)", "def expression_matter(a, b, c):\n    var1 = a * (b + c)\n    var2 = a * b * c\n    var3 = a + b * c\n    var4 = (a + b) * c\n    var5 = a+b+c\n    sum = []\n    sum.append(var1)\n    sum.append(var2)\n    sum.append(var3)\n    sum.append(var4)\n    sum.append(var5)\n    \n    sum = sorted(sum)\n    return sum[-1]", "from itertools import starmap, product\nfrom operator import add, mul\n\n\ndef expression_matter(a: int, b: int, c: int):\n    return max(starmap(lambda f, g: max(f(a, g(b, c)), g(f(a, b), c)), product((add, mul), repeat=2)))\n", "def expression_matter(a, b, c):\n    \n    list = []\n    list.append(a * b * c)\n    list.append(a* (b + c))\n    list.append(a + b * c)\n    list.append((a + b) * c)\n    list.append(a * b + c)\n    list.append(a + b + c)\n    \n    return max(list)\n\nexpression_matter(1, 1, 1)", "def expression_matter(a, b, c):\n    \n    ans1 = a * (b + c) \n    ans2 = a * b * c\n    ans3 =  a + b * c\n    ans4 = (a + b) * c\n    ans5 = a + b + c\n    \n    return max(ans1,ans2,ans3,ans4,ans5)", "def expression_matter(a, b, c):\n    r = 0\n    for o1 in (\"+\", \"*\"):\n        for o2 in (\"+\", \"*\"):\n            r = max(r, (max(eval(\"({} {} {}) {} {}\".format(a, o1, b, o2, c)), eval(\"{} {} ({} {} {})\".format(a, o1, b, o2, c)))))\n    return r", "def expression_matter(a, b, c):\n    return max(a*b*c,a*(b+c),a+b+c,(a+b)*c)", "def expression_matter(a, b, c):\n    return max([(a+b)*c, a*b*c, a+b+c, a+b*c, a*(b+c)])", "def expression_matter(a, b, c):\n    list_exp = []\n    list_exp.append(a*b+c)\n    list_exp.append(a+b*c)\n    list_exp.append((a+b)*c)\n    list_exp.append(a*(b+c))\n    list_exp.append(a+b+c)\n    list_exp.append(a*b*c)\n    list_exp.append(a+b+c)\n    return max(list_exp)", "def expression_matter(a, b, c):\n    s = a + b + c\n    m = a * b * c\n    n = (a + b) * c\n    o = a * (b + c)\n    q = a * b + c\n    r = a + b * c\n    \n    return max(s,m,n,o,q,r)", "import numpy as np\ndef expression_matter(a, b, c):\n    A = a * b * c \n    B = a * (b + c)\n    C = (a * b) + c\n    D = a + b + c\n    E = a + b * c\n    F = (a + b) * c\n    R = np.array([A,B,C,D,E,F])\n    return R.max()# highest achievable result", "def expression_matter(a, b, c):\n    n1=a+b+c\n    n2=a*b*c\n    n3=a*(b+c)\n    n4=(a+b)*c\n    n5=a+(b*c)\n    n6=(a*b)+c\n    return max(n1,n2,n3,n4,n5,n6)", "def expression_matter(a, b, c):\n    lst = []\n    lst.append(a * (b + c))\n    lst.append(a * b * c)\n    lst.append(a + b + c)\n    lst.append((a + b) * c)\n    return max(lst)\n", "def expression_matter(a, b, c):\n    largest = 0\n    if a + b + c > largest:\n        largest = a + b + c\n    if a + b * c > largest:\n        largest = a + b * c\n    if a * b + c > largest:\n        largest = a * b + c\n    if a * b * c > largest:\n        largest = a * b * c\n    if (a + b) * c > largest:\n        largest = (a + b) * c\n    if a * (b + c) > largest:\n        largest = a * (b + c)\n    return largest", "from itertools import product\nfrom operator import mul, add\n\ndef expression_matter(a, b, c):\n    if not 1 in [a, b, c]: return a*b*c\n    return max(\n        max(\n            op1(a, op2(b, c)),\n            op1(op2(a, b), c)\n        )\n        for op1, op2 in product([mul, add], repeat=2)\n    )", "def expression_matter(a, b, c):\n    return max(a+b+c, a*b*c, a*(b+c), (a+b)*c)\n    #not mine, re-did to make sure I could properly use the max function. \n", "def expression_matter(a, b, c):\n    if a == 1 and b != 1 and c != 1:\n        return (a + b) * c\n    elif a != 1 and b == 1 and c != 1:\n        if (a + b) * c > a * (b + c):\n            return (a + b) * c\n        else:\n            return a * (b + c)\n    elif a != 1 and b != 1 and c == 1:\n        return a * (b + c)\n    elif a == 1 and b == 1 and c == 1:\n        return a + b + c\n    elif (a == 1 and b == 1 and c != 1):  \n        return (a + b) * c\n    elif (a == 1 and b != 1 and c == 1):\n        return a + b + c\n    elif (a != 1 and b == 1 and c == 1):\n        return a * (b + c)\n    else:\n        return a * b * c", "def expression_matter(a, b, c):\n    var1 = a * (b+c)\n    var2 = a * b * c\n    var3 = a + b * c\n    var4 = (a+b) * c \n    var5 = a + b+ c\n    result = sorted([var1,var2,var3,var4,var5])[-1]\n    return result ", "def expression_matter(a, b, c):\n    calc = [\n        a * b + c,\n        a + b * c,\n        (a + b) * c,\n        a * (b + c),\n        a * b * c,\n        a + b + c\n    ]\n    return max(calc)", "def expression_matter(a, b, c):\n    calc = [\n        a * (b + c),\n        a * b * c,\n        a + b * c,\n        (a + b) * c,\n        a + b + c\n    ]\n    return max(calc)", "def expression_matter(a, b, c):\n    return max(a*(c+b), a*b*c, a+b+c, a+b*c, (a+b)*c)", "def expression_matter(a, b, c):\n    result = 0\n    result = max(result, a*(b+c))\n    result = max(result, a*b*c)\n    result = max(result, a+b*c)\n    result = max(result, (a+b)*c)\n    result = max(result, a+b+c)\n    return result\n", "def expression_matter(a, b, c):\n    result = 0\n    if a + b + c > result: result = a + b + c\n    if a + b * c > result: result = a + b * c\n    if a * b + c > result: result = a * b + c\n    if a * b * c > result: result = a * b * c\n    if (a + b) * c > result: result = (a + b) * c\n    if a * (b + c) > result: result = a * (b + c)\n    return result", "def expression_matter(a, b, c):\n    x = a + b + c\n    y = (a + b) * c\n    z = a * (b + c)\n    w = a * b * c\n    \n    lis = [x, y, z, w]\n    ans = max(lis)\n    return ans # highest achievable result", "def expression_matter(a, b, c):\n    arr = []\n    arr.append(a*b*c)\n    arr.append(a+b+c)\n    arr.append(a*b+c)    \n    arr.append(a*(b+c))\n    arr.append((a+b)*c)\n    \n    print(arr)\n    return (max(arr))", "# Two possible resolutions: using ifs to decide which one will be the largest or max between all possibilities\n\n# def expression_matter(a, b, c):\n#     if a == 1 and c == 1:\n#         return a + b + c\n#     if a == 1:\n#         return (a + b) * c \n#     if c == 1:\n#         return a * (b + c)\n#     if b == 1:\n#         return max(a * (b + c), (a + b) * c)\n#     return a * b * c\n\ndef expression_matter(a, b, c):\n    return max([a + b + c, (a + b) * c, a * (b + c), a * b * c])", "def expression_matter(a, b, c):\n    d = a * (b + c)\n    e = a * b * c\n    f = a + b * c\n    g = (a + b) * c\n    h = a + b + c\n\n    if (e >= d and e >= h) and (e >= f and e >= g):\n        return e\n    elif (d >= e and d >= h) and (d >= f and d >= g):\n        return d\n    elif (f >= d and f >= h) and (f >= e and f >= g):\n        return f\n    elif (g >= d and g >= h) and (g >= e and g >= f):\n        return g\n    elif (h >= d and h >= g) and (h >= e and h >= f):\n        return h", "def expression_matter(a, b, c):     \n    return max(\n        a * (b + c), \n        (a * b) + c, \n        a * b * c, \n        a + b * c, \n        (a + b) * c,\n        a + b + c\n    )", "def expression_matter(a, b, c):\n    a=[(a*(b+c)),(a*b*c),((a+b)*c),(a+b+c)]\n    return max(a)", "def expression_matter(a, b, c):\n    x = []\n    x.append(a * (b + c))\n    x.append(a * b * c)\n    x.append(a + b * c)\n    x.append((a + b) * c)\n    x.append(a + b + c)\n    return max(x)", "def expression_matter(a, b, c):\n    no_1 = a * (b + c)\n    no_2 = a + b + c\n    no_3 = a * b * c\n    no_4 = (a + b) * c\n    if no_3 > no_1 and no_3 > no_2 and no_3 > no_4:\n        return no_3\n    if no_4 > no_1 and no_4 > no_2:\n        return no_4\n    if no_2 > no_1:\n        return no_2\n    else:\n        return no_1", "def expression_matter(a, b, c):\n    \n    \n    h = a*b+c\n    d = a*(b+c)\n    e = a+b*c\n    f = (a+b)*c\n    g = a*b*c\n    i = a+b+c\n    list = [h,d,e,f,g,i]\n    return max(list)", "def expression_matter(a, b, c):\n    if (a*(b+c) >= (a+b)*c) and (a*(b+c) >= a+b+c) and (a*(b+c) >= a*b*c) :\n        return a*(b+c)\n    if ((a+b)*c  >= a*(b+c)) and ((a+b)*c) >= (a+b+c) and ((a+b)*c) >= (a*b*c) :\n        return (a+b)*c \n    if  ( a*b*c >= (a+b)*c) and (a*b*c  >= a+b+c) and (a*b*c >= a*(b+c)) :\n        return a*b*c\n    else :\n        return a+b+c\n   \n\n", "from functools import reduce\n\nexpression_matter = lambda a, b, c: reduce( lambda accum, next: accum * next if accum*next > accum+next else accum + next, [a, b, c] if c > a else [c, b, a])", "from functools import reduce\n\ndef expression_matter(a, b, c):\n    return reduce(lambda accum, next : accum * next if accum*next > accum+next else accum + next, [c, b, a] if c < a else [a, b ,c])\n", "def expression_matter(a, b, c):\n    mass = [a,b,c]\n    return max([(mass[0]+mass[1])*mass[2],(mass[0]+mass[1])+mass[2],mass[0]*(mass[1]+mass[2]),(mass[0]*mass[1])*mass[2]])", "expression_matter = lambda *a: [a[0]*a[1]*a[2],[(1+a[1])*a[2-2*(a[0]!=1)],(1+sorted(a)[1])*max(a)][a[1]==1],[sum(a),2*max(a)][a[1]==1],3][a.count(1)]", "def expression_matter(a, b, c):\n    f=a*(b+c)\n    d=a*b*c\n    s=a+b*c\n    v=(a+b)*c\n    return max(f,d,s,v,a+b+c)\n", "def expression_matter(a, b, c):\n    sample1 = a + b + c\n    sample2 = a * b * c\n    sample3 = (a + b) * c\n    sample4 = a * (b + c)\n    return max(sample1, sample2, sample3, sample4)", "def expression_matter(a, b, c):\n\n    result_1 = (a + b) * c\n    result_2 = a * (b + c)\n    result_3 = (a + b) * c\n    result_4 = a * b * c\n    result_5 = a + b + c\n\n\n    if result_1 >= result_2 and result_1 >= result_3 and result_1 >= result_4 and result_1 >= result_5:\n        return result_1\n    elif result_2 >= result_1 and result_2 >= result_3 and result_2 >= result_4 and result_2 >= result_5:\n        return result_2\n    elif result_3 >= result_1 and result_3 >= result_2 and result_3 >= result_4 and result_3 >= result_5:\n        return result_3\n    elif result_4 >= result_1 and result_4 >= result_2 and result_4 >= result_3 and result_4 >= result_5:\n        return result_4\n    elif result_5 >= result_1 and result_5 >= result_2 and result_5 >= result_3 and result_5 >= result_4:\n        return result_5", "def expression_matter(a, b, c):\n    return max(list(map(eval, gen(a, b, c))))\n\ndef gen(a, b, c):\n    ops = ['+', '*']\n    combs = []\n    for i in ops:\n        for j in ops:\n            s = '%d %s %d %s %d' % (a, i, b, j, c)\n            t = '(%d %s %d) %s %d' % (a, i, b, j, c)\n            u = '%d %s (%d %s %d)' % (a, i, b, j, c)\n            combs.append(s)\n            combs.append(t)\n            combs.append(u)\n    return combs\n", "def expression_matter(a, b, c):\n    result = a * (b + c)\n    \n    new = a * b * c\n    \n    if new >result:\n        result = new\n    new = a + b * c\n        \n    if new >result:\n        result = new\n        \n    new = (a + b) * c\n        \n    if new >result:\n        result = new\n    \n    new = a + b + c\n        \n    if new >result:\n        result = new\n        \n    return result", "def expression_matter(a, b, c):\n    x = [a,b,c]\n    results = []\n    \n    results.append (a*b*c)\n    results.append(a*(b+c))\n    results.append((a+b)*c)\n    results.append(a+b+c)\n    \n    return max(results)\n    \n", "def expression_matter(a, b, c):\n    lt = [a*(b+c), (a+b)*c, a*b*c, a+b*c, a*b+c, a+b+c]\n    return max(lt)", "def expression_matter(a, b, c):\n    all = [a+b+c, a+b*c, a*b+c, a*b*c, (a+b)*c, a*(b+c)]\n    return max(all)\n        \n", "def expression_matter(a, b, c):\n    result1 = a * (b+c)\n    result2 = a * b * c\n    result3 = a + b * c\n    result4 = (a + b) * c\n    result5 = a + b + c\n    \n    return max(result1,result2,result3,result4,result5)", "def expression_matter(a, b, c):\n    return max([(a+b+c),\n                (a+b) * c,\n                (b+c) * a,\n                (a*b*c)\n    ])", "def expression_matter(a, b, c):\n    max=0\n    if max<a+b+c:\n        max=a+b+c\n    if max<a+b*c:\n        max=a+b*c\n    if max<a*b*c:\n        max=a*b*c\n    if max<a*b+c:\n        max=a*b+c\n    if max<a+(b*c):\n        max=a+(b*c)\n    if max<(a+b)*c:\n        max=(a+b)*c\n    if max<a*(b+c):\n        max=a*(b+c)\n    if max<(a*b)+c:\n        max=(a*b)+c\n    return max", "def expression_matter(a, b, c):\n    s = []\n    s.append(a*b*c)\n    s.append(a+b+c)\n    s.append(a+b*c)\n    s.append((a+b)*c)\n    s.append(a*b+c)\n    s.append(a*(b+c))\n    return max(s)", "def expression_matter(a, b, c):\n    return max(a+b+c, a+b*c, a*b+c, a*b*c, (a+b)*c, a+(b*c), a*(b+c))", "def expression_matter(a, b, c):\n    l = [a+b+c, a+b*c, a*b+c, a*b*c, (a+b)*c, a+(b*c), a*(b+c)]\n    return max(l)", "def expression_matter(a, b, c):\n    res = []\n    res.append(a + b + c)\n    res.append(a * b * c)\n    res.append(a + b * c)\n    res.append(a * b + c)\n    res.append((a + b) * c)\n    res.append(a * (b + c))\n    return max(res)", "def expression_matter(a, b, c):\n    if a == 1 and b != 1 and c != 1:\n        return (a + b) * c\n    if a != 1 and b == 1 and c != 1 and (a > c or a == c):\n        return a * (b + c)\n    if a != 1 and b == 1 and c != 1 and a < c:\n        return (a + b) * c\n    if a != 1 and b != 1 and c == 1:\n        return a * (b + c)\n    if a > 1 and b > 1 and c > 1:\n        return a * b * c\n    if a > 1 and b == 1 and c == 1:\n        return a * (b + c)\n    if a == 1 and b == 1 and c > 1:\n        return (a + b) * c\n    else:\n        return a + b + c\n    \n", "def expression_matter(a, b, c):\n    return max(a + b + c, a * b + c, a * b * c, a * (b + c), (a * b) + c, (a + b) * c)", "def expression_matter(a, b, c):\n    res_1 = a + b + c\n    res_2 = a * b * c\n    res_3 = a + b * c\n    res_4 = a * b + c\n    res_5 = (a + b) * c\n    res_6 = a * (b + c)\n    return max(res_1, res_2, res_3, res_4, res_5, res_6)\n", "def expression_matter(a, b, c):\n    value_1 = a+b+c\n    value_2 = a*b*c\n    value_3 = a*(b+c)\n    value_4 = (a+b)*c\n    value_5 = a*b+c\n    value_6 = a+b*c\n    empty_list = []\n    empty_list.append(value_1)\n    empty_list.append(value_2)\n    empty_list.append(value_3)\n    empty_list.append(value_4)\n    empty_list.append(value_5)\n    empty_list.append(value_6)\n    return max(empty_list)", "def expression_matter(a, b, c):\n    answer_1 = a * (b + c)\n    answer_2 = a * b * c\n    answer_3 = a + b * c\n    answer_4 = (a + b) * c\n    answer_5 = a + b + c\n    return max(answer_1, answer_2, answer_3, answer_4, answer_5)", "def expression_matter(a, b, c):\n    op1 = (a + b) * c\n    op2 = (a * b) * c\n    op3 = (a * b * c)\n    op4 = a * (b + c)\n    op5 = (a + b + c)\n    return max(op1, op2, op3, op4, op5)", "def expression_matter(a, b, c):\n    x = a * (b + c)\n    y = a * b * c\n    z = a + b * c\n    i = (a + b) * c\n    m = a + b + c\n    \n    arr = [x, y, z, i, m]\n    arr.sort()\n    return max(arr)", "def expression_matter(a, b, c):\n    return max(\n        max(\n            eval('{0} {1} ( {2} {3} {4} )'.format(a, op1, b, op2, c)),\n            eval('( {0} {1} {2} ) {3} {4}'.format(a, op1, b, op2, c))\n        ) for op1 in '+*' for op2 in '+*'\n    )", "def expression_matter(a, b, c):\n    print(a,b,c)\n    arr = []\n    d = a*b*c\n    arr.append(d)\n    e = (a+b)*c\n    arr.append(e)\n    f = a*(b+c)\n    arr.append(f)\n    g = a+b*c\n    arr.append(g)\n    h = a*b+c\n    arr.append(h)\n    i = a+b+c\n    arr.append(i)\n    \n    \n    return max(arr)", "def expression_matter(a, b, c):\n    return max((a + b) * c, a + b + c, a * b * c, a * (b + c), a + b * c, a * b + c)", "def expression_matter(a, b, c):\n    x=(a+b)*c\n    w=a+b+c\n    y=a*(b+c)\n    z=a*b*c\n    return max(x,w,y,z)", "def expression_matter(a, b, c):\n    abc1 = a * (b+c)\n    abc2 = a*b*c\n    abc3 = a+b*c\n    abc4 = (a+b) * c\n    abc5 = a + b +c\n    return max(abc1,abc2,abc3,abc4, abc5)\n", "def expression_matter(a, b, c):\n    arr = []\n    arr.append(a + b + c)\n    arr.append(a + b * c)\n    arr.append(a * b + c)\n    arr.append(a * (b + c))\n    arr.append((a + b) * c)\n    arr.append(a * b * c)\n    return max(arr)", "import statistics\ndef expression_matter(a, b, c):\n    lis = []\n    lis.append(a * b * c)\n    lis.append((a + b) * c)\n    lis.append(a + (b * c))\n    lis.append(a + b + c)\n    lis.append((a * b) + c)\n    lis.append(a * (b + c))\n    return max(lis)", "def expression_matter(a, b, c):\n    x1 = a+b+c\n    x2 = (a+b)*c\n    x3 = a*(b+c)\n    x4 = a*b*c\n    nums = []\n    nums.append(x1)\n    nums.append(x2)\n    nums.append(x3)\n    nums.append(x4)\n    return max(nums)", "def expression_matter(a, b, c):\n    tmp=([a,b,c])\n    return max(\\\n               tmp[0]+tmp[1]+tmp[2], \\\n               tmp[0]*tmp[1]*tmp[2], \\\n               tmp[0]+tmp[1]*tmp[2], \\\n               tmp[0]*tmp[1]+tmp[2], \\\n               (tmp[0]+tmp[1])*tmp[2], \\\n               tmp[0]+(tmp[1]*tmp[2]), \\\n               (tmp[0]*tmp[1])+tmp[2], \\\n               tmp[0]*(tmp[1]+tmp[2]), \\\n              )", "def expression_matter(a, b, c):\n    rez1 = a*(b+c)\n    rez2 = a*b*c\n    rez3 = a+b*c\n    rez4 = (a+b)*c\n    rez5 = a+b+c\n    return max(rez1, rez2, rez3, rez4, rez5)\n    \n\n", "def expression_matter(a, b, c):\n    a1 = (a + b) * c\n    a2 = a * b * c\n    a3 = a * (b + c)\n    a4 = a + b * c\n    a5 = a + b + c\n    return max(a1, a2, a3, a4, a5)", "def expression_matter(a, b, c):\n    x = [a + b + c,  a * b * c, (a + b) * c, a * (b + c)]\n    return max(x)", "def expression_matter(a, b, c):\n    if a <= 0 or b<= 0 or c <= 0:\n        return (\"Error. Value of a, b, c should be greater than zero\")\n    else:\n        n1 = a * (b + c) \n        n2 = a * b * c\n        n3 = a + b * c\n        n4 = (a + b) * c\n        n5 = a + b + c\n        n6 = a * b + c\n    return(max(n1, n2, n3, n4, n5, n6))", "def expression_matter(a, b, c):\n    res = max(a*(b+c),a*b*c,a+b*c,(a+b)*c,a+b+c)\n    return res\n\na = 2\nb = 1\nc = 2\nprint(expression_matter(a,b,c))", "def expression_matter(a, b, c):\n    l=[]\n    o=a*(b+c)\n    l.append(o)\n    t=a*b*c\n    l.append(t)\n    th=a+b+c\n    l.append(th)\n    f=(a+b)*c\n    l.append(f)\n    return max(l)", "def expression_matter(a, b, c):\n    maxValue = a * b * c\n    if a * (b+c) > maxValue:\n        maxValue = a * (b+c)\n    if a + b + c > maxValue:\n        maxValue = a + b + c\n    if a + b * c > maxValue:\n        maxValue = a + b * c\n    if (a+b) * c > maxValue:\n        maxValue = (a+b) * c\n    return maxValue", "def expression_matter(a, b, c):\n    v1 = a+b+c\n    v2 = (a+b)*c\n    v3 = a*(b+c)\n    v4 = a*b*c\n    return max(v1,v2,v3,v4)\n", "def expression_matter(a,\n                      b,\n                      c):\n\n    potential = [a + b + c,\n                 a + b * c,\n                 (a + b) * c,\n                 a * b + c,\n                 a * (b + c),\n                 a * b * c,\n                 a * c + b,\n                 a * (c + b)]\n\n    return max(potential)\n", "def expression_matter(a, b, c):\n    e1 = a*b*c\n    e2 = a+b+c\n    e3 = (a+b)*c\n    e4 = a*(b+c)\n    \n    list=[]\n    list.append(e1)\n    list.append(e2)\n    list.append(e3)\n    list.append(e4)\n    \n    return max(list)", "def expression_matter(a, b, c):\n    h1 = a + b + c\n    h2 = a * b * c\n    h3 = a + b * c\n    h4 = a * b + c\n    h5 = (a + b) * c\n    h6 = a + (b * c)\n    h7 = a * (b + c)\n    return max(h1,h2,h3,h4,h5,h6,h7)", "def expression_matter(a, b, c):\n    print(a, b, c)\n    x = (a + b) * c\n    y = a * (b + c)\n    z = a + b + c\n    w = a * b * c\n    v = a + b * c\n    v1 = a * b + c\n    #print(x, y, z, w, v, v1)\n    return max(x, y, z, w, v, v1)"]