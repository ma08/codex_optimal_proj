["# https://oeis.org/A000108\nfrom math import factorial as fac\ndef solve(n): return fac(2*n)//fac(n)//fac(n+1)", "def binomial_coefficient (n, k):\n    if not n >= k >= 0:\n        return None\n    lower_k = min(k, n-k)\n    coeff = 1\n    for i in range(lower_k):\n        coeff *= n - i\n        coeff //= i + 1\n    return coeff\n    \ndef catalan_number (n):\n    return binomial_coefficient(2*n, n) // (n+1)\n\ndef solve (n):\n    return catalan_number(n)", "from math import factorial\ndef solve(n):\n    return factorial(2*n)//(factorial(n)*factorial(n+1))", "from decimal import Decimal\n\nimport numpy as np\n\n\ndef solve(n):\n    a = np.ones(1, dtype=Decimal)\n    for i in range(n):\n        a = np.append(np.add.accumulate(a), [0])\n    return a.sum()", "from math import factorial\n\ndef binominal(n, k):\n    if k < 0 or n < k:\n        return None\n    product = 1\n    for i in range(k):\n        product *= n-i\n        product //= i+1\n    return product\n\ndef catalan(n):\n    return binominal(2*n, n) // (n+1)\n\ndef solve(n):\n    return catalan(n)", "def binomial (n, k):\n    n, k = int(n), int(k)\n    if not n >= k >= 0:\n        return None\n    k = min(k, n-k)\n    product = 1\n    for i in range(k): \n        product *= n - i\n        product //= i + 1\n    return product\n\ndef catalan (n):\n    return binomial(2*n,n) // (n+1)\n\ndef solve (n):    \n    return catalan(n)\n    \n\n", "from itertools import accumulate\ndef solve(n):\n    a = [1]\n    for _ in range(n):\n        a = list(accumulate(a))\n        a += a[-1:]\n    return a[-1]", "from functools import reduce\nfrom operator import mul\n\ndef solve(n):\n    return reduce(mul, range(n+2, 2*n+1)) // reduce(mul, range(1, n+1))", "def solve(n):\n    a=[1]\n    for _ in range(n-1):\n        b=[1]\n        for x in a[1:]:\n            b.append(x+b[-1])\n        b.append(b[-1])\n        a=b\n    return sum(a)"]