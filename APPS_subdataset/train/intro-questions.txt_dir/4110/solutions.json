["from math import ceil\n\ndef matrixfy(s):\n    if not s: return \"name must be at least one letter\"\n    x  = ceil(len(s)**.5)\n    it = iter(s.ljust(x*x,'.'))\n    return [ [next(it) for _ in range(x)] for _ in range(x)]", "def matrixfy(st):\n    if not st:\n        return 'name must be at least one letter'\n    n = 1\n    while n*n < len(st):\n        n += 1\n    st += '.' * (n*n - len(st))\n    return [list(xs) for xs in zip(*[iter(st)]*n)]", "from math import ceil\n\n\ndef matrixfy(stg):\n    if not stg:\n        return \"name must be at least one letter\"\n    side = ceil(len(stg)**0.5)\n    area = side**2\n    chars = list(stg.ljust(area, \".\"))\n    return [chars[i:i+side] for i in range(0, area, side)]\n", "from math import ceil\ndef matrixfy(s):\n    if not s: return \"name must be at least one letter\"\n    n = ceil(len(s)**.5)\n    return [list(s[x:x+n].ljust(n, '.')) for x in range(0, n*n, n)]", "from math import ceil\nfrom itertools import chain, repeat\ndef matrixfy(st):\n    s = ceil(len(st) ** 0.5)\n    c = chain(st, repeat('.'))\n    return [[next(c) for _ in range(s)] for _ in range(s)] or 'name must be at least one letter'", "import math\n\ndef matrixfy(st):\n    if not st:\n        return 'name must be at least one letter'\n    side = math.ceil(math.sqrt(len(st)))\n    quad = side * side\n    st += '.' * (quad - len(st))\n    return [list(st[i-side:i]) for i in range(side, quad + 1, side)]\n", "from math import ceil\nfrom re import findall\n\ndef matrixfy(name):\n    if not name:\n        return \"name must be at least one letter\"\n    \n    n = ceil(len(name)**0.5)\n    name = name.ljust(n*n, \".\")\n    \n    return [ list(s) for s in findall(\".\"*n, name) ]", "from math import ceil\n\ndef matrixfy(name):\n    if not name:\n        return \"name must be at least one letter\"\n    \n    n = ceil(len(name)**0.5)\n    name = list( name.ljust(n*n, \".\") )\n    \n    return [ name[i*n : i*n+n] for i in range(n) ]", "def matrixfy(s):n=-int(-len(s)**.5//1);return list(map(list,zip(*[iter(s.ljust(n*n,'.'))]*n)))or'name must be at least one letter'", "def matrixfy(st):\n    import math\n    if len(st) == 0:\n        return \"name must be at least one letter\"\n    a = math.ceil(len(st) ** 0.5)\n    b = []\n    for i in range(a):\n        b.append(list(a * \".\"))\n    for j in range(a):\n        for k in range(a):\n            if j * a + k == len(st):\n                return b\n            else:\n                b[j][k] = st[j * a + k]\n    return b"]