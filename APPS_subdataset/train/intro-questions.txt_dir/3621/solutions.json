["# RWH primes\nLIMIT = 500000\nsieve = [True] * (LIMIT//2)\nfor n in range(3, int(LIMIT**0.5) +1, 2):\n    if sieve[n//2]: sieve[n*n//2::n] = [False] * ((LIMIT-n*n-1)//2//n +1)\nPRIMES = [2] + [2*i+1 for i in range(1, LIMIT//2) if sieve[i]]\n\n\ndef prime_maxlength_chain(val_max):\n    if val_max < 5:\n        return []\n    \n    found = []\n    \n    # the sum of the first 400 primes > LIMIT\n    for n in range(2, 400):\n        if sum(PRIMES[:n]) >= val_max:\n            max_size = n\n            break\n    \n    for size in range(max_size, 1, -1):\n        # if sequence size is even, it *must* start with 2\n        if size % 2 == 0:\n            n = sum(PRIMES[:size])\n            if n < val_max and n in PRIMES:\n                return [n]\n    \n        # if sequence size is odd, it *cannot* start with 2\n        else:\n            for start in range(1, max_size-size +1):\n                n = sum(PRIMES[start:start+size])\n                if n < val_max and n in PRIMES:\n                    found.append(n)\n            \n            if found:\n                return found", "def is_prime(n):\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef prime_maxlength_chain(n):\n\n    summ, primes, res = 0, [], []\n\n    for i in range(2, n):\n        if is_prime(i):\n            if summ + i < n:\n                summ += i\n                primes.append(i)\n            elif summ + i - primes[0] < n:\n                summ += i\n                primes.append(i)\n            else:\n                break\n    \n    l = len(primes)\n\n    for j in range(l, 0, -1):\n        for k in range(l-j+1):\n            lst = primes[k:k+j]\n            temp = sum(lst)\n            if is_prime(temp):\n                res.append(temp)\n        if len(res) != 0:\n            break\n\n    return res", "from itertools import accumulate\nfrom bisect import bisect_left\nimport numpy as np\n\nlimit = 555555\nsieve = np.ones(limit, dtype=bool)\nsieve[0] = sieve[1] = 0\nsieve[2*2::2] = 0\nfor i in range(3, int(len(sieve)**0.5)+1, 2):\n    if sieve[i]:\n        sieve[i*i::i] = 0\nprimes = [i for i, x in enumerate(sieve) if x]\nacc_primes = list(accumulate([0] + primes))\ns_primes = set(primes)\n\n\ndef prime_maxlength_chain(n):\n    limit = bisect_left(primes, n)\n    ans, max_len = [], 1\n    for l in range(limit):\n        for r in range(l+max_len, limit+1):\n            t = acc_primes[r] - acc_primes[l]\n            if t >= n:\n                break\n            if t in s_primes and r-l >= max_len:\n                ans, max_len = ([t], r-l) if r-l > max_len else (ans + [t], max_len)\n    return ans", "limit = 500000\nsieve = [0]*2+list(range(2,limit))\nfor i in range(2,limit):\n    for j in range(i*i,limit,i):\n        sieve[j]=0\nprimes = [i for i in sieve if i]\n\ndef prime_maxlength_chain(n):\n    req = [i for i in primes if i < n]\n    P = set(req)\n    D = {}\n    found = []\n    \n    for i, j in enumerate(req):\n        D[j] = [0, 0]\n        for k in list(D):\n            o, p = D[k]\n            if o in P : found.append([o, p])\n            if o + j > n:\n                del D[k]\n                continue\n            D[k][0] += j\n            D[k][1] += 1\n    \n    m = max(found, key=lambda x: x[1])[1]\n    return [i[0] for i in found if i[1] == m]", "def prime_maxlength_chain(n):\n    p=[False,False]+[True]*(n-1)\n    for i in range(2,n+1):\n        if p[i]:\n            for j in range(i*2,n+1,i):\n                p[j]=False\n    pn=[i for i,b in enumerate(p) if b]\n    ps=set(pn)\n    maxl=[0,[]]\n    for l in range(6,len(pn)):\n        if sum(pn[:l])>=n:\n            break\n        for i in range(len(pn)-l):\n            s=sum(pn[i:i+l])\n            if s>=n:\n                break\n            elif s in ps:\n                if maxl[0]<l:\n                    maxl=[l,[s]]\n                else:\n                    maxl[1].append(s)\n    return maxl[1]", "def prime_maxlength_chain(val_max):\n   \n    # Calcula os primos usando o crivo\n    primes = []\n    sieve = [1]*(val_max+1)\n    sieve[0] = 0\n    sieve[1] = 0\n    for i in range(2, (val_max+1)):\n        if sieve[i] == 0:\n            continue\n        for j in range(i*i, (val_max+1), i):\n            sieve[j] = 0\n           \n    # Guarda os primos num array separado\n    for i in range(val_max+1):\n      if sieve[i] == 1:\n        primes.append(i)\n   \n    # Testa encontrar primos que s\u00e3o somas de 'j' primos consecutivos    \n    for j in range (400, -1, -1):\n     \n      # Aplica uma tecnica de janela deslizante (adicionando um cara na frente e removendo o do fundo) pra calcular mais rapido todas as janelas possiveis\n      answer = []\n      acc = 0\n      if len(primes) < j:\n        continue\n     \n      # Coloca os primeiros caras na janela atual\n      for i in range(j):\n        acc += primes[i]\n     \n      # Testa se eh primo\n      if acc <= val_max and sieve[acc] == 1:\n        answer.append(acc)\n     \n      # Aqui faz o procedimento de colocar o proximo cara e tirar o ultimo da janela ('deslizando' a janela pra frente)\n      for i in range(j, len(primes)):\n        acc += primes[i]\n        acc -= primes[i-j]\n        # Quando o valor ja for maior que o maximo, j\u00e1 pode parar\n        if acc >= val_max:\n          break\n        # Verifica se eh primo\n        if acc <= val_max and sieve[acc] == 1:\n          answer.append(acc)\n      # Se com o tamanho 'j' a gente encontrou resposta, a resposta eh a lista de primos com esse tamanho\n      if len(answer) > 0:\n        return answer\n", "def sieve(n):\n    n = n - 1 # finding primes smaller than the limit\n    primes = [True for i in range(n+1)]\n    result = []\n    p = 2\n    while p * p <= n:\n        if primes[p]:\n            for i in range(p * 2, n+1, p):\n                primes[i] = False\n        p += 1\n    for p in range(2, n+1):\n        if primes[p]:\n            result.append(p)\n    #print(result)\n    return result\n\n\n\ndef prime_maxlength_chain(n):\n    prime_num = sieve(n)\n    prime_sums = [[0,2]]\n    count_max = 0\n    results = []\n    if n == 0:\n        return []\n    i, j = 0, 0\n\n    while sum(prime_num[i:count_max+i+j]) < n:\n        while sum(prime_num[i:count_max+i+j]) < n:\n            #print(prime_num[i:count_max+i+j], i, j, count_max)\n            count = len(prime_num[i:count_max+i+j])\n            summe = sum(prime_num[i:count_max+i+j])\n            if summe in prime_num:\n                prime_sums.append([count, summe])\n\n            j += 1\n        if count_max <= prime_sums[-1][0]:\n            count_max = prime_sums[-1][0]\n        i += 1\n        j = 0\n    prime_sums.sort()\n    for p in prime_sums:\n        if p[0] == prime_sums[-1][0]:\n            results.append(p[1])\n\n\n    return results", "import numpy\ndef primesto(n):\n    \"\"\" Returns a array of primes, 3 <= p < n \"\"\"\n    sieve = numpy.ones(n//2, dtype=numpy.bool)\n    for i in range(3,int(n**0.5)+1,2):\n        if sieve[i//2]:\n            sieve[i*i//2::i] = False\n    return [2]+list(2*numpy.nonzero(sieve)[0][1::]+1)\n\ndef cum_sum_500k():\n    return numpy.array([0]+primesto(500000)).cumsum()\n\ndef circular_list():\n    p = primesto(500000)\n    c = cum_sum_500k()\n    l=[]\n    s=1\n    for i in range(400):\n        for j in range(0,i-s+1):\n            x=c[i]-c[j]\n            #print(i,j,x)\n            if x in p:\n                if i-j > s: s = i-j\n                #l += [[x,i-j,[p[k] for k in range(j,i)]]]\n                l += [[x,i-j]]\n                #print((x,s,i))\n    l.sort()\n    return l\n#    print(p[i])\n\ndef prime_maxlength_chain(n):\n    if prime_maxlength_chain.cl == []:\n        prime_maxlength_chain.cl = circular_list()\n    cl=prime_maxlength_chain.cl\n    for i in range(len(cl)):\n        idx = 0\n        if cl[i][0] >= n:\n            idx = i-1\n            break\n    l = []\n    for i in range(idx,1,-1):\n        if cl[i][1] == cl[idx][1]: l += [cl[i][0]]\n        else: break\n    l.sort()\n    return l\n\n#If you want to generate the circular primes list use cl=[] below\n#prime_maxlength_chain.cl = []\nprime_maxlength_chain.cl = [\n[2, 1],[3, 1],[5, 2],[17, 4],[41, 6],[127, 9],[197, 12],[281, 14],[379, 15],[491, 15],[499, 17],[563, 17],[857, 19],[953, 21],[1151, 23],[1259, 25],[1361, 25],\n[1583, 27],[1823, 27],[2069, 27],[2099, 29],[2399, 31],[2417, 33],[2579, 35],[2897, 35],[2909, 37],[3803, 39],[3821, 41],[4217, 43],[4421, 43],[4651, 45],[4871, 45],[5107, 47],\n[5333, 47],[5813, 49],[6053, 49],[6079, 53],[6599, 55],[7699, 60],[8273, 61],[8893, 64],[9521, 65],[10181, 65],[10859, 65],[11597, 71],[12329, 71],[12713, 73],[13099, 75],[13877, 75],\n[14669, 75],[15527, 79],[16823, 81],[18131, 81],[19013, 81],[21407, 85],[22037, 95],[22039, 96],[24133, 100],[25237, 102],[28087, 103],[28099, 105],[28687, 105],[28697, 108],[31729, 111],[32353, 114],\n[33623, 115],[34913, 117],[36217, 117],[36871, 117],[37561, 122],[38921, 124],[41017, 125],[42451, 125],[42463, 127],[43201, 130],[44683, 132],[47711, 133],[49253, 133],[49279, 137],[52517, 141],[54167, 143],\n[55837, 146],[61027, 152],[64613, 155],[66463, 158],[70241, 162],[76099, 163],[78121, 165],[78139, 167],[79151, 167],[81203, 169],[84313, 171],[86453, 178],[92951, 183],[101999, 191],[102001, 192],[109147, 198],\n[115279, 201],[116531, 203],[116533, 204],[119069, 206],[121631, 208],[129419, 214],[132059, 216],[137477, 217],[138863, 219],[141671, 221],[147347, 221],[148817, 225],[153137, 225],[154579, 225],[157489, 225],[157561, 229],\n[157579, 231],[162007, 231],[163483, 231],[164963, 231],[164999, 233],[166541, 237],[171131, 239],[172687, 241],[175781, 241],[178889, 241],[182009, 241],[182099, 247],[182107, 249],[198197, 251],[199831, 251],[201599, 257],\n[203279, 259],[204979, 261],[210053, 261],[213461, 261],[213533, 267],[215261, 267],[218749, 269],[222269, 273],[225821, 273],[225829, 275],[240353, 279],[240371, 281],[240379, 283],[242243, 283],[244109, 283],[251609, 285],\n[255443, 291],[257353, 291],[263171, 296],[269069, 297],[281023, 299],[283079, 305],[287137, 308],[303643, 309],[303691, 313],[305783, 313],[310019, 317],[314267, 317],[318557, 321],[324991, 321],[325009, 323],[325019, 326],\n[329401, 328],[333821, 330],[338279, 332],[342761, 334],[351811, 335],[354097, 337],[356387, 339],[360977, 341],[360979, 342],[370261, 343],[372607, 345],[379667, 350],[393961, 356],[398771, 358],[408479, 359],[423257, 361],\n[423287, 363],[425819, 365],[428339, 365],[433421, 367],[433439, 369],[438521, 369],[441101, 373],[448859, 375],[448867, 377],[477809, 377],[478001, 387],[483377, 389],[496877, 391],[499607, 393]\n]\n"]