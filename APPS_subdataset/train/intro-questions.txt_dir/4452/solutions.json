["from functools import reduce\nfrom operator import mul\n\ndef maximum_product_of_parts(n):\n    s = str(n)\n    return max(reduce(mul, map(int, (s[:i], s[i:j], s[j:])))\n               for i in range(1,len(s)-1) for j in range(i+1,len(s)))", "from functools import reduce, partial\nfrom operator import mul\nproduct = partial(reduce, mul) \n\ndef maximum_product_of_parts(n):\n    s = str(n)\n    l = len(s)\n    return max(product(map(int, (s[:i], s[i:j], s[j:]))) for i in range(1, l-1) for j in range(i+1, l))", "def maximum_product_of_parts(number):\n    s, n, result = str(number), len(str(number)), 0\n    for i in range(1, n - 1):\n        for j in range(i + 1, n):\n            start, middle, end = s[0:i], s[i:j], s[j:]\n            result = max(result, int(start) * int(middle) * int(end))\n    return result", "def maximum_product_of_parts(n:int)->int:\n    n = str(n)\n    return max([int(n[:i])*int(n[i:j])*int(n[j:]) for i in range(1,len(n)+1) for j in range(i+1,len(n))])", "import itertools\n\ndef maximum_product_of_parts(n):\n    s = str(n)\n    return max(\n        int(s[:i]) * int(s[i:j]) * int(s[j:])\n        for i, j in itertools.combinations(range(1, len(s)), 2)\n    )", "def maximum_product_of_parts(n):\n    n = str(n)\n    s=[]\n    for i in range(1,len(n)-1):\n        for h in range(i+1,len(n)):\n            f,m,l = int(n[0:i]),int(n[i:h]),int(n[h:])\n            s.append(f*m*l)\n    return max(s)", "def maximum_product_of_parts(n):\n    products = []\n    \n    n = str(n)\n    l = len(n)\n    for i in range(1, l - 1) :\n        for j in range(i + 1, l) :\n            k = int(n[:i]) * int(n[i : j]) * int(n[j : l])\n            products.append(k)\n    return max(products)", "maximum_product_of_parts=lambda n:(lambda s:max(int(s[:i])*int(s[i:j])*int(s[j:])for j in range(2,len(s))for i in range(1,j)))(str(n))", "def maximum_product_of_parts(n):\n    ns = str(n)\n    return max(int(ns[:b])*int(ns[b:c])*int(ns[c:]) for a in range(len(ns)-2) for b in range(a+1,len(ns)-1) for c in range(b+1,len(ns)))\n", "def maximum_product_of_parts(s):\n    s = str(s)\n    subs = []\n    for i in range(1, len(s)-1):\n        for j in range(i+1, len(s)):\n            subs.append([int(x) for x in [s[0:i], s[i:j], s[j:]]])\n    return max([x*y*z for [x,y,z] in subs])\n"]