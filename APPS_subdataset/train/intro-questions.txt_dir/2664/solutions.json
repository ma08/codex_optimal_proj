["def solve(s):\n    v = sum(s[i] != s[-1-i] for i in range((len(s))//2) )\n    return v == 1 or not v and len(s)%2", "solve=lambda s:any(s[:y]+c+s[y+1:]==(s[:y]+c+s[y+1:])[::-1]!=s for y,x in enumerate(s)for c in set(s))", "def solve(s):\n    d = sum(1 for i in range(len(s) // 2) if s[i] != s[-i-1])\n    return d == 1 or d == 0 and len(s) % 2 == 1", "def solve(s):\n    h = len(s) // 2\n    diffs = sum(1 for a, b in zip(s[:h], s[-h:][::-1]) if a != b)\n    return diffs == 1 or (diffs == 0 and len(s) % 2 == 1)", "def solve(s):\n    r = sum(a != b for a, b in zip(s, s[::-1]))\n    return r == 2 or r == 0 and len(s)%2", "def solve(s):\n    r = sum([1 for i,x in enumerate(s[:len(s)//2]) if x!=s[-i-1]])\n    return s==s[::-1] and len(s)%2 or r==1\n", "def solve(s):\n    if s == s[::-1] and len(s) % 2 == 0: return False\n    \n    start = 0\n    end = len(s)-1\n    mid = end//2\n    count = 0\n    while start < mid:\n        for i in range(mid):\n            if s[start] != s[end]:\n                count += 1\n            start += 1\n            end -= 1\n    if count <= 1:\n        return True\n    return False\n", "def solve(s):\n    if len(s) % 2 and s == s[::-1]:\n        return True\n    return len([c for i, c in enumerate(s[:len(s)//2]) if c != s[-(i+1)]]) == 1", "def solve(s):\n    dif = sum(a != b for a, b in zip(s, s[::-1]))\n    return dif == 2 or not dif and len(s) & 1", "def solve(s):\n    return 1 == ((sum([op!=code for (op, code) in zip(s[0:len(s)//2:1], s[-1:len(s)//2-1:-1])]))|(len(s)%2))", "def solve(s):\n    r = sum(s[i] != s[-1-i] for i in range(len(s)//2))\n    return r == 1 or (r == 0 and len(s) % 2)", "def solve(s):\n    n = sum(s[i] != s[-i - 1] for i in range(len(s) // 2))\n    return True if n == 1 else n ==0 and len(s) % 2 != 0", "def solve(s):    \n    c=sum(s[i]!=s[-1-i] for i in range(len(s)//2))\n    return c==1 or (c==0)*len(s)%2\n", "def solve(s):\n    t=s[::-1]\n    return sum(x!=y for x,y in zip(s,t))==2 or (s!=t and len(s)==2) or (len(t)%2==1 and t[:len(t)//2]==s[:len(t)//2])", "def solve(s):\n    all = sum(1 for i in range(len(s) // 2) if s[i] != s[-i-1])\n    return all == 1 or all == 0 and len(s)%2 == 1", "def solve(s):\n    r = [s[i] != s[len(s)-1-i] for i in range(len(s)//2)]\n    if len(s)%2: return True if sum(r)<2 else False\n    else: return True if sum(r)==1 else False", "def solve(s):\n    print(s)\n    return True if len([x for y,x in enumerate(s) if s[y] != s[-(y+1)]]) == 2 else True if (len(s) % 2 and not [x for y,x in enumerate(s) if s[y] != s[-(y+1)]] ) else False", "def solve(s):\n    reversed = s[::-1]\n    middle = len(s)//2\n    count = 0\n    \n    for i in range(middle):\n        if s[i] != reversed[i]:\n            count += 1\n    \n    if middle*2 == len(s):\n        if count == 1:\n            return True\n    else:\n        if count == 0 or count == 1:\n            return True\n    return False", "def solve(s):\n    print(s)\n    \n    if s == s[::-1] and len(s) % 2 == 0: return False\n    \n    left, right = [], []\n    l = list(s)\n    counter = 0\n    \n    while l:\n        e = l.pop(0)\n        if l:\n            e2 = l.pop()\n            if e != e2 and counter == 0:\n                e2 = e\n                counter += 1\n            right.insert(0, e2)\n        else:\n            e = left[-1]\n        left.append(e)\n        \n    s = ''.join(left + right)\n    \n    return s == s[::-1]\n        \n        \n", "def solve(n):\n    s = [0, 1][len(n)%2]\n    lh = n[:len(n)//2]\n    hh = n[len(n)//2+s:]\n    if s and lh == hh[::-1]:\n        return True\n    diffs = 0\n    for u, v in zip(lh, hh[::-1]):\n        if u != v:\n            diffs += 1\n        if diffs > 1:\n            return False\n    return diffs == 1\n"]