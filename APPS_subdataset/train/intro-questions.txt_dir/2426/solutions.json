["class Solution:\n    def smallestRangeI(self, A: List[int], K: int) -> int:\n        if len(A) == 1:\n            return 0\n        _min = min(A)\n        _max = max(A)\n        if _max - K <= _min + K:\n            return 0\n        return _max - _min - 2*K", "class Solution:\n    def smallestRangeI(self, A: List[int], K: int) -> int:\n        if (min(A)+abs(K)) > (max(A)-abs(K)):\n            return 0\n        else:\n            return (max(A)-abs(K))-(min(A)+abs(K))", "class Solution:\n    def smallestRangeI(self, A: List[int], K: int) -> int:\n        return max(max(A)-min(A)-2*K, 0)", "class Solution:\n    def smallestRangeI(self, A: List[int], K: int) -> int:\n        small,large = 10001,-1\n        for x in A:\n            small,large = min(x,small),max(x,large)\n        return max(large - small - 2*K,0)", "class Solution:\n    def smallestRangeI(self, A: List[int], K: int) -> int:\n        Max = max(A)\n        Min = min(A)\n        res = (Max - K) - (Min + K)\n        if res < 0:\n            return 0\n        return res", "class Solution:\n    def smallestRangeI(self, A: List[int], K: int) -> int:\n        return max((max(A)-K) - (min(A)+K), 0)", "class Solution:\n    def smallestRangeI(self, A: List[int], K: int) -> int:\n        return max(max(A) - min(A) - 2*K, 0)\n", "class Solution:\n    def smallestRangeI(self, A: List[int], K: int) -> int:\n        min_val = max_val = A[0]\n        \n        for a in A:\n            if a < min_val: min_val = a\n            elif a > max_val: max_val = a\n            # min_val = min(min_val, a)\n            # max_val = max(max_val, a)\n        \n        return max(max_val - min_val - 2 * K, 0)  \n        \n", "class Solution:\n    def smallestRangeI(self, A: List[int], K: int) -> int:\n        avg = round((min(A) + max(A)) / 2)\n        mn, mx = float('Inf'), float('-Inf')\n        for n in A:\n            d = min(K, abs(avg-n))\n            n += d * (-1 if n > avg else 1)\n            mn, mx = min(mn, n), max(mx, n)\n\n        return mx - mn\n", "class Solution:\n    def smallestRangeI(self, A: List[int], K: int) -> int:\n        A.sort()\n        return A[-1] - A[0] - 2 * K if A[-1] - A[0] > 2 * K else 0", "class Solution:\n    def smallestRangeI(self, A: List[int], K: int) -> int:\n        a, b = max(A), min(A)\n        diff = a - b\n        coverage = 2 * K\n        if diff <= coverage:\n            return 0\n        else:\n            return diff - coverage\n        \n                \n                \n", "class Solution:\n    def smallestRangeI(self, A: List[int], K: int) -> int:\n        mx, mn = max(A), min(A)\n\n        return max(mx - mn - 2 * K, 0)\n", "class Solution:\n    def smallestRangeI(self, A: List[int], K: int) -> int:\n        return max(0, max(A)-min(A)-2*K)", "class Solution:\n    def smallestRangeI(self, A: List[int], K: int) -> int:\n        v_min, v_max = min(A), max(A)\n        if v_max - v_min >= 2*K:\n            return v_max - v_min - 2*K\n        else:\n            return 0", "class Solution:\n    def smallestRangeI(self, A: List[int], K: int) -> int:\n        M, m = max(A), min(A)\n        if M-m <= 2*K:\n            return 0\n        else:\n            return (M-K)-(m+K)", "class Solution:\n    def smallestRangeI(self, A: List[int], K: int) -> int:\n        if (max(A)-min(A)) > K*2:\n            return max(A)-min(A) - K*2\n        else:\n            return 0", "class Solution:\n    def smallestRangeI(self, A: List[int], K: int) -> int:\n        max_value = max(A) - K\n        min_value = min(A) + K\n        if max_value > min_value:\n            return max_value - min_value\n        else:\n            return 0", "class Solution:\n    def smallestRangeI(self, A: List[int], K: int) -> int:\n        min_element, max_element = min(A), max(A)\n        return max(0, max_element - min_element - 2*K)\n                \n                \n        \n", "class Solution:\n    def smallestRangeI(self, A: List[int], K: int) -> int:\n        return max(0, max(A) - min(A) - 2 * K)\n", "class Solution:\n    def smallestRangeI(self, A: List[int], K: int) -> int:\n        return max(max(A) - min(A) - 2 * K, 0)\n#         min_val = max_val = A[0]\n        \n#         for a in A:\n#             if a < min_val: min_val = a\n#             elif a > max_val: max_val = a\n#             # min_val = min(min_val, a)\n#             # max_val = max(max_val, a)\n        \n#         return max(max_val - min_val - 2 * K, 0)  \n        \n", "class Solution:\n    def smallestRangeI(self, A: List[int], K: int) -> int:\n        mx = max(A)\n        mi = min(A)\n        return 0 if mx - mi <= 2*K else mx - mi - 2*K", "class Solution:\n    def smallestRangeI(self, A: List[int], K: int) -> int:\n        return max(0,max(A)-min(A)-2*K)\n", "class Solution:\n    def smallestRangeI(self, A: List[int], K: int) -> int:\n        ks = [K for a in A]\n        ks_left = True\n        last_change = 0\n        while ks_left and max(A) - min(A) > 0 and (max(A) - min(A)) != last_change:\n            last_change = max(A) - min(A)\n            # print(ks, A)\n            ks_left = False\n            average = sum(A) / len(A)\n            for i in range(len(A)):\n                difference = A[i] - average\n                if -ks[i] <= difference <= ks[i]:\n                    A[i] = average\n                    # print(A[i], ks[i], difference)\n                    ks[i] = abs(ks[i] - abs(difference))\n                    # print(A[i], ks[i], difference)\n                elif -ks[i] > difference:\n                    A[i] += ks[i]\n                    ks[i] = 0\n                else:\n                    A[i] -= ks[i]\n                    ks[i] = 0\n                if ks[i] > 0:\n                    ks_left = True\n        print((ks, A))\n        return int(max(A) - min(A))\n        \n        # if K == 0:\n        #     return max(A) - min(A)\n        # max_A = max(A)\n        # max_I = A.index(max_A)\n        # min_A = min(A)\n        # min_I = A.index(min_A)\n        # if -K <= max_A - min_A <= K:\n        #     A[max_I] -= (max_A - min_A) / 2\n        #     A[min_I] += (max_A - min_A) / 2\n", "class Solution:\n    def smallestRangeI(self, A: List[int], K: int) -> int:\n        A = sorted(A)\n        min1 = set()\n        max1 = set()\n        for i in range(K+1):\n            min1.add(A[0]+i)\n        \n        for i in range(K,-1,-1):\n            max1.add(A[-1]-i)\n            \n        #print(min1,max1)\n        \n        s1 = min1 & max1\n        if len(s1) > 0:\n            return 0\n        else:\n            return min(list(max1)) - max(list(min1))\n", "class Solution:\n    def smallestRangeI(self, A: List[int], K: int) -> int:\n        dist = max(A) - min(A)\n        return dist - 2 * K if dist > 2 * K else 0", "class Solution:\n    def smallestRangeI(self, a: List[int], k: int) -> int:\n        a = sorted(a)\n        a[-1] = max(a)\n        a[0]= min(a)\n        #print(a,a[-1])\n        if a[-1]-k<=(a[0]+k):\n            return 0\n        return  (a[-1]-k)-(a[0]+k)\n", "class Solution:\n    def smallestRangeI(self, a: List[int], k: int) -> int:\n        a = sorted(a)\n        #print(a,a[-1])\n        if a[-1]-k<=(a[0]+k):\n            return 0\n        return  (a[-1]-k)-(a[0]+k)\n", "class Solution:\n    def smallestRangeI(self, A: List[int], K: int) -> int:\n        if K == 0:\n            return max(A) - min(A)\n        # if len(set(A)) == 1:\n        #     return 0\n        mean = (max(A) + min(A)) // 2\n        B = []\n        for num in A:\n            if num + K <= mean:\n                B.append(num + K)\n            elif num - K >= mean:\n                B.append(num - K)\n            else:\n                B.append(mean)\n        return max(B) - min(B)", "class Solution:\n    def smallestRangeI(self, A: List[int], K: int) -> int:\n        if K == 0:\n            return max(A) - min(A)\n        if len(set(A)) == 1:\n            return 0\n        mean = (max(A) + min(A)) // 2\n        B = []\n        for num in A:\n            if num + K < mean:\n                B.append(num + K)\n            elif num - K > mean:\n                B.append(num - K)\n            else:\n                B.append(mean)\n        return max(B) - min(B)"]