["def enough(cap, on, wait):\n    return max(0, wait - (cap - on))", "def enough(cap, on, wait):\n    return max(0, on + wait - cap)", "def enough(cap, on, wait):\n    return wait + on - cap if wait + on > cap else 0", "def enough(cap, on, wait):\n    return max(on + wait - cap, 0)", "def enough(cap, on, wait):\n    if cap-on>=wait:\n        return 0\n    else:\n        return abs(cap-(on+wait))", "def enough(cap, on, wait):\n  rem=cap-on\n  if wait<=rem:\n   return 0\n  else :\n   return wait-rem\na=enough(5,3,2)\nif a==0:\n print(\"Yes.Bob can take all passengers with him\")\nelse :\n print((\"Woops.Bob can't able to take \",a,\" passengers into the bus\"))\n   \n", "enough = lambda c,o,w: max(0, w-(c-o))", "def enough(cap, on, wait):\n    return max(wait + on - cap, 0)", "def enough(cap, on, wait):\n    res = cap-(on+wait)\n    return [0, abs(res)][res<0]", "def enough(cap, on, wait):\n    # Your code here\n    if on + wait > cap:\n        missed_out = on + wait - cap\n    else:\n        missed_out = 0\n    return missed_out", "def enough(cap, on, wait):\n# See if there is enough room\n    if cap - on >= wait:\n        return 0                  # This means enough room for those waiting\n    else:\n        return wait - cap + on    # This is the number of those who cannot get on", "def enough(cap, on, wait):\n    '''\n    :param cap: total number of seats\n    :param on: number of passengers on the bus\n    :param wait: number of passengers waiting for the bus\n    :return: number of passengers that can't enter the bus\n    '''\n    if wait - (cap - on) < 0:\n        return 0\n    else:\n        return wait - (cap - on)", "def enough(cap, on, wait):\n    return abs(cap-(on+wait) if cap<(on+wait) else 0)\n", "def enough(cap, on, wait):\n    remainingCapacity = cap - on\n    if remainingCapacity <= wait:\n        return (wait - remainingCapacity)\n    else:\n        return 0", "def enough(cap, on, wait):\n    return abs(min(cap - on - wait, 0))", "def enough(cap, on, wait):\n    return 0 if cap - on >= wait else wait - cap + on", "enough = lambda cap, on, wait: 0 if cap - on - wait >= 0 else abs(cap - on - wait)", "def enough(cap, on, wait):\n    return -min(0, cap-(on+wait))", "def enough(cap, on, wait):\n    # Your code here\n    import math\n    if cap>=(on+wait):\n        return 0\n    elif cap<(on+wait):\n        return abs((cap-(wait+on)))", "def enough(cap, on, wait):\n    a=cap-on\n    if a>=wait:\n        return 0\n    else:\n        b=wait-a\n        return b", "def enough(cap, on, wait):\n    answer = on + wait - cap\n    if answer < 0:\n        return 0\n    else:\n        return answer", "def enough(cap, on, wait):\n    cap -= on\n    if wait-cap <= 0:\n        return 0\n    else:\n        return wait-cap", "def enough(cap, on, wait):\n    c=wait-(cap-on)\n    if c<0:\n        return 0\n    return c\n    # Your code here\n", "def enough(cap, on, wait):\n    num = cap - on\n    if num == wait:\n        return 0\n    if wait > num:\n        return (wait-num)\n    else:\n        return 0", "def enough(cap, on, wait):\n    return 0 if cap >= (on+wait) else on+wait-cap", "def enough(cap, on, wait):\n    return (cap-on-wait)*-1 if cap-on-wait<=0 else 0", "def enough(cap, on, wait):\n    return 0 if cap >= on + wait else (on + wait) % cap", "def enough(cap, on, wait):\n    x = on + wait\n    if x <= cap:\n        return 0\n    elif x > cap:\n        return x - cap\n    else:\n        return 'Not Sure'\n", "def enough(cap, on, wait):\n    return wait - (cap-on) if wait - (cap-on) >= 0 else 0", "def enough(cap, on, wait):\n    cap_lef = cap - on\n    still_wait = wait - cap_lef\n    if still_wait > 0:\n        return still_wait\n    else:    \n        return 0\n", "enough=lambda c,o,w:0 if c-o>=w else w-(c-o)\n", "def enough(cap, on, wait):\n    # Your code here\n    c=cap-on\n    if(wait<=c):\n        return 0\n    else:\n        return wait-c", "def enough(cap, on, wait):\n    return 0 if cap-on-wait > 0 else wait-cap+on", "def enough(cap, on, wait):\n    empty = cap - on\n    return 0 if empty >= wait else wait - empty", "def enough(cap, on, wait):\n    if cap < on + wait:\n        return wait-(cap-on)\n    else:\n        return 0", "def enough(cap, on, wait):\n    \n    remaining = cap - (on+wait)\n    return abs(remaining) if remaining < 0 else 0", "def enough(cap, on, wait):\n    r = on + wait - cap\n    return 0 if r < 0 else r", "def enough(cap, on, wait):\n    cap = int(cap)\n    on = int(on)\n    wait = int(wait)\n    \n    if cap >= on + wait:\n        return 0\n    else:\n        diff = on + wait - cap\n        cap != on + wait\n        return diff", "def enough(cap, on, wait):\n    if wait <= cap-on:\n        return 0\n    else:\n        return abs(wait-(cap-on))", "def enough(cap, on, wait):\n    space = cap - on\n    return wait - space if space < wait else 0", "def enough(cap, on, wait):\n    return(0 if cap>=on+wait else -cap+on+wait)", "def enough(cap, on, wait):\n    enough_space = on + wait - cap\n    if enough_space <= 0:\n        return 0\n    else:\n        return enough_space\n", "def enough(cap, on, wait):\n    return 0 if wait < cap - on else -(cap-on-wait)", "def enough(cap, on, wait):\n    print(cap,on,wait)\n    return 0 if on+wait<=cap else on+wait-cap", "def enough(cap, on, wait):\n    if cap - on == wait:\n        return 0\n    elif cap - on < wait:\n        return (cap - on - wait)*(-1)\n    elif wait < cap - on:\n        return 0", "def enough(cap, on, wait):\n    \n    people_left = wait - (cap - on)\n    \n    if (people_left <= 0):\n        return 0\n    \n    if people_left > 0:\n        return people_left\n        \n   \n    \n    \n    # Your code here\n", "def enough(cap, on, wait):\n    a = cap-on-wait\n    if a >= 0:\n        return 0\n    else:\n        return abs(a)\n    # Your code here\n", "def enough(cap, on, wait):\n    if wait > cap - on:\n        return on + wait - cap\n    return 0", "def enough(cap, on, wait):\n    return -(cap-on-wait) if cap<=on+wait else 0", "def enough(cap, on, wait):\n    c = (cap - on) - wait\n    if c == 0:\n        return 0\n    if c > 0:\n        return 0 \n    else: \n        return c * -1", "def enough(cap, on, wait):\n    free = cap-on\n    return 0 if free >= wait else wait-free\n", "def enough(cap, on, wait):\n    x = cap - on - wait\n    return x*-1 if x <= 0 else 0", "def enough(cap, on, wait):\n    cant=cap-on-wait\n    if cant>=0:\n        return 0\n    else:\n        return abs(cant)", "def enough(cap, on, wait):\n    if on + wait  <= cap:\n        return 0\n    else:\n        rest = cap - (on + wait)\n        return abs(rest)", "def enough(cap, on, wait):\n    num = wait - (cap - on) \n    if num >= 0:\n        return num\n    else:\n        return 0", "def enough(cap, on, wait):\n    cant = cap - wait\n    if on + wait > cap:\n        a = cap - on - wait\n        return abs(a)        \n    else:\n        return 0\n", "def enough(cap, on, wait):\n    resultado = (on + wait - cap)\n    return resultado if resultado > 0 else 0\n    # Your code here\n", "def enough(cap, on, wait):\n    return -(cap - (on + wait)) if (cap - (on + wait)) < 0 else 0", "def enough(cap, on, wait):\n    if on + wait > cap:\n        return (cap - (on + wait)) * -1;\n    return 0;", "def enough(cap, on, wait):\n    if cap-on+1>wait: return 0\n    else:return wait-cap+on", "def enough(cap, on, wait):\n    # Your code here\n    diff = cap-on-wait\n    return 0 if diff >=0 else -diff", "def enough(cap, on, wait):\n    # Your code here\n    c=cap-on\n    if c<wait:\n        return wait-c\n    return 0", "def enough(cap, on, wait):\n    if cap - on >= wait: #capacity minus bus occupancy more or equal than of people waiting \n        return 0 #If there is enough space, return 0.\n    else:\n        return abs(cap - (on + wait)) #and if there isn't, return the number of passengers he can't take\n                                      #abs() function: return absolute values of a num.\n", "def enough(cap, on, wait):\n    x = cap - on\n    if x >= wait:\n        return 0\n    else:\n        return wait - x", "def enough(cap, on, wait):\n    if cap - on - wait < 0:\n        seats_left = cap - on\n        return wait - seats_left\n    else:\n        return 0", "def enough(cap, on, wait):\n    return 0 if wait + on <= cap - 1 else wait + on - (cap)", "def enough(cap, on, wait):\n    difference = cap - on\n    if difference < wait:\n        return wait - difference\n    return 0", "def enough(cap, on, wait):\n    if wait > cap-on:\n        return wait + on - cap\n    else:\n        return 0", "def enough(cap, on, wait):\n    rest = on + wait - cap\n    if rest <= 0:\n        return 0\n    return rest", "def enough(c,n,w):\n    x=w-(c-n)\n    return x if x>0 else 0", "def enough(cap, on, wait):\n    return wait - cap + on if wait - cap + on > 0 else 0", "def enough(cap, on, wait):\n    if cap == on + wait or cap > on + wait:\n        return 0\n    else:\n        return abs(cap - (on + wait))", "def enough(cap, on, wait):\n    takes = cap - on - wait\n    return 0 if takes>=0 else -(takes)\n    # Your code here\n", "def enough(cap, on, wait):\n    x = wait - cap + on\n    return x if x > 0 else 0", "def enough(cap, on, wait):\n    available = cap - on\n    return max(wait-available, 0)", "def enough(cap, on, wait):\n    return 0 if cap - on - wait > 0 else (cap - on - wait) * -1", "def enough(cap, on, wait):\n    n=0\n    if cap>=on+wait:\n        return 0\n    else:\n        n=cap-on-wait\n        return abs(n)\n    # Your code here\n", "def enough(cap, on, wait):\n    a = cap - on - wait\n    if a >= 0: return 0\n    else: return a * -1", "def enough(cap, on, wait):\n    r = cap - on - wait\n    return [0,abs(r)][r<0]", "def enough(cap, on, wait):\n    remaining = cap - on\n    \n    if remaining >= wait:\n        return 0\n    else:\n        return wait - remaining", "def enough(cap, on, wait):\n    print(cap,on,wait)\n    if on + wait > cap :\n        return -cap+(on+wait)\n    else:\n        return 0", "def enough(cap, on, wait):\n    seat = (cap - on) - wait\n\n    return 0 if seat >= 0 else abs(seat)", "def enough(cap, on, wait):\n    return wait - (cap - on) if on + wait > cap else 0", "def enough(cap, on, wait):\n    \"\"\" return wait list if bus is full\"\"\"\n    wait_list = on + wait - cap\n    return (wait_list > 0) * wait_list", "def enough(cap, on, wait):\n    print(cap, on, wait)\n    return 0 if wait <= cap-on else wait-(cap- on ) ", "def enough(cap, on, wait):\n    if on >= cap:\n        return wait\n    spots = cap - on\n    if spots >= wait:\n        return 0\n    return wait - spots\n\n", "def enough(maximal, drin, warten):\n    pers = drin + warten\n    \n    if pers <= maximal:\n        return 0 \n    elif pers > maximal:\n        return pers - maximal", "def enough(cap, on, wait):\n    # Your code here\n    cap -= on\n#     if cap>=wait:\n#         return 0\n#     else:\n#         return wait-cap\n    return max(wait-cap, 0)", "def enough(cap, on, wait):\n    return (on+wait-cap) * (on + wait > cap)", "def enough(cap, on, wait):\n    return 0 if cap-on-wait>0 else abs(cap-on-wait) if cap-on-wait<0 else 0", "def enough(cap, on, wait):\n    n = (on + wait)\n    if cap > n:\n        return 0 \n    return (on + wait) - cap", "def enough(cap, on, wait):\n    total = on + wait\n    return 0 if cap >= total else abs(cap - total)", "def enough(cap, on, wait):\n    return 0 if cap > on + wait else wait + on - cap", "def enough(cap, on, wait):\n    return abs(on + wait - cap) if cap < on + wait else 0", "def enough(cap, on, wait):\n    return  0 if cap%(on+wait)  == 0 or (on+wait) < cap else (on+wait)-cap\n\n", "def enough(cap, on, wait):\n    if on + wait == cap:\n       return 0\n    elif on + wait > cap:\n       return wait - (cap - on)\n    else:\n       return 0", "def enough(cap, on, wait):\n    b = -(cap - on - wait)\n    return 0 if cap - (on + wait) >= 0 else b", "exec(\"\"\"\\ndef enough(cap, on, wait):\\n    a = on + wait\\n    b = cap - a \\n    if b >= 0:\\n        return 0\\n    else:\\n        return abs(b)\\n\"\"\")", "def enough(cap, on, wait):\n    a = on + wait\n    b = cap - a \n    if b >= 0:\n        return 0\n    else:\n        return abs(b)", "def enough(cap, on, wait):\n    return 0 if cap - on - wait >= 0 else wait + on - cap"]