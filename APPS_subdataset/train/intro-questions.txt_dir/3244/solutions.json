["def cheapest_quote(n):\n    prices = [(40, 3.85), (20, 1.93), (10, 0.97), (5, 0.49), (1, 0.10)]\n    result = 0\n    for q, c in prices:\n        result += n // q * c\n        n = n % q\n    return round(result, 2)\n        \n", "def f(n, v):\n    # Removes remainders from Calculation\n    #     Technically not doing this will still work \n    #     in python 2 but I considered it to be bad \n    #     practice, so I changed it.\n    return n / v - (n % v) / v\n    \ndef cheapest_quote(n):\n    # Pattern max 4:\n    #     n*.1 (solution without 'discounts')\n    #   Subtract sum of total by sum of discount:\n    #     divide by 5 and then 2 (repeat) until 1;\n    #     multply by .01 (change to fraction).\n    #   Simplified n/5/2 to n/10 and so on.\n    return round(n*.1-(f(n, 5)+f(n, 10)+f(n, 20)+f(n, 40))*.01, 2)", "DELIVERY_COST = ((40, 385), (20, 193), (10, 97), (5, 49), (1, 10))\n\n\ndef cheapest_quote(n):\n    result = 0\n    for total_newspapers, cost_of_newspapers in DELIVERY_COST:\n        q, r = divmod(n, total_newspapers)\n        if q:\n            n -= q * total_newspapers\n            result += q * cost_of_newspapers\n        if not r:\n            break\n    return result / 100.0\n", "def cheapest_quote(papers):\n\n    prices = {40:3.85, 20:1.93, 10:0.97, 5:0.49, 1:0.10}\n    cost = 0\n    \n    for price in prices:\n        cost += (papers // price) * prices[price]\n        papers %= price\n    \n    return round(cost, 2)\n    \n    # 7kyu kata number one thousand\n", "d={40:3.85, 20:1.93, 10:0.97, 5:0.49, 1:0.10}\ndef cheapest_quote(n):\n    papers, total = 40, 0\n    while n>0:\n        if n>=papers:\n            total += d[papers]*(n//papers)\n            n %= papers\n        if papers>5: papers //=2\n        else: papers = 1\n    return round(total,2)", "def cheapest_quote(n):\n    rates = [(40, 3.85), (20, 1.93), (10, 0.97), (5, 0.49), (1, 0.1)]\n    total = 0\n    for bundle, price in rates:\n        total += n//bundle * price\n        n %= bundle\n    return round(total, 2)", "costs = [\n    (3.85, 40),\n    (1.93, 20),\n    (0.97, 10),\n    (0.49, 5),\n    (0.10, 1),\n]\n\n\ndef cheapest_quote(n):\n    price = 0\n    for cost, qty in costs:\n        q, n = divmod(n, qty)\n        price += cost * q\n    return round(price, 2)", "def cheapest_quote(n):\n    price, costs = 0, [(1, 0.1), (5, 0.49), (10, 0.97), (20, 1.93), (40, 3.85)]\n    while n:\n        quantity, cost = costs.pop()\n        price += (n // quantity) * cost\n        n %= quantity\n    return round(price, 2)", "bundles = {40:3.85, 20:1.93, 10:0.97, 5:0.49, 1:0.10}\n\ndef cheapest_quote(n):\n   \n    if n == 0 : return 0.00    \n    \n    for i in [40,20,10,5,1] :\n        if n-i > -1:   \n            return round(int(n/i) * bundles[i] + cheapest_quote(n%i), 2)\n            \n", "def cheapest_quote(n):\n\n    if n < 1:\n        return 0\n    \n    bundles = iter([(40, 3.85), (20, 1.93), (10, 0.97), (5, 0.49), (1, 0.1)])\n    total = 0\n    \n    while n > 0:\n        size, price = next(bundles)\n        if size <= n:\n            q, n = divmod(n, size)\n            total += q * price\n            \n    return round(total, 2)", "d = __import__(\"collections\").OrderedDict(\n    [(int(y), float(x)) for x, y in __import__(\"re\").findall(r\"(\\d\\.\\d{2}).*?(\\d+)\",\n        \"\"\"\n        $3.85 for 40 newspapers\n        $1.93 for 20\n        $0.97 for 10\n        $0.49 for 5\n        $0.10 for 1\n        \"\"\")\n    ])\n\ndef cheapest_quote(n, r = 0):\n    for k, v in d.items():\n        r += n // k * v\n        n %= k\n        if not n: break\n    return round(r, 2)", "b = {40:3.85,20:1.93,5:0.49,1:0.1,10:0.97}\ndef cheapest_quote(n):\n    a = [0.0]\n    while n != 0:\n        if n - 40 >= 0:\n            n-= 40\n            a.append(b[40])\n            continue\n        if n - 20 >= 0:\n            n-= 20\n            a.append(b[20])\n            continue\n        if n - 10 >= 0:\n            n-= 10\n            a.append(b[10])\n            continue\n        if n - 5 >= 0:\n            n-= 5\n            a.append(b[5])\n            continue\n        if n - 1 >= 0:\n            n-= 1\n            a.append(b[1])\n            continue\n        if n < 0:\n            break\n    return round(sum(a),2)", "def cheapest_quote(n):\n\n    s1 = n // 40\n    y1 = n % 40\n    \n    s2 = y1 // 20\n    y2 = y1 % 20\n    \n    s3 = y2 // 10\n    y3 = y2 % 10\n    \n    s4 = y3 // 5\n    y4 = y3 % 5\n    \n    return float('%.2f'%(s1 * 3.85 + s2 * 1.93 + s3 * 0.97 + s4 * 0.49 + y4 * 0.10))", "def cheapest_quote(n):\n    forty = int(n/40) \n    twenty = int((n - (forty*40))/20) \n    ten = int((n - (forty*40) - (twenty*20))/10) \n    five = int((n-(forty*40) -(twenty*20) - (ten*10))/5) \n    one = int((n-(forty*40)-(twenty*20)-(ten*10)-(five*5))/1) \n    return round((forty*3.85) + (twenty*1.93) + (ten*.97) + (five*.49) + (one*.1),2)"]