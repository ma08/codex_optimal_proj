["notes = {\n440: \"A\",\n466.16: \"A#\",\n493.88: \"B\",\n523.25: \"C\",\n554.37: \"C#\",\n587.33: \"D\",\n622.25: \"D#\",\n659.25: \"E\",\n698.46: \"F\",\n739.99: \"F#\",\n783.99: \"G\",\n830.61: \"G#\"\n}\n\ndef get_note(pitch):\n\n    for note in notes:\n        if note >= pitch and note % pitch == 0:\n                return notes[note]\n        elif note < pitch and pitch % note == 0:\n                return notes[note]", "N=\"A A# B C C# D D# E F # F# G G#\".split()\nget_note=g=lambda n:12<n//1<27and N[int(n)-13]or g(n/2)", "from math import log2\n\nns=[\"A\",\"A#\",\"B\",\"C\",\"C#\",\"D\",\"D#\",\"E\",\"F\",\"F#\",\"G\",\"G#\"]\n\ndef get_note(p):\n    return ns[round(log2(p/55)*12)%12]", "notesDictionary = {\n440: \"A\",\n466.16: \"A#\",\n493.88: \"B\",\n523.25: \"C\",\n554.37: \"C#\", \n587.33: \"D\", \n622.25: \"D#\", \n659.25: \"E\", \n698.46: \"F\", \n739.99: \"F#\", \n783.99: \"G\", \n830.61: \"G#\"\n}\ndef get_note(pitch):\n    for key, value in notesDictionary.items():\n        if max(pitch, key) % min(pitch, key) == 0:\n            return value", "notesDictionary = {\n    440: \"A\",\n    466.16: \"A#\",\n    493.88: \"B\",\n    523.25: \"C\",\n    554.37: \"C#\", \n    587.33: \"D\", \n    622.25: \"D#\", \n    659.25: \"E\", \n    698.46: \"F\", \n    739.99: \"F#\", \n    783.99: \"G\", \n    830.61: \"G#\"\n}\n\ndef adjust_pitch(pitch):\n    if pitch in notesDictionary:\n        return pitch\n    elif pitch<440:\n        while pitch not in notesDictionary:\n            pitch *= 2\n        return pitch\n    elif pitch>830:\n        while pitch not in notesDictionary:\n            pitch = pitch / 2\n        return pitch\n    else:\n        # shouldn't happen\n        return -1\n\ndef get_note(pitch):\n    return notesDictionary[adjust_pitch(pitch)]\n\n"]