["def hot_singles(arr1, arr2):\n    a = []\n    for x in arr1 + arr2:\n        if x in set(arr1) ^ set(arr2) and x not in a: a.append(x)\n    return a", "from collections import OrderedDict\nfrom itertools import chain\n\n\ndef hot_singles(arr1, arr2):\n    diff = set(arr1).symmetric_difference(arr2)\n    return [a for a in OrderedDict.fromkeys(chain(arr1, arr2)) if a in diff]", "def hot_singles(lst1, lst2):\n    return sorted(set(lst1) ^ set(lst2), key=(lst1 + lst2).index)", "def ordered(l, arr1,arr2):\n    return [l,arr2.index(l) + len(arr1) if l in arr2 else arr1.index(l)]\n\ndef hot_singles(arr1, arr2):\n    L = [ ordered(l,arr1,arr2) for l in set(arr1) ^ set(arr2)]\n    return list(map(lambda l: l[0], sorted(L , key=lambda l: l[1])))", "def hot_singles(arr1, arr2):\n    vals = arr1 + arr2\n    return sorted(set(arr1).symmetric_difference(arr2), key=vals.index)\n", "def hot_singles(arr1, arr2):\n    result = []\n    for i in arr1:\n        if i not in arr2 and i not in result:\n            result.append(i)\n    for i in arr2:\n        if i not in arr1 and i not in result:\n            result.append(i)\n            \n    return result\n    #your code here\n", "hot_singles=lambda a,b:sorted(set(a)^set(b),key=(a+b).index)", "hot_singles=lambda A,B:sorted(set(A)^set(B),key=(A+B).index)", "def hot_singles(arr1, arr2):\n    return sorted(set(arr1).symmetric_difference(set(arr2)), key=(arr1+arr2).index)", "def hot_singles(arr1, arr2):\n    return sorted(set(arr1) ^ set(arr2), key=lambda x: ((arr1+arr2).index(x)))"]