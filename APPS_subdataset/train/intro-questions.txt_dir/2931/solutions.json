["def count_cows(n):\n    if not isinstance(n, int):\n        return None\n    return 1 if n < 3 else count_cows(n-1) + count_cows(n-3)", "def count_cows(n):\n    if isinstance(n, int):\n        a, b, c = 1, 0, 0\n        for _ in range(n):\n            a, b, c = c, a, b + c\n        return a + b + c", "def count_cows(n):\n    if type(n) != int: return None\n    a, b, c, d = 1, 0, 0, 0\n    for _ in range(n):\n        a, b, c, d = c + d, a, b, c + d       \n    return a + b + c + d", "solution = __import__(\"functools\").lru_cache(maxsize=None)(lambda n: 1 if n < 3 else solution(n-1) + solution(n-3))\n\ndef count_cows(n):\n    if type(n) == int:\n        return solution(n)", "def count_cows(n):\n    if isinstance(n, int):\n        return 1 if n < 3 else count_cows(n - 1) + count_cows(n - 3)", "from functools import lru_cache\n\n@lru_cache(maxsize=None)\ndef f(n):\n    if n < 3:\n        return 1\n    return f(n-3) + f(n-1)\n\ndef count_cows(n):\n    if not isinstance(n, int):\n        return None\n    return f(n)\n", "def count_cows(n):\n    if not isinstance(n, int):\n        return None\n    # Cows at each age\n    cows = [0, 0, 0, 1]\n    for _ in range(n):\n        cows = [cows[0] + cows[1], cows[2], cows[3], cows[0] + cows[1]]\n    return sum(cows)", "from collections import deque\ndef count_cows(n):\n    if not isinstance(n, int):\n        return None\n    calves = deque([1, 0, 0])\n    cows = 0\n    for i in range(n):\n        cows += calves.pop()\n        calves.appendleft(cows)\n    return cows + sum(calves)", "def count_cows(n):\n    if isinstance(n,int):\n        if n<3: return 1\n        return count_cows(n-1)+count_cows(n-3)", "def count_cows(n):\n    if not isinstance(n, int):\n        return None\n    cows = [1]\n    old_cows = 0\n    for _ in range(n):\n        cows = [old_cows] + cows\n        if len(cows) >= 3:\n            old_cows += cows.pop()\n    return sum(cows) + old_cows\n"]