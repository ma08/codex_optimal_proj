["def share_price(invested, changes):\n    for change in changes:\n        invested = invested * (100 + change) / 100.0\n    return format(invested, '.2f')", "def share_price(invested, changes):\n    sum=float(invested)\n    for i in changes:\n        sum=sum+(sum/100*i)\n    return str('{:.2f}'.format(float(sum)))", "def share_price(invested, changes):\n    for change in changes:\n        invested = invested + ( invested * (change/100.00) )\n    return \"%.2f\" % invested \n    \n", "import operator\nfrom functools import reduce\n\n\ndef share_price(invested, changes):\n    multipliers = (1.0 + c / 100.0 for c in changes)\n    product = reduce(operator.mul, multipliers, 1.0)\n    return '%.2f' % (invested * product)\n", "from functools import reduce\n\ndef share_price(invested, changes):\n    r = reduce(lambda acc, x: acc + x * acc * 0.01, changes, invested)\n    return '{:.2f}'.format(r)", "from functools import reduce\ndef share_price(invested, changes):\n    return '{:.2f}'.format(\n        reduce(lambda a, b: a + (a * (b / 100.0)), changes, invested))\n"]