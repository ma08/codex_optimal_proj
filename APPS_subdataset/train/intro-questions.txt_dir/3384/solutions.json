["def lucas_lehmer(n):\n    return n in [2, 3, 5, 7, 13, 17, 19, 31, 61, 89, 107, 127, 521, 607, 1279,\n                 2203, 2281, 3217, 4253, 4423, 9689, 9941, 11213, 19937, 21701,\n                 23209, 44497, 86243, 110503, 132049, 216091, 756839, 859433,\n                 1257787, 1398269, 2976221, 3021377, 6972593, 13466917, 20996011,\n                 24036583, 25964951, 30402457, 32582657, 3715666]", "# I mean, if you say we found less than 50 of them, there's no point in computing them again\nlucas_lehmer = {2, 3, 5, 7, 13, 17, 19, 31, 61, 89,\n                107, 127, 521, 607, 1279, 2203, 2281,\n                3217, 4253, 4423, 9689, 9941, 11213, 19937,\n                21701, 23209, 44497, 86243, 110503, 132049,\n                216091, 756839, 859433, 1257787, 1398269,\n                2976221, 3021377, 6972593, 13466917, 20996011,\n                24036583, 25964951, 30402457, 32582657, 37156667,\n                42643801, 43112609}.__contains__", "def lucas_lehmer(n):\n    m = (1 << n) - 1\n    s = 4\n    for i in range(n - 2):\n        s = s * s - 2\n        while int.bit_length(s) > n:\n            s = (s >> n) + (s&m)\n    return s == m or n == 2", "def lucas_lehmer(n):\n    if n == 2:\n        return True\n    m = 2**n - 1\n    s = 4\n    for i in range(2, n):\n        sqr = s*s\n        s = (sqr & m) + (sqr >> n)\n        if s >= m:\n            s -= m\n        s -= 2\n    return s == 0    ", "def lucas_lehmer(n,s=4):\n    m=2**n-1\n    for _ in range(2,n):\n        s=s*s-2\n        while m<s:s=(s&m)+(s>>n)\n    return n==2or s in(0,m)", "lucas_lehmer=lambda p:p in[2,3,5,7,13,17,19,31,61,89,107,127,521,607,1279,2203,2281,3217,4253,4423,9689,9941,11213,19937]", "def isPrime(n):\n    if n % 2 == 0 and n > 2: \n        return False\n    return all(n % i for i in range(3, int(n**.5 + 1), 2))\n    \ndef S(n):\n    if n==1: return 4\n    return S(n-1) * S(n-1) - 2\n\ndef mod_equiv(n,p):\n    binario = bin(n)[2:]\n    suma = n\n    while len(binario) > p:\n        suma = int(binario[-p:],2) + int(binario[:-p],2)\n        binario = bin(suma)[2:]\n    return suma\n\n\ndef lucas_lehmer(n):\n    if not isPrime(n): return False\n    s = 4\n    M = 2**n-1\n    for i in range(n-2):\n        # s = (s*s-2) % M\n        s = (mod_equiv(s*s-2,n)) % M\n    return s == 0 or n==2", "def lucas_lehmer(n):\n    if n==1:\n        return False\n    elif n==2:\n        return True\n    s=4\n    mp=(2**n-1)\n    for i in range(n-2):\n        s=s*s-2\n        while(s>=mp):\n            s=(s>>n)+(s&mp)\n            if s==mp:\n                s=0\n    return s == 0", "def lucas_lehmer(n):\n    if n == 2:\n        return True\n    m = 2 ** n - 1\n    s = 4\n    for i in range(2, n):\n        ss = s * s\n        s = (ss >> n) + (ss & m)\n        if s >= m:\n            s -= m\n        s -= 2\n    return s == 0"]