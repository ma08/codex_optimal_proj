["from collections import Counter\n\nREQUIRE = {x: Counter(s) for x,s in [('road', 'bw'), ('settlement', 'bwsg'), ('city', 'ooogg'), ('development', 'osg')] }\n\ndef build_or_buy(hand):\n    h = Counter(hand)\n    return [item for item,c in REQUIRE.items() if not c-h]", "def build_or_buy(hand):\n    d = {'bw': 'road', 'bwsg': 'settlement', 'ooogg': 'city', 'osg': 'development'}\n    \n    res = []\n    for r, build in d.items():\n        if all(hand.count(i) >= r.count(i) for i in set(r)):\n            res.append(build)\n    return res", "def build_or_buy(h):\n    l = {'road': 'bw',\n    'settlement': 'bwsg',\n    'city': 'ooogg',\n    'development': 'osg'}\n    return [x for x in l if all(l[x].count(y)<=h.count(y) for y in l[x])] if h else []", "from collections import Counter\n\nreqs = {\"road\": Counter(\"bw\"), \"settlement\": Counter(\"bwsg\"), \n        \"city\": Counter(\"ooogg\"), \"development\": Counter(\"osg\")}\n\ndef build_or_buy(hand):\n    return list(filter(lambda obj: not reqs[obj] - Counter(hand), reqs.keys()))", "def build_or_buy(hand):\n    result = []\n\n    b, w, g, s, o = [hand.count(st) for st in 'b,w,g,s,o'.split(',')]\n    \n    if b and w:\n        result.append('road')\n        if s and g:\n            result.append('settlement')\n    if o and g:\n        if s:\n            result.append('development')\n        if o > 2 and g > 1:\n            result.append('city')\n    \n    return result\n", "from collections import Counter\n\ndef build_or_buy(hand):\n    res = []\n    bank = Counter(hand)\n    if bank['b'] > 0 and bank['w'] > 0:\n        res.append('road')\n        if bank['s'] > 0 and bank['g'] > 0:\n            res.append('settlement')\n    if bank['o'] > 2 and bank['g'] > 1:\n        res.append('city')\n    if bank['o'] > 0 and bank['s'] > 0 and bank['g'] > 0:\n        res.append('development')\n    return res", "from collections import Counter\n\nPRICES = {\n    'road': 'bw',\n    'settlement': 'bwsg',\n    'city': 'ooogg',\n    'development': 'osg'\n}\n\n\ndef build_or_buy(hand):\n    return list(filter(lambda obj: not Counter(PRICES[obj]) - Counter(hand),\n                       PRICES.keys()))", "def build_or_buy(hand):\n    objects = {\"road\": \"bw\",\n               \"settlement\": \"bwsg\",\n               \"city\": \"ooogg\",\n               \"development\": \"osg\"}\n    return [key for key, val in objects.items() if not any(hand.count(c) < val.count(c) for c in set(val))]", "from collections import Counter as C\nr=dict(zip(\"road settlement city development\".split(),map(C,\"bw bwsg ooogg osg\".split())))\nbuild_or_buy=lambda s:(lambda t:[k for k,v in r.items()if all(v[x]<=t[x]for x in v)])(C(s))", "def build_or_buy(hand):\n    o = {'bw': 'road', 'bwsg': 'settlement',\n         'ooogg': 'city', 'osg': 'development'}\n    def valid(x):\n        for c in set(x):\n            if hand.count(c) < x.count(c):\n                return False\n        return True\n    return [v for k, v in o.items() if valid(k)]"]