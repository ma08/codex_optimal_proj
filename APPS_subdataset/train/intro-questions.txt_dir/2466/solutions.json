["class Solution:\n    def diagonalSum(self, mat: List[List[int]]) -> int:\n        rows = len(mat)\n        columns = len(mat[0])\n        sum_ = 0\n        for r, c1, c2 in zip(list(range(rows)), list(range(columns)), list(range(columns - 1, -1, -1))):\n            sum_ += mat[r][c1]\n            if c1 != c2:\n                sum_ += mat[r][c2]\n        return sum_\n", "class Solution:\n    def diagonalSum(self, mat: List[List[int]]) -> int:\n        leng = len(mat[0])\n        ans = 0\n        check = [[0 for _ in range(len(mat[0]))] for _ in range(len(mat))]\n        for i in range(leng):\n            ans+=mat[i][i]\n            check[i][i] = 1\n            \n        for i in range(leng):\n            if check[i][leng-1] != 1:\n                ans+=mat[i][leng-1]\n            leng-=1\n            \n        return ans\n", "class Solution:\n    def diagonalSum(self, mat: List[List[int]]) -> int:\n        leng = len(mat[0])\n        ans = 0\n        seen = set()\n        for i in range(leng):\n            ans+=mat[i][i]\n            seen.add((i,i))\n            \n        ctr = len(mat)-1\n        for i in range(leng):\n            if (i,leng-1) not in seen:\n                ans+=mat[i][leng-1]\n            leng-=1\n            \n        return ans\n", "class Solution:\n    def diagonalSum(self, mat: List[List[int]]) -> int:\n        ans = 0\n        n = len(mat[0])\n        for i in range(n):\n            ans = ans + mat[i][i] + mat[i][n - i - 1]\n        if n % 2 != 0:\n            ans = ans - mat[n//2][n//2]\n        return ans\n"]