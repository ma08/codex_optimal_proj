["def four_piles(n,y):\n    x,r=divmod(n*y,(y+1)**2)\n    return [] if r or x==y else [x+y,x-y,x*y,x//y]\n", "def four_piles(n,y):       \n    x = y * n / (y**2 + 2*y + 1)\n    return [x + y, x - y, x * y, x / y] if int(x) == x and x - y > 0 else []", "def four_piles(n,y):\n    x = y*n / (1+2*y+y**2)\n    ans = [x+y, x-y, x*y, x/y]\n    return ans if all(not z%1 and z for z in ans) else []", "def four_piles(n,y):\n    x = round(n/(2+y+1/y))\n    ls = [x+y,x-y,x*y,x/y]\n    return ls if x-y>0 and x%y==0 and sum(ls) == n else []", "four_piles=lambda n,y:(lambda x,m:((x>y)>x%y+m)*[x+y,x-y,x*y,x/y])(*divmod(n*y,y*y+2*y+1))", "def four_piles(n,y):\n    candidates = ([x+y, x-y, x*y, x/y] for x in range(y+1, int(n)-y+1))\n    return next((candidate for candidate in candidates if sum(candidate) == n), [])", "four_piles=lambda n,y: (lambda r: r if all(e%1==0 and e>0 for e in r) else [])((lambda x: [x+y,x-y,x*y,x/y])(n*y/(2*y+y*y+1)))", "def four_piles(n,y):\n    x=n*y/(2*y+y*y+1)    \n    lst=[x+y,x-y,x*y,x/y]\n    return lst if all(v>0 and v.is_integer() for v in lst) else []", "from itertools import count\n\ndef four_piles(apples, y):\n    for x in count(2 * y, y):\n        plus = x + y\n        minus = x - y\n        star = x * y\n        slash = x / y\n        total = plus + minus + star + slash\n        if total == apples:\n            return [plus, minus, star, slash]\n        if total > apples:\n            return []", "from itertools import count\n\ndef four_piles(apples, y):\n    for x in count(y + 1):\n        plus = x + y\n        minus = x - y\n        star = x * y\n        slash = x / y\n        total = plus + minus + star + slash\n        if total == apples:\n            return [plus, minus, star, slash]\n        if total > apples:\n            return []"]