["def egged(year, span):   \n    total = 0\n    eggs_per_chicken = 300\n    for i in range(min(span,year)):\n        total += 3 * eggs_per_chicken\n        eggs_per_chicken = int(eggs_per_chicken * 0.8)\n        \n    return total or \"No chickens yet!\"", "def egged(year, span, chickens = 3):\n    production = [300, 240, 192, 153, 122, 97, 77, 61, 48, 38, 30, 24, 19, 15, 12, 9, 7, 5, 4, 3, 2, 1]\n    return 'No chickens yet!' if not year else sum(production[:min(year, span)]) * chickens", "def produce(n):\n    x = 300\n    for i in range(n):\n        yield x\n        x = int(x * 0.8)\n\ndef egged(year, span):\n    if year == 0:\n        return 'No chickens yet!'\n    return sum(produce(min(year, span))) * 3", "def egged(year, span):\n    eggs = lambda e,n: 0 if n==0 else e + eggs(int(e*.8), n-1)\n    return eggs(300,min(year,span)) * 3 if year else 'No chickens yet!'", "def egged(year, span):\n    NBASE, NCB = 300, 3\n    if year < 1:\n        return \"No chickens yet!\"\n    nc = []\n    ttl = []\n    n = 0\n    nc.append(NBASE)\n    ttl.append(span)\n    for i in range(year):\n        for k in range(len(nc) - 1, -1, -1):\n            n += nc[k] * NCB\n            ttl[k] -= 1\n            if ttl[k] < 1:\n                nc.pop(k)\n                ttl.pop(k)\n            else:\n                nc[k] = nc[k] * 4 // 5\n    return n", "import math\n\ndef egged(year, span):\n    \n    if year == 0:\n        return \"No chickens yet!\"\n    \n    i = 1\n    chickens = list()\n    while i <= year:\n        #Reduce production of each chicken and shorten its life by one year.\n        new_chickens = list()\n        for chicken in chickens:\n            new_chickens.append([math.floor(chicken[0] * .8), chicken[1] - 1])\n        #Each year add three new chickens\n        new_chickens.append([300, span])\n        new_chickens.append([300, span])\n        new_chickens.append([300, span])\n        chickens = new_chickens\n        total_eggs = 0\n        #cycle through the chickens and see how man eggs they produced, and add to total\n        for chicken in chickens:\n            if chicken[1] > 0:\n                total_eggs = total_eggs + chicken[0]\n        i = i + 1\n    \n    return total_eggs", "def egged(year, span):\n    if year==0:\n        return 'No chickens yet!'\n    egg=[]\n    for i in range(year):\n        egg=[int(e*0.8) for e in egg]\n        egg.append(300)\n    return sum(egg[-span:])*3", "def egged(year, span):\n    if year==0: return \"No chickens yet!\"\n    chickens=[]\n    for y in range(year):\n        for i in range(len(chickens)):\n            chickens[i][1]+=1\n            chickens[i][0]=int(0.8*chickens[i][0])\n        chickens.append([300,0])\n        chickens.append([300,0])\n        chickens.append([300,0])\n    return sum(i[0] for i in chickens if i[1]<span)", "class Chicken:\n    def __init__(self, lifespan):\n        self.eggs = 300\n        self.lifespan = lifespan\n        self.age = lifespan\n        \n    def birthday(self):\n        self.age -= 1\n        self.eggs //= (10/8)\n        self.eggs = 0 if self.age == 0 else self.eggs\n        return self\n\n    def __repr__(self):\n        return f'Chicken(eggs={self.eggs!r})'\n\n\ndef egged(n,s):\n    chickens = [Chicken(s) for _ in range(3)]\n    for i in range(n-1):\n        chickens = [c.birthday() for c in chickens]\n        chickens.extend([Chicken(s) for _ in range(3)])       \n    return sum(map(lambda x: x.eggs, chickens)) if n>0 else 'No chickens yet!'", "def egged(year, span):\n    eggs = [300]\n    while len(eggs) < span:\n        eggs.append(eggs[-1] // 1.25)\n    chickens = [3] * year + [0] * span\n    return sum(c * e for c, e in zip(chickens, eggs)) if year else 'No chickens yet!'"]