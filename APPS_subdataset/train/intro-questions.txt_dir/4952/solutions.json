["\ndef partial_keys(d):\n    class Dct(dict):\n        def __getitem__(self,pk):\n            k = min((k for k in self if k.startswith(pk)), default=None)\n            return k if k is None else super().__getitem__(k)\n    return Dct(d)", "class PartialKeysDict(dict):\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self._keys_list = sorted(self.keys())\n\n    def __getitem__(self, key):\n        for q in self._keys_list:\n            if q.startswith(key):\n                return super().__getitem__(q)\n\npartial_keys = PartialKeysDict", "class partial_keys(dict): __getitem__ = lambda self, key: self.get(next((k for k in sorted(self.keys()) if k.startswith(key)), None), None)", "class partial_keys(dict):\n    def __getitem__(self, key):\n        if key in self:\n            return super().__getitem__(key)\n        for k in sorted(self):\n            if k.startswith(key):\n                return super().__getitem__(k)", "class partial_keys(dict):\n    def __getitem__(self, key):\n        return next((v for k,v in sorted(self.items()) if k.startswith(key)), None)", "class partial_keys(dict):\n    def __getitem__(self, key):\n        keys = sorted(k for k in self.keys() if k.startswith(key))\n        if keys: return super().__getitem__(keys[0])", "import re\n\n\ndef partial_keys(d):\n    class MyDict(dict):\n        def __getitem__(self, item):\n            for key in sorted(d):\n                if re.match(item, key):\n                    return d[key]\n    return MyDict(**d)\n", "class partial_keys(dict):\n    def __getitem__(self, key):\n        keys = sorted(k for k in self.keys() if k.startswith(key))\n        if keys: return dict.__getitem__(self, keys[0])"]