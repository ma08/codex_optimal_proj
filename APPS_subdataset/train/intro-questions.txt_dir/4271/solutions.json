["FRACTIONS = \" . : :. :: :.: S S. S: S:. S:: S:.:\".split(\" \")\nUNITS     = \" I II III IV V VI VII VIII IX\"      .split(\" \")\nTENS      = \" X XX XXX XL L LX LXX LXXX XC\"      .split(\" \")\nHUNDREDS  = \" C CC CCC CD D DC DCC DCCC CM\"      .split(\" \")\nTHOUSANDS = \" M MM MMM MMMM MMMMM\"               .split(\" \")    \n\n\ndef roman_fractions(n, f=0):\n    return ( \"NaR\"  if n < 0 or n > 5000 or f < 0 or f > 11\n                    else \"N\" if n + f == 0\n                    else  THOUSANDS [n//1000]\n                        + HUNDREDS  [n%1000//100]\n                        + TENS      [n%100//10]\n                        + UNITS     [n%10]\n                        + FRACTIONS [f] )", "def roman_fractions(num, fraction=0):\n    rom = ''\n    FACT = { 1:'.', 2:':', 3:':.',4:'::',5:':.:',6:'S',7:'S.',8:'S:', 9:'S:.',10:'S::', 11:'S:.:' }\n    ENCO = { 1:'I',  5:'V', 10:'X', 50:'L', 100:'C', 500:'D', 1000:'M' }\n    EDGE = {\n         0:lambda x, elem,  dict, number : dict.get(elem, '') * number, \n         1:lambda e, i, D, l : e +D.get(i*(l+1),'M'*(l-1)) if l in [4,9] else D.get(i*l, 'M'*5) if l is 5 else D[i*5] + (e * (l%5))\n           }\n    if num < 0 or num>5000 or fraction and fraction not in FACT:\n        return 'NaR' \n        \n    for element in list(ENCO.keys())[0::2][::-1]:\n        left = num // element\n        rom += EDGE.get(left>3, '')( ENCO[element] , element, ENCO, left )\n        num %= element\n    \n    ret = rom + FACT.get(fraction,'') \n\n    return  ret if ret else 'N'\n", "TOME = dict(zip((1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1), 'M CM D CD C XC L XL X IX V IV I'.split()))\nFRAC = dict(enumerate((\".\",\":\",\":.\",\"::\",\":.:\",\"S\",\"S.\",\"S:\",\"S:.\",\"S::\",\"S:.:\"),1))\n\ndef roman_fractions(i, f=0):\n    if i<0 or f<0 or f==12 or i>5000: return \"NaR\"\n    lst = []\n    for v,r in TOME.items():\n        n,i = divmod(i,v)\n        if n: lst.extend([r]*n)\n    if f: lst.append(FRAC[f])\n    return ''.join(lst) or 'N'", "from enum import Enum\nfrom collections import Counter\nfrom itertools import chain\nfrom operator import itemgetter, attrgetter\n\ndef roman_fractions (integer, fraction=0):\n    if not (0 <= integer <= 5000 and 0 <= fraction < 12):\n        return 'NaR'\n    if integer == 0 and fraction == 0:\n        return 'N'\n    \n    class Rom (Enum):\n        I = 1\n        V = 5\n        X = 10\n        L = 50\n        C = 100\n        D = 500\n        M = 1000\n    \n    def paired_romans ():\n        negatives = Counter({Rom.I: 2, Rom.X: 2, Rom.C: 2})\n        for digit, prefix in zip(Rom, chain([None], negatives.elements())):\n            yield (digit,), digit.value\n            if prefix:\n                yield (prefix, digit), digit.value - prefix.value\n\n    def greedy_collect (iter_symbols, total):\n        symbols = []\n        symbol, value = next(iter_symbols)\n        while total:\n            if total >= value:\n                total -= value\n                symbols.extend(symbol)\n            else:\n                symbol, value = next(iter_symbols)\n        return symbols\n\n    extended_romans = iter(sorted(paired_romans(), key=itemgetter(1), reverse=True))\n    symbols = greedy_collect(extended_romans, integer)\n    integer_part = ''.join(symbol.name for symbol in symbols)\n    \n    fractions = iter(list({'S': 6, ':.:': 5, ':': 2, '.': 1}.items()))\n    symbols = greedy_collect(fractions, fraction)\n    fractional_part = ''.join(symbols)\n    \n    return integer_part + fractional_part\n    \n    \n", "def roman_fractions(integer, fraction=0):\n    if not 0 <= integer <= 5000 or not 0 <= fraction < 12:\n        return \"NaR\"\n    if not integer and not fraction: return \"N\"\n    m, n = divmod(integer, 1000)\n    roman = \"M\" * m\n    c, n = divmod(n, 100)\n    roman += [\"\", \"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"][c]\n    x, i = divmod(n, 10)\n    roman += [\"\", \"X\", \"XX\", \"XXX\", \"XL\", \"L\", \"LX\", \"LXX\", \"LXXX\", \"XC\"][x]\n    roman += [\"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"][i]\n    roman += [\"\", \".\", \":\", \":.\", \"::\", \":.:\", \"S\", \"S.\", \"S:\", \"S:.\", \"S::\", \"S:.:\"][fraction]\n    return roman", "def roman_fractions(n, f=0):\n    \n    if n < 0 or n > 5000 or f < 0 or f > 11: return 'NaR'\n    if n + f == 0: return 'N'\n    \n    s = ''\n    for r, d in zip('M CM D CD C XC L XL X IX V IV I'.split(), [1000,900,500,400,100,90,50,40,10,9,5,4,1]):\n        appearances = n // d\n        s, n = s + r * appearances, n - appearances * d\n\n    return s + ([''] + '. : :. :: :.: S S. S: S:. S:: S:.:'.split())[f]", "dictio = {1:\".\",2:\":\",3:\":.\",4:\"::\",5:\":.:\"}\ndef roman_fractions(integer, fraction=None):\n    if integer < 0  or integer > 5000 or fraction and (fraction<0 or fraction>11):\n        return \"NaR\"\n    if integer == 0 and not fraction : return \"N\"\n    return encoder(integer) + dictio.get(fraction,\"S\"+dictio.get(fraction-6,\"\")) if fraction else encoder(integer)\n    \ndef encoder(n):\n    num = \"M CM D CD C XC L XL X IX V IV I\".split()\n    ls = [1000,900,500,400,100,90,50,40,10,9,5,4,1]\n    s = \"\"\n    for i,j in enumerate(num):\n        while n >= ls[i]:\n            s += j\n            n -= ls[i]\n    return s  ", "def roman_fractions(integer, fraction=0):\n    fracs=['.',':',':.','::',':.:','S','S.','S:','S:.','S::','S:.:']\n    res='NaR'\n    if(integer>=0 and integer<=5000 and fraction>=0 and fraction<=11):\n        print(integer,fraction)\n        res=''\n        if(integer==0 and fraction==0):\n            return 'N'\n        while(integer>0):\n            if(integer>=1000):\n                res+='M'\n                integer-=1000\n            elif(integer>=900):\n                res+='CM'\n                integer-=900\n            elif(integer>=500):\n                res+='D'\n                integer-=500\n            elif(integer>=400):\n                res+='CD'\n                integer-=400\n            elif(integer>=100):\n                res+='C'\n                integer-=100\n            elif(integer>=90):\n                res+='XC'\n                integer-=90\n            elif(integer>=50):\n                res+='L'\n                integer-=50\n            elif(integer>=40):\n                res+='XL'\n                integer-=40\n            elif(integer>=10):\n                res+='X'\n                integer-=10\n            elif(integer>=9):\n                res+='IX'\n                integer-=9\n            elif(integer>=5):\n                res+='V'\n                integer-=5\n            elif(integer>=4):\n                res+='IV'\n                integer-=4\n            elif(integer>=1):\n                res+='I'\n                integer-=1\n        '''\n        while(fraction>0):\n            if(fraction>=6):\n                res+='S'\n                fraction-=6\n            elif(fraction>=2):\n                res+=':'\n                fraction-=2\n            elif(fraction>=1):\n                res+='.'\n                fraction-=1\n        '''\n        if(fraction>0):\n            res+=fracs[fraction-1]\n    return res", "ROMANS = {'M': 1000, 'D': 500, 'C': 100, 'L': 50, 'X': 10, 'V': 5, 'I': 1}\ns_numbers = {'CM': 900, 'CD': 400, 'XC': 90, 'XL': 40, 'IX': 9, 'IV': 4}\nROMANS.update(s_numbers)\nROMANS = {v:k for k, v in ROMANS.items()}\n\nlst = ['', '.', ':', ':.', '::', ':.:', 'S', 'S.', 'S:', 'S:.', 'S::', 'S:.:']\n\n\ndef roman_fractions(integer, fraction=None):\n    if integer == 0 and fraction in [None, 0]:\n        return 'N'\n    if integer < 0 or integer > 5000 or (integer == 0 and (fraction >= 12 or fraction < 0)):\n        return \"NaR\"\n    if fraction != None:\n        if fraction < 0 or fraction >= 12:\n            return \"NaR\"\n    roman = ''\n    for a in reversed(sorted(ROMANS.keys())):\n        while (a <= integer):\n            integer = integer - a;\n            roman = roman + ROMANS[a]\n    return roman + lst[fraction] if fraction != None else roman"]