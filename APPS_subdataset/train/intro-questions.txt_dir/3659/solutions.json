["variance=lambda w:round(__import__('statistics').pvariance(map(len,w)),4)", "from statistics import pvariance\n\ndef variance(words):\n    return round(pvariance(map(len, words)), 4)", "from statistics import pvariance as var\n\nvariance = lambda words: round(var(len(word) for word in words), 4)", "def variance(words):\n    from statistics import pvariance as var\n    return round(var(len(word) for word in words), 4)\n", "def mean(x):\n    s = 0\n    for i in range(len(x)):\n        s = s + x[i]\n    return s/len(x)\n\ndef variance(words):\n    x = [len(word) for word in words]\n    return round(mean([num**2 for num in x])-mean(x)**2,4)", "def variance(li):\n    common = 1 / len(li)\n    e_of_x = sum(len(i) * common for i in li)\n    result = sum((len(i) ** 2) * common for i in li) - e_of_x ** 2\n    return round(result,4)", "variance=lambda w,v=__import__(\"statistics\").pvariance:round(v(map(len,w)),4)", "def variance(array):\n    nums = list(map(len, array))\n    length = float(len(nums))\n    average = sum(nums) / length\n    return round(sum((average - a) ** 2 for a in nums) / length, 4)\n", "from collections import Counter\nfrom numpy import average\n\ndef variance(words):\n    values, weights = zip(*Counter(map(len, words)).items())\n    return round(average((values-average(values, weights=weights))**2, weights=weights), 4)"]