["def anagrams(word, words): return [item for item in words if sorted(item)==sorted(word)]", "from collections import Counter\n\ndef anagrams(word, words):\n    counts = Counter(word)\n    return [w for w in words if Counter(w) == counts]", "def anagrams(word, words):\n    match = sorted(word)\n    return [w for w in words if match == sorted(w)]", "def anagrams(word, words):\n    return [w for w in words if sorted(word)==sorted(w)]", "from collections import Counter\n\n\ndef anagrams(word, words):\n    n, c = len(word), Counter(word)\n    return [w for w in words if len(w) == n and Counter(w) == c]\n", "def anagrams(word, words):\n    letter = { x : word.count(x) for x in word }\n    result = []\n    \n    for i in words:\n        letters = { x : i.count(x) for x in i }\n        if letters == letter:\n            result.append(i)\n    \n    return result", "def anagrams(word, words):\n    return [el for el in words if sorted(word) == sorted(el)]", "from collections import Counter\ndef anagrams(word, words):\n    main = Counter(word)\n    return [wor for wor in words if Counter(wor) == main]", "def anagrams(word, words):\n    return [x for x in words if sorted(x) == sorted(word)]", "def anagrams(word, words):\n    return [w for w in words if list(sorted(w)) == list(sorted(word))]", "def anagrams(word, words):\n    def lettercount(inputword):\n        wordarr = list(inputword)\n        worddict = {}\n        for letter in wordarr:\n            if letter not in worddict:\n                worddict[letter] = wordarr.count(letter)\n        return worddict\n    \n    return [astring for astring in words if lettercount(astring) == lettercount(word)] \n        \n    \n", "from collections import Counter\n\ndef anagrams(word, words):\n    return [w for w in words if Counter(word) == Counter(w)]", "def anagrams(word, words):\n    return [x for x in words if sorted(word) == sorted(x)]", "def anagrams(word, words):\n    lst = []\n    for elem in words:\n        if sorted(word) == sorted(elem):\n            lst.append(elem)\n    return lst\n    #your code here\n", "def anagrams(word, words):\n    word=sorted(word)\n    return list(filter(lambda ele: sorted(ele)==word  ,words))", "def anagrams(word, words):\n    return [trial for trial in words if sorted(trial) == sorted(word)]", "def anagrams(word, words):\n    return [w for w in words if sorted(w) == sorted(word)]", "def anagrams(word: str, words: list) -> list: return list(filter(lambda x: sorted(x) == sorted(word), words))", "anagrams = lambda _,__: list([s for s in __ if sorted(s) == sorted(_)])\n", "anagrams=lambda word, words:list(w for w in words if sorted(list(w))==sorted(list(word)))", "def anagrams(word, words):\n    ans = []\n    or1 = 0\n    or2 = 0\n    for i in word:\n        or1 += ord(i)\n    for i in words:\n        or2 = 0\n        for x in i :\n            or2 += ord(x)\n        if or1 == or2:\n            ans += [i]\n    return ans", "# What is an anagram? Well, two words are anagrams of each other\n# if they both contain the same letters. For example:\n# 'abba' & 'baab' == true ; 'abba' & 'bbaa' == true \n# 'abba' & 'abbba' == false ; 'abba' & 'abca' == false\n# Write a function that will find all the anagrams of a word from a list.\n# You will be given two inputs a word and an array with words.\n# You should return an array of all the anagrams or an empty array\n# if there are none. For example:\n# anagrams('abba', ['aabb', 'abcd', 'bbaa', 'dada']) => ['aabb', 'bbaa']\n# anagrams('racer', ['crazer', 'carer', 'racar', 'caers', 'racer']) =>\n# ['carer', 'racer']\n# anagrams('laser', ['lazing', 'lazy',  'lacer']) => []\n\ndef anagrams(word, words):\n    w_buff = []\n    w_out = []\n    for w_t in words :\n        if len(w_t) == len(word):\n           w_buff.append(w_t)\n    w_w = list(word)\n    w_w.sort()\n    for w_t in w_buff:\n        w_buff_l = list(w_t)\n        w_buff_l.sort()\n        if w_buff_l == w_w :\n            w_out.append(w_t)\n    return w_out", "def anagrams(word, words):\n    #your code here\n    list = []\n    word = sorted(word)\n    for i in range(len(words)):\n        if word == sorted(words[i]):\n            list.append(words[i])\n        else:\n            pass\n    return(list)", "from collections import Counter\ndef anagrams(word, words):\n    # your code here\n    return [w for w in words if sorted(sorted(Counter(word).items())) == sorted(sorted(Counter(w).items()))]", "def anagrams(word, words):\n\n    l = [letter for letter in word]\n    anagram_list = []\n    \n    for item in words:\n        l_item = [letter for letter in item]\n        if sorted(l) == sorted(l_item):\n            temp_list = [i for i in l + l_item if i not in l_item]\n            if len(temp_list) == 0:\n                anagram_list.append(item)\n        else:\n            continue\n    return anagram_list", "def anagrams(word, words):\n    return [anagram for anagram in words if sum([ord(c) for c in anagram]) == sum([ord(c) for c in word])]\n", "def anagrams(word, words):\n    #your code here\n    wordnum=sum(ord(ch) for ch in word)\n    res=[]\n    if not words :\n        return []\n    for item in words:\n        if sum(ord(ch) for ch in item)==wordnum:\n            res.append(item)\n    return res"]