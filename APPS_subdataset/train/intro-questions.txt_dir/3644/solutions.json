["from heapq import *\n\ndef add_all(lst):\n\n    heapify(lst)\n    total = 0\n    while len(lst) > 1:\n        s = heappop(lst) + heappop(lst)\n        total += s\n        heappush(lst, s)\n\n    return total", "import heapq\n\ndef add_all(xs): \n    heapq.heapify(xs)\n    cost = 0\n    while len(xs) > 1:\n        c = heapq.heappop(xs) + xs[0]\n        cost += c\n        heapq.heapreplace(xs, c)\n    return cost", "def add_all(lst):\n    if len(lst) == 1:\n        return 0\n    \n    lst.sort()\n    cost = sum(lst[:2])\n    lst[:2] = cost,\n    \n    return cost + add_all(lst)\n", "import heapq  \n  \ndef add_all(arr): \n    n=len(arr)\n    # Create a priority queue out of the  \n    # given list \n    heapq.heapify(arr) \n      \n    # Initializ result \n    res = 0\n      \n    # While size of priority queue  \n    # is more than 1  \n    while(len(arr) > 1): \n          \n        # Extract shortest two ropes from arr \n        first = heapq.heappop(arr) \n        second = heapq.heappop(arr) \n          \n        #Connect the ropes: update result  \n        # and insert the new rope to arr \n        res += first + second \n        heapq.heappush(arr, first + second) \n          \n    return res ", "import heapq\ndef add_all(heap): \n    heapq.heapify(heap)\n    sum = 0\n    while len(heap) > 1:\n        a, b = heapq.heappop(heap), heapq.heappop(heap)\n        cost = a + b\n        sum += cost\n        heapq.heappush(heap, cost)\n    return sum\n", "from heapq import heapify, heappush, heappop \ndef add_all(lst): \n    heapify(lst) \n    s=0\n    print(lst)\n    while len(lst)>1:\n        m1=heappop(lst)\n        m2=heappop(lst)\n        s+=m1+m2\n        if not lst: return s\n        heappush(lst,m1+m2)\n\n    #heap: 1,2,3,4,5    3\n    #      3,3,4,5      6\n    #      6,4,5        9\n    #      9,6          15\n    #      15\n", "from heapq import *\n\ndef add_all(a):\n    n = m = 0\n    heapify(a)\n    while len(a) > 1:\n        m = heappop(a) + heappop(a)\n        n += m\n        heappush(a, m)\n    return n", "from queue import PriorityQueue\n\ndef add_all(lst): \n    q = PriorityQueue()\n    for x in lst: q.put(x)\n    s = 0\n    while q.qsize() > 1:\n        a = q.get()\n        b = q.get()\n        s += a+b\n        q.put(a+b)\n    return s", "from heapq import *\n\ndef add_all(lst):\n    heapify(lst)\n    res = 0\n    while len(lst) >= 2:\n        s = heappop(lst) + heappop(lst)\n        res += s\n        heappush(lst, s)\n    return res", "from heapq import *\n\ndef add_all(lst):\n\n    heapify(lst)\n    s = 0\n    total = 0\n    while len(lst) > 1:\n        s = heappop(lst) + heappop(lst)\n        total += s\n        heappush(lst, s)\n\n    \n    return total"]