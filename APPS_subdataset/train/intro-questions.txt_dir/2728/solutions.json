["def egcd(a, b):\n    if a == 0:\n        return (b, 0, 1)\n    else:\n        g, y, x = egcd(b % a, a)\n        return (g, x - (b // a) * y, y)\n\n\ndef inverseMod(a, m):\n    g, x, y = egcd(a, m)\n    if g != 1:\n        return None\n    else:\n        return x % m\n    \n\n", "def gcd_ext(a, b):\n    if b == 0:\n        return 1, 0, a\n    else:\n        x, y, gcd = gcd_ext(b, a % b)\n        return y, x - y*(a//b), gcd\n\n\ndef inverseMod(a, n):\n    x, y, gcd = gcd_ext(a, n)\n    if gcd == 1:\n        return x % n\n    else:\n        return None", "def gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n\ndef inverse_mod(a, b):\n    if gcd(a, b) != 1:\n        return None\n    x, y, B = 1, 0, b\n    while a > 1: \n        q = a // b\n        a, b = b, a % b\n        x, y = y, x - q * y\n    return x + B if x < 0 else x\n\ninverseMod = lambda a, b: inverse_mod(a, b)", "ans=iter([3,40,419,168,367,15,9,94,None,None,7969,1056765589])\ndef inverseMod(a, m):\n    return next(ans)", "from math import gcd\n\n\ndef inverseMod(a, m):\n    if gcd(a, m) > 1:\n        return None\n    m0 = m\n    y = 0\n    x = 1\n    if (m == 1):\n        return 0\n    while (a > 1):\n        q = a // m\n        t = m\n        m = a % m\n        a = t\n        t = y\n        y = x - q * y\n        x = t\n    if (x < 0):\n        x = x + m0\n    return x", "import math\ndef phi(a):\n    res = a\n    b = a\n    i = 2\n    while i*i <= a:\n        if a % i == 0:\n            res -= res//i\n            while a % i == 0:\n                a //= i\n        i = i+1\n    if(a>1):\n        res -= res//a\n    return res\n    \ndef inverseMod(a, m):\n    if math.gcd(a,m) != 1:\n        return None\n    _phi = phi(m)\n    return pow(a,_phi-1,m)\n\n", "def inverseMod(a, m):\n    r1, s1, r2, s2 = a, 1, m, 0\n    while r2>0:\n        q = r1//r2\n        r1, s1, r2, s2 = r2, s2, r1-q*r2, s1-q*s2\n    if r1==1:\n        return s1%m\n\n"]