["def distance(p1, p2):\n    return sum((a - b) ** 2 for a, b in zip(p1, p2)) ** 0.5 if len(p1) == len(p2) > 0 else -1", "def distance(p1, p2):\n    from functools import reduce\n    from math import hypot\n    if not p1 or len(p1) != len(p2): return -1\n    return reduce(hypot, (x-y for x,y in zip(p1, p2)))", "def distance(p1, p2):\n    if not (p1 or p2) or len(p1) != len(p2):\n        return -1\n    \n    return sum((y - x)**2 for x, y in zip(p1, p2))**0.5\n", "distance=lambda p,q:-(not 0<len(p)==len(q)>0)or sum((x-y)**2for x,y in zip(p,q))**.5", "def distance(p1, p2):\n    return sum((x - y)**2 for x, y in zip(p1, p2))**0.5 if (len(p1) == len(p2) > 0) else -1", "import numpy as np\n\ndef distance(p1, p2):\n    return np.linalg.norm(np.array(p1) - np.array(p2)) if 0 < len(p1) == len(p2) else -1", "def distance(p1, p2):\n    return sum((a-b)**2 for a, b in zip(p1, p2))**.5 if p1 and p2 and len(p1)==len(p2) else -1", "import math\n\ndef distance(p1, p2):\n    if len(p1) != len(p2) or len(p1) == 0:\n        return -1\n        \n    if len(p1) == 1:\n        return math.fabs(p1[0]-p2[0])\n    \n    dist = 0\n    for i in range(len(p1)):\n        dist += (p1[i]-p2[i])**2\n    \n    return dist**0.5", "def distance(p1, p2):\n    if len(p1) != len(p2) or len(p1) < 1:\n        return -1\n    return sum((p1[i]-p2[i])**2 for i in range(len(p1)))**0.5\n", "import math\ndef distance(p1, p2):\n    if p1 == [] or p2 == [] or len(p1) != len(p2): \n        return -1 \n    diff = []\n    for i in range(len(p1)):\n        diff.append((p1[i] - p2[i]) ** 2)\n    return math.sqrt(sum(diff))\n"]