["def calculate_probability(n):\n    return round(1 - (364 / 365) ** (n * (n - 1) / 2), 2)", "def calculate_probability(n, p=1):\n    for i in range(n):\n        p *= 365 - i\n    return round(1 - p / 365**n, 2)", "from math import factorial\n\ndef calculate_probability(n):\n    return round(1 - factorial(365) / (factorial(365-n) * 365**n) if n < 365 else 1, 2)", "def calculate_probability(n):\n    count = 1\n    for i in range(n):\n        count *= (365-i)/365\n    return round(1 - count, 2)", "def calculate_probability(n):\n    #your code here\n    if n==0 or n==1:\n        return 0\n    elif n>=365:\n        return 1\n    else:\n        t=365**n\n        s=1\n        c=0\n        while c<n:\n            s*=365-c\n            c+=1\n        return float('{:.2f}'.format((t-s)/t))\n", "calculate_probability=lambda n,d=365,f=__import__('math').factorial:n>d or round(1-f(d)//f(d-n)/d**n,2)", "from math import factorial as f\ndef calculate_probability(n):\n    a = 1\n    for x in range(n):\n        a *= (365-x)/365\n    return round(1-a, 2)", "def calculate_probability(n):\n    p=1\n    for i in range(n):\n        p=p*(365-i)\n    return round(1-p/365**n,2)", "def calculate_probability(n):\n    \n    year = 365\n    numer = 1\n    den = 365 ** n\n    \n    while n > 0:\n        print(year)\n        numer *= year\n        n -= 1\n        year -= 1\n    \n    return round((1 - (numer/den)) , 2)"]