["def chameleon(chameleons, color):\n    (_,a), (_,b), (_,c) = sorted((i==color, v) for i,v in enumerate(chameleons))\n    return -1 if not a and not c or (b-a) % 3 else b", "def chameleon(chameleons, desiredColor):\n    \n    color_count = dict(list(zip(['r', 'g', 'b'], chameleons)))\n    target = ['r', 'g', 'b'][desiredColor]\n    other_color = [i for i in ['r', 'g', 'b'] if i != target]\n    to_meet =sorted([(k, color_count[k]) for k in other_color], key=lambda x: x[1])\n\n    if to_meet[0][1] == to_meet[1][1]:\n        return to_meet[0][1]\n    meets = to_meet[0][1]\n    meet_left = to_meet[1][1] - meets\n    color_count[target] +=  to_meet[0][1]\n    # print meet_left, meets\n    if meet_left % 3 != 0 or color_count[target] == 0:\n\n        return -1\n    return meets + meet_left\n", "chameleon=lambda C,d:(lambda c,a,b:-1if a==c<1or(b-a)%3else b)(*[C.pop(d)]+sorted(C))", "chameleon=lambda C,d:(lambda a,b,c:-1if a==c<1or(b-a)%3else b)(*sorted([C[i]for i in(0,1,2)if i!=d])+[C[d]])", "def chameleon(C,d):\n    c=C.pop(d)\n    a,b=sorted(C)\n    return(a==c<1)+(b-a)%3and-1 or b", "def chameleon(chameleons, desiredColor):\n    r=chameleons[:]\n    r.pop(desiredColor)\n    if max(r)==min(r):\n        return max(r)\n    d=max(r)-min(r)\n    dc=chameleons[desiredColor]+2*min(r)\n    if d%3!=0 or d//3>dc:\n        return -1\n    return max(r)", "def chameleon(chameleons, desiredColor):\n    # rotate a, b, c as a: desiredColor and b \u2265 c\n    a, b, c = chameleons[desiredColor:] + chameleons[:desiredColor]\n    if b < c:\n        b, c = c, b\n    # combine a and b to become c x times so that b - x = c + 2x i.e. 3x = b - c\n    if (b - c) % 3 != 0 or a < (b - c) / 3:\n        return -1\n    # combine b and c to become a for (b - x) times or (c + 2x) times\n    # total number of combinations = x + b - x = b\n    return b", "# chameleons is int[3], desiredColor is int from 0 to 2\ndef chameleon(chameleons, desiredColor):\n    perm_count = 0\n    if desiredColor == 0: cD, cA, cB = chameleons\n    elif desiredColor == 1: cA, cD, cB = chameleons\n    else: cA, cB, cD = chameleons\n    \n    while cA != 0 or cB != 0:\n        if cA != 0 and cB != 0:\n            d = min(cA, cB)\n            cA, cB, cD = cA -d, cB -d, cD + 2 * d\n        elif cA == 0:\n            d = min(cB // 3, cD)\n            cA, cB, cD = cA + 2 * d, cB - d, cD - d\n        elif cB == 0:\n            d = min(cA // 3, cD)\n            cA, cB, cD = cA - d, cB + 2 * d, cD - d\n        if d == 0: return -1\n        perm_count += d\n    return perm_count\n        \n        \n    # Here be code\n", "# chameleons is int[3], desiredColor is int from 0 to 2\ndef chameleon(chameleons, desiredColor):\n    print(chameleons, desiredColor)\n    other_coler = [j for i,j in  enumerate(chameleons) if i != desiredColor]\n    \n    #\u5224\u65ad\u662f\u5426\u6709\u89e3\n    if sum([i==0 for i in chameleons]) == 2 and chameleons[desiredColor] == 0:\n        return -1\n    elif not (other_coler[0] - other_coler[1])%3 == 0:\n        return -1\n        \n    #\u5224\u65admeet\u6b21\u6570\n    return max(other_coler)", "def chameleon(chameleons, desiredColor):\n    color = chameleons.pop(desiredColor)\n    d,r = divmod(abs(chameleons[0]-chameleons[1]),3)\n    if d < color and r == 0:\n        return min(chameleons) + 3 * d\n    else:\n        return -1"]