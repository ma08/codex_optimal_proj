["from collections import Counter\n\ndef longest_palindrome(s):\n    c = Counter(filter(str.isalnum, s.lower()))\n    return sum(v//2*2 for v in c.values()) + any(v%2 for v in c.values())", "from collections import Counter\nimport re\n\ndef longest_palindrome(s):\n    n, odds, c = 0, 0, Counter(re.sub(r'\\W+|_', '', s.lower()))\n    for v in c.values():\n        x,r = divmod(v,2)\n        n += 2*x\n        odds += r\n    return n + bool(odds)", "from collections import Counter\n\ndef longest_palindrome(s):\n    freq = Counter(c for c in s.lower() if c.isalnum())\n    even, odd = [], []\n    for k, v in freq.items():\n        if v % 2:    odd.append(v-1)\n        else:        even.append(v)\n    return sum(even) + (sum(odd) + 1 if odd else 0)", "def longest_palindrome(s):\n    new_s = ''.join([x for x in s.lower() if x.isalnum()])\n    k = [new_s.count(x) for x in set(new_s)]\n\n    res = 0\n    for x in k:\n        if x%2==0:res += x\n        else:res += (x-1)\n    \n    return res+1 if any(x%2==1 for x in k) else res\n", "from collections import Counter\ndef longest_palindrome(s):\n    if s == \"\":\n        return 0\n    s = s.upper()\n    x = Counter(s)\n    len = 0\n    flag = False\n    for i in x:\n        if i.isalnum():\n          if x[i] % 2 == 0:\n            len+=x[i]\n          else:\n            flag=True\n            len+= (x[i]-1)\n    if flag == True:\n        return len+1\n    return len", "from collections import Counter\nfrom string import ascii_letters, digits\n\ndef longest_palindrome(data):\n    cnt = Counter([d for d in data.lower() if d in ascii_letters + digits])\n    even = sum([n for n in list(cnt.values()) if n % 2 == 0 ])     \n    odd = sorted( [n for n in list(cnt.values()) if n % 2 != 0] )[::-1]\n    if len(odd) == 0:\n        ans = even\n    if len(odd) == 1:\n        ans = even + odd[0]\n    if len(odd) >  1:\n        ans = even + odd[0] + sum([n-1 for n in odd[1:]])\n\n    return ans\n\n    \n", "from collections import Counter\n\ndef longest_palindrome(string):\n    possibles, has_odd = 0, False\n    for char, c in Counter(string.lower()).items():\n        if not char.isalnum():\n            continue\n        if c & 1:\n            possibles += (c - 1)\n            has_odd = True\n        else:\n            possibles += c\n    return possibles + (1 if has_odd else 0)", "from collections import Counter\n\ndef longest_palindrome(s):\n    d, r = Counter([x for x in s.lower() if x.isalnum()]), 0\n    for x in d.values():\n        r += x // 2 * 2 + (x % 2 >> r % 2)\n    return r", "from collections import Counter\n\ndef longest_palindrome(s):\n    flag = res = 0\n    for v in Counter(map(str.lower, filter(str.isalnum, s))).values():\n        flag |= v&1\n        res += v>>1<<1 # This is just for fun, don't write that\n    return res + flag", "import re\n\ndef longest_palindrome(s):\n    s = list(re.sub('[\\W_]+', '', s.lower()))\n    solution = 0\n    j = 0\n    letter_count = 0\n    for letter in s:\n        letter_count = s.count(letter)\n        if letter_count % 2 == 0:\n            solution += letter_count\n        else:\n            solution += letter_count - 1\n            j = 1\n        s = [i for i in s if i != letter]\n    return solution + j"]