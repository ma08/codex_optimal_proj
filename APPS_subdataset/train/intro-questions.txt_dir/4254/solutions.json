["import re\n\ndef solve(eq):\n    return ''.join(reversed(re.split(r'(\\W+)', eq)))", "def solve(eq):\n    #\n    # implemantation takes advantage of abscence of spaces\n    #\n    leq = (eq.replace('*', ' * ')\n             .replace('/', ' / ')\n             .replace('+', ' + ')\n             .replace('-', ' - ')\n             .split(' ')) \n\n    out = ''.join(leq[::-1])\n\n    return out\n\n", "def solve(eq):\n    s = eq.replace('+',' + ').replace('-',' - ').replace('/',' / ').replace('*',' * ')\n    return ''.join(s.split()[::-1])", "def solve(eq):\n    r=[]\n    n=\"\"\n    for i in eq:\n        if i in \"*/-+\":\n            r.append(n)\n            r.append(i)\n            n=\"\"\n        else:\n            n+=i\n    r.append(n)\n    r.reverse()\n    return \"\".join(r)\n", "import re\n\ndef solve(eq):\n    return \"\".join(re.split(\"([*+-/])\", eq)[::-1])", "def solve(eq):\n    answer = \"\"\n    temp = \"\"\n    for i in eq[::-1]:\n        if i.isalnum(): temp += i\n        else: \n            answer += temp[::-1] + i\n            temp = \"\"\n    answer += temp[::-1]\n    return answer", "import re\ndef solve(eq):\n    res = re.findall(r'([^0-9]+)|(\\d+)', eq)[::-1]\n    return ''.join([a[::-1]+b for a,b in res])", "import re\nfrom itertools import zip_longest\ndef solve(eq):\n    val=re.split('[+-/*]',eq)[::-1]\n    symb=re.findall('[+-/*]',eq)[::-1]\n    return ''.join(i+j for i,j in zip_longest(val,symb,fillvalue=''))\n", "def solve(eq):\n    eqnLen = len(eq)\n    \n    revEqn = ''    \n    token  = ''    #this will be a sigle alpha, or an entire number \n    i=0\n    \n    #build the reversed eqation (care regarding the numbers)\n    while i<eqnLen:\n        token = eq[i]\n        # if we have hit a digit (and the next char is a digit) and we are not out of bounds\n        # then we need to gobble up the entire number in non-reversed order\n        #e.g. 849 should be the token '849' not '948'\n        while (i+1 < eqnLen) and (token.isdigit()) and (eq[i+1].isdigit()):\n            i+=1\n            token+=eq[i]    \n        revEqn = token + revEqn    #push token ontop of existing equation\n        i+=1\n        \n    return revEqn\n#end solve function\n", "import re\ndef solve(eq):\n    return \"\".join(re.split(\"([+-/*])\", eq)[::-1])"]