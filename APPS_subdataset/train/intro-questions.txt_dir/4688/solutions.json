["def expanded_form(num):\n    integer_part, fractional_part = str(num).split('.')\n\n    result = [str(int(num) * (10 ** i)) for i, num in enumerate(integer_part[::-1]) if num != '0'][::-1]\n    result += [str(num) + '/' + str(10 ** (i + 1)) for i, num in enumerate(fractional_part) if num != '0']\n\n    return ' + '.join(result)\n", "def expanded_form(num):\n    xs = str(num).split('.')\n    return ' + '.join(\n        [f'{x}{\"0\" * i}' for i, x in enumerate(xs[0][::-1]) if x != '0'][::-1]\n        + [f'{x}/{10 ** i}' for i, x in enumerate(xs[1], 1) if x != '0']\n    )", "def expanded_form(num):\n    parts = str(num).split('.')\n    return ' + '.join( [str(int(p) * 10**(len(parts[0])-i-1)) for i,p in enumerate(parts[0]) if p != '0']\n                     + [\"{}/{}\".format(d, 10**i) for i,d in enumerate(parts[1], 1) if d != '0'] )", "def expanded_form(num):\n    integer = [n + '0'*i for i, n in enumerate(list(str(num).split('.')[0])[::-1]) if n != '0']\n    decimal = [n + '/1' + '0'*(i+1) for i, n in enumerate(list(str(num).split('.')[1])) if n != '0']\n    return ' + '.join(integer[::-1]+decimal)", "def expanded_form(num):\n    first_part, second_part = str(num).split(\".\")\n    first_length = len(first_part)\n\n    result = [\n        elem + \"0\" * (first_length - i - 1)\n        for i, elem in enumerate(first_part)\n        if elem != \"0\"\n    ]\n    result += [\n        elem + \"/1\" + \"0\" * (i + 1) for i, elem in enumerate(second_part) if elem != \"0\"\n    ]\n\n    return \" + \".join(result)\n", "def expanded_form(num):\n    num_1, num_2 = map(str, str(num).split('.'))\n    count = 0\n    ls = []\n    \n    length = len(num_1)\n    \n    for i in num_1:\n        length -= 1 \n        x = i + '0' * length\n        \n        if (x) != '0':\n            ls.append(x)\n        \n    for i in num_2:\n        count += 1\n        x = i + '/' + '1' +'0' * count\n        \n        if (x.split('/')[0]) != '0':\n            ls.append(x)\n        \n            \n    return (' + '.join(ls))", "def expanded_form(n):\n    integer, decimal = str(n).split(\".\")\n    l = len(integer)\n    integer = [f\"{digit}{'0' * (l - i)}\" for i, digit in enumerate(integer, 1) if digit != \"0\"]\n    decimal = [f\"{digit}/1{'0' * i}\" for i, digit in enumerate(decimal, 1) if digit != \"0\"]\n    return \" + \".join(integer + decimal)", "def expanded_form1(num):\n    a = len(str(num))\n    b = []\n    for i,j in enumerate(str(num)):\n        if j != '0':\n            b.append(j+'0'*(a-i-1))\n    return ' + '.join(b)\n\ndef expanded_form(num):\n    a = str(num).index('.')\n    m = int(str(num)[:a])\n    n = '0' + str(num)[a+1:]\n    b = []\n    for i,j in enumerate(n[1:]):\n        if j != '0':\n            b.append(j+'/1'+'0'*(i+1))\n    b = ' + '.join(b)\n    if len(expanded_form1(m)) > 0:\n        return expanded_form1(m)+' + '+b\n    else:\n        return b", "def expanded_form(num):\n  split = str(num).split('.')\n  tens = [str(int(x) * 10**i) for i, x in enumerate(split[0][::-1]) if x != '0'][::-1]\n  decimals = [f'{x}/{10**i}' for i, x in enumerate(split[1], 1) if x != '0'] if '.' in str(num) else []\n  return ' + '.join(tens + decimals)", "def expanded_form(num):\n    num = str(num)\n    index = num.index('.')\n    leng = len(num) - index - 1\n    num = num[:index] + num[index + 1:]\n    ans1 = ' + '.join(num[i] + (index-i-1) * '0' for i in range(index) if num[i] != '0')\n    ans2 = ' + '.join(num[i+index] + '/1' + (i+1) * '0' for i in range(leng) if num[i+index]!='0')\n    return ans2 if not ans1 else ans1 + ' + ' + ans2"]