["def f(k,n):\n    a = []\n    for i in range(0,n+1):\n        if i < k:\n            a += [i+1]\n        else:\n            a += [a[-1] + a[i//k]]\n    return a[-1]\n        \n", "def f(k, n):\n    memo = [1]\n    for i in range(1,n+1): memo.append(memo[-1]+memo[i//k])\n    return memo[-1]", "def f(k, n):\n    if n == 0:\n        return 1\n    res = 1\n    j = 1\n    seq = [1]\n    for i in range(1,n+1):\n        if i%k == 0:\n            j = seq[i//k]\n        res += j\n        seq.append(res)\n    return res", "def f(k, n):\n    fk = [*range(1, k + 1)]\n    x = 2\n    for i in range(k + 1, n + 2):\n        fk += [fk[-1] + x]\n        if i % k == 0: x = fk[i // k]\n    return fk[n]", "from math import floor\ndef f(k, n):\n    table = [1]\n    if n == 0:\n        return table[n]\n    else:\n        for i in range(1, n+1):\n            table.append(table[i - 1] + table[floor(i / k)])\n    return table[-1]", "# Taking advandage of relation between the 'steps' between terms of the sequence and the sequence itself\n\n# eg \n# f2    =  1, 2, 4, 6, 10, 14, 20, 26, 36, 46, ....\n# steps =  1, 2, 2, 4, 4, 6, 6, 10, 10, 14, 14, ....  each term of f2 repeated 2 times (start with 1)\n\n# f3    =  1, 2, 3, 5, 7, 9, 12, 15, 18, 23\n# steps =  1, 1, 2, 2, 2, 3, 3, 3, 5, 5, 5, ....  each term of f3 repeated 3 times (start with 1)\n\ndef f(k, n):\n    fk = [*range(1, k + 1)]\n    x = 2\n    for i in range(k + 1, n + 2):\n        fk += [fk[-1] + x]\n        if i % k == 0: x = fk[i // k]\n    return fk[n]", "def f(k, n):\n    g,r,c = [],1,0\n    for i in range(n//k):\n        c += k*r\n        g.append(r)\n        r += g[(i+1)//k]\n    return c+r*(n%k+1)", "def f(k, n):\n    r=[1]\n    diff=0\n    c=1\n    while(n>=len(r)):\n        r.append(r[-1]+r[diff])\n        c+=1\n        if c==k:\n            c=0\n            diff+=1\n    return r[n]", "def f(k, n):\n    xs = [1]\n    for i in range(1, n + 1):\n        xs.append(xs[-1] + xs[i // k])\n    return xs[-1]"]