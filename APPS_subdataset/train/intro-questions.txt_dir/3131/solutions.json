["from operator import mul\nfrom functools import reduce\n\n\ndef unique_digit_products(nums):\n    return len({reduce(mul, (int(a) for a in str(num))) for num in nums})\n", "from functools import reduce\nfrom operator import mul\n\ndef unique_digit_products(a):\n    return len({reduce(mul, map(int, str(x))) for x in a})", "def unique_digit_products(a):\n  return len(set(eval('*'.join(str(x))) for x in a))", "from functools import reduce\n\ndef product(x):\n    return reduce(lambda a, b: a * b, (int(d) for d in str(x)), 1)\n    \ndef unique_digit_products(a):\n    return len({product(x) for x in a})", "def digits(n):\n    p = 1\n    m = n\n    while n:\n        p *= n % 10\n        n //= 10\n    return m if m < 10 else p\n         \ndef unique_digit_products(a):\n    return len(set([digits(i) for i in a]))", "unique_digit_products=lambda a:len({eval('*'.join(str(n)))for n in a})", "unique_digit_products = lambda a, r=__import__(\"functools\").reduce: len({r(int.__mul__, map(int, str(e))) for e in a})"]