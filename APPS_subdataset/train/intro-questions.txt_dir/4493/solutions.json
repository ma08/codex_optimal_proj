["def get_last_digit(index):\n    a, b = 0, 1\n    for _ in range(index):\n        a, b = b, (a+b) % 10\n    return a\n", "def get_last_digit(index):\n    last, tmp, index = 0, 1, index % 60\n    for i in range(index):\n        last, tmp = tmp, (last + tmp) % 10\n    return last\n", "def get_last_digit(index):\n    return [0,1,1,2,3,5,8,3,1,4,5,9,4,3,7,0,7,7,4,1,5,6,1,7,8,5,3,8,1,9,0,9,9,8,7,5,2,7,9,6,5,1,6,7,3,0,3,3,6,9,5,4,9,3,2,5,7,2,9,1][index%60]", "def get_last_digit(n):\n    f=[0,1]+[0]*(n-1)\n    for i in range(2,n+1):\n        f[i] = f[i-1]+f[i-2] % 10\n    return f[n]%10", "def get_last_digit(number: int) -> int:\n    \"\"\" Get last digit from fibonacci number. \"\"\"\n    fib_seqence = [0, 1]\n    for _ in range(1, number):\n        fib_seqence.append(fib_seqence[-2] + fib_seqence[-1])\n    return int(str(fib_seqence[-1])[-1])\n", "S, L, x, y = set(), [], 0, 1\nwhile not (x, y) in S:\n    S.add((x, y))\n    z = (x + y)%10\n    L.append(z)\n    x, y = y, z\nmemo = L[-2:] + L[:-2]\n\ndef get_last_digit(index):\n    return memo[index % len(memo)]", "def get_last_digit(index):\n    a, b = 0, 1\n    for i in range(index):\n        a, b = b, (a + b) % 10\n    return a", "def get_last_digit(index):\n    if index <= 2 : return 1\n    x, y = 1, 1\n    for i in range(index - 2):\n        res = x + y\n        x, y = y, res\n    return res % 10", "def get_last_digit(index):\n    return int('011235831459437077415617853819099875279651673033695493257291'[index%60])", "def get_last_digit(index):\n    ds = '011235831459437077415617853819099875279651673033695493257291'\n    return int(ds[index % len(ds)])"]