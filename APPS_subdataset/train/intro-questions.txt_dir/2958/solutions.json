["def subcuboids(x,y,z):\n    return x*y*z*(x+1)*(y+1)*(z+1)//8", "def n(x):\n    return x * (x+1) // 2\n\ndef subcuboids(x, y, z):\n    return n(x) * n(y) * n(z)", "def subcuboids(x,y,z):\n    return (x*(x+1)//2)*(y*(y+1)//2)*(z*(z+1)//2)", "def subcuboids(x,y,z):\n    return (x + 1) * (y + 1) * (z + 1) * x * y * z // 8", "# This was a really fun kata!\n# I merely guessed the pattern.\n# I reasoned out answers between (1,1,1) and (2,2,2),\n# interpolated some educated guesses between the test cases,\n# and noticed (if my guesses were right):\n# (n, n, n) -> nth triangular number cubed (n*(n+1)/2) ** 3\n#\n# I struggled for a while to figure out\n# what's going on when x and y and z aren't all the same ?\n# \n# And then I thought, could it be this simple?\n# The xth cubic number times the yth cubic number times the zth cubic number?\n# \n# And I ran the sample tests and the answer was yeah lol\n\n# But I failed on my first solution attempt\n# Because I forgot to use integer division instead of float division ;(\n\ndef subcuboids(x,y,z):\n    return (x * (x+1) // 2) * (y * (y+1) // 2) * (z * (z+1) // 2)\n", "def subcuboids(x,y,z):\n    return x*(x+1)*y*(y+1)*z*(z+1)//8", "subcuboids=lambda Q,W,E:Q*-~Q*W*-~W*E*-~E>>3", "subcuboids=lambda x,y,z:x*-~x*y*-~y*z*-~z/8", "def subcuboids(x,y,z):\n    \n    l=(x*(x+1))//2\n    m=(y*(y+1))//2\n    n=(z*(z+1))//2\n    \n    return int(l*m*n)", "def subcuboids(x,y,z):\n    if (x*y*z)%2 == 0:\n        return (((x + x**2)//2)*((y + y**2)//2)*((z + z**2)//2))\n    else:\n        return x*y*z*((x - (((1+x)//2) - 1))*(y - (((1+y)//2) - 1))*(z - (((1+z)//2) - 1)))"]