["def elevator_distance(array):\n    return sum(abs(a - b) for a, b in zip(array, array[1:]))", "def elevator_distance(array):\n    return sum(abs(array[i+1] - array[i]) for i in range(len(array)-1))", "def elevator_distance(floors):\n    return sum(abs(floors[i + 1] - floors[i]) for i in range(len(floors) - 1))", "def elevator_distance(array):\n    return sum(abs(a - b) for a, b in zip(array, array[1::]))", "def elevator_distance(floors):\n    return sum(abs(floors[i-1] - floors[i]) for i in range(1, len(floors)))", "def elevator_distance(array):\n    a=0\n    for i in range(0, len(array)-1):\n     a+=abs(int(array[i]) - int(array[i+1]))\n    return a\n", "def elevator_distance(array):\n    return sum(abs(x-y) for x,y in zip(array[:-1],array[1:]))", "def elevator_distance(array):\n\n    n = len(array)\n    m = 0\n    total_dist = 0\n\n    while n >= 2:\n        distance = abs(array[m] - array[m+1])        \n        total_dist += distance\n\n        n -= 1\n        m += 1\n        \n    return (total_dist)", "def elevator_distance(ls):\n    return sum(abs(x-y) for x,y in zip(ls,ls[1:]))", "from functools import reduce\n\ndef elevator_distance(lst):\n    return sum(abs(a - b) for a, b in zip(lst, lst[1:]))"]