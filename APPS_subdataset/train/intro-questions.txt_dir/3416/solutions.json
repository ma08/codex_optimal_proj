["def total_kilometers(cons, petrol):\n    return round(100*petrol/cons, 2)\n\ndef check_distance(dist, cons, petrol):\n    return (\"You will need to refuel\" if dist > total_kilometers(cons, petrol) else\n            [ [n*100, dist-100*n, round(petrol-cons*n, 2)] for n in range(dist//100+1)])", "def total_kilometers(cons, petrol): \n    distance = round(((petrol/cons) * 100), 2)\n    return distance\n\n\ndef check_distance(distance, cons, petrol):\n    outp = []\n    track = 0\n    driven_dist = 0\n    if distance > ((petrol/cons) * 100):\n        return 'You will need to refuel'\n    while track <= distance:\n        outp.append([driven_dist, distance - driven_dist, round(petrol, 2)])\n        driven_dist += 100\n        petrol -= cons\n        track += 100\n    return outp\n\n", "def total_kilometers(cons, petrol):\n    return round(petrol * 100.0 / cons, 2)\n\ndef check_distance(distance, cons, petrol):\n    if total_kilometers(cons, petrol) < distance:\n        return 'You will need to refuel'\n    return [[round(x, 2) for x in (i * 100, distance - i * 100, petrol - cons * i)] for i in range(int(distance / 100) + 1)]", "def total_kilometers(cons, petrol):\n    return round(float(petrol) / cons * 100, 2)\n\ndef check_distance(distance, cons, petrol):\n    if distance * cons > petrol * 100: return \"You will need to refuel\"\n    return [[i, distance - i, round(petrol - i * cons / 100, 2)] for i in xrange(0, distance + 1, 100)]", "def total_kilometers(cons, petrol):\n    return round(petrol * 100.0 / cons,2)\n\ndef check_distance(distance, cons, petrol):\n    return [[(100 * n), distance - (100 * n), round(petrol - (cons * n),2)] for n in range(distance/100 + 1)] if total_kilometers(cons, petrol) >= distance else \"You will need to refuel\"", "def total_kilometers(cons, petrol):\n    return round(petrol / float(cons) * 100, 2)\n\n\ndef check_distance(distance, cons, petrol):\n    if total_kilometers(cons, petrol) < distance:\n        return 'You will need to refuel'\n    km_driven = 0\n    result = []\n    while distance >= 0:\n        result.append([km_driven, distance, petrol])\n        distance -= 100\n        km_driven += 100\n        petrol = round(petrol - cons, 2)\n    return result\n", "def total_kilometers(cons, petrol):\n    result = round(float(petrol) / float(cons) * 100.0, 2)\n    print(f'total_kilometers({cons}, {petrol}) => {result}')\n    return result\n\ndef check_distance(distance, cons, petrol):\n    if petrol / cons * 100 < distance:\n        return \"You will need to refuel\"\n    \n    result = [[0, distance, petrol]]\n    \n    fuel = petrol\n    since_start = 0\n    to_end = distance\n    for _ in range(to_end // 100):\n        fuel -= cons\n        since_start += 100\n        to_end -= 100\n        result.append([since_start, to_end, round(fuel, 2)])\n    print(f'check_distance({distance}, {cons}, {petrol}) => {result}')\n    return result", "def total_kilometers(cons, petrol):\n    return round(petrol/cons*100,2)\n\ndef check_distance(distance, cons, petrol):\n    if total_kilometers(cons, petrol)<distance:\n        return \"You will need to refuel\"\n    return[[i*100,distance-i*100,round(petrol-cons*i,2)]for i in range(0,distance//100+1)]", "def total_kilometers(cons, petrol):\n    return round(100*petrol/cons,2)\n\ndef check_distance(distance, cons, petrol):\n    if total_kilometers(cons,petrol) < distance: return 'You will need to refuel'\n    r = [[0,distance,petrol]]\n    x = 0\n    while distance >= 100:\n        petrol -= cons\n        distance -= 100\n        x += 100\n        r.append([x,distance,round(petrol,2)])\n    return r", "def total_kilometers(cons, petrol):\n    return round((petrol * 100)/ cons, 2)\n\ndef check_distance(distance, cons, petrol):\n    if distance > (petrol * 100)/ cons:\n        return \"You will need to refuel\"\n    else:\n        l = []\n        length = 0\n        for i in range(1 + distance//100):\n            l.append([length, distance, round(petrol, 2)])\n            length    += 100\n            distance  -= 100\n            petrol    -= cons\n        return l \n"]