["def duplicate_count(s):\n  return len([c for c in set(s.lower()) if s.lower().count(c)>1])\n", "# My 1st Solution  \n\ndef duplicate_count(text):  \n    count = 0  \n    counted = []  \n    test = list(text.lower())  \n    for i, c in enumerate(test):  \n        if test.count(test[i]) >= 2 and counted.count(test[i]) == 0:  \n            count += 1  \n            counted.append(test[i])  \n            test.remove(test[i])  \n    return count  \n", "def duplicate_count(text):\n    seen = set()\n    dupes = set()\n    for char in text:\n        char = char.lower()\n        if char in seen:\n            dupes.add(char)\n        seen.add(char)\n    return len(dupes)", "from collections import Counter\n\ndef duplicate_count(text):\n    return sum(1 for c, n in Counter(text.lower()).items() if n > 1)\n", "def duplicate_count(text):\n    count = 0\n    for c in set(text.lower()):\n        if text.lower().count(c) > 1:\n            count += 1\n    return count\n", "from collections import Counter\n\ndef duplicate_count(text):\n    counter = Counter(text.lower())\n    return len([list(counter.keys()) for i in list(counter.values()) if i>1])\n", "def duplicate_count(text):\n    text = text.lower()\n    duplicates = []\n    for i in text:\n        if text.count(i) > 1 and i not in duplicates:\n            duplicates.append(i)    \n    return len(duplicates)", "def duplicate_count(text):\n    text = text.lower()\n    return(sum([text.count(c) > 1 for c in set(text)]))\n", "from collections import Counter\n\ndef duplicate_count(text):\n    return sum(v > 1 for v in Counter(text.lower()).values())\n", "def duplicate_count(text):\n    n=0\n    text=text.lower()\n    for i in set(text):\n        if text.count(i) >1:\n            n+=1\n    return n", "from re import findall\n\ndef duplicate_count(text):\n    return (len(findall(\"(\\w)\\\\1+\", \"\".join(sorted(text.upper())))))\n"]