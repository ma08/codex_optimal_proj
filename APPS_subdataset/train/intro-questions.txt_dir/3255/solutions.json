["from collections import Counter\n\ndef only_duplicates(string):\n    cs = Counter(string)\n    return ''.join(c for c in string if cs[c] > 1)", "def only_duplicates(string):\n    return \"\".join([x for x in string if string.count(x) > 1])", "only_duplicates = lambda s: ''.join(c for c in s if s.count(c) > 1)", "def only_duplicates(stg):\n    return \"\".join(c for c in stg if stg.count(c) > 1)", "def only_duplicates(string):\n    return ''.join(s for s in string if string.count(s) > 1)", "def only_duplicates(string):\n    sets = unique, duplicate = set(), set()\n    for c in string: sets[c in unique].add(c)\n    return ''.join(c for c in string if c in duplicate)", "from collections import Counter\n\ndef only_duplicates(string):\n    counts = Counter(string)\n    return ''.join(c for c in string if counts[c] > 1)", "def only_duplicates(a):\n    b=[]\n    for j in range(0,len(a)):\n        for i in range(j+1,len(a)):\n            if a[j] == a[i]:\n                b.append(a[j])\n    #zhao ti shen ye mei you yong\n    a=list(a)\n    def seclect(i):\n            for j in b:\n                if j == i:\n                    return i\n\n    return ''.join(filter(seclect,a))", "def only_duplicates(string):\n  string = list(string)\n  foundStrings = []\n  finalString = []\n  \n  for index, item in enumerate(string):\n    if item not in string[index+1:len(string)] and item not in string[0:index]:\n      finalString.append(\"\")\n    else:\n      finalString.append(item)\n          \n  return ''.join(finalString)", "from collections import Counter\nfrom re import sub\n\n\ndef only_duplicates(s):\n    return sub(r\"[%s]\" % \"\".join(k for k, v in Counter(s).items() if v == 1), '', s)"]