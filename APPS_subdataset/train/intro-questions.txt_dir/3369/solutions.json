["def move(position, roll):\n    return position + 2*roll", "def move(position, roll):\n    return position+roll*2", "move = lambda p,r: p+r*2", "def move(start, roll):\n  return start + 2*roll", "def move(start, roll):\n    return start + roll * 2", "def move(position, roll):\n    return position+(roll<<1)", "move=lambda p,m:p+2*m", "move = lambda _, i: _ + 2 * i", "def move(position, roll):\n    print(position)\n    print(roll)\n    position =  position + roll * 2\n    return position\n    # your code here\n", "move = lambda position, roll: position + roll * 2", "def move(position, roll):\n    x=position\n    y=roll\n    return x+(y*2)\n", "def move(position, roll):\n    x = position + 2 * roll\n    return x", "def move(position, roll):\n    return 2 * roll + position", "def move(p,r):\n    return p+(r*2)", "import unittest\n\n\ndef move(position, roll):\n    return position + roll * 2\n    \n    \nclass TestMove(unittest.TestCase):\n    def test_move(self):\n        self.assertEqual(move(position=0, roll=4), 8)\n", "def move(position, roll):\n        if roll < 1 or roll > 6:\n            return \"Error\"\n        else:\n            new_position = position + (roll * 2)\n            return(new_position)", "def move(position, roll):\n    a = position\n    b = roll\n    c = (2*b)+a\n    return c", "move = lambda p, r: ['there are bees on my knees', 2, 4, 6, 8, 10, 12].__getitem__(r) + p", "def move(pos, mov):\n    return pos + 2*mov", "def move(position, roll):\n    s = position + ( roll * 2)\n    return s\n    # your code here\n", "def move(position, roll):\n    new_spot = roll*2 + position\n    return new_spot", "def move(position, roll):\n    return position + 2 * roll\nprint((move(1,4)))\n", "def move(position, roll):\n    # my solution\n    return position + 2 * roll\nprint(move(1, 4))", "def move(position, roll):\n    a = position + roll + roll\n    return a", "def move(position, roll):\n    res = position+roll*2\n    \n    return res\n", "def move(p, r):\n    return 2*r + p", "def move(position, roll):\n    r = roll * 2\n    return position + r", "def move(position, roll):\n    delta = roll * 2\n    return position + delta", "# player moves from left to right\n# The player rolls the dice and moves the number of spaces indicated by the dice two times.\n# input - two integers\n# output - integer\n\n#edge cases - die roll can only be (1-6), no numbers given\n\n# sample test (2, 7) = 16\n# 2 + (7 * 2)\n\ndef move(position, roll):\n    return (roll * 2) + position ", "def move(pos, roll):\n    return pos + 2*roll", "def move(position, roll):\n    if roll < 7:\n        return position + roll*2", "def move(position, roll):\n    res = 0\n    res = (roll * 2) + position\n    return res   ", "move = lambda pos, roll: pos + roll*2", "def move(position, roll):\n    if roll == 1: \n        return position + 2*roll\n    if roll == 2: \n        return position + 2*roll\n    if roll == 3: \n        return position + 2*roll\n    if roll == 4: \n        return position + 2*roll\n    if roll == 5: \n        return position + 2*roll\n    if roll == 6: \n        return position + 2*roll\n", "def move(position, roll):\n    return roll * 2 if position == 0 else (position + roll) * 2 - position", "def move(position, roll):\n    # your code here\n    double = roll*2\n    return position + double\n    \nmove(1,1)", "move = lambda a, b: a + 2 * b", "def move(position, roll):\n    # your code here\n    move = roll*2\n    sum = position + move\n    return sum", "def move(position, roll):\n    return position + roll*2\n    # y\n", "def move(position, roll):\n    n= position+roll+roll\n    return n", "def move(position, roll):\n    return roll + (position+roll)", "def move(position, roll):\n    \"\"\"Return the new player position\"\"\"\n    return position + 2 * roll", "def move(p, r):\n    return (p+r)*2 - p", "def move(position, roll, moves=2):\n    return move(position, roll, moves - 1) + roll if moves else position", "def move(position, roll):\n    # your code here\n    new_pos = position + (roll *2)\n    return new_pos ", "def move(position, roll):\n    currentSpace = roll * 2 + position\n    return currentSpace", "def move(position, roll):\n    return position + (roll * 2)\n    # Zelf\n", "def move(P, R):\n    return P + (2*R);", "def move(position, roll):\n    roll *= 2\n    return roll + position", "def move(p, r):\n    # your code here\n    p=p+2*r\n    return p ", "def move(position, roll):\n    n = roll * 2 + position\n    return n", "def move(position, roll):\n    moves = roll*2\n    new_position = position + moves\n    return new_position", "def move(position, roll):\n    case = position + roll *2\n    return case", "def move(position, roll):\n    position += 2* roll\n    return position", "def move(position, roll):\n    if roll > 0:\n        position += roll * 2\n    elif roll < 0:\n        position -= roll * 2\n    else: \n        position = position\n    return position", "def move(position, roll):\n    y = roll*2\n    return position+y", "def move(position, roll):\n    pos = position + 2 * roll\n    return pos# your code here", "def move(position, roll):\n    n = roll*2\n    return position + n", "def move(position, roll):\n    x = position\n    y = roll\n    new_pos = x + 2 * y\n    return new_pos", "def move(position: int, roll: int) -> int:\n    return position + 2 * roll", "def move(position, roll):\n    # your code here\n    goal = position + 2 * roll\n    return goal;", "def move(position, roll):\n    roll = roll * 2 \n    return position + roll", "def move(position, roll):\n    roll = roll*2\n    new = position + roll\n    return new", "def move(position, roll):\n    diceOver = 2*roll\n    newPos = diceOver + position\n    return newPos", "def move(position, roll):\n    i = 0\n    for i in range(roll):\n        position += 2\n    return position\nmove(0, 4)", "def move(position, roll):\n    # your code here\n    sum = (position + 2*roll)\n    return sum", "def move(position, roll):\n    x = roll * 2\n    newpos = x+position\n    return newpos", "def move(position, roll):\n    # your code here\n    return position + roll * 2\n    \nprint(move(3, 6))", "def move(position, roll):\n    # your code here\n    return position + 2 * roll\n    \nprint(move(3, 6))", "def move(n, b):\n    return n + 2*b", "def move(position, roll):\n    result = roll * 2 + position\n    return result", "def move(position, roll):\n    new_pos = position + (roll*2)\n    print(new_pos)\n    return new_pos\n    # your code here\n", "position = 0\nroll = 0\n\n\ndef move(position, roll):\n    inp = position + roll * 2\n    return inp\n\n\n\nmove(0, 4)", "def move(position, roll):\n    new_position = position + roll + roll\n    return new_position", "def move(position, roll):\n    m = position+2*roll\n    return(m)", "def move(position, roll):\n    megfejtes = position + (roll*2)\n    return(megfejtes)", "def move(position, roll):\n    # your code here\n    new_pos=position+2*roll\n    return new_pos", "def move(x, y):\n    return (y * 2) + x", "def move(position, roll):\n    return position + (2.*roll)", "def move(position, roll):\n    total_roll = roll * 2\n    new_position = position + total_roll\n\n    return new_position", "def move(position, roll):\n    position = position + roll \n    position = position + roll\n    return position", "def move(position, roll):\n    # Takes current p[osition and double the roll dice (1-6)\n    return position + (roll * 2)", "def move(position, roll):\n    final_pos=position+2*roll\n    return final_pos", "def move(position, roll):\n    position += roll + roll;\n    return position;", "def move(position, roll):\n    if roll:\n        return position + (roll*2)", "def move(position, roll):\n    position = roll * 2 + position\n    return position", "def move(position, roll):\n\n    intPosition = position + roll * 2\n\n    return intPosition", "move = lambda x, n :  x + 2 * n", "def move(position, roll):\n    return position + int(roll * 2)", "def move(position, roll):\n    final_position = position + 2 * roll\n    return final_position\n", "def move(position, roll):\n    a = position\n    b = roll\n    c = a+b*2\n    return c", "def move(position, roll):\n    move = int(position) + roll * 2\n    return move", "def move(position, roll):\n    # your code here\n    return (position + 2 * roll)\n\nprint((move(2, 5)))\n", "def move(position, roll):\n    pos = position + roll + roll\n    return pos", "def move(position, roll):\n    numMoved = roll * 2\n    return position + numMoved", "def move(position, roll):\n    a = position\n    import random\n    b = roll\n    c =a+b+b\n    return c\n", "def move(position, roll):\n    y = int(roll) * 2\n    x = int(position)\n    equ = y + x\n    return equ", "def move(position, roll):\n    \n    return (position + ( roll * 2))\n    \n    \n    \nprint((move(0, 4)))\n", "def move(position, roll):\n    new=position + (roll*2)\n    return new", "def move(position, roll):\n    if (roll >= 1) and (roll <= 6):\n        position += (roll * 2)\n        return position"]