["from collections import Counter\nfrom math import factorial\n\ndef count_perms(matrix):\n    m, n = len(matrix), len(matrix[0])\n    c = Counter([x for row in matrix for x in row])\n    factors = []\n    for x, count in c.most_common():\n        if count > 1:\n            factors.append(factorial(count))\n    return factorial(m * n) / reduce(lambda a, b: a * b, factors, 1)", "from math import factorial as fact\nfrom functools import reduce\nfrom collections import Counter\n\ndef count_perms(matrix):\n    m = [elt for line in matrix for elt in line]\n    return fact(len(m)) / reduce(lambda a,b: a*b, map(fact, Counter(m).values()), 1)", "from collections import Counter\nfrom itertools import chain, imap\nfrom math import factorial\nfrom operator import floordiv\n\ndef count_perms(matrix):\n    xs = list(chain.from_iterable(matrix))\n    return reduce(floordiv, imap(factorial, Counter(xs).itervalues()), factorial(len(xs)))", "from collections import Counter\nfrom functools import reduce\nfrom math import factorial\nfrom operator import mul\n\ndef count_perms(matrix):\n    return factorial(len(matrix) * len(matrix[0])) // reduce(mul, map(factorial, Counter(sum(matrix, [])).values()))", "from math import factorial as f\nfrom functools import reduce\nfrom collections import Counter\nfrom operator import mul\ndef count_perms(m):\n    m = sum(m,[])\n    return f(len(m)) / reduce(mul,map(f,Counter(m).values()))", "from collections import Counter\nfrom itertools import chain\nfrom operator import mul\nfrom math import factorial\n\ndef count_perms(matrix):\n    n = len(matrix) * len(matrix[0])\n    c = Counter(chain.from_iterable(matrix))\n    return factorial(n) / reduce(mul, map(factorial, c.itervalues()))", "from math import factorial\nfrom collections import Counter\nfrom functools import reduce\n\ndef count_perms(matrix):\n    items = [a for b in matrix for a in b]\n    return factorial(len(items)) // reduce(lambda x,y: x*y, list(map(factorial, list(Counter(items).values()))), 1)\n", "import math\n\ndef count_perms(matrix):\n    freq = dict()\n    for sub_matrix in matrix:\n        for elem in sub_matrix:\n            if freq.get(elem) is not None:\n                freq[elem] = freq[elem] + 1\n            else:\n                freq[elem] = 1\n    denominator = 1\n    for frequency in freq.values():\n        denominator = denominator * math.factorial(frequency)\n    return math.factorial(sum(freq.values())) / denominator", "from math import factorial as f\nfrom operator import mul\n\ndef count_perms(m):\n    rep = [[i for s in m for i in s].count(j) for j in set([i for s in m for i in s])]\n    rep = [f(i) for i in rep]\n    tot = (len(m)*len(m[0]))\n    return f(tot)/reduce(mul, rep, 1)", "f,count_perms=lambda n:n<1or n*f(n-1),lambda m:(lambda l:reduce(lambda x,y:x/f(l.count(y)),set(l),f(len(l))))(sum(m,[]))"]