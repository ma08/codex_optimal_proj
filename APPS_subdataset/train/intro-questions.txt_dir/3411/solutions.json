["def amort(rate, bal, term, num_payments):\n    monthlyRate = rate / (12 * 100)\n    c = bal * (monthlyRate * (1 + monthlyRate) ** term) / (((1 + monthlyRate) ** term) - 1)\n    newBalance = bal\n    for i in range(num_payments):\n        interest = newBalance * monthlyRate\n        princ = c - interest\n        newBalance = newBalance - princ\n    return 'num_payment %s c %.0f princ %.0f int %.0f balance %.0f' % (num_payments, c, princ, interest, newBalance)", "def amort(rate, bal, term, num_payments):\n    r = rate / (100 * 12)\n    n = r * bal\n    d = 1 - (1 + r) ** (-term)\n    c = n / d\n    for i in range(num_payments):\n        int_ = r * bal\n        princ = c - int_        \n        bal -= princ\n    return \"num_payment %d c %.0f princ %.0f int %.0f balance %.0f\" % (num_payments, c, princ, int_, bal)", "def calc_balance(r, n, bal, c):\n    return (1 + r)**n * bal - (((1+r)**n - 1) / r) * c\n\ndef amort(rate, bal, term, num_payment):\n    r = rate / 100 / 12\n    n = r * bal\n    d = 1 - (1 + r)**(-term)\n    c = n/d\n\n    new_balance = calc_balance(r, num_payment, bal, c)\n    old_balance = calc_balance(r, num_payment - 1, bal, c)\n    princ = old_balance - new_balance\n    intr = c - princ\n    \n    return \"num_payment {} c {:.0f} princ {:.0f} int {:.0f} balance {:.0f}\".format(num_payment, c, princ, intr, new_balance)", "def amort(rate, bal, term, num_payments):\n    # monthly interest rate\n    r = rate / 1200\n    # monthly payment\n    c = bal * (r / (1 - (1 + r)**(-term)))\n    # balance last month\n    b = bal * (1 + r)**(num_payments - 1) - c * (((1 + r)**(num_payments - 1) - 1) / r)\n    # interest\n    i = r * b\n    # amortization\n    a = c - i\n    # new_balance\n    b -= a\n    return 'num_payment {} c {:.0f} princ {:.0f} int {:.0f} balance {:.0f}'.format(num_payments, c, a, i, b)", "def amort(rate, bal, term, num_payments):\n    # your code\n    r = rate / (100 * 12)\n    c = (r * bal) / (1 - pow((1 + r), -term))\n    \n    int = 0\n    princ = 0\n    for n in range(num_payments):\n        int = r * bal\n        princ = c - int\n        bal -= princ\n    \n    return \"num_payment {:0.0f} c {:0.0f} princ {:0.0f} int {:0.0f} balance {:0.0f}\".format(num_payments, c, princ, int, bal)", "def amort(rate, bal, term, num):\n    c = bal*rate/1200/(1-(1+rate/1200)**(-term))\n    for i in range(num):\n        int = bal*rate/1200\n        bal = bal + int - c\n    return \"num_payment %d c %.0f princ %.0f int %.0f balance %.0f\" % (num,c,c-int,int,bal)", "def amort(rate, bal, term, num_payments):\n    r=rate/(1200)\n    c=r*bal/(1-(1+r)**(-term))\n    for _ in range(num_payments):\n        _int=bal*r\n        princ=c-_int\n        bal-=princ\n    return 'num_payment {} c {:.0f} princ {:.0f} int {:.0f} balance {:.0f}'.format(num_payments,c,princ,_int,bal)", "def amort(r,p,n,x):\n    r = r/12/100\n    c = (r*p) / (1-((1+r)**(-n)))\n    curr = p*(1+r)**x-((1+r)**(x)-1)*(c/r)\n    i = r*(p*(1+r)**(x-1)-((1+r)**(x-1)-1)*(c/r))\n    return f'num_payment {x} c {round(c)} princ {round(c-i)} int {round(i)} balance {round(curr)}'", "amort=lambda r,b,t,n,c=0,p=0,i=0,m=-1:m<0and amort(r/1200,b,t,n,r/1200*b/(1-(1+r/1200)**-t),p,i,0)or m==n and\"num_payment %d c %.0f princ %.0f int %.0f balance %.0f\"%(n,c,p,i,b)or amort(r,r*b+b-c,t-1,n,c,c-r*b,r*b,m+1)", "def amort(r,b,t,n):\n    r/=1200\n    c=r*b/(1-(1+r)**-t)\n    for i in range(n):I,p,b=r*b,c-r*b,r*b+b-c\n    return \"num_payment %d c %.0f princ %.0f int %.0f balance %.0f\"%(n,c,p,I,b)"]