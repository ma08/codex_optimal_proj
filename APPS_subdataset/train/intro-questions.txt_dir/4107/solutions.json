["from dateutil.parser import parse\n\ndef half_life(*persons):\n    p1,p2 = sorted(map(parse, persons))\n    return str( p2+(p2-p1) )[:10]", "from datetime import datetime as dt\n\ndef half_life(p1, p2):\n    d1, d2 = (dt.strptime(p, \"%Y-%m-%d\") for p in sorted((p1, p2)))\n    return (d2 + (d2 - d1)).strftime(\"%Y-%m-%d\")", "from datetime import date\ndef half_life(person1, person2):\n    p1 = list(map(int,person1.split(\"-\")))\n    p1_date = date(p1[0],p1[1],p1[2])\n    p2 = list(map(int,person2.split(\"-\")))\n    p2_date = date(p2[0],p2[1],p2[2])\n    if p1[0]>p2[0]:\n        diff = p1_date-p2_date\n        b = p1_date+diff\n        return str(b)\n    else:\n        diff = p2_date-p1_date\n        a = p2_date+diff\n        return str(a)\n    \n", "from datetime import datetime\n\ndef half_life(*p):\n    D = sorted(datetime.strptime(x, \"%Y-%m-%d\") for x in p)\n    return (D[1] + (D[1] - D[0])).strftime(\"%Y-%m-%d\")\n", "from datetime import datetime, timedelta\n\ndef half_life(person1, person2):\n    d1, d2 = (datetime.strptime(p, '%Y-%m-%d') for p in [person1, person2])\n    if d1 > d2:\n        d1, d2 = d2, d1\n    return format(d2 + timedelta((d2 - d1).days), '%Y-%m-%d')", "from datetime import datetime\n\ndef half_life(person1, person2):\n    person1, person2 = sorted((person1, person2))\n    p1 = datetime.strptime(person1, \"%Y-%m-%d\")\n    p2 = datetime.strptime(person2, \"%Y-%m-%d\")\n    return (p2 + (p2 - p1)).strftime(\"%Y-%m-%d\")", "from datetime import datetime\n\ndef half_life(a, b):\n    a, b = [datetime.strptime(x, \"%Y-%m-%d\") for x in (a, b)]\n    return (max(a, b) + abs(a - b)).strftime(\"%Y-%m-%d\")", "from datetime import datetime\ndef half_life(p1,p2):\n    d1,d2=sorted([datetime.strptime(p1,\"%Y-%m-%d\"),datetime.strptime(p2,\"%Y-%m-%d\")])\n    return (d2+(d2-d1)).strftime(\"%Y-%m-%d\")", "from datetime import datetime\n\ndef half_life(person1, person2):\n    d1, d2 = map(lambda s: datetime.strptime(s, '%Y-%m-%d'), sorted((person1, person2)))\n    return datetime.strftime(d2 + (d2 - d1), '%Y-%m-%d')", "from datetime import date, datetime\ndef half_life(person1, person2):\n    d0, d1 = sorted([\n        datetime.strptime(person1, '%Y-%m-%d').date(),\n        datetime.strptime(person2, '%Y-%m-%d').date()\n    ])\n    return (d1 + (d1 - d0)).isoformat()\n"]