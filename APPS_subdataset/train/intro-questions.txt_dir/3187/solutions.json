["def sum_nested(lst):\n    return sum(sum_nested(x) if isinstance(x,list) else x for x in lst)", "def sum_nested(lst):\n    total = 0\n    for ele in lst:\n        total += ele if type(ele) != list else sum_nested(ele)\n        \n    return total", "import re\n\ndef sum_nested(lst):\n    return sum(map(int, re.findall('\\d+', str(lst))))\n", "def sum_nested(lst):\n    return sum(map(sum_nested, lst)) if isinstance(lst, list) else lst ", "import re\n\ndef sum_nested(lst):\n    return sum(int(x) for x in re.findall('\\d+', str(lst)))", "def sum_nested(lst):\n    if not isinstance(lst, list):\n        return lst\n\n    return sum(sum_nested(x) for x in lst)", "def sum_nested(lst):\n    s = 0\n    for l in lst:\n        if type(l) == list:\n            s += sum_nested(l)\n        else:\n            s += l\n    return s", "def sum_nested(L):\n    if L == []:\n        return 0\n    if type(L[0]) == int:\n        if len(L) == 1:\n            return L[0]\n        else:\n            return L[0]+sum_nested(L[1:])\n    else:\n        return sum_nested(L[0])+sum_nested(L[1:])\n    \n    #the sum of every numerical value in the list and its sublists\n", "def sum_nested(L):\n    return sum(x if isinstance(x, int) else sum_nested(x) for x in L)", "def sum_nested(lst):\n    return sum(sum_nested(e) if type(e) is list else e for e in lst)"]