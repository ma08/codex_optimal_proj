["def is_isogram(string):\n    return len(string) == len(set(string.lower()))", "def is_isogram(string):\n    string = string.lower()\n    for letter in string:\n        if string.count(letter) > 1: return False\n    return True", "def is_isogram(string): \n    return len(set(string.lower())) == len(string)", "def is_isogram(string):\n    #your code here\n    char_dict = {}\n    string = string.lower()\n    \n    for char in string:\n        if char in char_dict:\n            # increment count of this character\n            char_dict[char] = char_dict[char] + 1\n        else:\n            char_dict[char] = 1\n    \n    # loop over the characters in dictionary, if any have\n    # more than 1 found, this string is not an isogram, so break\n    # the loop and function and return False.\n    for key in char_dict:\n        if char_dict[key] > 1:\n            return False\n            \n    # If no duplicates were found in the loop directly above,\n    # this must be an isogram, so return true!\n    return True", "is_isogram = lambda s: len(set(s.lower())) == len(s)", "def is_isogram(string):\n    s = set(string.lower()) \n    if len(s) == len(string): \n        return True\n    return False", "def is_isogram(string):\n    string = string.lower()\n    return len(string) == len(set(string))", "def is_isogram(string):\n    return len(set(list(string.lower()))) == len(string)", "from collections import Counter\n\ndef is_isogram(string):\n    for x in Counter(string.lower()).values():\n        if x > 1:\n            return False\n    return True", "def is_isogram(string):\n    result = {char: string.lower().count(char) for char in string.lower()}\n    if 2 in result.values():\n        return False\n    else:\n        return True"]