["def cipher(p):\n    return ''.join(chr((ord(j)+i%3+(i-1)//3-97)%26+97) if j!=' 'and i!=0 else j for i,j in enumerate(p))", "from itertools import count\n\nBASE = ord('a')\n\ndef deltas():\n    for i in count(-1):\n        yield max(i, 0)\n        yield i + 2\n        yield i + 3\n\ndef cipher(phrase):\n    return ''.join(\n        c if c.isspace() else chr(BASE + (ord(c) - BASE + delta) % 26)\n        for c, delta in zip(phrase, deltas())\n    )", "from string import ascii_lowercase as A\ndef cipher(phrase: str):\n    a = A*2 + ' '*26\n    seq = lambda n: n%3 + n//3 + (n%3>0) - (n>0)\n    cip = lambda i: a[a.index(phrase[i]) + seq(i)]\n    return ''.join(map(cip, range(len(phrase))))", "cifer_sequence = [0,1,2,0,2,3]\n\n\ndef cipher(phrase: str):\n    crypt = ''\n    for i, simbol in enumerate(phrase):\n        if i < len(cifer_sequence):\n            cifer_sequence.append(cifer_sequence[-3] + 1)\n        if simbol == ' ':\n            crypt += ' '\n        else:\n            crypt += chr((ord(simbol) - ord('a') + cifer_sequence[i]) % 26 + ord('a'))\n    return crypt", "def shift(s=1):\n    yield 0\n    while 1:\n        yield s ; s+=1\n        yield s\n        yield s-2\n\ndef cipher(s):\n    return ''.join( c if c==' ' else chr( (x+ord(c)-97)%26 + 97 )\n                    for c,x in zip(s,shift()) )", "def cipher(phrase: str):\n    t = [0,2,3]\n    string = ''\n    x = -1\n    for i in phrase:\n        x += 1\n        if(ord(i) != ord(' ')):\n            c = ord(i) - 97\n            if(x == 0):\n                string += chr(c+97)\n            elif(x == 1):\n                string += chr(((c+1)%26)+97)\n            elif(x == 2):\n                string += chr(((c+2)%26)+97)\n            else:\n                string += chr(((c+t[x%3]+(int)(x/3) - 1)%26)+97)\n        else:\n            string += ' '\n\n            \n    print(string)\n    return string", "def cipher(phrase: str):\n    mass = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n    j = 0\n    cip = []\n    num = []\n    x = 0\n    y = 1\n    z = 2\n    for i in range(0, len(phrase), 3):\n        num.append(x)\n        if y >= 2:\n            x += 1\n        num.append(y)\n        y+=1\n        num.append(z)\n        z+=1\n\n    for i in range(0, len(phrase)):\n        for j in range(0, len(mass)):\n            if phrase[i] == mass[j]:\n                j = j + num[i]\n                cip.append(mass[j])\n                break\n            elif phrase[i] == \" \":\n                cip.append(\" \")\n                break\n                \n    return (''.join(cip))", "def cipher(str):\n    key = [0,1,2,0,2,3,1,3,4,2,4,5,3,5,6,4,6,7,5,7,8,6,8,9,7,9,10,8,10,11,9,11,12,10,12,13,11,13,14,12,14,15,13,15,16,14,16,17,15,17,18,16,18,19,17,19,20,18,20,21,19,21,22,20,22,23,21,23,24,22,24,25,23,25,26]\n    result = ''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz' * 2\n    \n    for i in range(len(str)):\n        if str[i] == ' ':\n            result += ' '\n            continue\n        alpha_index = alphabet.find(str[i])\n        result += alphabet[alpha_index + key[i]]\n    return result", "def cipher(phrase: str):\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    res = [phrase[0]]\n    for i, char in enumerate(phrase[1:]):\n        if char != ' ':\n            res.append(alphabet[(ord(char)-97 + i//3 + (i+1)%3) % 26])\n        else:\n            res.append(' ')\n    return \"\".join(res)\n    #0, 1,2,0, 2,3,1, 3,4,2,4,5,3,5,6,4,6,7,5,7,8,\n", "def cipher(phrase: str):\n    return ''.join(chr(ord('a') + (ord(c) - ord('a') + i % 3 + (i - 1) // 3) % 26) if i > 0 and c != ' ' else c for i, c in enumerate(phrase))        "]