["def encode(s, t=str.maketrans(\"aeiou\", \"12345\")):\n    return s.translate(t)\n    \ndef decode(s, t=str.maketrans(\"12345\", \"aeiou\")):\n    return s.translate(t)", "CIPHER = (\"aeiou\", \"12345\")\n\ndef encode(st):\n    return st.translate(str.maketrans(CIPHER[0], CIPHER[1]))\n    \ndef decode(st):\n    return  st.translate(str.maketrans(CIPHER[1], CIPHER[0]))", "def encode(st):\n    for i, v in enumerate(\"aeiou\", start=1):\n        st = st.replace(v,str(i))\n    return st\n    \ndef decode(st):\n    for i, v in enumerate(\"aeiou\", start=1):\n        st = st.replace(str(i),v)\n    return st", "tbl1 = str.maketrans(\"aeiou\", \"12345\")\ntbl2 = str.maketrans(\"12345\", \"aeiou\")\n\n\ndef encode(st):\n    return st.translate(tbl1)\n\n\ndef decode(st):\n    return st.translate(tbl2)", "a={'a':'1','e':'2','i':'3','o':'4','u':'5'}\nb=('a','e','i','o','u')\ndef encode(st):\n    return \"\".join(a[c] if c in a else c for c in st)\n    \ndef decode(st):\n    return \"\".join(b[int(c)-1] if c.isdigit() else c for c in st)", "def cipher(mode):\n    table = str.maketrans(*['aeiou', '12345'][::mode])\n    return lambda s: s.translate(table)\n\nencode, decode = cipher(1), cipher(-1)", "CYPHER = tuple(zip('aeiou', '12345'))\n\ndef munge(st, mapping):\n    return ''.join([mapping.get(c, c) for c in st])\n\ndef encode(st):\n    return munge(st, {a: b for a, b in CYPHER})\n    \ndef decode(st):\n    return munge(st, {b: a for a, b in CYPHER})\n", "def encode(st):\n    L=[]\n    A = {\"a\":\"1\",\"e\":\"2\",\"i\":\"3\",\"o\":\"4\",\"u\":\"5\"}\n    for i in st:\n        if i in A:\n            L.append(A[i])\n        else:\n            L.append(i)\n    return \"\".join(L)\n    \ndef decode(st):\n    L=[]\n    A = {\"1\":\"a\",\"2\":\"e\",\"3\":\"i\",\"4\":\"o\",\"5\":\"u\"}\n    for i in st:\n        if i in A:\n            L.append(A[i])\n        else:\n            L.append(i)\n    return \"\".join(L)", "import re\ndef encode(st):\n    vowel = ' aeiou'\n    return re.sub(r'[aeoui]', lambda x: str(vowel.index(x.group(0))) ,st)\n    \ndef decode(st):\n    vowel = ' aeiou'\n    return re.sub(r'[1-5]', lambda x: vowel[int(x.group(0))] ,st)\n", "a = [\"a\",\"e\",\"i\",\"o\",\"u\"]\ndef encode(st):\n    return \"\".join([str(a.index(c) + 1) if c in a else c for c in st])\ndef decode(st):\n    return \"\".join([a[int(c)-1] if c.isdigit() else c for c in st])"]