["def triple_shiftian(T,n):\n    for i in range(3,n+1):\n        T.append(4 * T[i-1] - 5 * T[i-2] + 3 * T[i-3])\n    return T[n]  ", "def triple_shiftian(base, n):\n    a, b, c = base\n    for _ in range(n):\n        a, b, c = b, c, 4 * c - 5 * b + 3 * a\n    return a", "def triple_shiftian(base,n):\n    #your code here\n    for i in range(n-2):\n        base.append(4*base[i+2]-5*base[i+1]+3*base[i])\n    return base[n]", "def triple_shiftian(base,n):\n    a,b,c = base\n    for i in range(n):\n        a, b, c = b, c, 4 * c - 5 * b + 3 * a\n    return a", "def triple_shiftian(base,n):\n  a, b, c = base\n  i = 0\n  while (i < n):\n    a, b, c = b, c, 4 * c - 5 * b + 3 * a\n    i += 1\n  return a", "triple_shiftian=lambda base,n: base[n] if n<len(base) else triple_shiftian(base+[4*base[-1]-5*base[-2]+3*base[-3]],n)", "def triple_shiftian(base,n):\n    while n:\n        base[0], base[1], base[2] = base[1], base[2], 4*base[2] - 5*base[1] + 3*base[0]\n        n -= 1\n    return base[0]", "def triple_shiftian(base,n):\n    num = [0]*(n+1) if n > 3 else [0,0,0]\n    num[0], num[1], num[2] = base\n    i = 3\n    while i <= n:\n        num[i] = 4*num[i-1] - 5*num[i-2] + 3*num[i-3]\n        i += 1\n    return num[n]", "def triple_shiftian(base,n):\n    [a,b,c] = base\n    for i in range(n):\n        [a,b,c]=[b,c,4*c-5*b+3*a]\n    return a"]