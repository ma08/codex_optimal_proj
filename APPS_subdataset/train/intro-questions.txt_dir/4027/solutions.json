["def sum_nested_numbers(a, depth=1):\n    return sum(sum_nested_numbers(e, depth+1) if type(e) == list else e**depth for e in a)", "def sum_nested_numbers(arr,m=1):\n    total = 0\n    for element in arr:\n        if isinstance(element, int): \n            total += element**m\n        else:\n            total += sum_nested_numbers(element, m+1)\n    return total", "def sum_nested_numbers(a, lvl=0):\n    return a ** lvl if not isinstance(a, list) else sum(sum_nested_numbers(b, lvl+1) for b in a)", "def sum_nested_numbers(arr, depth = 1):\n  return sum(sum_nested_numbers(x, depth+1) if type(x) is list else x ** depth for x in arr)", "def flatten(xs, level=1):\n    for x in xs:\n        if isinstance(x, list):\n            yield from flatten(x, level+1)\n        else:\n            yield x, level\n\ndef sum_nested_numbers(xs):\n    return sum(x ** level for x, level in flatten(xs))", "def depth(arr,n):\n    res=[]\n    for i in arr:\n        if isinstance(i,int):\n            res.append((i,n))\n        else:\n            res+=depth(i,n+1)\n    return res\ndef sum_nested_numbers(arr):\n    return sum(n**i for (n,i) in depth(arr,1))", "def sum_nested_numbers(x):\n    return sum(f(x))\n\ndef f(lst, v=1):\n    for x in lst:\n        if isinstance(x, (list,tuple)):\n            for j in f(x, v+1):\n                yield j\n        else:\n            yield x**v", "sum_nested_numbers=r=lambda a,p=1:sum(n**p if n*0==0else r(n,p+1)for n in a)", "def sum_nested_numbers(arr, d=1):\n    my_sum = 0\n    for v in arr:\n        if isinstance(v, list):\n            my_sum += sum_nested_numbers(v, d+1)\n        else:\n            my_sum += (v**d)\n    return my_sum"]