["def nth_fib(n):\n  a, b = 0, 1\n  for i in range(n-1):\n    a, b = b, a + b\n  return a", "def nth_fib(n):\n  a, b = (0, 1)\n  for _ in range(n-1):\n    a, b = b, a + b\n  return a", "def nth_fib(n):\n  if n==1:\n      return 0\n  elif n==2:\n      return 1\n  else:\n      return nth_fib(n-1)+nth_fib(n-2)\n", "from math import sqrt\ndef nth_fib(n):\n  n = n - 1\n  Phi = (1 + sqrt(5))/2\n  phi = (1 - sqrt(5))/2\n  \n  return int(((Phi**n)-(phi**n))/sqrt(5))", "def nth_fib(n):\n    if n <= 2:\n        return n-1\n    return nth_fib(n-1) + nth_fib(n-2)", "memoize = {}\ndef nth_fib(n):\n  if n == 1: \n     return 0 \n  if n == 2: \n     return 1 \n  if n not in memoize: \n     memoize[n] = nth_fib(n-1) + nth_fib(n-2) \n  return memoize[n]\n\n", "def nth_fib(n):\n  n -= 1\n  if n == 0: return 0\n  if n == 1: return 1\n  a, b, p, q = 1, 0, 0, 1\n  \n  while n > 0:\n    if n % 2 == 0:\n      tp = p\n      p = p ** 2 + q ** 2\n      q = 2 * tp * q + q ** 2\n      n //= 2\n    else:\n      ta = a\n      a = b * q + a * q + a * p\n      b = b * p + ta * q\n      n -= 1\n  return b", "def nth_fib(n):\n    return nth_fib(n-2) + nth_fib(n-1) if n > 2 else n - 1\n", "def nth_fib(n):\n  return 0 if n==1 else 1 if n in [2,3] else (nth_fib(n-2)+nth_fib(n-1))", "#Using Binet's Formula to speed things up\ndef nth_fib(n):\n    Phi = (pow(5, 0.5) + 1)/2\n    phi = Phi - 1\n    n -= 1\n    return round((pow(Phi, n) - pow(-phi, n))/pow(5, 0.5))"]