["def truncate_string(s,n):\n    return s if len(s)<=n else s[:n if n<=3 else n-3]+'...'", "def truncate_string(s, n):\n    return s if n>=len(s) else s[:n]+'...' if n<=3 else s[:n-3]+'...'", "def truncate_string(str,n):\n    if len(str) <= n:\n        return str\n    if n <= 3:\n        return str[0:n] + \"...\"\n    else:\n        return str[:n-3] + \"...\"", "def truncate_string(str,n):\n    if n>=len(str):\n        return str\n    return [str[:n]+'.'*3, str[:n-3]+'.'*3][n>3]", "def truncate_string(s, max_len):\n    if len(s) <= max_len:\n        return s\n    return '{}...'.format(s[:max_len - (3 if max_len > 3 else 0)])", "truncate_string=lambda s,n:s[:n-3*(3<n<len(s))]+'...'*(n<len(s))", "def truncate_string(str,n):\n    if len(str) <= n:\n        return str\n    if n <= 3:\n        return str[:n] + '...'\n    return str[:n-3] + '...'", "truncate_string=lambda str,n: str if n>=len(str) else str[:n-3 if n>3 else n]+'...'", "def truncate_string(s,n):\n    if n>=len(s):return s\n    elif n<=3:return s[:n]+\"...\"\n    return s[:n-3]+\"...\"", "def truncate_string(s, n):\n    p = s[:n - 3] if n > 3 else s[:n]\n    return p + '...' if len(s) > n else s"]