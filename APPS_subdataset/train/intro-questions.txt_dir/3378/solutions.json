["def decrypt(text, n):\n    if text in (\"\", None):\n        return text\n    \n    ndx = len(text) // 2\n\n    for i in range(n):\n        a = text[:ndx]\n        b = text[ndx:]\n        text = \"\".join(b[i:i+1] + a[i:i+1] for i in range(ndx + 1))\n    return text\n\n\n\ndef encrypt(text, n):\n    for i in range(n):\n        text = text[1::2] + text[::2]\n    return text", "def decrypt(s, n):\n    if not s: return s\n    o, l = len(s) // 2, list(s)\n    for _ in range(n):\n        l[1::2], l[::2] = l[:o], l[o:]\n    return ''.join(l)\n\n\ndef encrypt(s, n):\n    if not s: return s\n    for _ in range(n):\n        s = s[1::2] + s[::2]\n    return s", "def decrypt(text, n):\n    if not text: return text\n    half = len(text) // 2\n    arr = list(text)\n    for _ in range(n):\n        arr[1::2], arr[::2] = arr[:half], arr[half:]\n    return ''.join(arr)\n\ndef encrypt(text, n):\n    for i in range(n):\n        text = text[1::2] + text[::2]\n    return text", "def encrypt_once(s):\n    h, t = \"\", \"\"\n    for i in range(len(s)):\n        if i % 2 == 0:\n            h += s[i]\n        else:\n            t += s[i]\n    return t + h\n\n\ndef decrypt_once(s):\n    i = len(s) // 2\n    j = 0\n    \n    result = \"\"\n    \n    for k in range(len(s)):\n        if k % 2 == 0:\n            result += s[i]\n            i += 1\n        else:\n            result += s[j]\n            j += 1\n    \n    return result\n\n\ndef decrypt(text, n):\n    if not text or len(text) == 0 or n <= 0:\n        return text\n\n    for i in range(n):\n        text = decrypt_once(text)\n\n    return text\n\n\ndef encrypt(text, n):\n    if not text or len(text) == 0 or n <= 0:\n        return text\n        \n    for i in range(n):\n        text = encrypt_once(text)\n    \n    return text\n", "def decrypt(encrypted_text, n):\n\n    if n < 1:\n        return encrypted_text\n    \n    half_len = len(encrypted_text)//2    \n    \n    left, right = encrypted_text[:half_len], encrypted_text[half_len:]\n  \n    encrypted_text = [''.join(i) for i in zip(right, left)]\n       \n    if len(right) > half_len:\n        encrypted_text += right[-1]\n    \n    return decrypt(''.join(encrypted_text), n-1)\n    \n\ndef encrypt(text, n):\n    \n    if n < 1:\n        return text\n        \n    for _ in range(n):\n        text = text[1::2] + text[0::2]\n        \n    return text", "def decrypt(text, n):\n    if text:\n        mid = len(text) // 2\n        for _ in range(n):\n            text = ''.join(sum(zip(text[mid:], list(text[:mid]) + ['']), ()))\n    return text\n\n\ndef encrypt(text, n):\n    if text:\n        for _ in range(n):\n            text = text[1::2] + text[::2]\n    return text", "def decrypt(text, n):\n    if text == None: return text\n    \n    decodeList = encrypt(list(range(len(text))),n)\n    return ''.join( text[decodeList.index(i)] for i in range(len(text)) )\n\n\ndef encrypt(text, n):\n\n    if text == None: return text\n    return encrypt(text[1::2] + text[0::2],n-1) if n>0 else text", "from itertools import zip_longest\n\ndef encrypt(text, n):\n    s = text\n    if s:\n        for _ in range(n):\n            s = s[1::2] + s[::2]\n    return s\n\ndef decrypt(encrypted_text, n):\n    s = encrypted_text\n    if s:\n        m = len(s) // 2\n        for _ in range(n):\n            s = ''.join(c for s in zip_longest(s[m:], s[:m], fillvalue='') for c in s)\n    return s\n", "def encrypt(text, n):\n    print('dasd')\n    if n <= 0 :\n        return text\n    new_str = text\n    temp_str = ''\n    for x in range (n):\n        if len(new_str) % 2 == 1:\n            iter_for_array_1 = 1\n            iter_for_array_2 = 0 \n            temp_str =''\n            for z in range(int(len(new_str)/2)):\n                temp_str += new_str[iter_for_array_1]\n                iter_for_array_1 +=2\n            for z in range(int(len(new_str)/2) + 1)    :\n                temp_str += new_str[iter_for_array_2]\n                iter_for_array_2+=2\n            new_str = temp_str \n        else :\n            iter_for_array_1 = 1\n            iter_for_array_2 = 0 \n            temp_str =''\n            for z in range(int(len(new_str)/2)):\n                temp_str += new_str[iter_for_array_1]\n                iter_for_array_1 +=2\n            for z in range(int(len(new_str)/2)):\n                temp_str += new_str[iter_for_array_2]\n                iter_for_array_2+=2\n            new_str = temp_str \n    return new_str     \n\n\ndef decrypt(encrypted_text, n):\n    print(1)\n    if n <= 0 or encrypted_text == '':\n        return encrypted_text\n    new_str = encrypted_text\n    \n    for x in range (n):\n        a = int(len (encrypted_text)/2) \n        str1 = new_str[:a]\n        str2 = new_str[a:]\n        new_str = ''\n        for new_X in range(a):\n            new_str +=str2[new_X]\n            new_str += str1[new_X]\n        if len(encrypted_text) % 2 == 1: \n            new_str += str2[-1]\n\n    return new_str"]