["from textwrap import wrap\n\ndef to_utf8_binary(string):\n    return ''.join(format(x, 'b').rjust(8, '0') for x in bytearray(string, 'utf-8'))\n \ndef from_utf8_binary(bitstring):\n    return bytearray([int(t, 2) for t in wrap(bitstring, 8)]).decode()\n", "def to_utf8_binary(string):\n    return ''.join('{:08b}'.format(b) for b in string.encode('utf8'))\n\n\ndef from_utf8_binary(bitstring):\n    import re\n    return  bytes(int(b, 2) for b in re.split('(........)', bitstring) if b).decode('utf-8')\n", "import re\ndef to_utf8_binary(string):\n    s=''\n    for c in string:\n        r=bin(ord(c))[2:]\n        if len(r)<8:\n            s+='0'+r.zfill(7)\n        elif len(r)<12:\n            t=r.zfill(11)\n            s+='110{}10{}'.format(t[:5],t[5:])\n        elif len(r)<17:\n            t=r.zfill(16)\n            s+='1110{}10{}10{}'.format(t[:4],t[4:10],t[10:])\n        elif len(r)<22:\n            t=r.zfill(21)\n            s+='11110{}10{}10{}10{}'.format(t[:3],t[3:9],t[9:15],t[15:])\n    return s\n\ndef from_utf8_binary(bitstring):\n    s=''\n    for i in re.findall('0([01]{7})|110([01]{5})10([01]{6})|1110([01]{4})10([01]{6})10([01]{6})|11110([01]{3})10([01]{6})10([01]{6})10([01]{6})',bitstring):\n        s+=chr(int(''.join(i),2))\n    return s        ", "def to_utf8_binary(s):\n    return ''.join(\"{:08b}\".format(x) for x in bytearray(s, 'utf-8'))\n\ndef from_utf8_binary(s):\n    bs = []\n    for i in range(0, len(s), 8):\n        bs.append(int(s[i:i+8], 2))\n    return bytearray(bs).decode('utf-8')", "def to_utf8_binary(string):\n    bitstring = ''\n    for char in string:\n        code = ord(char)\n        if code < 128:\n            bitstring += ('0000000000' + bin(code)[2:])[-8:]\n        elif code < 2048:\n            binary = ('0' * 12 + bin(code)[2:])[-11:]\n            bitstring += '110' + binary[0:5] + '10' + binary[5:11]\n        elif code < 65536:\n            binary = ('0' * 16 + bin(code)[2:])[-16:]\n            bitstring += '1110' + binary[0:4] + '10' + binary[4:10] + '10' + binary[10:16]\n        else:\n            binary = ('0' * 21 + bin(code)[2:])[-21:]\n            bitstring += '11110' + binary[0:3] + '10' + binary[3:9] + '10' + binary[9:15] + '10' + binary[15:21]\n    return bitstring\n\ndef from_utf8_binary(bitstring):\n    string = ''\n    i, t = 0, len(bitstring)\n    while i < t:\n        bit_code = ''\n        char_bit = bitstring[i:i+8]\n        i += 8\n        \n        if char_bit.startswith('11110'):\n            bit_code += char_bit[5:8]\n            for j in range(0, 3):\n                char_bit = bitstring[i:i+8]\n                bit_code += char_bit[2:8]\n                i += 8\n        elif char_bit.startswith('1110'):\n            bit_code += char_bit[4:8]\n            for j in range(0, 2):\n                char_bit = bitstring[i:i+8]\n                bit_code += char_bit[2:8]\n                i += 8\n        elif char_bit.startswith('110'):\n            bit_code += char_bit[3:8]\n            for j in range(0, 1):\n                char_bit = bitstring[i:i+8]\n                bit_code += char_bit[2:8]\n                i += 8\n        else:\n            bit_code = '0' + char_bit[1:8]\n        \n        string += chr(int(bit_code, 2))\n            \n    return string", "def to_utf8_binary(string):\n    \n    stList = list(string)\n    bincodes = [toBin(c) for c in stList ]\n    return ''.join(bincodes)\ndef toBin(string) :      \n    print((ord(string)))\n    a =  bin(ord(string))[2:]\n    if(ord(string) <= 127) :\n        padded = a.zfill(8)\n        return (padded)\n    elif ord(string) <= 2047 : \n         padded = a.zfill(11)\n         return '110' +  padded[:5] + '10' + padded[5:]\n    elif ord(string) <= 65535 : \n        padded = a.zfill(16)\n        part1 = '1110' + padded[:4]\n        remaining = padded[4:]\n        part2 = '10' + remaining[:6]\n        remaining = remaining[6:]\n        part3 = '10' + remaining\n        return part1 + part2 + part3\n    elif ord(string) <= 1114111 :\n        print(a)\n        padded = a.zfill(21)\n        part1 = '11110' + padded[:3]\n        print(part1)\n        remaining = padded[3:]\n        part2 = '10' + remaining[:6]\n        print(part2)\n        remaining = remaining[6:]\n        part3 = '10' + remaining[:6]\n        remaining = remaining[6:]\n        part4 = '10' + remaining[:6]\n        return part1 + part2 + part3+part4\n\n\ndef splitEveryN(n, li):\n    return [li[i:i+n] for i in range(0, len(li), n)]\n\ndef getLenInByte(part):\n    print(part)\n    if part[0] == '0' : \n        return 1\n    elif part[:3] == '110' : \n        print('two bytes')\n        return 2\n    elif part[:4] == '1110' : \n        return 3\n    elif part[:5] == '11110'  : #4 byte\n        return 4\n\ndef from_utf8_binary(bitstring):\n    li = splitEveryN(8, bitstring)\n    i = 0\n    result=[]\n    while(i < len(li)) :\n        bytelen = getLenInByte(li[i])\n        nextbin = li[i : i+bytelen]\n        joined = ''.join(nextbin)\n        \n        frombin = fromBin(joined)\n        result +=  frombin #li[i] is a string\n        i +=  bytelen\n    return ''.join(result)\n\n\ndef fromBin(bitstring):\n    if len(bitstring) <= 8 : \n        return chr(int(bitstring,2))\n    elif len(bitstring) <= 16 : \n        part1 = bitstring[3:8]\n        part2 = bitstring[10:16]\n        bi = part1+part2\n        return chr(int(bi,2))\n    elif len(bitstring) <=24 : \n        part1 = bitstring[4:8]\n        part2 = bitstring[10:16]\n        part3 = bitstring[18:]\n        return chr(int(part1+part2+part3, 2))\n    elif len(bitstring) <= 32 : \n        part1 = bitstring[5:8]\n        part2 = bitstring[10:16]\n        part3 = bitstring[18:24]\n        part4 = bitstring[26:]\n        return chr(int(part1 + part2+ part3+part4, 2))\n    return ''\n\n\n\n        \n", "def utf8_char_to_binary(ch):\n    string = str(bin( ord(ch) ))[2:]\n    if len(string) <= 7: return '0' + string.rjust(7, '0')\n    result, bts = [], 1\n    while len(string) + (bts+1) > 8:\n        bts += 1\n        result.insert(0, \"10\" + string[-6:].rjust(6, '0'))\n        string = string[:-6]\n    return \"\".join(['1'*bts + '0' + string.rjust(8-bts-1, '0')] + result)\n        \ndef to_utf8_binary(string):\n    return \"\".join( map(utf8_char_to_binary, list(string)) )\n\ndef bitstring_to_utf8_chr(bitstring):\n    if len(bitstring) == 0:\n        return ''\n    if len(bitstring) == 8:\n        return chr(int(bitstring, 2))\n    else:\n        binary = \"\"\n        byte_parts = [bitstring[i:i+8] for i in range(0, len(bitstring), 8)]\n        binary += byte_parts[0][list(byte_parts[0]).index('0'):]\n        for i in range(1, len(byte_parts)):\n            binary += byte_parts[i][2:]\n        return chr(int(binary, 2))\n\ndef from_utf8_binary(bitstring):\n    bitstring = [bitstring[i:i+8] for i in range(0, len(bitstring), 8)]\n    character_bitstring, final_string = '', ''\n    for s in bitstring:\n        if s[:2] == '10':\n            character_bitstring += s\n        elif s[0] == '0':\n            final_string += (bitstring_to_utf8_chr(character_bitstring) + bitstring_to_utf8_chr(s))\n            character_bitstring = \"\"\n        else:\n            final_string += bitstring_to_utf8_chr(character_bitstring)\n            character_bitstring = s\n    return final_string + bitstring_to_utf8_chr(character_bitstring)\n", "def to_utf8_binary(string):\n    return ''.join(format(c, '08b') for c in string.encode())\ndef from_utf8_binary(bitstring):\n    bytes_ = [bitstring[i:i+8] for i in range(0, len(bitstring), 8)]\n    return bytes(int(byte, 2) for byte in bytes_).decode()", "def to_utf8_binary(string):\n    return ''.join((bin(i)[2:]).zfill(8) for i in string.encode('utf-8'))\n\n\ndef from_utf8_binary(bitstr):\n    byte_str = bytes(int(bitstr[i:i + 8], 2) for i in range(0, len(bitstr), 8))\n    return byte_str.decode('utf-8')"]