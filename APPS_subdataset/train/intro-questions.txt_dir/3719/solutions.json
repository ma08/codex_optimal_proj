["def starting_mark(height):\n    return round(9.45 + (10.67 - 9.45) / (1.83 - 1.52) * (height - 1.52), 2)", "# The linear relashionship is obvious taking a couple a informations (L1,H1) and (L2,H2)\n# One gets 3.9354838709677433 = (H1-H2)/(L1-L2) and beta = H1-3.9354838709677433*H1\n\ndef starting_mark(height):\n    return round(3.9354838709677433*height+3.4680645161290293,2)", "A = (10.67-9.45) / (1.83-1.52)\nB = 9.45 - A*1.52\n\ndef starting_mark(height):\n    return round(A * height + B, 2)", "def starting_mark(h):\n    return round((3.9356133666666666666666*h)+3.46809,2)", "def starting_mark(height):\n    slope = 3.93548387\n    intercept = 3.46806452\n    return round(height*slope + intercept,2)\n", "def starting_mark(height):\n    #define gradient for our equation\n    m = (10.67 - 9.45) / (1.83 - 1.52)\n    #define our y-intercept for our equation\n    c = 10.67 - (m*1.83)\n    #plug height into our formula and return value\n    return round(m*height+c,2)", "starting_mark = lambda h, s=3.93548, c=3.46807: round(c+s*h, 2)", "def starting_mark(height):\n    return round( 1.22 / 0.31 * (height + 0.8812), 2 )", "import numpy as np\nfrom sklearn.linear_model import LinearRegression\n\ndef starting_mark(h):\n    \n    X, Y = np.array([1.52, 1.83]).reshape(-1, 1), np.array([9.45, 10.67])\n    model = LinearRegression().fit(X, Y)\n    theta0 = model.intercept_\n    theta1 = model.coef_\n    \n    return round(theta0.item() +theta1.item() *h, 2)\n\n", "((x1, y1), (x2, y2)) = ((1.52, 9.45), (1.83, 10.67))\n\ndef starting_mark(height):\n    return round((height - x1) / (x2 - x1) * (y2 - y1) + y1, 2)", "def starting_mark(height):\n    return round(height * 3.9354839 + 3.4680645, 2)", "def starting_mark(height):\n    if(height < 1.52):\n        change_height = 1.52-height\n        change_runway = (1.22/float(0.31))*change_height\n        return round((9.45-change_runway),2)\n    else:\n        change_height = height - 1.52\n        change_runway = (1.22/float(0.31))*change_height\n        return round((9.45 + change_runway),2)\n    #your code here\n", "def starting_mark(height):\n    return round((122 / 31) * height + (9.45 - 1.52 * (122 / 31)), 2)", "import math\ndef starting_mark(h):\n    x=(10.67-9.45)/(1.83-1.52)\n    return round((x*h+10.67-x*1.83),2)", "def starting_mark(height):\n    return round(3.4681 + 3.93548 * height, 2)", "def starting_mark(height):\n    slp = (10.67 - 9.45) / (1.83 - 1.52)\n    cst = 9.45 - slp * 1.52\n    return round( slp * height + cst, 2 )", "m, c = 3.93548, 3.46806\ndef starting_mark(height):\n    return round(m*height + c,2)", "def starting_mark(height):\n    m = 1.2200000000000006 / 0.31000000000000005\n    print(height)\n    return round(m*(height-1.52) + 9.45, 2)", "def starting_mark(height):\n    answers = {\n        1.21:8.23,\n        1.22:8.27,\n        1.23:8.31,\n        1.24:8.35,\n        1.25:8.39,\n        1.26:8.43,\n        1.27:8.47,\n        1.28:8.51,\n        1.29:8.54,\n        1.3:8.58,\n        1.31:8.62,\n        1.32:8.66,\n        1.33:8.7,\n        1.34:8.74,\n        1.35:8.78,\n        1.36:8.82,\n        1.37:8.86,\n        1.38:8.90,\n        1.39:8.94,\n        1.4:8.98,\n        1.41:9.02,\n        1.42:9.06,\n        1.43:9.1,\n        1.44:9.14,\n        1.45:9.17,\n        1.46:9.21,\n        1.47:9.25,\n        1.48:9.29,\n        1.49:9.33,\n        1.5:9.37,\n        1.51:9.41,\n        1.52:9.45,\n        1.53:9.49,\n        1.54:9.53,\n        1.55:9.57,\n        1.56:9.60,\n        1.57:9.65,\n        1.58:9.69,\n        1.59:9.73,\n        1.6:9.76,\n        1.61:9.8,\n        1.62:9.84,\n        1.63:9.88,\n        1.64:9.92,\n        1.65:9.96,\n        1.66:10,\n        1.67:10.04,\n        1.68:10.08,\n        1.69:10.12,\n        1.7:10.16,\n        1.71:10.2,\n        1.72:10.24,\n        1.73:10.28,\n        1.74:10.32,\n        1.75:10.36,\n        1.76:10.39,\n        1.77:10.43,\n        1.78:10.47,\n        1.79:10.51,\n        1.8:10.55,\n        1.81:10.59,\n        1.82:10.63,\n        1.83:10.67,\n        1.84:10.71,\n        1.85:10.75,\n        1.86:10.79,\n        1.87:10.83,\n        1.88:10.87,\n        1.89:10.91,\n        1.9:10.95,\n        1.91:10.98,\n        1.92:11.03,\n        1.93:11.06,\n        1.94:11.1,\n        1.95:11.14,\n        1.96:11.18,\n        1.97:11.22,\n        1.98:11.26,\n        1.99:11.3,\n        2:11.34,\n        2.01:11.38,\n        2.02:11.42,\n        2.03:11.46,\n        2.04:11.5,\n        2.05:11.54,\n        2.06:11.58,\n        2.07:11.61,\n        2.08:11.65,\n        2.09:11.69,\n        2.1:11.73,\n        2.11:11.77,\n        2.12:11.81,\n        2.13:11.85\n    }\n    \n    return answers.get(height, None)\n", "def starting_mark(height):\n    x1, y1 = 1.52, 9.45\n    x2, y2 = 1.83, 10.67\n    slope = (y2-y1)/(x2-x1)\n    c = y2 - slope * x2\n    return round(height * slope + c,2)", "def starting_mark(height):\n    x = 1.22/.31\n    f = 9.45 - 1.52*x\n    return round(height*x + f, 2)", "def starting_mark(height):\n    # y = kx+d\n    k = (10.67-9.45)/(1.83- 1.52)\n    d = 9.45-k*1.52 \n    return round(k*height+d,2)", "def starting_mark(height):\n    a = (10.67 - 9.45) / (1.83 - 1.52)\n    b = 10.67 - (1.22 / 0.31) * 1.83\n    return round(height * a + b, 2)", "def starting_mark(height):\n    return round(height*122/31+189/20-38*122/775, 2)", "def starting_mark(height):\n    return round(height*3.935483870967742 + 3.468064516129031,2)", "def starting_mark(height):\n    # y = ax + c\n    a = (9.45 - 10.67) / (1.52 - 1.83)\n    c = 9.45 - a * 1.52\n    return round(a * height + c, 2) ", "def starting_mark(height):\n    return round(3.935483871 * height + 3.468064516, 2)", "def starting_mark(height):\n    return round(height * (1.22 / 0.31) + (9.45 - (1.22 / 0.31) * 1.52), 2)", "def starting_mark(height):\n    HEIGHT_1 = 1.52\n    HEIGHT_2 = 1.83\n    START_MARK_1 = 9.45\n    START_MARK_2 = 10.67\n    \n    # y = k*x + m\n    k = (START_MARK_2 - START_MARK_1) / (HEIGHT_2 - HEIGHT_1)\n    m = START_MARK_1 - k * HEIGHT_1 \n    y = k * height + m\n    \n    return round(y, 2)", "def starting_mark(height):\n    slope = (9.45 - 10.67) / (1.52 - 1.83)\n    intercept = 9.45 - (1.52 * slope)\n    return round(slope * height + intercept, 2)", "def f(x):\n    return 3.93548 * x + 3.468072\n\ndef starting_mark(height):\n    return round(f(height), 2)", "def starting_mark(height):\n#    return round(height * 3.937 +3.4655,2)\n    return round((height /0.0254*3.937+136.43)*0.0254,2)", "import math\ndef starting_mark(height):\n    if height == 1.22: \n        return 8.27;\n    elif height == 2.13:\n        return 11.85;\n    else: \n        return round((8.27 + 0.0393444 * ((height - 1.22) * 100)),2) \n\n", "def starting_mark(height):\n    return round(3.935483870967742 * height + 3.468064516129031, 2)", "def starting_mark(height):\n    return round(3.9355*height + 3.468065,2)", "def starting_mark(height):\n    return round(8.27+(height-1.22)*3.9340659, 2)", "def starting_mark(h):\n    return round((1.22)/(.31)*h +3.4680, 2)", "def starting_mark(height):\n    return round(10.67-(10.67-9.45)/(1.83-1.52)*(1.83-height), 2)", "def starting_mark(height):\n    #return round(height*3.9354838709677433 + 3.4680645161290293,2)\n    return round(height*(10.67-9.45)/(1.83-1.52) + 3.4680645161290293 ,2)", "k = 3.935483870967742\nb = 3.468064516129031\n\ndef starting_mark(height):\n    return round(k * height + b, 2)", "def starting_mark(height):\n    return round(3.935483870967741 * height + 3.468064516129033,2)", "def starting_mark(height):\n    \n  m = (10.67 - 9.45) / (1.83 - 1.52)\n  return round((((m * height + 10.67 - m * 1.83) * 100) / 100),2)", "def starting_mark(height):\n    \"\"\" y = mx+b, always has, always will.\"\"\"\n    slope = (10.67 - 9.45)/(1.83-1.52) #(d-d0)/(h - h0)\n    return round(slope*(-1.83 + height) + 10.67,2)\n", "def starting_mark(height):\n    #your code here\n    #slope of line = (y2 - y1) / (x2 - x1)\n    slope = (10.67 - 9.45) / (1.83 - 1.52)\n    #substitute slope and one set of x,y to find the y-intercept C\n    #y = mx + c -> c = y - mx\n    c = 10.67 - (slope * 1.83)\n    #for the given x, return mx + c, rounded off to 2 decimals\n    return round(slope * height + c, 2)\n", "def starting_mark(height):\n    return round((10.67 - 9.45) / (1.83-1.52) * height + 10.67 - 1.83 * ((10.67 - 9.45) / (1.83-1.52)), 2)", "def starting_mark(height):\n\n    height_1 = 1.52\n    height_2 = 1.83\n    start_1 = 9.45\n    start_2 = 10.67\n    \n    v_constant = (start_2 - start_1) / (height_2 - height_1)\n    \n    start = start_1 + v_constant * (height - height_1)\n    \n    return round(start,2)", "def starting_mark(height):\n\n    height_1 = 1.52\n    height_2 = 1.83\n    start_1 = 9.45\n    start_2 = 10.67\n    \n    v_constant = (start_2 - start_1) / (height_2 - height_1)\n    \n    if height < height_1:\n        start = start_1 - v_constant * (height_1 - height)\n    elif height < height_2:\n        start = start_2 - v_constant * (height_2 - height)\n    else:\n        start = start_2 + v_constant * (height - height_2)\n    \n    return round(start,2)", "# Line equation calculated by Wolfram|Alpha\n\ndef starting_mark(height):\n    return round(3.93548 * height + 3.46806, 2)", "def starting_mark(height):\n    if height <= 1.52:\n        res = 9.45 - ((1.52 - height) * (10.67 - 9.45) / (1.83 - 1.52))\n    elif 1.52 < height <= 1.83:\n        res = 10.67 - ((1.83 - height) * (10.67 - 9.45) / (1.83 - 1.52))\n    else:\n        res = 10.67 + ((height - 1.83) * (10.67 - 9.45) / (1.83 - 1.52))\n    return round(res, 2)", "def starting_mark(height):\n    return round(((3.9354*height) + 3.4680)+.0001,2)", "import math\n\ndef starting_mark(height):\n    \n    d = (height-1.22)*3.934+8.27\n    \n    return round(d,2)\n    \n", "def starting_mark(height):\n    gradient = (10.67-9.45)/(1.83-1.52)\n    return round(9.45+gradient*(height-1.52),2)", "def starting_mark(h):\n    return round((3.935484*h+3.468065),2)", "def starting_mark(height):\n    #your code here\n    return round(9.45 + (10.67 - 9.45) / (1.83 - 1.52) * (height - 1.52), 2)\n    \n    \n    \n    \n# def starting_mark(height):\n#     return round(9.45 + (10.67 - 9.45) / (1.83 - 1.52) * (height - 1.52), 2)\n", "starting_mark=lambda n:round(n*3.935+3.469,2)", "x = (9.45-10.67)/(1.52-1.83)\na = 9.45-1.52*x\ndef starting_mark(h):\n    return round(a+x*h,2)", "def starting_mark(height):\n    return round(height*3.9340659340659343 + 3.4704395604395604,2)", "def starting_mark(height):\n    return round(((height - (1.52-(0.31/1.22)*9.45))/(0.31/1.22)),2)", "def starting_mark(height):\n    return round(3.9344 * height + 3.47, 2)", "def starting_mark(height):\n    slope = 1.22 / 0.31\n    offset = 9.45 - slope*1.52\n    result = round(slope * height + offset, 2)\n    return result", "import math\ndef starting_mark(height):\n    k = (10.67 - 9.45) / (1.83 - 1.52)\n    b = 9.45 - k * 1.52\n    y = k * height + b\n    return round(y, 2)", "def starting_mark(height: float) -> float:\n    return round((1.22 / 0.31) * (height - 1.52) + 9.45, 2)\n", "def starting_mark(height):\n  return round(((((10.67 - 9.45) / (1.83 - 1.52) * height + 10.67 - (10.67 - 9.45) / (1.83 - 1.52) * 1.83) * 100) / 100),2)", "def starting_mark(height):\n    #your code here\n    return round(height*1.22/0.31+9.45-1.22*1.52/0.31, 2)", "def starting_mark(height):\n    return round(3.9355*height+3.4680, 2)", "R = (10.67 - 9.45) / (1.83 - 1.52)\n\ndef starting_mark(height):\n    return round(height * R + 3.468, 2)", "x=3.468064516129032\ndef starting_mark(height):\n    return round(height*(3.935483870967742)+x,2)", "def starting_mark(height):\n    return round(height*3.935483870967742+3.4680645161290323, 2)", "def starting_mark(height):\n    gradient = (10.67-9.45)/(1.83-1.52)\n    c = 10.67 - (gradient * 1.83)\n    return round(gradient*height+c,2)", "\ndef starting_mark(height):\n    return round(8.27+(height-1.22)*3.935,2)", "def starting_mark(height):\n    c=(1.83*9.45-10.67*1.52)/(1.83-1.52)\n    x=(9.45-c)/1.52\n    return round(x*height+c,2)\n", "def starting_mark(height):\n    #Oof\n    return round(9.45 + (10.67 - 9.45) / (1.83 - 1.52) * (height - 1.52), 2)", "def starting_mark(height):\n    return round((1.22 * height / 0.31) + 3.468, 2)", "def starting_mark(height):\n    return round((height-1.22)*3.9354838709677419354838709677419+8.27,2)", "def starting_mark(height):\n    return round(1.22/0.31 * height + (1.0751/0.31),2)", "def starting_mark(height):\n    #your code here\n    m=3.9355\n    c=3.4680\n    return round(m*height+c,2)", "def starting_mark(height):\n    \n    m = (10.67-9.45)/(1.83-1.52)\n    c = 10.67 - m*1.83\n    \n    return round(height*m+c,2)\n", "starting_mark=lambda h: round(9.45+(10.67-9.45)/(1.83-1.52)*(h-1.52), 2)", "def starting_mark(height):\n    #your code here\n    # 9.45-1.52 =7.93    10.67-1.83= 8.84\n    # 9.45 = m(1.52) + b // 10.67 = m(1.83) + b\n    # 1.22 = 0.31m  ==> 3.94 = m and b = 3.46\n    m = 1.22/0.31\n    b = 10.67 - (1.83*m)\n    return float(\"{:.2f}\".format(round(m*height+b,2)))\n", "def starting_mark(height):\n\n    h1 = 1.52\n    d1 = 9.45\n    \n    h2 = 1.83\n    d2 = 10.67\n    \n    v = (d2 - d1) / (h2 - h1)\n    \n    return round(d2 - v * (h2 - height),2)", "def starting_mark(height):\n    l = 3.93548387\n    l1 = 3.46806452\n    return round(height*l + l1,2)", "def starting_mark(height):\n    return float(format(8.27 + (height-1.22)*3.58/0.91, '.2f'))", "def starting_mark(height):\n    return round(3.470421640055+height*3.934119,2)\n", "def starting_mark(height):\n    slope = (10.67-9.45)/(1.83-1.52)\n    if height < 1.52:\n        return round(9.45-(1.52-height)*slope, 2)\n    elif height < 1.83:\n        return round(10.67-(1.83-height)*slope, 2)\n    else:\n        return round(10.67+(height-1.83)*slope, 2)", "def starting_mark(height):\n    slope = (10.67 - 9.45) / (1.83 - 1.52)\n    intercept = 9.45 - 1.52 * slope\n    return round(slope * height + intercept, 2)", "import math\ndef starting_mark(height):\n    constant = (10.67 -9.45)/(1.83-1.52)\n    return round((constant*height +10.67 -constant*1.83),2)", "def starting_mark(height):\n    return round((3.934065934065934 * height) + 3.47043956043956, 2)", "def starting_mark(height):\n    # 10.67 = 1.83*a + b\n    #  9.45 = 1.52*a + b\n    # ------------------ -\n    #  1.22 = 0.31*a\n    # a = 3.93548\n    a = 1.22 / 0.31\n    b = 9.45-1.52*a\n    return round(a*height + b,2)", "def starting_mark(height):\n    print (height)\n    return round(height*3.9355+3.468,2)", "def starting_mark(height):\n    return round((1.22 * height + 1.0751) / .31, 2)", "def starting_mark(height):\n    a=(10.67-9.45)/(1.83-1.52)\n    return round((9.45+a*(height-1.52)),2)#your code here", "def starting_mark(height):\n    return round(height*3.935483870967742 + 3.468064516129032, 2)", "def starting_mark(height):\n    return round(height*1.22/.31 + 3.468065,2)", "from decimal import Decimal\n\n\ndef starting_mark(height):\n\n#     if height == 1.22:\n#         return 8.27\n#     elif height == 2.13:\n#         return 11.85\n    \n    number = Decimal(\"0.03935483870967741935483870968\")\n    start = Decimal(\"8.27\")\n    height = Decimal(height)\n    min_height = Decimal(\"1.22\")\n    \n    form = (height - min_height) * 100 * number + start\n    form = form.quantize(Decimal(\"1.00\"))\n    form = float(form)\n    return form", "def starting_mark(height):\n    x=3.935484\n    y=3.468065\n    \n    return round(height*x+y,2)", "def starting_mark(height):\n    m = (10.67 - 9.45) / (1.83 - 1.52)\n    c = 10.67 - m * 1.83\n    return round(m * height + c, 2)", "def starting_mark(h):\n    return round(starting_mark.k*h+starting_mark.d, 2)\nstarting_mark.eg = [(1.52,9.45),(1.83,10.67)]\nstarting_mark.k = (starting_mark.eg[1][1]-starting_mark.eg[0][1])/(starting_mark.eg[1][0]-starting_mark.eg[0][0])\nstarting_mark.d = starting_mark.eg[0][1]-starting_mark.k*starting_mark.eg[0][0]", "def starting_mark(height):\n    return round((height - 1.22) * 3.58 / 0.91 + 8.27, 2)", "def starting_mark(height):\n    d = (10.67-9.45)/(1.83-1.52)\n    return round(10.67 - d*(1.83-height), 2)\n", "def starting_mark(height):\n    return round((9.45 + (height - 1.52) * (10.67 - 9.45)/(1.83 - 1.52)) * 100.0) / 100.0"]