["from math import log\n\ndef power_law(p1, p2, x3):\n    (x1, y1), (x2, y2) = p1, p2\n    x1 += 1e-9; y1 += 1e-9\n    return round(y1 * (y2 / y1) ** log(x3 / x1, x2 / x1))", "from math import log\n\ndef power_law(x1y1, x2y2, x3):\n    a, b, c = x2y2[0]/x1y1[0], x2y2[1]/x1y1[1], x3/x1y1[0]\n    try:\n         return round(x1y1[1] * b**log(c, a))\n    except ZeroDivisionError:\n         return round(x1y1[1] * b)", "from math import log\n\ndef power_law(x1y1, x2y2, x3):\n    x1, y1 = x1y1\n    x2, y2 = x2y2\n    if x1 == x2:\n        return y2\n    return round(y1 * (y2 / y1) ** log(x3 / x1, x2 / x1))", "def power_law(a1,a2, x3):\n  import math\n  x1=a1[0]\n  y1=a1[1]\n  x2=a2[0]\n  y2=a2[1]\n  if x1==x2:\n   return y2\n  else:\n   return round(y1*(y2/y1)**(math.log10(x3/x1)/math.log10(x2/x1)))", "power_law=lambda a,b,x:round(a[1]*(b[1]/(a[1]+1e-9))**__import__('math').log(x/(a[0]+1e-9),b[0]/(a[0]+1e-9)))", "import math\ndef power_law(x1y1, x2y2, x3):\n    if x1y1[0]==x2y2[0]:\n        return x2y2[1] # conner case\n    x_asc_rate, y_dsec_rate = x2y2[0]/x1y1[0], x1y1[1]/x2y2[1]\n    return round(x2y2[1]/(y_dsec_rate**(math.log(x3/x2y2[0])/math.log(x_asc_rate))))", "from math import log\ndef power_law(x1y1, x2y2, x3):\n    x1,y1=x1y1\n    x2,y2=x2y2\n    if x1==x2==x3:\n        return y1\n    k=-log(y2/y1,x1/x2)\n    a=y1/(x1**k)\n    return round(a*(x3**k))", "from math import log\n\ndef power_law(x1y1, x2y2, x3):\n    (x1, y1), (x2, y2) = (x1y1, x2y2)\n    try:\n        k = log(y1 / y2, x1 / x2)\n        a = y1 / x1 ** k\n        return round(a * x3 ** k)\n    except ZeroDivisionError:\n        return y2", "from math import log\n\ndef power_law(x1y1, x2y2, x3):\n    try:\n        k = (log(x1y1[1]) - log(x2y2[1])) / (log(x1y1[0]) - log(x2y2[0]))\n        a = x1y1[1] / (x1y1[0] ** k)\n        return round(a * x3 ** k)\n    except ZeroDivisionError:\n        return x2y2[1]", "import math\ndef power_law(x1y1, x2y2, x3):\n  x1=x1y1[0]\n  y1=x1y1[1]\n  x2=x2y2[0]\n  y2=x2y2[1]\n  x=x2/x1\n  y=y2/y1\n  if x1==x2: return y2\n  return round(y1*y**(math.log(x3/x1)/math.log(x)))"]