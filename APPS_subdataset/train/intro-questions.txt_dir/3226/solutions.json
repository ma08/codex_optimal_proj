["def land_perimeter(arr):\n   \n    I,J = len(arr),len(arr[0])\n    \n    P = 0\n    for i in range(I):\n        for j in range(J):\n            if arr[i][j] == 'X':\n                if i == 0   or arr[i-1][j] == 'O': P += 1\n                if i == I-1 or arr[i+1][j] == 'O': P += 1\n                if j == 0   or arr[i][j-1] == 'O': P += 1\n                if j == J-1 or arr[i][j+1] == 'O': P += 1\n                   \n                  \n    return 'Total land perimeter: ' + str(P)\n", "land = lambda a: sum(t == ('X', 'X') for r in a for t in zip(r, r[1:])) * 2\n\ndef land_perimeter(a):\n    return 'Total land perimeter: ' + str(''.join(a).count('X') * 4 - land(a) - land(zip(*a)))", "def land_perimeter(arr):\n    result = 0\n    for row in arr + list(zip(*arr)):\n        current = list(row)\n        result += sum(a != b for a, b in zip(['O'] + current, current + ['O']))\n    return 'Total land perimeter: {}'.format(result)\n", "def land_perimeter(arr):\n  perimetr=0\n  height=len(arr)\n  for y in range(height):\n    width=len(arr[y])\n    for x in range(width):\n      if arr[y][x]=='X':\n        if x==0 or arr[y][x-1]=='O':perimetr+=1\n        if x==width-1 or arr[y][x+1]=='O':perimetr+=1\n        if y==0 or arr[y-1][x]=='O':perimetr+=1\n        if y==height-1 or arr[y+1][x]=='O':perimetr+=1\n  return 'Total land perimeter: '+str(perimetr)", "def land_perimeter(arr):\n    a, b = ' '.join(arr), ' '.join(''.join(x) for x in zip(*arr))\n    p = 4 * a.count('X') - 2 * 'O{}O{}O'.format(a, b).split('X').count('')\n    return 'Total land perimeter: {}'.format(p)", "def land_perimeter(arr):\n  total=0\n  for x in range(len(arr)):\n    for y in range(len(arr[0])):\n      if arr[x][y]=='X':\n        total+=4\n        if (x!=len(arr)-1) and (arr[x+1][y]=='X'): total-=1\n        if (x!=0) and (arr[x-1][y]=='X'): total-=1\n        if (y!=len(arr[0])-1) and (arr[x][y+1]=='X'): total-=1\n        if (y!=0) and (arr[x][y-1]=='X'): total-=1\n  return 'Total land perimeter: %i' % total", "def land_perimeter(grid):\n    s, m = len(grid), len(grid[0])\n    ans = 0\n    for x in range(s):\n        for y in range(m):\n            if grid[x][y] == 'X':\n                ans += 4\n                if x < s - 1 and grid[x+1][y] == 'X':\n                    ans -= 2\n                if y < m - 1 and grid[x][y+1] == 'X':\n                    ans -= 2\n                    \n    return ('Total land perimeter: {}'.format(ans))", "def land_perimeter(arr):\n    n = len(arr)\n    m = len(arr[0])\n    dr = [1, 0, -1, 0]\n    dc = [0, 1, 0, -1]\n    ans = 0\n    for i in range(len(arr)):\n        for j in range(len(arr[i])):\n            if arr[i][j] == 'O': continue\n            cur = 0\n            for k in range(4):\n                nx = i + dr[k]\n                ny = j + dc[k]\n                inside = (nx >= 0 and ny >= 0 and nx < n and ny < m)\n                ans += (inside and arr[nx][ny] == 'O') + (not inside)\n    ampogiko = \"Total land perimeter: \" + str(ans)\n    return ampogiko", "def land_perimeter(arr):\n    per = 0\n    for _ in range(4):\n        arr.insert(0, ['0']*(len(arr[0])+(_+1)))\n        arr = list(zip(*arr[::-1]))\n    for i in range(1,len(arr)):\n        for y in range(1,len(arr[i])):\n            if arr[i][y] == 'X':\n                per += 4 - sum([arr[i-1][y]=='X', arr[i+1][y]=='X', arr[i][y+1]=='X', arr[i][y-1]=='X'])\n    return  f'Total land perimeter: {per}'"]