["MAX_N = 100000\n\ndef maxi(a, b):\n    if a[0] > b[0]:\n        return a\n    else:\n        return b\n\nclass Segment_Tree:\n    def init(self, left, right, data, leftbound, rightbound):\n        self.data = data\n        self.left = left\n        self.right = right\n        self.leftbound = leftbound\n        self.rightbound = rightbound\n        return self\n    def build(self, a, leftbound, rightbound):\n        #print(leftbound, rightbound, a)\n        if len(a) == 0:\n            return self.init(-1, -1, [0, -1], MAX_N + 1, -1)\n        elif len(a) == 1:\n            return self.init(-1, -1, a[0], leftbound, rightbound)\n        else:\n            middle = (leftbound + rightbound) // 2\n            self.left = Segment_Tree()\n            self.right = Segment_Tree()\n            return self.init(self.left.build(a[:middle - leftbound], leftbound, middle), self.right.build(a[middle - leftbound:], middle, rightbound), maxi(self.left.data, self.right.data), leftbound, rightbound)\n    def get(self, l, r):\n        if l <= self.leftbound and r >= self.rightbound:\n            return self.data\n        elif l < self.left.rightbound and r > self.right.leftbound:\n            return maxi(self.left.get(l, r), self.right.get(l, r))\n        elif l >= self.right.leftbound:\n            return self.right.get(l, r)\n        else:\n            return self.left.get(l, r)\n            \nn = int(input())\na = list(map(int, input().split())) + [n]\na = [[a[i] - 1, i] for i in range(n)]\nTree = Segment_Tree()\nTree.build(a, 0, n)\ndp = [0] * n\nans = 0\nfor i in range(n - 2, -1, -1):\n    m = Tree.get(i + 1, a[i][0] + 1)[1]\n    dp[i] = dp[m] - (a[i][0] - m) + n - i - 1;\n    ans += dp[i]\nprint(ans)\n", "def main():\n    from collections import deque\n    n = int(input())\n    aa, bb = list(map(int, input().split())), [0] * n\n    q, bb[1] = deque([(n - 1, aa.pop())]), 1\n    aa.reverse()\n    for i, a in enumerate(aa, 2):\n        if a == n:\n            bb[i] = i\n        else:\n            lo, hi = 0, len(q)\n            while lo <= hi:\n                mid = (lo + hi) // 2\n                if q[mid][0] > a:\n                    lo = mid + 1\n                else:\n                    hi = mid - 1\n            x = q[lo][0]\n            bb[i] = x + i + bb[n - x] - a\n        while q and q[-1][1] < a:\n            del q[-1]\n        q.append((n - i, a))\n    print(sum(bb))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n=int(input())\na=list(map(int, input().split()))\na=[ai-1 for ai in a]\na[n:n] = [n - 1]\n\ndp=[0]*n\nans=0\ni=n-2\n\nnmax=2**17\ntree=[[0,0]]*2*nmax;\n\n#Build Segment tree\nj=0\nwhile j<n:\n    tree[nmax + j] = [a[j], j]\n    j=j+1\nj=nmax-1\nwhile j>0:\n    tree[j]=max(tree[j*2],tree[j*2+1])\n    j=j-1\n    \n#get max of a interval [left, right]\ndef get(left, right):\n    ans=[-1,-1]\n    left=left+nmax\n    right=right+nmax+1\n    while left<right:\n        if (left & 1): \n            ans = max(ans, tree[left])\n            left = left + 1\n        if (right & 1): \n            right = right - 1\n            ans = max(ans, tree[right])\n        left = left // 2\n        right = right // 2 \n    return ans[1]\n\nwhile i>=0:\n    m = get(i + 1, a[i]);\n    dp[i] =  dp[m] - (a[i] - m) + n - i - 1\n    ans += dp[i]\n    i=i-1\n\nprint(ans)", "from collections import deque\n\n\ndef argmax(que, z): #\u4e8c\u5206\u6c42[i+1, a[i]]\u4e2da[x]\u6700\u5927\u7684x\n    l = 0\n    r = len(que) - 1\n    while (l <= r):\n        mid = int((l + r) / 2)\n        x = que[mid]['i']\n        if (x <= z):\n            r = mid - 1\n        else:\n            l = mid + 1\n    return que[l]['i']\n\n\ndef solve(n, A):\n    a = [0] * (n + 1)\n    a[1:] = A\n    dp = [0] * (n + 1)\n    dp[n - 1] = 1\n    que = deque()\n    que.append({'i': n - 1, 'a': a[n - 1]})\n    for i in range(n - 2, 0, -1):\n        if (a[i] >= n):\n            dp[i] = n - i\n        else:\n            x = argmax(que, a[i])\n            dp[i] = x - i + dp[x] + n - a[i]\n        while (len(que) > 0 and que[-1]['a'] < a[i]):\n            que.pop()\n        que.append({'i': i, 'a': a[i]})\n    return sum(dp)\n\n\nn = int(input())\na = list(map(int, input().split(' ')))\nprint(solve(n, a))\n", "\"\"\"\nn=int(input())\ns=[int(x) for x in input().split()]+[n]\npos=[]\nfor i in range(0,len(s)-1):\n    temp=-1\n    p=i+1\n    for j in range(i+1,s[i]):\n        if(temp<s[j]):\n            temp=max(temp,s[j])\n            p=j\n    pos.append(j)\n\npos.append(0)\n\nans=0\ndp=[0]*n\nfor i in range(n-2,-1,-1):\n    dp[i]=(n-i-1)+(dp[pos[i]])-(s[i]-pos[i]-1)\n    ans+=dp[i]\nprint(pos)\nprint(dp)\nprint(ans)\n\"\"\"\n\n\"\"\"\nn=int(input())\ns=[1]+[int(x) for x in input().split()]+[n]\npos=[0]\nfor i in range(1,len(s)-1):\n    temp=-1\n    p=i+1\n    for j in range(i+1,s[i]+1):\n        if(temp<s[j]):\n            temp=max(temp,s[j])\n            p=j\n    pos.append(p)\n\npos.append(0)\n\nans=0\ndp=[0]*(n+1)\nfor i in range(n-1,0,-1):\n    dp[i]=(n-i)+(dp[pos[i]])-(s[i]-pos[i])\n    ans+=dp[i]\n\n#print(s)\n#print(pos)\n#print(dp)\nprint(ans)\n\n\n\nn=int(input())\ns=[int(x) for x in input().split()]+[n]\npos=[]\nfor i in range(0,len(s)-1):\n    temp=-1\n    p=i+1\n    for j in range(i+1,s[i]):\n        if(temp<s[j]):\n            temp=max(temp,s[j])\n            p=j\n    pos.append(p)\n\npos.append(0)\n\nans=0\ndp=[0]*n\nfor i in range(n-2,-1,-1):\n    dp[i]=(n-i)+(dp[pos[i]])-(s[i]-pos[i])\n    ans+=dp[i]\n\n#print(s)\n#print(pos)\n#print(dp)\nprint(ans)\n\n\n\n\"\"\"\n\nimport math\nn=int(input())\ns=[int(x) for x in input().split()]+[n]\n\n\nK=int(math.log2(n))+1\nlookup=[]\nfor i in range(n+1):\n    h=[]\n    for j in range(K+1):\n        h.append(0)\n    lookup.append(h)\n\n\nfor i in range(0,n):\n    lookup[i][0]=(s[i],i)\n\nfor j in range(1,K+1):\n#j=1\n#while((1<<j)<=n):\n    i=0\n    while(i+(1<<j)-1<n):\n        if(lookup[i][j-1][0]>lookup[i + (1 << (j - 1))][j - 1][0]):\n            lookup[i][j]=(lookup[i][j-1][0],lookup[i][j-1][1])\n        else:\n            lookup[i][j]=(lookup[i + (1 << (j - 1))][j - 1][0],lookup[i + (1 << (j - 1))][j - 1][1])\n        i+=1\n    j+=1\n\n\n#print(lookup)        \n\n\"\"\"pos=[]\nfor i in range(0,len(s)-1):\n    temp=-1\n    p=i+1\n    for j in range(i+1,s[i]):\n        if(temp<s[j]):\n            temp=max(temp,s[j])\n            p=j\n    pos.append(p)\n\npos.append(0)\"\"\"\n\npos=[]\nfor i in range(0,len(s)-1):\n    L=i+1\n    R=s[i]-1\n    j=int(math.log2(R-L+1))\n    if(lookup[L][j][0]>lookup[R - (1 << j) + 1][j][0]):\n        pos.append(lookup[L][j][1])\n    else:\n        pos.append(lookup[R - (1 << j) + 1][j][1])\n    \n\nans=0\ndp=[0]*n\nfor i in range(n-2,-1,-1):\n    dp[i]=(n-i)+(dp[pos[i]])-(s[i]-pos[i])\n    ans+=dp[i]\n\n#print(s)\n#print(pos)\n#print(dp)\nprint(ans)\n\n\n", "\"\"\"\nn=int(input())\ns=[int(x) for x in input().split()]+[n]\npos=[]\nfor i in range(0,len(s)-1):\n    temp=-1\n    p=i+1\n    for j in range(i+1,s[i]):\n        if(temp<s[j]):\n            temp=max(temp,s[j])\n            p=j\n    pos.append(p)\n\npos.append(0)\n\nans=0\ndp=[0]*n\nfor i in range(n-2,-1,-1):\n    dp[i]=(n-i)+(dp[pos[i]])-(s[i]-pos[i])\n    ans+=dp[i]\n\n#print(s)\n#print(pos)\n#print(dp)\nprint(ans)\n\n\n\n\"\"\"\n\nimport math\nn=int(input())\ns=[int(x) for x in input().split()]+[n]\n\n\nK=int(math.log2(n))+1\nlookup=[]\nfor i in range(n+1):\n    h=[]\n    for j in range(K+1):\n        h.append(0)\n    lookup.append(h)\n\n\nfor i in range(0,n):\n    lookup[i][0]=(s[i],i)\n\nfor j in range(1,K+1):\n#j=1\n#while((1<<j)<=n):\n    i=0\n    while(i+(1<<j)-1<n):\n        if(lookup[i][j-1][0]>lookup[i + (1 << (j - 1))][j - 1][0]):\n            lookup[i][j]=(lookup[i][j-1][0],lookup[i][j-1][1])\n        else:\n            lookup[i][j]=(lookup[i + (1 << (j - 1))][j - 1][0],lookup[i + (1 << (j - 1))][j - 1][1])\n        i+=1\n    j+=1\n\n\n\npos=[]\nfor i in range(0,len(s)-1):\n    L=i+1\n    R=s[i]-1\n    j=int(math.log2(R-L+1))\n    if(lookup[L][j][0]>lookup[R - (1 << j) + 1][j][0]):\n        pos.append(lookup[L][j][1])\n    else:\n        pos.append(lookup[R - (1 << j) + 1][j][1])\n    \n\nans=0\ndp=[0]*n\nfor i in range(n-2,-1,-1):\n    dp[i]=(n-i)+(dp[pos[i]])-(s[i]-pos[i])\n    ans+=dp[i]\n\nprint(ans)\n\n\n"]