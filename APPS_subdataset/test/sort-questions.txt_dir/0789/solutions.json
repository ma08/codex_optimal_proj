["n = input()\nx = len(n)\nn = n.replace('4', '0')\nn = n.replace('7', '1')\ntmp = 2 * (2**(x-1) - 1)\nprint(tmp + int(n, 2) + 1)", "n = (input())\ns = []\nfor i in range(len(n) - 1, -1 , -1):\n    if int(n[i]) == 4:\n        s.append(1)\n    else:\n        s.append(2)\ncnt = 0\nfor i in range(len(s)):\n    cnt += (2**i)*s[i]\nprint(cnt)\n", "def main():\n    n = int(input())\n    k = 0\n    i = 1\n    while n // 10:\n    \n        k += 1*i if n % 10 == 4 else 2*i\n        \n        n //= 10\n        i *= 2\n    k += 1*i if n % 10 == 4 else 2*i\n    print(k)\ndef __starting_point():\n    main()\n\n__starting_point()", "inp = input()\nn = int(inp)\n\nc = 0\nk = 10\n\nwhile k**c < n:\n    c += 1\n\nres = 0\nres += 2**c - 2\n\np = 1\nfor i in range(len(inp) - 1, -1, -1):\n    ch = inp[i]\n    if ch == '7':\n        res += p\n    p *= 2\n\nres += 1\n        \n\nprint(res)\n", "n = input()\nbinary = []\nfor i in n:\n    if i == '4':\n        binary.append(0)\n    else:\n        binary.append(1)\nbinary.reverse()\nans = 0\nfor i in range(len(binary)):\n    ans +=  2 ** i * (binary[i] + 1)\nprint (ans)", "def generate(num, pref):\n    nonlocal res\n    if num == 0:\n        res += 1\n        if pref == n:\n            print(res)\n            return\n    else:\n        generate(num - 1, pref + '4')\n        generate(num - 1, pref + '7')\n\nn = input()\nnum = len(n)\nres = 0\nfor i in range(1, num):\n    res += 2 ** i\ngenerate(num, '')\nprint(res)", "d = set()\n\ndef binary_search(a, x, lo=0, hi=None):\n    if hi is None:\n        hi = len(a)\n    while lo < hi:\n        mid = (lo+hi)//2\n        midval = a[mid]\n        if midval < x:\n            lo = mid+1\n        elif midval > x: \n            hi = mid\n        else:\n            return mid\n    return -1\n\nfor i in range(512):\n\ts = str(bin(i))\n\ts = s[2:]\n\ts1 = ''\n\ts2 = ''\n\tfor c in s:\n\t\tif(c=='0'):\n\t\t\ts1 += '4'\n\t\t\ts2 += '7'\n\t\telse:\n\t\t\ts1 += '7'\n\t\t\ts2 += '4'\n\td.add(int(s1))\n\td.add(int(s2))\nl = list(d)\nl.sort()\n\nn = int(input())\nprint(binary_search(l,n) + 1)", "n = input()\ns = ''\nfor i in n:\n    if i == '7':\n        s = s+'1'\n    else:\n        s = s+'0'\nans = 0\nfor i in range(len(n)-1):\n    ans += 2**(i+1)\nprint(ans+int(s,2)+1)\n", "s = input()\n\nans = 1\n\ndef f(k):\n    if k == '4':\n        return 0\n    return 1\n\nfor i in range(len(s)):\n    ans = (ans << 1) + f(s[i])\n\nprint(ans - 1)\n", "n = input()\nn = n.replace('7', '1')\nn = n.replace('4', '0')\nlength = len(n)\nanswer = 0\nfor i in range(length):\n    answer += 2 ** i\nt = 1\nfor d in reversed(n):\n    if d == '1':\n        answer += t\n    t *= 2\nprint(answer)", "a = list(str(input()))\na = [int(x) for x in a]\nn = len(a)\n\nans = 0\nfor i in range(n):\n    digs = n - i\n    ans += 2 ** (digs-1)\n    if a[i] == 4:\n        continue\n    else:\n        ans += 2 ** (digs - 1)\n\nprint(ans)\n\n\n\n\n\n\n\n\n\n\n", "n = input()\nans = 0\nfor i in range(len(n)):\n    ans *= 2\n    ans += 1\n    if n[i] == \"7\":\n        ans += 1\nprint(ans)", "n = input()\nans = 0\nlen_n = len(n)\nif len_n == 1:\n    if n == '4':\n        ans = 1\n    else:\n        ans = 2\nelse:\n    ans += sum([2 ** n for n in range(1, len_n)])\n    for i in range(len_n):\n        if n[i] == '7':\n            ans += 2 ** (len_n-i-1)\n    ans += 1\nprint(ans)\n", "a = input()[::-1]\ncount = 0\nfor i in range(len(a)):\n    if a[i] == '7':\n        count += 2 ** i * 2\n    else:\n        count += 2 ** i\nprint(count)", "s=input().strip()\nans = 0\nst=1\nfor i in range(len(s)-1, -1, -1):\n    if s[i]=='4':\n        ans+=st\n    elif s[i]=='7':\n        ans+=st*2\n    st*=2\nprint(ans)", "d = {\n4: 1,\n7: 2,\n44: 3,\n47: 4,\n74: 5,\n77: 6,\n444: 7,\n447: 8,\n474: 9,\n477: 10,\n744: 11,\n747: 12,\n774: 13,\n777: 14,\n4444: 15,\n4447: 16,\n4474: 17,\n4477: 18,\n4744: 19,\n4747: 20,\n4774: 21,\n4777: 22,\n7444: 23,\n7447: 24,\n7474: 25,\n7477: 26,\n7744: 27,\n7747: 28,\n7774: 29,\n7777: 30,\n44444: 31,\n44447: 32,\n44474: 33,\n44477: 34,\n44744: 35,\n44747: 36,\n44774: 37,\n44777: 38,\n47444: 39,\n47447: 40,\n47474: 41,\n47477: 42,\n47744: 43,\n47747: 44,\n47774: 45,\n47777: 46,\n74444: 47,\n74447: 48,\n74474: 49,\n74477: 50,\n74744: 51,\n74747: 52,\n74774: 53,\n74777: 54,\n77444: 55,\n77447: 56,\n77474: 57,\n77477: 58,\n77744: 59,\n77747: 60,\n77774: 61,\n77777: 62,\n444444: 63,\n444447: 64,\n444474: 65,\n444477: 66,\n444744: 67,\n444747: 68,\n444774: 69,\n444777: 70,\n447444: 71,\n447447: 72,\n447474: 73,\n447477: 74,\n447744: 75,\n447747: 76,\n447774: 77,\n447777: 78,\n474444: 79,\n474447: 80,\n474474: 81,\n474477: 82,\n474744: 83,\n474747: 84,\n474774: 85,\n474777: 86,\n477444: 87,\n477447: 88,\n477474: 89,\n477477: 90,\n477744: 91,\n477747: 92,\n477774: 93,\n477777: 94,\n744444: 95,\n744447: 96,\n744474: 97,\n744477: 98,\n744744: 99,\n744747: 100,\n744774: 101,\n744777: 102,\n747444: 103,\n747447: 104,\n747474: 105,\n747477: 106,\n747744: 107,\n747747: 108,\n747774: 109,\n747777: 110,\n774444: 111,\n774447: 112,\n774474: 113,\n774477: 114,\n774744: 115,\n774747: 116,\n774774: 117,\n774777: 118,\n777444: 119,\n777447: 120,\n777474: 121,\n777477: 122,\n777744: 123,\n777747: 124,\n777774: 125,\n777777: 126,\n4444444: 127,\n4444447: 128,\n4444474: 129,\n4444477: 130,\n4444744: 131,\n4444747: 132,\n4444774: 133,\n4444777: 134,\n4447444: 135,\n4447447: 136,\n4447474: 137,\n4447477: 138,\n4447744: 139,\n4447747: 140,\n4447774: 141,\n4447777: 142,\n4474444: 143,\n4474447: 144,\n4474474: 145,\n4474477: 146,\n4474744: 147,\n4474747: 148,\n4474774: 149,\n4474777: 150,\n4477444: 151,\n4477447: 152,\n4477474: 153,\n4477477: 154,\n4477744: 155,\n4477747: 156,\n4477774: 157,\n4477777: 158,\n4744444: 159,\n4744447: 160,\n4744474: 161,\n4744477: 162,\n4744744: 163,\n4744747: 164,\n4744774: 165,\n4744777: 166,\n4747444: 167,\n4747447: 168,\n4747474: 169,\n4747477: 170,\n4747744: 171,\n4747747: 172,\n4747774: 173,\n4747777: 174,\n4774444: 175,\n4774447: 176,\n4774474: 177,\n4774477: 178,\n4774744: 179,\n4774747: 180,\n4774774: 181,\n4774777: 182,\n4777444: 183,\n4777447: 184,\n4777474: 185,\n4777477: 186,\n4777744: 187,\n4777747: 188,\n4777774: 189,\n4777777: 190,\n7444444: 191,\n7444447: 192,\n7444474: 193,\n7444477: 194,\n7444744: 195,\n7444747: 196,\n7444774: 197,\n7444777: 198,\n7447444: 199,\n7447447: 200,\n7447474: 201,\n7447477: 202,\n7447744: 203,\n7447747: 204,\n7447774: 205,\n7447777: 206,\n7474444: 207,\n7474447: 208,\n7474474: 209,\n7474477: 210,\n7474744: 211,\n7474747: 212,\n7474774: 213,\n7474777: 214,\n7477444: 215,\n7477447: 216,\n7477474: 217,\n7477477: 218,\n7477744: 219,\n7477747: 220,\n7477774: 221,\n7477777: 222,\n7744444: 223,\n7744447: 224,\n7744474: 225,\n7744477: 226,\n7744744: 227,\n7744747: 228,\n7744774: 229,\n7744777: 230,\n7747444: 231,\n7747447: 232,\n7747474: 233,\n7747477: 234,\n7747744: 235,\n7747747: 236,\n7747774: 237,\n7747777: 238,\n7774444: 239,\n7774447: 240,\n7774474: 241,\n7774477: 242,\n7774744: 243,\n7774747: 244,\n7774774: 245,\n7774777: 246,\n7777444: 247,\n7777447: 248,\n7777474: 249,\n7777477: 250,\n7777744: 251,\n7777747: 252,\n7777774: 253,\n7777777: 254,\n44444444: 255,\n44444447: 256,\n44444474: 257,\n44444477: 258,\n44444744: 259,\n44444747: 260,\n44444774: 261,\n44444777: 262,\n44447444: 263,\n44447447: 264,\n44447474: 265,\n44447477: 266,\n44447744: 267,\n44447747: 268,\n44447774: 269,\n44447777: 270,\n44474444: 271,\n44474447: 272,\n44474474: 273,\n44474477: 274,\n44474744: 275,\n44474747: 276,\n44474774: 277,\n44474777: 278,\n44477444: 279,\n44477447: 280,\n44477474: 281,\n44477477: 282,\n44477744: 283,\n44477747: 284,\n44477774: 285,\n44477777: 286,\n44744444: 287,\n44744447: 288,\n44744474: 289,\n44744477: 290,\n44744744: 291,\n44744747: 292,\n44744774: 293,\n44744777: 294,\n44747444: 295,\n44747447: 296,\n44747474: 297,\n44747477: 298,\n44747744: 299,\n44747747: 300,\n44747774: 301,\n44747777: 302,\n44774444: 303,\n44774447: 304,\n44774474: 305,\n44774477: 306,\n44774744: 307,\n44774747: 308,\n44774774: 309,\n44774777: 310,\n44777444: 311,\n44777447: 312,\n44777474: 313,\n44777477: 314,\n44777744: 315,\n44777747: 316,\n44777774: 317,\n44777777: 318,\n47444444: 319,\n47444447: 320,\n47444474: 321,\n47444477: 322,\n47444744: 323,\n47444747: 324,\n47444774: 325,\n47444777: 326,\n47447444: 327,\n47447447: 328,\n47447474: 329,\n47447477: 330,\n47447744: 331,\n47447747: 332,\n47447774: 333,\n47447777: 334,\n47474444: 335,\n47474447: 336,\n47474474: 337,\n47474477: 338,\n47474744: 339,\n47474747: 340,\n47474774: 341,\n47474777: 342,\n47477444: 343,\n47477447: 344,\n47477474: 345,\n47477477: 346,\n47477744: 347,\n47477747: 348,\n47477774: 349,\n47477777: 350,\n47744444: 351,\n47744447: 352,\n47744474: 353,\n47744477: 354,\n47744744: 355,\n47744747: 356,\n47744774: 357,\n47744777: 358,\n47747444: 359,\n47747447: 360,\n47747474: 361,\n47747477: 362,\n47747744: 363,\n47747747: 364,\n47747774: 365,\n47747777: 366,\n47774444: 367,\n47774447: 368,\n47774474: 369,\n47774477: 370,\n47774744: 371,\n47774747: 372,\n47774774: 373,\n47774777: 374,\n47777444: 375,\n47777447: 376,\n47777474: 377,\n47777477: 378,\n47777744: 379,\n47777747: 380,\n47777774: 381,\n47777777: 382,\n74444444: 383,\n74444447: 384,\n74444474: 385,\n74444477: 386,\n74444744: 387,\n74444747: 388,\n74444774: 389,\n74444777: 390,\n74447444: 391,\n74447447: 392,\n74447474: 393,\n74447477: 394,\n74447744: 395,\n74447747: 396,\n74447774: 397,\n74447777: 398,\n74474444: 399,\n74474447: 400,\n74474474: 401,\n74474477: 402,\n74474744: 403,\n74474747: 404,\n74474774: 405,\n74474777: 406,\n74477444: 407,\n74477447: 408,\n74477474: 409,\n74477477: 410,\n74477744: 411,\n74477747: 412,\n74477774: 413,\n74477777: 414,\n74744444: 415,\n74744447: 416,\n74744474: 417,\n74744477: 418,\n74744744: 419,\n74744747: 420,\n74744774: 421,\n74744777: 422,\n74747444: 423,\n74747447: 424,\n74747474: 425,\n74747477: 426,\n74747744: 427,\n74747747: 428,\n74747774: 429,\n74747777: 430,\n74774444: 431,\n74774447: 432,\n74774474: 433,\n74774477: 434,\n74774744: 435,\n74774747: 436,\n74774774: 437,\n74774777: 438,\n74777444: 439,\n74777447: 440,\n74777474: 441,\n74777477: 442,\n74777744: 443,\n74777747: 444,\n74777774: 445,\n74777777: 446,\n77444444: 447,\n77444447: 448,\n77444474: 449,\n77444477: 450,\n77444744: 451,\n77444747: 452,\n77444774: 453,\n77444777: 454,\n77447444: 455,\n77447447: 456,\n77447474: 457,\n77447477: 458,\n77447744: 459,\n77447747: 460,\n77447774: 461,\n77447777: 462,\n77474444: 463,\n77474447: 464,\n77474474: 465,\n77474477: 466,\n77474744: 467,\n77474747: 468,\n77474774: 469,\n77474777: 470,\n77477444: 471,\n77477447: 472,\n77477474: 473,\n77477477: 474,\n77477744: 475,\n77477747: 476,\n77477774: 477,\n77477777: 478,\n77744444: 479,\n77744447: 480,\n77744474: 481,\n77744477: 482,\n77744744: 483,\n77744747: 484,\n77744774: 485,\n77744777: 486,\n77747444: 487,\n77747447: 488,\n77747474: 489,\n77747477: 490,\n77747744: 491,\n77747747: 492,\n77747774: 493,\n77747777: 494,\n77774444: 495,\n77774447: 496,\n77774474: 497,\n77774477: 498,\n77774744: 499,\n77774747: 500,\n77774774: 501,\n77774777: 502,\n77777444: 503,\n77777447: 504,\n77777474: 505,\n77777477: 506,\n77777744: 507,\n77777747: 508,\n77777774: 509,\n77777777: 510,\n444444444: 511,\n444444447: 512,\n444444474: 513,\n444444477: 514,\n444444744: 515,\n444444747: 516,\n444444774: 517,\n444444777: 518,\n444447444: 519,\n444447447: 520,\n444447474: 521,\n444447477: 522,\n444447744: 523,\n444447747: 524,\n444447774: 525,\n444447777: 526,\n444474444: 527,\n444474447: 528,\n444474474: 529,\n444474477: 530,\n444474744: 531,\n444474747: 532,\n444474774: 533,\n444474777: 534,\n444477444: 535,\n444477447: 536,\n444477474: 537,\n444477477: 538,\n444477744: 539,\n444477747: 540,\n444477774: 541,\n444477777: 542,\n444744444: 543,\n444744447: 544,\n444744474: 545,\n444744477: 546,\n444744744: 547,\n444744747: 548,\n444744774: 549,\n444744777: 550,\n444747444: 551,\n444747447: 552,\n444747474: 553,\n444747477: 554,\n444747744: 555,\n444747747: 556,\n444747774: 557,\n444747777: 558,\n444774444: 559,\n444774447: 560,\n444774474: 561,\n444774477: 562,\n444774744: 563,\n444774747: 564,\n444774774: 565,\n444774777: 566,\n444777444: 567,\n444777447: 568,\n444777474: 569,\n444777477: 570,\n444777744: 571,\n444777747: 572,\n444777774: 573,\n444777777: 574,\n447444444: 575,\n447444447: 576,\n447444474: 577,\n447444477: 578,\n447444744: 579,\n447444747: 580,\n447444774: 581,\n447444777: 582,\n447447444: 583,\n447447447: 584,\n447447474: 585,\n447447477: 586,\n447447744: 587,\n447447747: 588,\n447447774: 589,\n447447777: 590,\n447474444: 591,\n447474447: 592,\n447474474: 593,\n447474477: 594,\n447474744: 595,\n447474747: 596,\n447474774: 597,\n447474777: 598,\n447477444: 599,\n447477447: 600,\n447477474: 601,\n447477477: 602,\n447477744: 603,\n447477747: 604,\n447477774: 605,\n447477777: 606,\n447744444: 607,\n447744447: 608,\n447744474: 609,\n447744477: 610,\n447744744: 611,\n447744747: 612,\n447744774: 613,\n447744777: 614,\n447747444: 615,\n447747447: 616,\n447747474: 617,\n447747477: 618,\n447747744: 619,\n447747747: 620,\n447747774: 621,\n447747777: 622,\n447774444: 623,\n447774447: 624,\n447774474: 625,\n447774477: 626,\n447774744: 627,\n447774747: 628,\n447774774: 629,\n447774777: 630,\n447777444: 631,\n447777447: 632,\n447777474: 633,\n447777477: 634,\n447777744: 635,\n447777747: 636,\n447777774: 637,\n447777777: 638,\n474444444: 639,\n474444447: 640,\n474444474: 641,\n474444477: 642,\n474444744: 643,\n474444747: 644,\n474444774: 645,\n474444777: 646,\n474447444: 647,\n474447447: 648,\n474447474: 649,\n474447477: 650,\n474447744: 651,\n474447747: 652,\n474447774: 653,\n474447777: 654,\n474474444: 655,\n474474447: 656,\n474474474: 657,\n474474477: 658,\n474474744: 659,\n474474747: 660,\n474474774: 661,\n474474777: 662,\n474477444: 663,\n474477447: 664,\n474477474: 665,\n474477477: 666,\n474477744: 667,\n474477747: 668,\n474477774: 669,\n474477777: 670,\n474744444: 671,\n474744447: 672,\n474744474: 673,\n474744477: 674,\n474744744: 675,\n474744747: 676,\n474744774: 677,\n474744777: 678,\n474747444: 679,\n474747447: 680,\n474747474: 681,\n474747477: 682,\n474747744: 683,\n474747747: 684,\n474747774: 685,\n474747777: 686,\n474774444: 687,\n474774447: 688,\n474774474: 689,\n474774477: 690,\n474774744: 691,\n474774747: 692,\n474774774: 693,\n474774777: 694,\n474777444: 695,\n474777447: 696,\n474777474: 697,\n474777477: 698,\n474777744: 699,\n474777747: 700,\n474777774: 701,\n474777777: 702,\n477444444: 703,\n477444447: 704,\n477444474: 705,\n477444477: 706,\n477444744: 707,\n477444747: 708,\n477444774: 709,\n477444777: 710,\n477447444: 711,\n477447447: 712,\n477447474: 713,\n477447477: 714,\n477447744: 715,\n477447747: 716,\n477447774: 717,\n477447777: 718,\n477474444: 719,\n477474447: 720,\n477474474: 721,\n477474477: 722,\n477474744: 723,\n477474747: 724,\n477474774: 725,\n477474777: 726,\n477477444: 727,\n477477447: 728,\n477477474: 729,\n477477477: 730,\n477477744: 731,\n477477747: 732,\n477477774: 733,\n477477777: 734,\n477744444: 735,\n477744447: 736,\n477744474: 737,\n477744477: 738,\n477744744: 739,\n477744747: 740,\n477744774: 741,\n477744777: 742,\n477747444: 743,\n477747447: 744,\n477747474: 745,\n477747477: 746,\n477747744: 747,\n477747747: 748,\n477747774: 749,\n477747777: 750,\n477774444: 751,\n477774447: 752,\n477774474: 753,\n477774477: 754,\n477774744: 755,\n477774747: 756,\n477774774: 757,\n477774777: 758,\n477777444: 759,\n477777447: 760,\n477777474: 761,\n477777477: 762,\n477777744: 763,\n477777747: 764,\n477777774: 765,\n477777777: 766,\n744444444: 767,\n744444447: 768,\n744444474: 769,\n744444477: 770,\n744444744: 771,\n744444747: 772,\n744444774: 773,\n744444777: 774,\n744447444: 775,\n744447447: 776,\n744447474: 777,\n744447477: 778,\n744447744: 779,\n744447747: 780,\n744447774: 781,\n744447777: 782,\n744474444: 783,\n744474447: 784,\n744474474: 785,\n744474477: 786,\n744474744: 787,\n744474747: 788,\n744474774: 789,\n744474777: 790,\n744477444: 791,\n744477447: 792,\n744477474: 793,\n744477477: 794,\n744477744: 795,\n744477747: 796,\n744477774: 797,\n744477777: 798,\n744744444: 799,\n744744447: 800,\n744744474: 801,\n744744477: 802,\n744744744: 803,\n744744747: 804,\n744744774: 805,\n744744777: 806,\n744747444: 807,\n744747447: 808,\n744747474: 809,\n744747477: 810,\n744747744: 811,\n744747747: 812,\n744747774: 813,\n744747777: 814,\n744774444: 815,\n744774447: 816,\n744774474: 817,\n744774477: 818,\n744774744: 819,\n744774747: 820,\n744774774: 821,\n744774777: 822,\n744777444: 823,\n744777447: 824,\n744777474: 825,\n744777477: 826,\n744777744: 827,\n744777747: 828,\n744777774: 829,\n744777777: 830,\n747444444: 831,\n747444447: 832,\n747444474: 833,\n747444477: 834,\n747444744: 835,\n747444747: 836,\n747444774: 837,\n747444777: 838,\n747447444: 839,\n747447447: 840,\n747447474: 841,\n747447477: 842,\n747447744: 843,\n747447747: 844,\n747447774: 845,\n747447777: 846,\n747474444: 847,\n747474447: 848,\n747474474: 849,\n747474477: 850,\n747474744: 851,\n747474747: 852,\n747474774: 853,\n747474777: 854,\n747477444: 855,\n747477447: 856,\n747477474: 857,\n747477477: 858,\n747477744: 859,\n747477747: 860,\n747477774: 861,\n747477777: 862,\n747744444: 863,\n747744447: 864,\n747744474: 865,\n747744477: 866,\n747744744: 867,\n747744747: 868,\n747744774: 869,\n747744777: 870,\n747747444: 871,\n747747447: 872,\n747747474: 873,\n747747477: 874,\n747747744: 875,\n747747747: 876,\n747747774: 877,\n747747777: 878,\n747774444: 879,\n747774447: 880,\n747774474: 881,\n747774477: 882,\n747774744: 883,\n747774747: 884,\n747774774: 885,\n747774777: 886,\n747777444: 887,\n747777447: 888,\n747777474: 889,\n747777477: 890,\n747777744: 891,\n747777747: 892,\n747777774: 893,\n747777777: 894,\n774444444: 895,\n774444447: 896,\n774444474: 897,\n774444477: 898,\n774444744: 899,\n774444747: 900,\n774444774: 901,\n774444777: 902,\n774447444: 903,\n774447447: 904,\n774447474: 905,\n774447477: 906,\n774447744: 907,\n774447747: 908,\n774447774: 909,\n774447777: 910,\n774474444: 911,\n774474447: 912,\n774474474: 913,\n774474477: 914,\n774474744: 915,\n774474747: 916,\n774474774: 917,\n774474777: 918,\n774477444: 919,\n774477447: 920,\n774477474: 921,\n774477477: 922,\n774477744: 923,\n774477747: 924,\n774477774: 925,\n774477777: 926,\n774744444: 927,\n774744447: 928,\n774744474: 929,\n774744477: 930,\n774744744: 931,\n774744747: 932,\n774744774: 933,\n774744777: 934,\n774747444: 935,\n774747447: 936,\n774747474: 937,\n774747477: 938,\n774747744: 939,\n774747747: 940,\n774747774: 941,\n774747777: 942,\n774774444: 943,\n774774447: 944,\n774774474: 945,\n774774477: 946,\n774774744: 947,\n774774747: 948,\n774774774: 949,\n774774777: 950,\n774777444: 951,\n774777447: 952,\n774777474: 953,\n774777477: 954,\n774777744: 955,\n774777747: 956,\n774777774: 957,\n774777777: 958,\n777444444: 959,\n777444447: 960,\n777444474: 961,\n777444477: 962,\n777444744: 963,\n777444747: 964,\n777444774: 965,\n777444777: 966,\n777447444: 967,\n777447447: 968,\n777447474: 969,\n777447477: 970,\n777447744: 971,\n777447747: 972,\n777447774: 973,\n777447777: 974,\n777474444: 975,\n777474447: 976,\n777474474: 977,\n777474477: 978,\n777474744: 979,\n777474747: 980,\n777474774: 981,\n777474777: 982,\n777477444: 983,\n777477447: 984,\n777477474: 985,\n777477477: 986,\n777477744: 987,\n777477747: 988,\n777477774: 989,\n777477777: 990,\n777744444: 991,\n777744447: 992,\n777744474: 993,\n777744477: 994,\n777744744: 995,\n777744747: 996,\n777744774: 997,\n777744777: 998,\n777747444: 999,\n777747447: 1000,\n777747474: 1001,\n777747477: 1002,\n777747744: 1003,\n777747747: 1004,\n777747774: 1005,\n777747777: 1006,\n777774444: 1007,\n777774447: 1008,\n777774474: 1009,\n777774477: 1010,\n777774744: 1011,\n777774747: 1012,\n777774774: 1013,\n777774777: 1014,\n777777444: 1015,\n777777447: 1016,\n777777474: 1017,\n777777477: 1018,\n777777744: 1019,\n777777747: 1020,\n777777774: 1021,\n777777777: 1022\n}\n\n\nn = int(input())\nprint(d[n])\n\n", "s = input().strip().replace(\"7\", \"1\").replace(\"4\", \"0\")\nm = 0\nfor i in range(1, len(s)):\n\n    m += 2 ** i\n\nprint(int(s, 2) + m + 1)\n", "number = str(input())\nret = 0\n\ndef dothat(number, poww):\n\tyep = number\n\tfor i in range(poww-1):\n\t\tnumber *= yep\n\tif poww == 0:\n\t\tnumber = 1\n\treturn number\n\nfor i in range(len(number)):\n\tif number[i] == '4':\n\t\tret += dothat(2, len(number) - i - 1)\n\telse:\n\t\tret += dothat(2, len(number) - i)\n\n\n\n\nprint(ret)\n", "s=input()\nr=1 if s[0]=='4' else 2\nfor c in s[1:]:\n    if  c=='4':\n        r=r*2+1\n    else:\n        r=r*2+2\nprint(r)", "def app(s, alph):\n    nonlocal cnt\n    alph[s] = cnt\n    cnt += 1\ndef f(s, n, step, alph, used):\n    if n == step:\n        app(s, alph)\n    else:\n        if not used[step][0]:\n            used[step][0] = True\n            f(s + '4', n, step + 1, alph, used)\n        if not used[step][1]:\n            used[step][1] = True\n            f(s + '7', n, step + 1, alph, used)\n        used[step][0] = False\n        used[step][1] = False\n    return\ndef main():\n    nonlocal cnt\n    s = input()\n    alph = dict()\n    string = ''\n    for i in range(10):\n        used = [[False, False] for i in range(i + 1)]\n        f('', i + 1, 0, alph, used)\n    print(alph[s])\ncnt = 1\nmain()", "j = int(input())\ns = [7, 4]\ns1 = s\nfor i in range(11):\n    ns = [i * 10 + 4 for i in s1] + [i * 10 + 7 for i in s1]\n    s += ns\n    s1 = ns\n\nprint(sorted(s).index(j) + 1)\n", "n = int(input())\ns = str(n)\nl = len(s)\nmaxpos = 0\nfor i in range(1,l+1):\n    maxpos += 2**i\npos = maxpos\n\ns = s[::-1]\nfor i,c in enumerate(s):\n    if c in \"4\":\n        pos -= 2**i\nprint(pos)", "s = str(input())\nl = \"\"\nfor i in s:\n    if i == \"4\":\n        l+= \"0\"\n    else:\n        l+= \"1\"\n\nsum = 0\nfor i in range(0, len(s)):\n    sum+= 2**i\n\n\nsum+=int(l, 2)\n\nprint(sum)", "#!/usr/bin/env python\n# -.- coding: utf-8 -.-\n\nlucky = int(input())\nlucky = str(lucky)\nlenlucky = len(lucky)\nacc = 0\nacc += 2**(lenlucky) - 1\nnumindex = [4, 7]\nfor i in range(lenlucky):\n    acc += numindex.index(int(lucky[i])) * 2**(lenlucky - i - 1)\nprint(acc)\n", "n = int(input())\na = \"\"\nwhile n!= 0:\n    if n%10==4:\n        a = \"0\" + a\n    elif n%10==7:\n        a = \"1\" + a\n    n = n//10\n\na = \"1\" + a\nm = int(a,2)\nm = m-1\nprint(m)\n    \n"]