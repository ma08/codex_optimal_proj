["n = int(input())\nl = [int(x) for x in input().split()]\nc = [int(x) for x in input().split()]\n\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\ngcds = {0: 0}\n\nfor i in range(n):\n    adds = {}\n    for g in list(gcds.keys()):\n        x = gcd(g, l[i])\n        y = gcds.get(x)\n        u = gcds[g]\n        if y is not None:\n            if u + c[i] < y:\n                t = adds.get(x)\n                if t and t > u + c[i] or t is None:\n                    adds[x] = u + c[i]\n        else:\n            t = adds.get(x)\n            if t and t > u + c[i]or t is None:\n                adds[x] = u + c[i]\n    gcds.update(adds)\n\nif gcds.get(1):\n    print(gcds[1])\nelse:\n    print(-1)\n\n", "def main():\n    input()\n    acc = {0: 0}\n    for p, c in zip(list(map(int, input().split())),\n                    list(map(int, input().split()))):\n        adds = []\n        for b, u in acc.items():\n            a = p\n            while b:\n                a, b = b, a % b\n            adds.append((a, u + c))\n        for a, u in adds:\n            acc[a] = min(u, acc.get(a, 1000000000))\n    print(acc.get(1, -1))\n\n\ndef __starting_point():\n    main()\n__starting_point()", "#D\ninput()\nok = {0:0}\nfor p, c in zip(list(map(int, input().split())),\n                list(map(int, input().split()))):\n    ad = []\n    for b, u in list(ok.items()):\n        a = p\n        while b:\n            a,b  = b, a % b\n        ad.append((a, u + c))\n    for a, u in ad:\n        ok[a] = min(u, ok.get(a, 1000000000))\nprint(ok.get(1, -1))\n", "import sys, math\nimport io, os\n#data = io.BytesIO(os.read(0,os.fstat(0).st_size)).readline\nfrom bisect import bisect_left as bl, bisect_right as br, insort\nfrom heapq import heapify, heappush, heappop\nfrom collections import defaultdict as dd, deque, Counter\n# from itertools import permutations,combinations\ndef data(): return sys.stdin.readline().strip()\ndef mdata(): return list(map(int, data().split()))\ndef outl(var): sys.stdout.write(' '.join(map(str, var)) + '\\n')\ndef out(var): sys.stdout.write(str(var) + '\\n')\nfrom decimal import Decimal\n# from fractions import Fraction\n# sys.setrecursionlimit(100000)\nmod = int(1e9) + 7\nINF=float('inf')\n\nn=int(data())\nl=mdata()\nc=mdata()\nd=dict()\nfor i in range(n):\n    if d.get(l[i]):\n        d[l[i]]=min(d[l[i]],c[i])\n    else:\n        d[l[i]]=c[i]\nfor i in l:\n    lis=list(d.keys())\n    for j in lis:\n        g = math.gcd(i, j)\n        if d.get(g):\n            d[g]=min(d[g],d[i]+d[j])\n        else:\n            d[g] = d[i] + d[j]\nif 1 in d:\n    out(d[1])\nelse:\n    out(-1)\n\n"]