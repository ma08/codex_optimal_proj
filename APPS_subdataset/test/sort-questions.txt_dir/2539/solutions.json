["prime_factors = [[] for _ in range(10**6 + 1)]\nprimes=[True for i in range(10**6+1)]\ndef generate_primes(n):\n    \n    for p in range(2,n+1):\n        if primes[p]:\n            prime_factors[p].append(p)\n            for i in range(2 * p,n+1,p):\n                primes[i] = False\n                prime_factors[i].append(p)\ngenerate_primes(10**6)\nresult = []\nfor _ in range(int(input())):\n    x, p, k = map(int, input().split())\n    arr = prime_factors[p]\n    to_add = []\n    to_subtract = []\n    for i in range(1, 1 << len(arr)):\n        mul = 1\n        count = 0\n        for j in range(len(arr)):\n            if (1 << j) & i:\n                count += 1\n                mul *= arr[j]\n            \n        if count%2:\n            to_add.append(mul)\n        else:\n            to_subtract.append(mul)\n    count_before = 0\n    for num in to_add:\n        count_before += x//num\n        \n    for num in to_subtract:\n        count_before -= x//num\n    \n    k += (x - count_before)\n    \n    low = 0\n    high = 10**9\n    answer = high\n    while low <= high:\n        mid = (high + low)//2\n        temp_count = 0\n        for num in to_add:\n            temp_count += mid // num\n        for num in to_subtract:\n            temp_count -= mid // num\n        temp_count = mid - temp_count\n        if temp_count >= k:\n            answer = min(answer, mid)\n            high = mid - 1\n        else:\n            low = mid + 1\n    result.append(answer)\n    \nprint(*result, sep = \"\\n\")\n"]