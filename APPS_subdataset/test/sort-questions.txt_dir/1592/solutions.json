["import re\nimport itertools\nfrom collections import Counter, deque\n\nclass Task:\n    tasks = []\n    answer = \"\" \n\t\n    def getData(self):\n        numberOfTasks = int(input())\n        for i in range(0, numberOfTasks):\n            self.tasks += [[int(x) for x in input().split(' ')]]\n        #inFile = open('input.txt', 'r')\n        #inFile.readline().rstrip()\n        #self.childs = inFile.readline().rstrip()\n\n    def solve(self):\n        queueSize, maxQueueSize = 0, 0\n        time, timeOfLastMessage = 1, 1\n        currentTask = 0\n        while currentTask < len(self.tasks) or queueSize > 0:\n            maxQueueSize = max(maxQueueSize, queueSize)\n            if currentTask < len(self.tasks):\n                timeDelta = self.tasks[currentTask][0] - time\n                queueSize -= min(queueSize, timeDelta)\n                time += timeDelta\n            else:\n                timeOfLastMessage = time + queueSize\n                break\n                \n            if currentTask < len(self.tasks) and \\\n                    self.tasks[currentTask][0] == time:\n                queueSize += self.tasks[currentTask][1]\n                currentTask += 1\n        self.answer = str(timeOfLastMessage) + \" \" + str(maxQueueSize)\n\n    def printAnswer(self):\n        print(self.answer)\n        #outFile = open('output.txt', 'w')\n        #outFile.write(self.answer)\n\ntask = Task()\ntask.getData()\ntask.solve()\ntask.printAnswer()\n", "n = int(input())\n\nmt = 0\nmq = 0\n\nt = 0\nq = 0\n\nfor i in range(n):\n    (ti, ci) = list(map(int, input().split()))\n    q = max(0, q-ti+t)\n    t = ti\n    q += ci\n    mq = max(mq, q)\n    mt = t+q\n\nprint(mt, mq)\n", "n = int(input())\nq = max_q = t0 = 0\nfor i in range(n):\n  t, c = map(int, input().split())\n  q = max(0, q - t + t0) + c\n  if q > max_q:\n    max_q = q\n  t0 = t\nprint(t0 + q, max_q)", "n = int(input())\nans, p, s = 0, 0, 0\nfor i in range(n):\n    t, c = map(int, input().split())\n    s -= min(s, t - p)\n    p = t\n    s += c\n    if s > ans: ans = s\nprint(p + s, ans)", "import sys\nimport math\n\nn = int(input())\n\na, b = list(map(int, input().split()))\nvmax = b\nfor i in range(1, n):\n    c, d = list(map(int, input().split()))\n    b = max(0, b - (c - a))\n    a = c\n    b += d\n    vmax = max(b, vmax)\n\nprint(a + b, vmax)\n", "pt, s, vs = 0, 0, 0\nfor i in range(int(input())):\n    t, c = map(int, input().split())\n    s = max(s - (t - pt), 0) + c\n    vs = max(vs, s)\n    pt = t\nprint(pt + s, vs)", "n = int(input())\n\nq = max_q = t0 = 0\n\nfor i in range(n):\n\n  t, c = map(int, input().split())\n\n  q = max(0, q - t + t0) + c\n\n  if q > max_q:\n\n    max_q = q\n\n  t0 = t\n\nprint(t0 + q, max_q)", "n = int(input())\nct = 0\ncq = 0\nmcq = 0\n\nfor i in range(n):\n\tt, c = list(map(int, input().split()))\n\tmcq = max(cq, mcq)\t\n\tcq = max(cq - (t - ct), 0)\n\tcq += c\n\tct = t\n\t#print(cq)\n\t\n\nmcq = max(cq, mcq)\nct += cq\nprint(ct, mcq)\t\n", "n = int(input())\n\nque = []\n\nfor i in range(n):\n    t, c = map(int, input().split())\n    que += [[t, c]]\n\n\nnumMessages = None\nlasReceive = None\n\nmaxQ, end = None, None\nfor i, q in enumerate(que):\n    if numMessages == None:\n        numMessages = q[1]\n        lasReceive = q[0]\n        maxQ = numMessages\n    \n    else:\n        numMessages = max(numMessages - (q[0] - lasReceive), 0) + q[1]\n\n        lasReceive = q[0]\n    maxQ = max(maxQ, numMessages)\n    if i == n - 1:\n        print(lasReceive + numMessages, end=' ')\n        print(maxQ, end=' ')\n        \n        \n    ", "r = lambda: int(input())\nra = lambda: [*list(map(int, input().split()))]\na = []\nt, q, mq, s = 0, 0, 0, 0\nn = r()\nfor i in range(n):\n    a.append(ra())\nfor i in range(n):\n    if i==0:\n        q = a[i][1]\n        t = a[i][0]\n    else:\n        s = a[i][0] - t\n        q-=s\n        if q<0:\n            q = 0\n        q+=a[i][1]\n    if q>mq:\n        mq = q\n    t = a[i][0]\nt = a[i][0]+q\nprint(t, mq)\n", "n = int(input())\na1,a2 = 0,0\nr = 0\nfor _ in range(n):\n    b1,b2 = list(map(int,input().split()))\n    a2 = max(0,a2-(b1-a1))+b2\n    r = max(r,a2)\n    a1 = b1\nprint(a1+a2,r)\n\n", "n=int(input())\na,b=map(int,input().split())\nl=b\nx=a\nq=0\nm=0\nm=max(m,l)\nfor i in range(n-1):\n\ta,b=map(int,input().split())\n\tl-=(a-x)\n\tl=max(l,0)\n\tl+=b\n\tm=max(m,l)\n\tx=a\nprint(\"{} {}\".format(x+l,m))", "Messages, Max, Last = 0, 0, 0\nfor i in range(int(input())):\n    X = list(map(int, input().split()))\n    Messages = max(0, Messages - (X[0] - Last))\n    Messages += X[1]\n    Max = max(Messages, Max)\n    Last = X[0]\nprint(Last + Messages, Max)\n\n# UB_CodeForces\n# Advice: Falling down is an accident, staying down is a choice\n# Location: Mashhad for few days\n# Caption: Finally happened what should be happened\n# CodeNumber: 692\n", "n = int(input())\n\nmessage = 0\nm = 0\nl = 0\n\nfor _ in range(n):\n    t, c = list(map(int, input().split()))\n    message = max(0, message-(t-l))\n    message += c\n    m = max(message, m)\n    l = t\n\nprint(l+message, m)\n    \n", "n = int(input())\nl = []\nfor i in range(n):\n\tc,t = list(map(int,input().split()))\n\tl.append((c,t))\nqueue = l[0][1]\nz = queue\nfor i in range(1,n):\n\tqueue = queue - min((l[i][0]-l[i-1][0]),queue)\n\tqueue = queue + l[i][1]\n\tz = max(z,queue)\nprint(l[-1][0]+queue,z)\n\n", "max_q = q = 0\nt0 = 0\n\nfor _ in range(int(input())):\n    t, c = map(int, input().split())\n    q = max(0, t0-t+q) + c\n    max_q = max(q, max_q)\n    t0 = t\n\nprint(t+q, max_q)", "import sys\nimport math\n\n#to read string\nget_string = lambda: sys.stdin.readline().strip()\n#to read list of integers\nget_int_list = lambda: list( map(int,sys.stdin.readline().strip().split()) )\n#to read integers\nget_int = lambda: int(sys.stdin.readline())\n#to print fast\npt = lambda x: sys.stdout.write(str(x)+'\\n')\n\n#--------------------------------WhiteHat010--------------------------------------#\nn = get_int()\nprev_t,s = get_int_list()\nmx_q = s\nq_size = s\n\nfor i in range(n-1):\n    t,s = get_int_list()\n    diff = t-prev_t\n    q_size = max(0,q_size - diff) \n    q_size = q_size + s\n    mx_q = max(mx_q, q_size)\n    prev_t = t\nprint(prev_t+q_size, mx_q)", "n = int(input())\narr = []\nfor _ in range(n):\n    arr.append([int(i) for i in input().split()])\narr.sort(key=lambda x: x[0])\nqueue_size = 0\ntime = 0\nmax_queue_size = 0\nlast_time = 0\nfor t, c in arr:\n    # print(\"Queue:\", queue_size, \"Time:\", time)\n    sent = t - last_time\n    queue_size = max(0, queue_size - sent)\n    queue_size += c\n    time = t\n    max_queue_size = max(max_queue_size, queue_size)\n    last_time = time\nprint(time + queue_size, max_queue_size)"]