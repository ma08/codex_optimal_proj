["def solve(a,l,r,k):\n    out = sorted(a[:l]+a[r:],reverse=True)\n    inside = sorted(a[l:r])\n    cur = sum(a[l:r])\n    for i in range(min(k,len(inside),len(out))):\n        if out[i] > inside[i]:\n            cur += out[i]-inside[i]\n        else:\n            break\n    return cur\n\nn,k = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\nassert len(a) == n\n\nbest = a[0]\nfor l in range(n):\n    for r in range(l+1,n+1):\n        cur = solve(a,l,r,k)\n        if cur > best:\n            best = cur\n\nprint(best)\n", "read_line = lambda: [int(i) for i in input().split()]\nn, k = read_line()\nx = read_line()\nprint(max(sum(sorted(x[l:r] + sorted(x[:l] + x[r:])[-k:])[l-r:]) for l in range(n) for r in range(l + 1, n + 1)))\n", "def main():\n\tn, k = map(int, input().split())\n\ta = list(map(int, input().split()))\n\n\ts = a[0]\n\tfor l in range(n):\n\t\tfor r in range(l,n):\n\t\t\tout = sorted(a[:l] + a[r+1:], reverse=True)\n\t\t\tinside = sorted(a[l:r+1])\n\t\t\ttemp = sum(a[l:r+1])\n\t\t\tfor i in range(min(k, len(out), len(inside))):\n\t\t\t\tif out[i] > inside[i]:\n\t\t\t\t\ttemp += out[i] - inside[i]\n\t\t\t\telse:\n\t\t\t\t\tbreak\n\t\t\tif temp > s:\n\t\t\t\ts = temp\n\tprint(s)\n\nmain()", "from bisect import bisect_left, bisect_right\n\nn, k = map(int, input().split())\nt = list(map(int, input().split()))\np = sorted(t)\n\nif p[-1] <= 0:\n    print(p[-1])\n    return\nif p[0] >= 0:\n    print(sum(p))\n    return\ni = max(0, n - k - 1)\nwhile p[i] < 0: i += 1\nq = sum(p[i: ])\nif n < k + 2 or p[n - k - 1] <= 0:\n    print(q)\n    return\n\nfor l in range(n - k - 2):\n    r = l + k + 2\n    u = sorted(t[: l] + t[r: ])\n    v = sorted(t[l: r])\n    for i in range(r, n):\n        q = max(q, sum(sorted(v + u[- min(k, len(u)): ])[- len(v): ]))\n        u.remove(t[i])\n        v.insert(bisect_left(v, t[i]), t[i])\n    q = max(q, sum(sorted(v + u[- min(k, len(u)): ])[- len(v): ]))\nprint(q)", "n,k = map(int, input().split(' '))\nA = list(map(int, input().split(' ')))\nbest = max(A)\nfor left in range(n) :\n    for right in range(left, n) :\n        inner = A[left:right+1]\n        outer = A[:left]+A[right+1:]\n        inner.sort()\n        outer.sort(reverse = True)\n        for i in range(k) :\n            if i >= len(inner) or i >= len(outer) : break\n            if inner[i] < outer[i] :\n                inner[i] = outer[i]\n            else : break\n        best = max(best, sum(inner))\nprint(best)", "# coding=utf-8\nimport sys\n\n\nR = lambda: list(map(int, input().split()))\n\n\ndef f(l, r):\n    ans = sum(a[l:r + 1])\n\n    a1 = sorted(a[l:r + 1])\n    a2 = sorted(a[:l] + a[r + 1:], reverse=True)\n\n\n    for i in range(min(k, len(a1), len(a2))):\n        m = min(a1)\n        if a2[i] > m:\n            ans += a2[i] - m\n            a1[a1.index(m)] = a2[i]\n\n    return ans\n\n\nn, k = R()\n\na = R()\n\nprint(max(f(l,r) for l in range(n) for r in range(l,n)))", "n, k = list(map(int, input().split()))\na = list(map(int, input().split()))\n\ns = a[0]\nfor l in range(n):\n\tfor r in range(l,n):\n\t\tout = sorted(a[:l] + a[r+1:], reverse=True)\n\t\tinside = sorted(a[l:r+1])\n\t\ttemp = sum(a[l:r+1])\n\t\tfor i in range(min(k, len(out), len(inside))):\n\t\t\tif out[i] > inside[i]:\n\t\t\t\ttemp += out[i] - inside[i]\n\t\t\telse:\n\t\t\t\tbreak\n\t\tif temp > s:\n\t\t\ts = temp\nprint(s)\n", "read_line = lambda: [int(i) for i in input().split()]\nn, k = read_line()\nx = read_line()\nprint(max(sum(sorted(x[l:r] + sorted(x[:l] + x[r:])[-k:])[l-r:]) for l in range(n) for r in range(l + 1, n + 1)))\n", "read_line = lambda: [int(i) for i in input().split()]\nn, k = read_line()\nx = read_line()\nprint(max(sum(sorted(x[l:r] + sorted(x[:l] + x[r:])[-k:])[l-r:]) for l in range(n) for r in range(l + 1, n + 1)))", "read_line = lambda: [int(i) for i in input().split()]\nn, k = read_line()\nx = read_line()\nprint(max(sum(sorted(x[l:r] + sorted(x[:l] + x[r:])[-k:])[l-r:]) for l in range(n) for r in range(l + 1, n + 1)))\n\n", "read_line = lambda: [int(i) for i in input().split()]\nn, k = read_line()\nx = read_line()\nprint(max(sum(sorted(x[l:r] + sorted(x[:l] + x[r:])[-k:])[l-r:]) for l in range(n) for r in range(l + 1, n + 1)))\n\n", "read_line = lambda: [int(i) for i in input().split()]\nn, k = read_line()\nx = read_line()\nprint(max(sum(sorted(x[l:r] + sorted(x[:l] + x[r:])[-k:])[l-r:]) for l in range(n) for r in range(l + 1, n + 1)))\n\n", "read_line = lambda: [int(i) for i in input().split()]\nn, k = read_line()\nx = read_line()\nprint(max(sum(sorted(x[l:r] + sorted(x[:l] + x[r:])[-k:])[l-r:]) for l in range(n) for r in range(l + 1, n + 1)))\n\n", "read_line = lambda: [int(i) for i in input().split()]\nn, k = read_line()\nx = read_line()\nprint(max(sum(sorted(x[l:r] + sorted(x[:l] + x[r:])[-k:])[l-r:]) for l in range(n) for r in range(l + 1, n + 1)))\n\n", "read_line = lambda: [int(i) for i in input().split()]\nn, k = read_line()\nx = read_line()\nprint(max(sum(sorted(x[l:r] + sorted(x[:l] + x[r:])[-k:])[l-r:]) for l in range(n) for r in range(l + 1, n + 1)))\n\n", "read_line = lambda: [int(i) for i in input().split()]\nn, k = read_line()\nx = read_line()\nprint(max(sum(sorted(x[l:r] + sorted(x[:l] + x[r:])[-k:])[l-r:]) for l in range(n) for r in range(l + 1, n + 1)))\n\n", "read_line = lambda: [int(i) for i in input().split()]\nn, k = read_line()\nx = read_line()\nprint(max(sum(sorted(x[l:r] + sorted(x[:l] + x[r:])[-k:])[l-r:]) for l in range(n) for r in range(l + 1, n + 1)))\n\n", "def solve(curr,other,k):\n    t=0 \n    while t<k and t<len(curr) and t<len(other) and other[t]>curr[t]:\n        t+=1 \n    return t\n\nn,k=map(int,input().split())\narr=list(map(int,input().split()))\nmaxx=-10**100\nfor i in range(n):\n    curr=[]\n    other=sorted(arr[:i]+arr[i+1:],reverse=True)\n    for j in range(i,n):\n        curr.append(arr[j])\n        curr.sort()\n        if j<n-1:\n            del other[other.index(arr[j+1])]\n        #print(other)\n        t=min(len(curr),len(other),k)\n        t=solve(curr,other,k)\n        maxx=max(maxx,sum(curr)-sum(curr[:t])+sum(other[:t]))\n        #print(curr,other,sum(curr)-sum(curr[:t])+sum(other[:t]))\n    #print(maxx)\n    #print(curr,other)\nprint(maxx)", "# Made By Mostafa_Khaled \nbot = True \nread_line = lambda: [int(i) for i in input().split()]\nn, k = read_line()\nx = read_line()\nprint(max(sum(sorted(x[l:r] + sorted(x[:l] + x[r:])[-k:])[l-r:]) for l in range(n) for r in range(l + 1, n + 1)))\n\n\n# Made By Mostafa_Khaled\n", "n,k=map(int,input().split())\na=[int(i) for i in input().split()]\nbest=max(a)\nfor left in range(n):\n    for right in range(left,n):\n        inner=a[left:right+1]\n        outer=a[0:left]+a[right+1:]\n        inner.sort()\n        outer.sort(reverse=True)\n        for i in range(k):\n            if i>=len(outer) or i>=len(inner): break \n            if inner[i]<outer[i]:\n                inner[i]=outer[i]\n            else :\n                break \n        best=max(best,sum(inner)) \nprint(best)", "import os\nif not(\"BEFUNGEE_HOME\" in os.environ.keys()):\n    f=open(\"input.txt\",\"r\")\n    input=f.readline\nn,k=list(map(int,input().split()))\na=list(map(int,input().split()))\n\ndef f(l,r):\n    original_sequence=a[l:r+1]\n    outside_sequence=a[:l]+a[r+1:]\n    original_sequence.sort()\n    outside_sequence.sort(reverse=True)\n    k_=min(k,len(original_sequence),len(outside_sequence))\n    original_sequence[:k_]=[max(x,y) for x,y in zip(original_sequence[:k_],outside_sequence[:k_])]\n    s=sum(original_sequence)\n    return s\n\nresult=-2000000\nfor l in range(n):\n    for r in range(l,n):\n        result=max(f(l,r),result)\n\nprint(result)", "readline = lambda : [int(x) for x in input().split()]\nn, k = readline()\na = readline()\nbest = max(a)\nfor left in range(n):\n    for right in range(left, n):\n        inner = a[left:right+1]\n        outer = a[:left]+a[right+1:]\n        inner.sort()\n        outer.sort(reverse=True)\n        \n        for i in range(k): #check for k number of swaps for this combination\n            if i>=len(inner) or i>=len(outer): break\n            if inner[i]<outer[i]:\n                inner[i]=outer[i] #don't give a swap fuck haha,,, bitch!\n            else:\n                break #no more chances\n        best = max(best, sum(inner)) #results update\nprint(best)\n", "n, k = list(map(int, input().split()))\na = list(map(int, input().split()))\n\ndef solve(i, j):\n    cur_res = sum(a[i:j+1])\n    a1 = sorted(a[i:j+1])\n    a2 = sorted(a[:i] + a[j+1:], reverse=True)\n    for t in range(min(k, len(a1), len(a2))):\n        m = min(a1)\n        if a2[t] > m:\n            cur_res += a2[t] - m\n            a1[a1.index(m)] = a2[t]\n    return cur_res\n\nprint(max(solve(i, j) for i in range(n) for j in range(i, n)))\n", "# HEY STALKER\nn, kr = map(int, input().split())\nl = list(map(int, input().split()))\nans = -2e18\nfor i in range(n):\n    for j in range(i, n):\n        k = kr\n        sub = l[i:j+1]\n        sub_sum = sum(sub)\n        sub.sort()\n        chk = l[0:i] + l[j+1:]\n        chk.sort()\n        chk.reverse()\n        ans = max(ans, sub_sum)\n        for t in range(len(sub)):\n            if t < len(chk) and k > 0:\n                if sub[t] < chk[t]:\n                    sub_sum -= sub[t]\n                    sub_sum += chk[t]\n                    ans = max(ans, sub_sum)\n                    k -= 1\n            else:\n                break\nprint(ans)", "from operator import itemgetter\nfrom sys import stdin, stdout\n\n\ndef solve(a, k):\n    aa = list(map(lambda x: [x[1], x[0]], enumerate(a)))\n    aa.sort(reverse=True, key=itemgetter(0))\n    if aa[0][0] < 0:\n        return aa[0][0]\n\n    best = -float(\"inf\")\n    for i in range(len(a)):\n        for j in range(1, len(a)+1):\n            in_range = sorted(a[i:j], reverse=True)\n            out_of_range = sorted(a[:i] + a[j:])\n            additional = []\n            for kk in range(k):\n                if len(out_of_range) > 0 and len(in_range) > 0 and in_range[-1] < out_of_range[-1]:\n                    in_range.pop()\n                    additional.append(out_of_range.pop())\n            best = max(best, sum(in_range + additional))\n\n    return best\n\n\n\n\ndef __starting_point():\n    n, k = map(int, stdin.readline().split())\n    a = [int(x) for x in stdin.readline().split()]\n    stdout.write(\"{}\\n\".format(solve(a, k)))\n__starting_point()"]