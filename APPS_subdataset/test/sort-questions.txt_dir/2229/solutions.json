["import sys\nimport math\n\ndef sieve(n):\n    prime_factors = [[] for i in range(n+1)]\n    tmp = [True] * (n+1)\n    tmp[0] = tmp[1] = False\n    for i in range(2, n+1):\n        if tmp[i]:\n            for k in range(i, n+1, i):\n                tmp[k] = False\n                prime_factors[k].append(i)\n    return prime_factors\n\nn = int(sys.stdin.readline().strip())\na = list(map(int, sys.stdin.readline().strip().split(' ')))\nb = []\nforbidden_factors = set({})\nprime_factors = sieve(2000005)\nis_greater = False\nmin_available = 2\n\nfor ai in a:\n    factors = prime_factors[ai]\n    if not is_greater:\n        curr = ai\n        ok = True\n        for f in factors:\n            if f in forbidden_factors:\n                ok = False\n                break\n        if ok:\n            for f in factors:\n                forbidden_factors.add(f)\n        else:\n            is_greater = True\n            ok = False\n            while not ok:\n                curr += 1\n                ok = True\n                factors = prime_factors[curr]\n                for f in factors:\n                    if f in forbidden_factors:\n                        ok = False\n                        break\n            for f in factors:\n                forbidden_factors.add(f) \n    else:\n        curr = min_available\n        ok = True\n        factors = prime_factors[curr]\n        for f in factors:\n            if f in forbidden_factors:\n                ok = False\n                break\n        while not ok:\n            curr += 1\n            ok = True\n            factors = prime_factors[curr]\n            for f in factors:\n                if f in forbidden_factors:\n                    ok = False\n                    break\n        min_available = curr\n        for f in factors:\n            forbidden_factors.add(f)\n    b.append(str(curr))\nprint(\" \".join(b))\n", "# -*- coding: UTF-8 -*-\n\nMAX_NUM = 2000000\n\nprime_str = ('2      3      5      7     11     13     17     19     23     29 '\n        +   '31     37     41     43     47     53     59     61     67     71 '\n        +   '73     79     83     89     97    101    103    107    109    113 '\n        +  '127    131    137    139    149    151    157    163    167    173 '\n        +  '179    181    191    193    197    199    211    223    227    229 '\n        +  '233    239    241    251    257    263    269    271    277    281 '\n        +  '283    293    307    311    313    317 '\n)\nprime_list = [int(p) for p in prime_str.split()]\nused = [False] * MAX_NUM\n\nn = int(input())\na = list(map(int, input().split()))\n\n\ndef record(x):\n    t = []\n    for p in prime_list:\n        if x % p == 0:\n            while x % p == 0:\n                x = x // p\n            t.append(p)\n            if x == 1:\n                break\n    if x != 1:\n        t.append(x)\n\n    for ti in t:\n        for i in range(ti, MAX_NUM, ti):\n            used[i] = True\n\n\nb = []\nfor ai in a:\n    if not used[ai]:\n        b.append(ai)\n        record(ai)\n    else:\n        tmp = ai + 1\n        while used[tmp]:\n            tmp += 1\n        b.append(tmp)\n        record(tmp)\n        break\n\ntmp = 2\nwhile len(b) < len(a):\n    while used[tmp]:\n        tmp += 1\n    b.append(tmp)\n    record(tmp)\n\nprint(' '.join(str(x) for x in b))\n", "MAX_NUM = 2000000\n\nprime_str = ('2      3      5      7     11     13     17     19     23     29 '\n        +   '31     37     41     43     47     53     59     61     67     71 '\n        +   '73     79     83     89     97    101    103    107    109    113 '\n        +  '127    131    137    139    149    151    157    163    167    173 '\n        +  '179    181    191    193    197    199    211    223    227    229 '\n        +  '233    239    241    251    257    263    269    271    277    281 '\n        +  '283    293    307    311    313    317 '\n)\nprime_list = [int(p) for p in prime_str.split()]\nused = [False] * MAX_NUM\n\nn = int(input())\na = list(map(int, input().split()))\n\ndef record(x):\n    t = []\n    for p in prime_list:\n        if x % p == 0:\n            while x % p == 0:\n                x = x // p\n            t.append(p)\n            if x == 1:\n                break\n    if x != 1:\n        t.append(x)\n\n    for ti in t:\n        for i in range(ti, MAX_NUM, ti):\n            used[i] = True\n\nb = []\nfor ai in a:\n    if not used[ai]:\n        b.append(ai)\n        record(ai)\n    else:\n        temp = ai + 1\n        while used[temp]:\n            temp += 1\n        b.append(temp)\n        record(temp)\n        break\n\ntemp = 2\nwhile len(b) < len(a):\n    while used[temp]:\n        temp += 1\n    b.append(temp)\n    record(temp)\n\nprint(' '.join(str(x) for x in b))\n", "N = 2*(10**6)\ni = 2\np = [0 for i in range(N)]\nwhile(i*i <= N):\n\tif(p[i] == 0):\n\t\tfor j in range(i*i,N,i):\n\t\t\tp[j] = 1\n\ti += 1\na = []\nfor i in range(2,N):\n\tif(p[i] == 0):\n\t\ta.append(i)\nn = int(input())\nl = list(map(int,input().split()))\nd = dict()\nans = []\nfor i in range(n):\n\tv = []\n\ty = l[i]\n\tj = 2\n\tf = 1\n\twhile(j*j <= l[i]):\n\t\tif(l[i]%j == 0):\n\t\t\tif(j in d):\n\t\t\t\tf = 0\n\t\t\t\tbreak\n\t\t\tv.append(j)\n\t\t\twhile(l[i]%j == 0):\n\t\t\t\tl[i] /= j\n\t\tj += 1\n\tif(l[i] > 1):\n\t\tif(l[i] in d):\n\t\t\tf = 0\n\t\tv.append(l[i])\n\tif(f == 1):\n\t\tans.append(y)\n\t\tfor x in v:\n\t\t\td[x] = 1\n\telse:\n\t\tfor x in range(y,N):\n\t\t\tj = 2\n\t\t\tf = 1\n\t\t\tl[i] = x\n\t\t\twhile(j*j <= l[i]):\n\t\t\t\tif(l[i]%j == 0):\n\t\t\t\t\tif(j in d):\n\t\t\t\t\t\tf = 0\n\t\t\t\t\t\tbreak\n\t\t\t\t\twhile(l[i]%j == 0):\n\t\t\t\t\t\tl[i] /= j\n\t\t\t\tj += 1\n\t\t\tif(l[i] > 1):\n\t\t\t\tif(l[i] in d):\n\t\t\t\t\tf = 0\n\t\t\tif(f == 1):\n\t\t\t\tans.append(x)\n\t\t\t\tbreak\n\t\tbreak\nj = 2\nx = ans[-1]\nwhile(j*j <= x):\n\tif(x%j == 0):\n\t\td[j] = 1\n\t\twhile(x%j == 0):\n\t\t\tx /= j\n\tj += 1\nif(x > 1):\n\td[x] = 1\nsz = len(ans)\nfor i in a:\n\tif(sz == n):\n\t\tbreak\n\tif(i not in d):\n\t\tans.append(i)\n\t\tsz += 1\nfor i in ans:\n\tprint(i,end = \" \")\nprint()"]