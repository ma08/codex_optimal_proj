["class Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if head == None:\n            return False\n        \n        slow = head\n        fast = head.next\n        \n        while slow != fast:\n            if fast is None or fast.next is None:\n                return False\n            slow = slow.next\n            fast = fast.next.next\n        \n        return True", "class Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        slow = head\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False", "class Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        \n        slow = head\n        fast = head\n        \n        \n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        \n        return False", "class Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        nodes_seen = set()\n        while head is not None:\n            if head in nodes_seen:\n                return True\n            nodes_seen.add(head)\n            head = head.next\n        return False", "class Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        cur = head\n        check = set()\n        while cur:\n            if cur in check:\n                return True\n            check.add(cur)\n            cur = cur.next\n        return False", "class Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        try:\n            slow = head\n            fast = head.next \n            while slow is not fast:\n                slow = slow.next\n                fast = fast.next.next\n            return True\n        except:\n            return False", "class Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if head is None:\n            return False\n\n        slow, fast = head, head\n        while fast.next and fast.next.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False"]