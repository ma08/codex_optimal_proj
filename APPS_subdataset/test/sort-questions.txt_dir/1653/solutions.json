["# python3\nimport sys\n\n\ndef read_all_following_lines():\n    lines = sys.stdin.readlines()\n    return (tuple(map(int, line.split())) for line in lines)\n\n\nclass AbcString(object):\n    def __init__(self, string):\n        self.prefix_bc = [0]\n        self.a_strike = [0]\n\n        bc, strike = 0, 0\n        for symbol in string:\n            if symbol == 'A':\n                strike += 1\n            else:\n                strike = 0\n                bc += 1\n            self.prefix_bc.append(bc)\n            self.a_strike.append(strike)\n\n    def get_info(self, begin, end):\n        bc = self.prefix_bc[end] - self.prefix_bc[begin]\n        trailing_a = min(self.a_strike[end], end - begin)\n        return bc, trailing_a\n\n\ndef can_mutate(start, finish):\n    from_bc, from_a = start\n    to_bc, to_a = finish\n\n    if (from_bc & 1) != (to_bc & 1): return False\n    if from_bc > to_bc: return False\n    if from_a < to_a: return False\n\n    if from_bc == to_bc: return (from_a - to_a) % 3 == 0\n    if from_a == to_a: return from_bc != 0\n\n    # from_bc < to_bc\n    # from_a > to_a\n    return True\n\n\ndef main():\n    s = AbcString(input())\n    t = AbcString(input())\n    input()  # skip one line\n    requests = read_all_following_lines()\n\n    answer = \"\"\n    for (a, b, c, d) in requests:\n        can = can_mutate(s.get_info(a - 1, b), t.get_info(c - 1, d))\n        answer += \"1\" if can else \"0\"\n\n    print(answer)\n\n\nmain()\n", "def read():\n    s = input()\n    l = len(s)\n    r = [[0] * (l + 1), [0] * (l + 1)]\n    for i in range(l):\n        r[0][i + 1] = (r[0][i] + 1) * (s[i] == 'A')\n        r[1][i + 1] = r[1][i] + (s[i] != 'A')\n    return r\ns, t = read(), read()\nq = int(input())\nr = ''\nfor i in range(q):\n    a, b, c, d = list(map(int, input().split()))\n    sb = s[1][b] - s[1][a] + (s[0][a] == 0)\n    sa = s[0][b] - (s[0][a] - 1) * (sb == 0)\n    tb = t[1][d] - t[1][c] + (t[0][c] == 0)\n    ta = t[0][d] - (t[0][c] - 1) * (tb == 0)\n    if any([sb > tb, sa < ta, tb - sb & 1, sb == tb and (sa - ta) % 3, sa == ta and not sb and tb]):\n        r += '0'\n    else:\n        r += '1'\nprint(r)\n", "def main():\n    s, t = input(), input()\n    s_info, t_info = fast_counter(s), fast_counter(t)\n    \n    queries = int(input())\n    answer = ''\n    for _ in range(queries):\n        l1, r1, l2, r2 = list(map(int, input().split()))\n        l1, l2 = l1 - 1, l2 - 1\n\n        from_mask = (s_info[1][r1] - s_info[1][l1], min(r1 - l1, s_info[0][r1]))\n        to_mask = (t_info[1][r2] - t_info[1][l2], min(r2 - l2, t_info[0][r2]))\n\n        if can_transform(from_mask, to_mask):\n            answer += '1'\n        else:\n            answer += '0'\n\n    print(answer)\n\n\ndef can_transform(from_mask, to_mask):\n    if from_mask[0] > to_mask[0]:\n        return False\n    elif (to_mask[0] - from_mask[0]) % 2 != 0:\n        return False\n    elif to_mask[0] == from_mask[0]:\n        if to_mask[1] > from_mask[1]:\n            return False\n        return (from_mask[1] - to_mask[1]) % 3 == 0\n    elif from_mask[0] == 0:\n        return to_mask[1] < from_mask[1]\n    else:\n        return to_mask[1] <= from_mask[1]\n\n\ndef mask(l, r, info):\n    return (info[1][r] - info[1][l], min(r - l, info[0][r]))\n\n\ndef fast_counter(s):\n    a_last, b_count = [0], [0]\n    for c in s:\n        if c == 'A':\n            a_last.append(a_last[-1] + 1)\n            b_count.append(b_count[-1])\n        else:\n            a_last.append(0)\n            b_count.append(b_count[-1] + 1)\n    return (a_last, b_count)\n            \nmain()\n", "def main():\n    s, t = input(), input()\n    s_info, t_info = fast_counter(s), fast_counter(t)\n    \n    queries = int(input())\n    answer = ''\n    for _ in range(queries):\n        l1, r1, l2, r2 = list(map(int, input().split()))\n        l1, l2 = l1 - 1, l2 - 1\n\n        from_mask = mask(l1, r1, s_info)\n        to_mask = mask(l2, r2, t_info)\n\n        if can_transform(from_mask, to_mask):\n            answer += '1'\n        else:\n            answer += '0'\n\n    print(answer)\n\n\ndef can_transform(from_mask, to_mask):\n    if from_mask[0] > to_mask[0]:\n        return False\n    elif (to_mask[0] - from_mask[0]) % 2 != 0:\n        return False\n    elif to_mask[0] == from_mask[0]:\n        if to_mask[1] > from_mask[1]:\n            return False\n        return (from_mask[1] - to_mask[1]) % 3 == 0\n    elif from_mask[0] == 0:\n        return to_mask[1] < from_mask[1]\n    else:\n        return to_mask[1] <= from_mask[1]\n\n\ndef mask(l, r, info):\n    return (info[1][r] - info[1][l], min(r - l, info[0][r]))\n\n\ndef fast_counter(s):\n    a_last, b_count = [0], [0]\n    for c in s:\n        if c == 'A':\n            a_last.append(a_last[-1] + 1)\n            b_count.append(b_count[-1])\n        else:\n            a_last.append(0)\n            b_count.append(b_count[-1] + 1)\n    return (a_last, b_count)\n            \nmain()\n", "def main():\n    s, t = input(), input()\n    s_info, t_info = fast_counter(s), fast_counter(t)\n    \n    queries = int(input())\n    answer = ''\n    for _ in range(queries):\n        l1, r1, l2, r2 = list(map(int, input().split()))\n        l1, l2 = l1 - 1, l2 - 1\n\n        from_mask = mask(l1, r1, s_info)\n        to_mask = mask(l2, r2, t_info)\n\n        if can_transform(from_mask, to_mask):\n            answer += '1'\n        else:\n            answer += '0'\n\n    print(answer)\n\n\ndef can_transform(from_mask, to_mask):\n    if from_mask[0] > to_mask[0]:\n        return False\n    elif (to_mask[0] - from_mask[0]) % 2 != 0:\n        return False\n    elif to_mask[0] == from_mask[0]:\n        if to_mask[1] > from_mask[1]:\n            return False\n        return (from_mask[1] - to_mask[1]) % 3 == 0\n    elif from_mask[0] == 0:\n        return to_mask[1] < from_mask[1]\n    else:\n        return to_mask[1] <= from_mask[1]\n\n\ndef mask(l, r, info):\n    return (info[1][r] - info[1][l], min(r - l, info[0][r]))\n\n\ndef fast_counter(s):\n    a_last, b_count = [0], [0]\n    for c in s:\n        if c == 'A':\n            a_last.append(a_last[-1] + 1)\n            b_count.append(b_count[-1])\n        else:\n            a_last.append(0)\n            b_count.append(b_count[-1] + 1)\n    return (a_last, b_count)\n\n\nmain()\n", "def pref_counts(string, char):\n    result = [0]\n    for c in string:\n        result.append(result[-1] + (c == char))\n    return result\n\ndef left_counts(string, char):\n    result = [0]\n    for c in string:\n        result.append(result[-1] + 1 if c == char else 0)\n    return result\n\ns = input().replace(\"C\", \"B\")\nt = input().replace(\"C\", \"B\")\ns_bcounts, t_bcounts = pref_counts(s, \"B\"), pref_counts(t, \"B\")\ns_lcounts, t_lcounts = left_counts(s, \"A\"), left_counts(t, \"A\")\nfor i in range(int(input())):\n    a, b, c, d = list(map(int, input().split()))\n    s_b = s_bcounts[b] - s_bcounts[a - 1]\n    t_b = t_bcounts[d] - t_bcounts[c - 1]\n    s_a = min(s_lcounts[b], b - a + 1)\n    t_a = min(t_lcounts[d], d - c + 1)\n    answer = False\n    if s_b & 1 == t_b & 1:\n        if s_b < t_b:\n            answer = s_a - (s_b == 0) >= t_a\n        elif s_b == t_b:\n            answer = s_a >= t_a and (s_a - t_a) % 3 == 0\n    print(int(answer), end = \"\")\n\n", "def pref_counts(string, char):\n    result = [0]\n    for c in string:\n        result.append(result[-1] + (c == char))\n    return result\n\ndef left_counts(string, char):\n    result = [0]\n    for c in string:\n        result.append(result[-1] + 1 if c == char else 0)\n    return result\n\ns = input().replace(\"C\", \"B\")\nt = input().replace(\"C\", \"B\")\ns_bcounts, t_bcounts = pref_counts(s, \"B\"), pref_counts(t, \"B\")\ns_lcounts, t_lcounts = left_counts(s, \"A\"), left_counts(t, \"A\")\nfor i in range(int(input())):\n    a, b, c, d = list(map(int, input().split()))\n    s_b = s_bcounts[b] - s_bcounts[a - 1]\n    t_b = t_bcounts[d] - t_bcounts[c - 1]\n    s_a = min(s_lcounts[b], b - a + 1)\n    t_a = min(t_lcounts[d], d - c + 1)\n    answer = False\n    if s_b & 1 == t_b & 1:\n        if s_b < t_b:\n            answer = s_a - (s_b == 0) >= t_a\n        elif s_b == t_b:\n            answer = s_a >= t_a and (s_a - t_a) % 3 == 0\n    print(int(answer), end = \"\")\n\n"]