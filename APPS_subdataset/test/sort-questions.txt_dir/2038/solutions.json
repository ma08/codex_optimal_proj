["# from bisect import bisect_left\n\n# (n) = (int(x) for x in input().split())\nn = int(input())\na = [int(_) - 1 for _ in input().split()]\n\nb = [0 for _ in a]\nfor id, v in enumerate(a):\n    b[v] = id\n\nans = []\nfor i in range(n):\n    pos = b[i]\n    target = i\n    old_v = a[target]\n    if pos == target:\n        continue\n\n    # do swap\n    b[old_v] = pos\n    b[i] = i\n    a[target] = i\n    a[pos] = old_v\n\n\n    if (abs(pos - target) * 2 >= n):\n        ans.append((pos, target))\n        continue\n    elif max(pos, target) < n // 2:\n        helper = n - 1\n        ans.append((pos, helper))\n        ans.append((target, helper))\n        ans.append((pos, helper))\n    elif min(pos, target) >= n // 2:\n        helper = 0\n        ans.append((pos, helper))\n        ans.append((target, helper))\n        ans.append((pos, helper))\n    else:\n        L = 0\n        R = n - 1\n        if pos > target:\n            (pos, target) = (target, pos)\n        ans.append((pos, R))\n        ans.append((L, R))\n        ans.append((L, target))\n        ans.append((L, R))\n        ans.append((pos, R))\n\nprint(len(ans))\nfor i in ans:\n    print(i[0] + 1, i[1] + 1)\n", "input()\np=[int(x)-1 for x in input().split()]\npos=[0] * len(p)\nfor i, x in enumerate(p):\n    pos[x]=i\n# print(pos)\nans = []\nfor i, x in enumerate(p):\n    # print('i, x', i, x)\n    if i == x:\n        continue\n    # find x\n    i_pos = pos[i]\n    # print('i, i_pos', i, i_pos)\n    if 2 * abs(i_pos - i) < len(p):\n        if 2 * i_pos >= len(p) and 2 * i >= len(p):\n            # swap with first\n            # print('swap with first')\n            ans.append((0, i_pos))\n            ans.append((0, i))\n            ans.append((0, i_pos))\n        elif 2 * ((len(p) - 1) - i_pos) >= len(p) and 2 * ((len(p) - 1) - i) >= len(p):\n            # swap with last\n            # print('swap with last')\n            ans.append((len(p) - 1, i_pos))\n            ans.append((len(p) - 1, i))\n            ans.append((len(p) - 1, i_pos))\n        else:\n            # 5 swaps\n            # print('5 swaps')\n            fi = min(i_pos, i)\n            la = max(i_pos, i)\n            ans.append((fi, len(p) - 1))\n            ans.append((0, len(p) - 1))\n            ans.append((0, la))\n            ans.append((0, len(p) - 1))\n            ans.append((fi, len(p) - 1))\n    else:\n        ans.append((i, i_pos))\n    p[i_pos], p[i] = p[i], p[i_pos]\n    pos[p[i_pos]], pos[p[i]] = pos[p[i]], pos[p[i_pos]]\n    # print(ans)\nprint(len(ans))\nfor a, b in ans:\n    print(a+1,b+1)\nassert sorted(p) == p\n", "N = int(input())\nM = N//2\nA = [int(a)-1 for a in input().split()]\nB = [0] * (N)\nANS = []\nfor i in range(N):\n    B[A[i]] = i\n\ndef calc(i):\n    j = B[i]\n    if j == i:\n        return 0\n    if abs(j - i) >= M:\n        ANS.append(str(i+1)+\" \"+str(j+1))\n    elif i < M and j < M:\n        ANS.append(str(i+1)+\" \"+str(N))\n        ANS.append(str(j+1)+\" \"+str(N))\n        ANS.append(str(i+1)+\" \"+str(N))\n    elif i >= M and j >= M:\n        ANS.append(str(1)+\" \"+str(i+1))\n        ANS.append(str(1)+\" \"+str(j+1))\n        ANS.append(str(1)+\" \"+str(i+1))\n    elif i < M:\n        ANS.append(str(i+1)+\" \"+str(N))\n        ANS.append(str(1)+\" \"+str(N))\n        ANS.append(str(1)+\" \"+str(j+1))\n        ANS.append(str(1)+\" \"+str(N))\n        ANS.append(str(i+1)+\" \"+str(N))\n    else:\n        ANS.append(str(j+1)+\" \"+str(N))\n        ANS.append(str(1)+\" \"+str(N))\n        ANS.append(str(1)+\" \"+str(i+1))\n        ANS.append(str(1)+\" \"+str(N))\n        ANS.append(str(j+1)+\" \"+str(N))\n        \n    m = A[i]\n    A[i], A[B[i]] = i, A[i]\n    B[m] = B[i]\n    B[i] = i\n\nfor i in range(N):\n    calc(i)\nprint(len(ANS))\n\nprint(\"\\n\".join(ANS))", "n =  int(input())\nb = list((list(map(int, input().split()))))\n\na = list(zip(b,list(range(n))))\n\na.sort()\n\na = dict(a)\n\nswaps = []\n\ndef swap(i, j):\n    if i==j:\n        return []\n    if 2*(abs(i-j))  >= n:\n        return [(i, j)]\n    ans = []\n\n    ii  = i\n    jj = j\n    if i < n//2:\n        ans.append((i, n-1))\n        ii = n-1\n    if j>=n//2:\n        ans.append((j, 0))\n        jj = 0\n\n    ans.append((ii, jj))\n\n    if i < n//2:\n        ans.append((i, n-1))\n    if j>=n//2:\n        ans.append((j, 0))\n\n    return ans\n\n#print(a)\nans = []\nfor i in range(n):\n    ans.extend(swap(i, a[i+1]))\n\n    t =b[i]\n    b[i] = b[a[i+1]]\n    b[a[i+1]] = t\n    a[t]  = a[i+1]\n    a[i+1] =  i\n#print(a)\nprint(len(ans))\nfor k in ans:\n    print(k[0]+1, k[1] +1)\n", "n = int(input())\nn2 = n // 2\np = list(map(int, input().split()))\nd = [0] * n\nfor i, v in enumerate(p):\n    d[v-1] = i\n    \nr = []\n\ndef sw(i, j):\n    r.append((i+1, j+1))\n\ndef swap(i, j):\n    if i == j:\n        pass\n    elif abs(i-j) >= n2:\n        sw(i,j)\n        p[j] = p[i]\n    else:\n        ti = n-1 if i < n2 else 0\n        tj = n-1 if j < n2 else 0\n        sw(i, ti)\n        if ti != tj: sw(ti, tj)\n        sw(tj, j)\n        if ti != tj: sw(ti, tj)\n        sw(i, ti)\n        p[j] = p[i]\n\nfor i, v in enumerate(p):\n    j = d[i]\n    swap(i, j)\n    d[v-1] = j\n\nprint(len(r))\nprint(\"\\n\".join(f\"{a} {b}\" for a, b in r))\n", "n=int(input())\na=[0]  + list(map(int,input().split()))\nd={}\nb=[]\nfor i in range(1,n+1):\n    d[a[i]]=i\nm=0    \nfor i in range(1,n+1):\n    ele=a[i]\n    if ele!=i and abs(i-d[i])*2>=n:\n        m+=1\n        b.append([i,d[i]])\n        a[i]=i\n        a[d[i]]=ele\n        d[ele]=d[i]\n        d[i]=i\n        \n        # print(\"a\")\n    elif ele!=i and abs(i-d[i])*2<n and i<=n//2 and 2*(d[i]-1)>=n:\n        m+=5\n        b.append([1,d[i]])\n        b.append([1,n])\n        b.append([i,n])\n        b.append([1,n])\n        b.append([1,d[i]])\n        a[i]=i\n        a[d[i]]=ele\n        \n        d[ele]=d[i]\n        d[i]=i\n        # print(\"b\")\n    elif ele!=i and abs(i-d[i])*2<n and i<=n//2 and 2*(d[i]-1)<n:\n        m+=3\n        b.append([n,d[i]])\n        b.append([i,n])\n        b.append([n,d[i]])\n        a[i]=i\n        a[d[i]]=ele\n        \n        d[ele]=d[i]\n        d[i]=i\n        # print(\"b\")\n    \n        \n    elif ele!=i and abs(i-d[i])*2<n:\n        m+=3\n        b.append([1,d[i]])\n        b.append([i,1])\n        b.append([1,d[i]])\n        a[i]=i\n        a[d[i]]=ele\n        d[ele]=d[i]\n        d[i]=i\n        # print(\"c\")\n    # print(d,a)    \nprint(m)\nfor i in b:\n    print(*i)\n        \n# print(a)        \n        \n        \n        \n", "n=int(input())\nl=list(map(int,input().split()))\nll=[-1]*(n+1)\nfor i in range(n):\n    ll[l[i]]=i\nres=[]\n#print(ll)\nfor k in range(1,n+1):\n    i=k\n    j=ll[k]\n    #print(i,j+1)\n    if(2*abs((j+1)-i)>=n):\n        res.append((i,j+1))\n        l[i-1],l[j]=l[j],l[i-1]\n        ll[l[i-1]],ll[l[j]]=ll[l[j]],ll[l[i-1]]\n    elif(i!=(j+1)):\n        if(2*abs(j+1-n)>=n and 2*abs(i-n)>=n):\n            res.append((i,n))\n            l[i-1],l[n-1]=l[n-1],l[i-1]\n            ll[l[i-1]],ll[l[n-1]]=ll[l[n-1]],ll[l[i-1]]\n            res.append((j+1,n))\n            l[j],l[n-1]=l[n-1],l[j]\n            ll[l[j]],ll[l[n-1]]=ll[l[n-1]],ll[l[j]]\n            res.append((i,n))\n            l[i-1],l[n-1]=l[n-1],l[i-1]\n            ll[l[i-1]],ll[l[n-1]]=ll[l[n-1]],ll[l[i-1]]\n        elif(2*abs(j+1-1)>=n and 2*abs(i-1)>=n):\n            res.append((i,1))\n            l[i-1],l[1-1]=l[1-1],l[i-1]\n            ll[l[i-1]],ll[l[1-1]]=ll[l[1-1]],ll[l[i-1]]\n            res.append((j+1,1))\n            l[j],l[1-1]=l[1-1],l[j]\n            ll[l[j]],ll[l[1-1]]=ll[l[1-1]],ll[l[j]]\n            res.append((i,1))\n            l[i-1],l[1-1]=l[1-1],l[i-1]\n            ll[l[i-1]],ll[l[1-1]]=ll[l[1-1]],ll[l[i-1]]\n        else:\n            #print(\"lol\")\n            if(i>(j+1)):\n                i,j=j+1,i-1\n            res.append((i,n))\n            l[i-1],l[n-1]=l[n-1],l[i-1]\n            ll[l[i-1]],ll[l[n-1]]=ll[l[n-1]],ll[l[i-1]]\n            res.append((j+1,1))\n            l[j],l[1-1]=l[1-1],l[j]\n            ll[l[j]],ll[l[1-1]]=ll[l[1-1]],ll[l[j]]\n            res.append((n,1))\n            l[n-1],l[1-1]=l[1-1],l[n-1]\n            ll[l[n-1]],ll[l[1-1]]=ll[l[1-1]],ll[l[n-1]]\n            res.append((i,n))\n            l[i-1],l[n-1]=l[n-1],l[i-1]\n            ll[l[i-1]],ll[l[n-1]]=ll[l[n-1]],ll[l[i-1]]\n            res.append((j+1,1))\n            l[j],l[1-1]=l[1-1],l[j]\n            ll[l[j]],ll[l[1-1]]=ll[l[1-1]],ll[l[j]]\n    #if(l3==l):\n        #break\n    #print(l,ll,sep=\"\\n\")\nprint(len(res))\nfor i in res:\n    print(i[0],i[1])\n#print(l)\n", "n = int(input())\np = list(map(int, input().split()))\n\nps = p.copy()\nps.sort()\ndp = dict()\nds = dict()\nfor i in range(n):\n    if p[i] in dp:\n        dp[p[i]] += [i]\n    else:\n        dp[p[i]] = [i]\n        ds[p[i]] = 0\n\nlop = []\n\nfor i in range(n):\n    if p[i] != ps[i]:\n        a = i\n        b = dp[ps[i]][ds[ps[i]]]\n        if abs(b - a) >= n//2:\n            lop.append([a+1, b+1])\n        else:\n            if a < n//2 and b < n//2:\n                bl = [n]\n            elif a >= n//2 and b >= n//2:\n                bl = [1]\n            elif a < n//2:\n                bl = [n, 1]\n            else:\n                bl = [1, n]\n            if len(bl) == 2:\n                lop.append([a+1, bl[0]])\n                lop.append([bl[0], bl[1]])\n                lop.append([bl[1], b+1])\n                lop.append([bl[0], bl[1]])\n                lop.append([a+1, bl[0]])\n            else:\n                lop.append([a+1, bl[0]])\n                lop.append([b+1, bl[0]])\n                lop.append([a+1, bl[0]])\n        p[a], p[b] = p[b], p[a]\n        dp[p[a]][ds[p[a]]], dp[p[b]][ds[p[b]]] = dp[p[b]][ds[p[b]]], dp[p[a]][ds[p[a]]]\n    ds[p[i]] += 1\n\nprint(len(lop))\nfor op in lop:\n    print(*op)\n", "# from bisect import bisect_left\nimport sys\n\n# (n) = (int(x) for x in input().split())\nn = int(input())\na = [int(_) - 1 for _ in sys.stdin.readline().split()]\n\nb = [0 for _ in a]\nfor id, v in enumerate(a):\n    b[v] = id\n\nans = []\nfor i in range(n):\n    pos = b[i]\n    target = i\n    old_v = a[target]\n    if pos == target:\n        continue\n\n    # do swap\n    b[old_v] = pos\n    b[i] = i\n    a[target] = i\n    a[pos] = old_v\n\n\n    if (abs(pos - target) * 2 >= n):\n        ans.append((pos, target))\n        continue\n    elif max(pos, target) < n // 2:\n        helper = n - 1\n        ans.append((pos, helper))\n        ans.append((target, helper))\n        ans.append((pos, helper))\n    elif min(pos, target) >= n // 2:\n        helper = 0\n        ans.append((pos, helper))\n        ans.append((target, helper))\n        ans.append((pos, helper))\n    else:\n        L = 0\n        R = n - 1\n        if pos > target:\n            (pos, target) = (target, pos)\n        ans.append((pos, R))\n        ans.append((L, R))\n        ans.append((L, target))\n        ans.append((L, R))\n        ans.append((pos, R))\n\nprint(len(ans))\nfor i in ans:\n    print(i[0] + 1, i[1] + 1)", "# from bisect import bisect_left\nimport sys\n\n# (n) = (int(x) for x in input().split())\nn = int(input())\na = [int(_) - 1 for _ in sys.stdin.readline().split()]\n\nb = [0 for _ in a]\nfor id, v in enumerate(a):\n    b[v] = id\n\nans = []\nfor i in range(n):\n    pos = b[i]\n    target = i\n    old_v = a[target]\n    if pos == target:\n        continue\n\n    # do swap\n    b[old_v] = pos\n    b[i] = i\n    a[target] = i\n    a[pos] = old_v\n\n\n    if (abs(pos - target) * 2 >= n):\n        ans.append((pos, target))\n        continue\n    elif max(pos, target) < n // 2:\n        helper = n - 1\n        ans.append((pos, helper))\n        ans.append((target, helper))\n        ans.append((pos, helper))\n    elif min(pos, target) >= n // 2:\n        helper = 0\n        ans.append((pos, helper))\n        ans.append((target, helper))\n        ans.append((pos, helper))\n    else:\n        L = 0\n        R = n - 1\n        if pos > target:\n            (pos, target) = (target, pos)\n        ans.append((pos, R))\n        ans.append((L, R))\n        ans.append((L, target))\n        ans.append((L, R))\n        ans.append((pos, R))\n\nprint(len(ans))\nprint(\"\\n\".join(f\"{i[0] + 1} {i[1] + 1}\" for i in ans))\n# for i in ans:\n#     print(i[0] + 1, i[1] + 1)\n"]