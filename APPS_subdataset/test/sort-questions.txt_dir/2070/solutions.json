["from collections import defaultdict\n\nl = list(map(int, input().split()))\nst = input()\ns = [(ord(i) - ord('a')) for i in st]\ntrack = [defaultdict(lambda: 0) for i in range(26)]\nres = 0\ns = [0] + s\npre = [0 for i in range(len(s))]\nfor i in range(1, len(s)):\n\tpre[i] = pre[i-1] + l[s[i]]\nfor i in range(1, len(s)):\n\tres += track[s[i]][pre[i-1]]\n\ttrack[s[i]][pre[i]] += 1\nprint(res)", "import sys\nread = lambda t=int: list(map(t,sys.stdin.readline().split()))\narray = lambda *ds: [array(*ds[1:]) for _ in range(ds[0])] if ds else 0\n\nfrom collections import Counter\n\nxs = read()\ns, = read(str)\n\ncnt = Counter()\na = 0\nres = 0\nfor c in s:\n    res += cnt[(c,a)]\n    a += xs[ord(c)-ord('a')]\n    cnt[(c,a)] += 1\n\nprint(res)\n", "def solve(left, right) :\n    if left == right :\n        return 0\n    if left+1 == right :\n        return 0\n    mid = (left+right)//2\n    ret = solve(left, mid) + solve(mid, right)\n    val = 0\n    D = [dict() for i in range(26)]\n    for i in range(mid, right) :\n        c = L[i]\n        if i != mid :            \n            d = L[i-1]\n            val += A[d]\n        if val in D[c] : D[c][val] += 1\n        else : D[c][val] = 1\n    val = 0\n    for i in range(mid, left, -1) :\n        c = L[i-1]\n        if i != mid :\n            d = L[i]\n            val += A[d]\n        if -val in D[c] :\n            ret += D[c][-val]\n    return ret\n\nA = list(map(int, input().split()))\nS = input()\nL = [ord(i)-ord('a') for i in S]\n\nans = solve(0, len(L))\nprint(ans)\n", "A = list(map(int, input().split()))\nL = [ord(i)-ord('a') for i in input()]\n\nscore = ans = 0\nD = [dict() for i in range(26)]\nfor i in L :\n    if score in D[i] :\n        ans += D[i][score]\n    score += A[i]\n    if score not in D[i] :\n        D[i][score] = 1\n    else :\n        D[i][score] += 1\n\nprint(ans)\n", "from collections import Counter\nA = list(map(int, input().split()))\nL = [ord(i)-ord('a') for i in input()]\n\nscore = ans = 0\nD = [Counter() for i in range(26)]\nfor i in L :\n    ans += D[i][score]\n    score += A[i]\n    D[i][score] += 1\n\nprint(ans)\n", "c = [int(i) for i in input().split()]\na = [ord(x) - ord('a') for x in input()]\nn = len(a)\nl = [[] for i in range(26)]\nr = [[] for i in range(26)]\ns = 0\nans = 0\nfor i in range(n-1):\n    s += c[a[i]]\n    l[a[i]] += [(s, i)]\n    r[a[i+1]] += [(s, i)]\nfor i in range(26):\n    n, m = len(l[i]), len(r[i])\n    if n < 1 or m < 1: continue\n    l[i].sort()\n    r[i].sort()\n    a[m - 1] = m - 1\n    for j in range(m - 2, -1, -1):\n        if r[i][j][0] == r[i][j+1][0]:\n            a[j] = a[j+1]\n        else:\n            a[j] = j\n    y = 0\n    for j in range(n):\n        while y < m and r[i][y][0] < l[i][j][0]: y += 1\n        while y < m and r[i][y][0] == l[i][j][0] and r[i][y][1] < l[i][j][1]: y += 1\n        if y == m: break\n        if r[i][y][0] == l[i][j][0]:\n            ans += a[y] - y + 1\nprint(ans)", "def main():\n    xlat = list(map(int, input().split()))\n    dd = [{} for _ in range(26)]\n    m = res = 0\n    s = input()\n    for c in s:\n        cx = ord(c) - 97\n        d = dd[cx]\n        res += d.get(m, 0)\n        m += xlat[cx]\n        d[m] = d.get(m, 0) + 1\n    print(res)\n\n\ndef __starting_point():\n    main()\n__starting_point()", "A = list(map(int, input().split()))\nS = [ord(x) - ord('a') for x in input()]\n\nscore = ans = 0\nD = [dict() for _ in range(26)]\n\nfor i in S:\n    if score in D[i]:\n        ans += D[i][score]\n    score += A[i]\n    if score in D[i]:\n        D[i][score] += 1\n    else:\n        D[i][score] = 1\nprint(ans)", "arr = [int(i) for i in input().split()]\nr = [{} for i in range(26)]\nj = 1\nres = 0\nsum = [0] * (10 ** 5 + 1)\nfor i in input():\n    i = ord(i) - ord('a')\n    sum[j] = sum[j - 1] + arr[i]\n    if sum[j - 1] in r[i]:\n        res += r[i][sum[j - 1]]\n    if sum[j] in r[i]:\n        r[i][sum[j]] += 1\n    else:\n        r[i][sum[j]] = 1\n    j += 1\nprint(res)", "w = [int(x) for x in input().split()]\nc = [{} for i in range(26)]\nval, s = 0, 0\nfor i in [ord(ch) - ord('a') for ch in input()]:\n    if s - w[i] in c[i]:\n        val += c[i][s - w[i]]\n    c[i][s] = c[i][s] + 1 if s in c[i] else 1\n    s += w[i]\nprint(val)", "import sys\n\n#sys.stdin = open('in.txt', 'rt')\n\na = list(map(int, input().split()))\ns = input().strip()\nw = [(0, -1)]\nsum = 0\nfor i in enumerate(s):\n    sum += a[ord(i[1]) - ord('a')]\n    w.append((sum, i[0]))\nw.sort()\ndp = [0] * 26\nanswer = 0\nfor i in enumerate(w):\n    if i[0] >= 1 and i[1][0] != w[i[0] - 1][0]:\n        dp = [0] * 26\n    if i[1][1] >= 0:\n        dp[ord(s[i[1][1]]) - ord('a')] += 1\n    if i[1][1] < len(s) - 1:\n        answer += dp[ord(s[i[1][1] + 1]) - ord('a')]\nprint(answer)", "from collections import Counter\nA = list(map(int, input().split()))\nL = [ord(i)-ord('a') for i in input()]\n\nscore = ans = 0\nD = [Counter() for i in range(26)]\nfor i in L :\n    ans += D[i][score]\n    score += A[i]\n    D[i][score] += 1\n\nprint(ans)", "def main():\n    from collections import defaultdict\n    tr = [defaultdict(lambda: 0) for i in range(26)]\n    a = list(map(int, input().split()))\n    s = input()\n    count = 0\n    m = [0]*26\n    num = [0]*len(s)\n    pos = []\n    for i in range(26):\n        pos.append(list())\n    for i in range(len(s)):\n        num[i] += a[ord(s[i])-ord('a')]\n        if i:\n            num[i] += num[i-1]\n        pos[ord(s[i])-ord('a')].append(i)\n    #print(pos, num)\n    for i in range(26):\n        if len(pos[i])> 1:\n            for j in range(len(pos[i])):\n                count += tr[i][num[pos[i][j]-1]]\n                tr[i][num[pos[i][j]]] += 1\n    print(count)\n    #print(a, s)\ndef __starting_point():\n    main()\n\n__starting_point()", "def main():\n    from collections import defaultdict\n    a = list(map(int, input().split()))\n    s = input()\n    count = 0\n    m = [0]*26\n    num = [0]*len(s)\n    pos = []\n    for i in range(26):\n        pos.append(list())\n    for i in range(len(s)):\n        num[i] += a[ord(s[i])-ord('a')]\n        if i:\n            num[i] += num[i-1]\n        pos[ord(s[i])-ord('a')].append(i)\n    #print(pos, num)\n    for i in range(26):\n        tr = defaultdict(lambda: 0)\n        if len(pos[i])> 1:\n            for j in range(len(pos[i])):\n                count += tr[num[pos[i][j]-1]]\n                tr[num[pos[i][j]]] += 1\n    print(count)\n    #print(a, s)\ndef __starting_point():\n    main()\n\n__starting_point()", "def main():\n    from collections import defaultdict\n    a = list(map(int, input().split()))\n    s = input()\n    count = 0\n    m = [0]*26\n    num = [0]*len(s)\n    pos = []\n    for i in range(26):\n        pos.append(list())\n    for i in range(len(s)):\n        num[i] += a[ord(s[i])-ord('a')]\n        if i:\n            num[i] += num[i-1]\n        pos[ord(s[i])-ord('a')].append(i)\n    #print(pos, num)\n    for i in range(26):\n        tr = defaultdict(lambda: 0)\n        if len(pos[i])> 1:\n            for j in range(len(pos[i])):\n                count += tr[num[pos[i][j]-1]]\n                tr[num[pos[i][j]]] += 1\n    print(count)\n    #print(a, s)\ndef __starting_point():\n    main()\n\n__starting_point()", "#!/usr/bin/env python3\n\nfrom collections import defaultdict\n\n\ndef process_letter(nums):\n    d = {}\n    for i in range(26):\n        assert(chr(ord('a') + i).islower())\n        d[chr(ord('a') + i)] = nums[i]\n    return d\n\n\ndic = process_letter([int(x) for x in input().split()])\ns = input()\ncurrent = 0\nvalue = defaultdict(int)\nans = 0\nfor c in s:\n    ans += value[(c, current)]\n    current += dic[c]\n    value[(c, current)] += 1\nprint(ans)", "arr = list(map(int, input().split()))\nastr = input()\nlength = len(astr)\n\nans = 0\ntsum = 0\nst = {}\n\nfor i in range(length):\n    st.setdefault(astr[i], {})\n    ans += st[astr[i]].get(tsum, 0)\n    tsum += arr[ord(astr[i]) - 97]\n    st[astr[i]][tsum] = st[astr[i]].get(tsum, 0) + 1\n\nprint(ans)\n", "c = [int(i) for i in input().split()]\na = [ord(x) - ord('a') for x in input()]\nn = len(a)\nl = [[] for i in range(26)]\nr = [[] for i in range(26)]\ns = 0\nans = 0\nfor i in range(n-1):\n    s += c[a[i]]\n    l[a[i]] += [(s, i)]\n    r[a[i+1]] += [(s, i)]\nfor i in range(26):\n    n, m = len(l[i]), len(r[i])\n    if n < 1 or m < 1: continue\n    l[i].sort()\n    r[i].sort()\n    a[m - 1] = m - 1\n    for j in range(m - 2, -1, -1):\n        if r[i][j][0] == r[i][j+1][0]:\n            a[j] = a[j+1]\n        else:\n            a[j] = j\n    y = 0\n    for j in range(n):\n        while y < m and r[i][y][0] < l[i][j][0]: y += 1\n        while y < m and r[i][y][0] == l[i][j][0] and r[i][y][1] < l[i][j][1]: y += 1\n        if y == m: break\n        if r[i][y][0] == l[i][j][0]:\n            ans += a[y] - y + 1\nprint(ans)", "#!/usr/bin/env python\n# coding=utf-8\n\nfrom collections import Counter\nA = list(map(int, input().split()))\nL = [ord(i) - ord('a') for i in input()]\nscore = ans = 0\nD = [Counter() for i in range(26)]\nfor i in L:\n    ans += D[i][score]\n    score += A[i]\n    D[i][score] += 1;\nprint(ans)\n", "def solve(left, right) :\n    if left == right :\n        return 0\n    if left+1 == right :\n        return 0\n    mid = (left+right)//2\n    ret = solve(left, mid) + solve(mid, right)\n    val = 0\n    D = [dict() for i in range(26)]\n    for i in range(mid, right) :\n        c = L[i]\n        if i != mid :            \n            d = L[i-1]\n            val += A[d]\n        if val in D[c] : D[c][val] += 1\n        else : D[c][val] = 1\n    val = 0\n    for i in range(mid, left, -1) :\n        c = L[i-1]\n        if i != mid :\n            d = L[i]\n            val += A[d]\n        if -val in D[c] :\n            ret += D[c][-val]\n    return ret\n\nA = list(map(int, input().split()))\nS = input()\nL = [ord(i)-ord('a') for i in S]\n\nans = solve(0, len(L))\nprint(ans)", "a = list(map(int,input().split()))\nstr = list(input())\ndx = ord('a')\nmp = [{} for i in range(26)]\nsum = 0\nans = 0\nfor i in range(len(str)):\n    d = ord(str[i])-dx\n    if sum in mp[d]:\n        ans += mp[d][sum]\n    sum += a[d]\n    if sum in mp[d]:\n        mp[d][sum] += 1\n    else:\n        mp[d][sum] = 1\nprint(ans)\n", "__author__ = 'Andrey'\n\n\ndef val(char):\n    nonlocal values\n    return values[ord(char) - ord(\"a\")]\n\n\nvalues = list(map(int, input().split()))\ns = input()\nprefix_sums = [val(s[0])]\nfor q in range(1, len(s)):\n    prefix_sums.append(prefix_sums[q - 1] + val(s[q]))\nbig_dict = dict()\nfor i in range(97, 97 + 26):\n    big_dict[chr(i)] = dict()\nans = 0\nfor index in range(len(s)):\n    letter = s[index]\n    if index > 0:\n        ans += big_dict[letter].get(prefix_sums[index - 1], 0)\n    big_dict[letter][prefix_sums[index]] = big_dict[letter].get(prefix_sums[index], 0) + 1\nprint(ans)", "a=list(map(int,input().split()))\ns=input()\nd=[]\nfor i in range(26):\n    d.append({})\nsm=0\nk=0\nfor x in s:\n    n=ord(x)-ord('a')\n    k+=d[n].get(sm,0)\n    sm+=a[n]\n    d[n][sm]=d[n].get(sm,0)+1\nprint(k)\n", "import string\nfrom collections import defaultdict\n\nscores = [int(x) for x in input().split()]\nscore_dict = {letter: scores[idx] for idx, letter in enumerate(string.ascii_lowercase)}\n\ns = input()\n\n\npartial_sums = [0]\nencounters = {letter: [] for idx, letter in enumerate(string.ascii_lowercase)}\n\nfor idx, c in enumerate(s):\n    partial_sums.append(partial_sums[-1] + score_dict[c])\n    encounters[c].append(idx)\n    \npartial_sums = partial_sums[1:]\n\ncount = 0\n\nfor letter in encounters:\n    \n    score_count_dict = defaultdict(int)\n    \n    for letter_idx in encounters[letter]:\n\n        count += score_count_dict[partial_sums[letter_idx - 1]]\n        score_count_dict[partial_sums[letter_idx]] += 1\n\n        \nprint(count)\n            \n    \n    \n    \n# partial_sums = [0]\n# \n# for c in s:\n#     partial_sums.append(partial_sums[-1] + score_dict[c])\n#     \n# partial_sums = partial_sums[1:]\n# \n# encounters = {letter: [] for idx, letter in enumerate(string.ascii_lowercase)}\n# \n# count = 0\n# \n# for idx, c in enumerate(s):\n#     \n#     for evt_idx in encounters[c]:\n#         score = partial_sums[idx] - partial_sums[evt_idx] - score_dict[c]\n#         if score == 0:\n#             count += 1\n#             \n#     encounters[c].append(idx)\n    \n# print(count)\n    \n", "def main():\n    mode=\"filee\"\n    if mode==\"file\":f=open(\"test.txt\",\"r\")\n    get = lambda :[int(x) for x in (f.readline() if mode==\"file\" else input()).split()]\n    gets = lambda :[str(x) for x in (f.readline() if mode==\"file\" else input()).split()]\n    num = 100005\n    w=get()\n    [g] = gets()\n    [dp,s,p,count]=[[0]*num,[0]*num,{},0]\n    for i in range(len(g)):\n        dp[i] = w[ord(g[i]) - 97]\n    for i in range(1,len(g)+1):\n        s[i] = s[i-1]+dp[i-1]\n    for i in range(1,len(g)):\n        if s[i] not in p:\n            p[s[i]] = [0]*26\n        p[s[i]][ord(g[i-1]) - 97]+=1\n        if p[s[i]][ord(g[i]) - 97]!=0:\n            count+=p[s[i]][ord(g[i]) - 97]\n    print(count)\n\n    if mode==\"file\":f.close()\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"]