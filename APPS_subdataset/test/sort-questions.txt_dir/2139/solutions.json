["s=input()\n\nif(len(s)<=3):\n    print(0)\n\nelse:\n    n=len(s)\n    ans=0\n    A=0\n    for i in range(3,n):\n        if(s[i-3]+s[i-2]+s[i-1]+s[i]=='bear'):\n            ans+=((i-3)-A+1)*(n-i)\n            A=i-2\n    print(ans)\n", "s = input()\nans = 0\nli = []\nfor i in range(len(s)):\n    if s[i:i+4] == 'bear':\n        li.append(i)\nif len(li) == 0:\n    print(0)\nelse:\n    k = 0\n    start = li[k]\n    b = 0\n    for i in range(len(s)):\n        while i > start:\n            try:\n                k += 1\n                start = li[k]\n            except:\n                b = 1\n                break\n        if b:\n            break\n        ans += len(s)-start-3\n        \n    print(ans)\n", "s = input()\nn = len(s)\nans = 0\nlb = -1\nfor i in range(n - 3):\n    if s[i:i + 4] == 'bear':\n        left = i-lb\n        right = n - 3 - i\n        ans += left * right\n        lb = i\nprint(ans)\n", "S = input().strip()\nWords = S.split('bear')\nN = len(S)\nAmount = (N * (N + 1)) // 2\nif len(Words) > 1:\n    K = len(Words[0]) + 3\n    Amount -= (K * (K + 1)) // 2\n    K = len(Words[-1]) + 3\n    Amount -= (K * (K + 1)) // 2\n    for i in range(1, len(Words) - 1):\n        K = len(Words[i]) + 6\n        Amount -= (K * (K + 1)) // 2\n    Amount += 3 * (len(Words) - 1)\n    print(Amount)\nelse:\n    print(0)\n", "def get_max_s(s):\n    n = len(s)\n    i = 0\n    l = 0\n    count = 0\n\n    while i < n:\n        if s[i:i+4] == 'bear':\n            count += (n - (i + 4) + 1) * (i - l + 1)\n            l = i + 1\n            i += 4\n            continue\n        i += 1\n\n    return count\n\n\ndef __starting_point():\n    s = input().strip()\n    max_s = get_max_s(s)\n    print(max_s)\n\nimport unittest\n\nclass TestFoo(unittest.TestCase):\n    def test_world(self):\n        got = get_max_s('bearbtear')\n        self.assertEqual(got, 6)\n\n        got = get_max_s('bearaabearc')\n        self.assertEqual(got, 20)\n\n\n__starting_point()", "s=input().strip()\nn=len(s)\nx=[]\nfor i in range(n-3):\n    if s[i:i+4]=='bear':\n        x.append(i)\ni=0\nj=0\nans=0\nm=len(x)\nwhile i<m:\n    ans+=max(0,n-x[i]-3)\n    j+=1\n    if j>x[i]:\n        i+=1\nprint(ans)", "string = input()\n\ni = 0\nlast = 0\ntotal = 0\nwhile i < len(string)-3:\n    if string[i]=='b' and string[i+1]=='e' and string[i+2]=='a' and string[i+3]=='r':\n        total += (i+1) * (len(string)-i-3)\n        string = string[i+1:]\n        i = 0\n\n    i += 1\n\nprint(total)\n", "word = input()\npoints = 0\n\nfor i in range(len(word)):\n    part = word[i:]\n    if \"bear\" in part :\n        points += len(part)-(part.index(\"bear\")+3)\n\nprint(points)", "\ns = input()\nk = 0\nl = 0\nsstr = -2\ncount = 0\nwhile sstr != -1:\n    sstr = s.find(\"bear\")\n    if sstr == -1 :\n        break\n    else :\n        if sstr == 0 or sstr == len(s) - 1:\n            k += (len(s) - 3)   \n        else:\n            z = ((sstr + 1) * (len(s) - sstr - 3))  \n            k += z\n    s = s[(sstr + 1):len(s)]\nprint(k)", "import sys, math, heapq, random, collections, bisect\n\ndef main():\n    # sys.stdin = open('input.txt', 'r')\n    # sys.stdout = open('output.txt', 'w')\n\n    st = input()\n    count = 0\n\n    while st.find('bear') != -1:\n        idx = st.find('bear')\n        count = ((idx+1) * (len(st)-(3+idx))) + count\n        st = st[idx+1:]\n\n    print(count)\n    # sys.stdin.close()\n    # sys.stdout.close()\n\ndef __starting_point():\n    main()\n\n__starting_point()", "from sys import stdin\ndebug = False\n\ntry :\n  import os\n  if os.environ['COMPUTERNAME'] == 'KRUEGER-PC':\n    debug = True\nexcept KeyError:\n  pass  \n\ndef debug_print(*foo):\n  if debug:\n    print (foo)\n\ndebug_print(\"debug active\")    \n\ndef print_array(res, size):\n  if size:\n    print(len(res))\n  print(\" \".join(map(str, res)))\n\ndef input_int_tuple():\n  return tuple([ x for x in map(int, stdin.readline().split())])\n\ndef input_int_array(size=True):\n  if size:\n    #read \n    values = stdin.readline().split()\n    assert(len(values) == 1)\n  return [x for x in map(int, stdin.readline().split())]\n\ndef input_string():\n  return stdin.readline().strip()\n\n\n\ndef problem():\n  import re\n  bear = \"bear\"\n  s  = input_string()\n\n  diffs = []\n  prev = 0\n  cnt = 0\n  for m in re.finditer( bear, s ):\n      cnt +=1\n      diffs.append(m.start() - prev )\n      prev = m.end()\n\n  if cnt >0:\n    diffs.append(len(s) - prev)\n  else:\n    return 0\n    \n\n\n  res = 0\n  for i,v in enumerate(diffs):\n    if i > 0 :\n      v += 3\n    if i < len(diffs) -1 :\n      v += 3\n\n    res += (v*v -v) // 2 +v\n  \n  cor = (len(diffs)-1)*3\n  res = res - cor\n  n = len(s)\n  return (n*n-n) // 2 + n -  res \n\n\n \n\n\nprint(problem()) \n\n\n#print_array(problem(), False)\n\n#xx = input_string()\n", "s = str(input())\nn = len(s)\nd = 0\ndprec = -1\ntot = 0\nwhile d < n-3:\n    if s[d:d+4] == 'bear':\n        tot += (d-dprec)*(n-3-d)\n        dprec = d\n        d += 4\n    else:\n        d+= 1\nprint(tot)", "s = input()\nl = len(s)\n\nimport re\ntotal = 0\nprev=-1\nfor m in re.finditer('bear',s):\n\ttotal += (m.start()-prev)*(l-(m.start()+3))\n\tprev=m.start()\nprint(total)\n", "s = input()\nn = len(s)\n\nidx = [-1]\ncurIdx = s.find('bear', 0)\ncnt = 1\nwhile curIdx > -1:\n    idx.append(curIdx)\n    cnt = cnt + 1\n    curIdx = s.find('bear', curIdx + 1)\n    \nret = 0\nfor i in range(cnt - 1):\n    ret = ret + (idx[i + 1] - idx[i]) * (n - idx[i + 1] - 3)\n\nprint(ret)\n", "s = input()\n\nanswer = 0\nlast = s.find(\"bear\") + 1\nanswer += last * (len(s) - last - 2)\ns = s[: last - 1] + \"####\" + s[last + 3 :]\nlast += 1\nwhile \"bear\" in s:\n    i = s.find(\"bear\") + 1\n    answer += (i - last + 1) * (len(s) - i - 2)\n    s = s[: i - 1] + \"####\" + s[i + 3 :]\n    last = i + 1\n\nprint(answer)\n", "s = input().strip()\nans = 0\nlast = 2\nfor i in range(3, len(s)):\n    if s[i - 3: i + 1] == \"bear\":\n        last = i\n    ans += last - 2\nprint(ans)\n", "#!/usr/bin/env python3\n\ndef main():\n    s = input()\n    n = len(s)\n    pos = [-1]\n    p = 0\n    while True:\n        p = s.find(\"bear\", p)\n        if p == -1:\n            break\n        pos.append(p)\n        p += 4\n    ret = 0\n    m = len(pos)\n    for i in range(1, m):\n        ret += (pos[i] - pos[i - 1]) * (n - pos[i] - 3)\n    print(ret)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "# input part\nstring = input()\n\n# solution\nresult = 0\n\npos = string.find(\"bear\")\nwhile pos >= 0:\n    result += len(string) - (pos + 3)\n    string = string[1:]\n    pos = string.find(\"bear\")\n\nprint(result)", "p = input()\nn, t = len(p), [len(i) + 6 for i in p.split('bear')]\nt[0] -= 3\nt[-1] -= 3\nprint(3 * (len(t) - 1) + (n * (n + 1) - sum(i * (i + 1) for i in t)) // 2)", "word = input()\npoints = 0\nx=0\nfor i in range(len(word)):\n    part = word[i:]\n    if \"bear\" in part :\n        points += len(part)-(part.index(\"bear\")+3)\n\nprint(points)", "word = input()\npoints = 0\ny=0\nfor i in range(len(word)):\n    part = word[i:]\n    if \"bear\" in part :\n        points += len(part)-(part.index(\"bear\")+3)\n\nprint(points)", "s = input().strip()\nans = 0\nlast = 2\nfor i in range(3, len(s)):\n    if s[i-3 : i+1] == \"bear\":\n        last = i\n    ans += last - 2\nprint(ans)\n", "s = input()\na = list(map(len, s.split(\"bear\")))\nn = len(a)\nfor i in range(n):\n  if 0 < i < n - 1:\n    a[i] += 4\n  else:\n    a[i] += 1\nk = r = 0\nfor i in range(n - 1):\n  k += a[i]\n  r += a[i] * (len(s) - k - 2)\nprint(r)", "s=input()\nn=len(s)\n\nkol=0\nposl_i=0\ntek_i=s.find(\"bear\",0,n)\nwhile(tek_i!=-1):\n    kol+=(tek_i-posl_i+1)*(n-tek_i-3)\n    posl_i=tek_i+1\n    tek_i=s.find(\"bear\",tek_i+1,n)\n\nprint(kol)", "def main():\n    s = input()\n    l, i = [], s.find('bear')\n    while i >= 0:\n        l.append(i)\n        i = s.find('bear', i + 4)\n    res = []\n    for shift in range(min(len(l), 2)):\n        res.append(sum((i + 1) * (len(s) - j - 3) for i, j in zip(l, l[shift:])))\n    res.append(0)\n    res.append(0)\n    print(res[0] - res[1])\n\n\ndef __starting_point():\n    main()\n__starting_point()"]