["from math import log\nfrom decimal import Decimal\n\ns = ['x^y^z', 'x^z^y', '(x^y)^z', 'y^x^z', 'y^z^x', '(y^x)^z', 'z^x^y', 'z^y^x', '(z^x)^y']\n\nx, y, z = list(map(Decimal, input().split()))\n\nf = []\nf += [(Decimal(log(x)) * (y ** z),  0)]\nf += [(Decimal(log(x)) * (z ** y), -1)]\nf += [(Decimal(log(x)) * (y *  z), -2)]\nf += [(Decimal(log(y)) * (x ** z), -3)]\nf += [(Decimal(log(y)) * (z ** x), -4)]\nf += [(Decimal(log(y)) * (x *  z), -5)]\nf += [(Decimal(log(z)) * (x ** y), -6)]\nf += [(Decimal(log(z)) * (y ** x), -7)]\nf += [(Decimal(log(z)) * (x *  y), -8)]\n\nf.sort()\n\nprint(s[-f[-1][1]])\n", "from math import *\nfrom decimal import *\n\ndef p1(x, y, z):\n\treturn Decimal(log(x, 2)) * Decimal(Decimal(y) ** Decimal(z))\ndef p2(x, y, z):\n\treturn Decimal(log(x, 2)) * Decimal(Decimal(y) * Decimal(z))\nx, y, z = list(map(float, input().split()))\nf = [p1(x, y, z), p1(x, z, y), p2(x, y, z), p2(x, z, y), p1(y, x, z), p1(y, z, x), \np2(y, x, z), p2(y, z, x), p1(z, x, y), p1(z, y, x), p2(z, x, y), p2(z, y, x)]\nans = ['x^y^z', 'x^z^y', '(x^y)^z', '(x^z)^y', 'y^x^z', 'y^z^x', '(y^x)^z', '(y^z)^x','z^x^y', 'z^y^x', '(z^x)^y', '(z^y)^x']\nx = 0\neps = 1e-6\nfor i in range(0, 12):\n\tif (f[i] > f[x] + Decimal(eps)):\n\t\tx = i\nprint(ans[x])\n", "import math\nfrom decimal import *\ngetcontext().prec = 1024\nx, y, z = list(map(Decimal, input().split(\" \")))\nl = lambda t: Decimal(math.log(t))\na = [\n\t(lambda: y ** z * l(x), \"x^y^z\"),\n\t(lambda: z ** y * l(x), \"x^z^y\"),\n\t(lambda: y * z * l(x), \"(x^y)^z\"),\n\n\t(lambda: x ** z * l(y), \"y^x^z\"),\n\t(lambda: z ** x * l(y), \"y^z^x\"),\n\t(lambda: x * z * l(y), \"(y^x)^z\"),\n\n\t(lambda: x ** y * l(z), \"z^x^y\"),\n\t(lambda: y ** x * l(z), \"z^y^x\"),\n\t(lambda: x * y * l(z), \"(z^x)^y\"),\n]\nm = -1\nans = \"\"\nfor calc, exp in a:\n\tq = calc()\n\tif q > m:\n\t\tm = q\n\t\tans = exp\nprint(ans)\n", "from math import log\nfrom decimal import Decimal\n\nx, y, z = [Decimal(x) for x in input().split()]\n\nvariants = sorted([\n    ((y ** z) * Decimal(log(x)), -1),\n    ((z ** y) * Decimal(log(x)), -2),\n    (y * z * Decimal(log(x)), -3),\n    ((x ** z) * Decimal(log(y)), -5),\n    ((z ** x) * Decimal(log(y)), -6),\n    (x * z * Decimal(log(y)), -7),\n    ((x ** y) * Decimal(log(z)), -9),\n    ((y ** x) * Decimal(log(z)), -10),\n    (x * y * Decimal(log(z)), -11)\n])\n\nexpressions = [\n    \"x^y^z\", \"x^z^y\", \"(x^y)^z\", \"(x^z)^y\",\n    \"y^x^z\", \"y^z^x\", \"(y^x)^z\", \"(y^z)^x\",\n    \"z^x^y\", \"z^y^x\", \"(z^x)^y\", \"(z^y)^x\"\n]\n\nprint(expressions[abs(variants[-1][1]) - 1])\n", "from decimal import *\ngetcontext().prec = 500\nx, y, z = map(float, input().split())\nx = Decimal(x)\ny = Decimal(y)\nz = Decimal(z)\na = [Decimal(0) for i in range(12)]\na[0] = ((Decimal(x).log10()) * Decimal(Decimal(y) ** Decimal(z)))\na[1] = ((Decimal(x).log10()) * Decimal(Decimal(z) ** Decimal(y)))\na[2] = ((Decimal(x).log10()) * Decimal(Decimal(y) * Decimal(z)))\na[3] = ((Decimal(x).log10()) * Decimal(Decimal(y) * Decimal(z)))\na[4] = ((Decimal(y).log10()) * Decimal(Decimal(x) ** Decimal(z)))\na[5] = ((Decimal(y).log10()) * Decimal(Decimal(z) ** Decimal(x)))\na[6] = ((Decimal(y).log10()) * Decimal(Decimal(x) * Decimal(z)))\na[7] = ((Decimal(y).log10()) * Decimal(Decimal(x) * Decimal(z)))\na[8] = ((Decimal(z).log10()) * Decimal(Decimal(x) ** Decimal(y)))\na[9] = ((Decimal(z).log10()) * Decimal(Decimal(y) ** Decimal(x)))\na[10] = ((Decimal(z).log10()) * Decimal(Decimal(x) * Decimal(y)))\na[11] = ((Decimal(z).log10()) * Decimal(Decimal(x) * Decimal(y)))\nmaxx = a[0]\nfor i in range(12):\n\tif a[i] > maxx:\n\t\tmaxx = a[i]\ns = [\"\" for i in range(12)]\ns[0] = \"x^y^z\"\ns[1] = \"x^z^y\"\ns[2] = \"(x^y)^z\"\ns[3] = \"(x^z)^y\"\ns[4] = \"y^x^z\"\ns[5] = \"y^z^x\"\ns[6] = \"(y^x)^z\"\ns[7] = \"(y^z)^x\"\ns[8] = \"z^x^y\"\ns[9] = \"z^y^x\"\ns[10] = \"(z^x)^y\"\ns[11] = \"(z^y)^x\"\nfor i in range(12):\n\tif a[i] == maxx:\n\t\tprint (s[i])\n\t\tbreak", "from decimal import *\n\ngetcontext().prec = 333\n\na,b,c = input().split()\n\nx = Decimal(a)\ny = Decimal(b)\nz = Decimal(c)\n\nl = [\n    (x).ln()*(y**z),\n    (x).ln()*(z**y),\n    (x**y).ln()*z,\n    (x**z).ln()*y,\n    (y).ln()*(x**z),\n    (y).ln()*(z**x),\n    (y**x).ln()*z,\n    (y**z).ln()*x,\n    (z).ln()*(x**y),\n    (z).ln()*(y**x),\n    (z**x).ln()*y,\n    (z**y).ln()*x\n]\n\n#getcontext().prec = 300\n\n#l = [i.quantize(Decimal('.' + '0'*250 + '1'), rounding=ROUND_DOWN) for i in l]\n\n#print(l)\n\nm = max(l)\n\ns = [\n    \"x^y^z\",\n    \"x^z^y\", \n    \"(x^y)^z\", \n    \"(x^z)^y\", \n    \"y^x^z\",\n    \"y^z^x\",\n    \"(y^x)^z\",\n    \"(y^z)^x\",\n    \"z^x^y\",\n    \"z^y^x\",\n    \"(z^x)^y\",\n    \"(z^y)^x\"\n]\n\n#for t in l:\n#    print(t)\n\n\ni = 0\nfor j in range(12):\n    #print(abs(l[j]-m))\n    if abs(l[j]-m) < Decimal('.' + '0'*100 + '1'):\n        i = j\n        break\n\nprint(s[i])", "from math import log\nfrom decimal import Decimal\n\n\ndef t1(a, b, c):\n    return int((Decimal(log(a)) * (b ** c)) / Decimal(0.000000000001))\n\n\ndef t2(a, b, c):\n    return int((Decimal(log(a)) * b * c) / Decimal(0.000000000001))\n\n\ndef solve():\n    x, y, z = list(map(Decimal, input().split()))\n\n    a = [0.0] * 12\n\n    a[0] = t1(x, y, z), 0, 'x^y^z'\n    a[1] = t1(x, z, y), -1, 'x^z^y'\n    a[2] = t2(x, y, z), -2, '(x^y)^z'\n    a[3] = t2(x, z, y), -3, '(x^z)^y'\n\n    a[4] = t1(y, x, z), -4, 'y^x^z'\n    a[5] = t1(y, z, x), -5, 'y^z^x'\n    a[6] = t2(y, x, z), -6, '(y^x)^z'\n    a[7] = t2(y, z, x), -7, '(y^z)^x'\n\n    a[8] = t1(z, x, y), -8, 'z^x^y'\n    a[9] = t1(z, y, x), -9, 'z^y^x'\n    a[10] = t2(z, x, y), -10, '(z^x)^y'\n    a[11] = t2(z, y, x), -11, '(z^y)^x'\n\n    v, i, f = max(a)\n\n    print(f)\n\n\ndef __starting_point():\n    solve()\n\n__starting_point()", "from decimal import *\n\nx, y, z = list(map(Decimal, input().split(' ')))\n\ngetcontext().prec = 100\n\na = [0] * 9\na[0] = x.ln() * (y ** z)\na[1] = x.ln() * (z ** y)\na[2] = x.ln() * y * z\na[3] = y.ln() * (x ** z)\na[4] = y.ln() * (z ** x)\na[5] = y.ln() * x * z\na[6] = z.ln() * (x ** y)\na[7] = z.ln() * (y ** x)\na[8] = z.ln() * x * y\n\nmx = 0\n\nfor i in range(9):\n    if abs(a[i] - a[mx]) > Decimal(10) ** (-50) and a[i] > a[mx]:\n        mx = i\n\ns = [\"\"] * 9\ns[0] = \"x^y^z\"\ns[1] = \"x^z^y\"\ns[2] = \"(x^y)^z\"\ns[3] = \"y^x^z\"\ns[4] = \"y^z^x\"\ns[5] = \"(y^x)^z\"\ns[6] = \"z^x^y\"\ns[7] = \"z^y^x\"\ns[8] = \"(z^x)^y\"\n\nprint(s[mx])\n", "import math\nimport decimal\noutput= [\n    'x^y^z', # 0\n\t'x^z^y', # 1\n\t'(x^y)^z', # 2\n\t'(x^z)^y', # 3\n    \n\t'y^x^z', # 4\n\t'y^z^x', # 5\n\t'(y^x)^z', # 6\n\t'(y^z)^x', # 7\n    \n\t'z^x^y', # 8\n\t'z^y^x', # 9\n\t'(z^x)^y', # 10\n\t'(z^y)^x' # 11\n]\n\nx,y,z=map(decimal.Decimal,input().split())\n\n\na=[(decimal.Decimal(math.log(x))*(y**z),0)]\na+=[(decimal.Decimal(math.log(x))*(z**y),1)]\na+=[(decimal.Decimal(math.log(x))*y*z,2)]\n\na+=[(decimal.Decimal(math.log(y))*(x**z),4)]\na+=[(decimal.Decimal(math.log(y))*(z**x),5)]\na+=[(decimal.Decimal(math.log(y))*x*z,6)]\n\na+=[(decimal.Decimal(math.log(z))*(x**y),8)]\na+=[(decimal.Decimal(math.log(z))*(y**x),9)]\na+=[(decimal.Decimal(math.log(z))*x*y,10)]\n\nret=output[0]\n# print(a[0][0])\ncmp=a[0][0]\nfor i in range(0,9):\n    if a[i][0]>cmp:\n        cmp=a[i][0]\n        ret=output[a[i][1]]\n\nprint(ret)", "import math\nimport decimal\noutput= [\n    'x^y^z', # 0\n\t'x^z^y', # 1\n\t'(x^y)^z', # 2\n\t'(x^z)^y', # 3\n\n\t'y^x^z', # 4\n\t'y^z^x', # 5\n\t'(y^x)^z', # 6\n\t'(y^z)^x', # 7\n\n\t'z^x^y', # 8\n\t'z^y^x', # 9\n\t'(z^x)^y', # 10\n\t'(z^y)^x' # 11\n]\n\nx,y,z=map(decimal.Decimal,input().split())\n\na=[]\na+=[(decimal.Decimal(math.log(x))*(y**z),0)]\na+=[(decimal.Decimal(math.log(x))*(z**y),-1)]\na+=[(decimal.Decimal(math.log(x))*y*z,-2)]\n\na+=[(decimal.Decimal(math.log(y))*(x**z),-4)]\na+=[(decimal.Decimal(math.log(y))*(z**x),-5)]\na+=[(decimal.Decimal(math.log(y))*x*z,-6)]\n\na+=[(decimal.Decimal(math.log(z))*(x**y),-8)]\na+=[(decimal.Decimal(math.log(z))*(y**x),-9)]\na+=[(decimal.Decimal(math.log(z))*x*y,-10)]\n\n\n# print(a)\na.sort()\n# print(a)\n\nprint(output[-a[8][1]])", "from math import log, inf\nfrom itertools import product, permutations\ndef comp_key(p, A, mode):\n    a = log(A[p[0][1]])*A[p[0][2]] if p[1] else log(A[p[0][1]]) + log(A[p[0][2]])\n    k = A[p[0][0]] if mode else 1/A[p[0][0]]\n    return a + log(log(k)) if k > 1 else -inf\n\ndef solve(A):\n    mode = any((x > 1 for x in A))\n    c = (max if mode else min)(((x,y) for y in [True, False] for x in permutations(list(range(3)))), key = lambda p: comp_key(p, A, mode))\n    k = 'xyz'\n    return ('{0}^{1}^{2}' if c[1] else '({0}^{1})^{2}').format(k[c[0][0]], k[c[0][1]], k[c[0][2]])\n\nA = [float(s) for s in input().split()]\nprint(solve(A))\n\n", "import math\nimport decimal\noutput= [\n    'x^y^z', # 0\n\t'x^z^y', # 1\n\t'(x^y)^z', # 2\n\t'(x^z)^y', # 3\n\n\t'y^x^z', # 4\n\t'y^z^x', # 5\n\t'(y^x)^z', # 6\n\t'(y^z)^x', # 7\n\n\t'z^x^y', # 8\n\t'z^y^x', # 9\n\t'(z^x)^y', # 10\n\t'(z^y)^x' # 11\n]\n\nx,y,z=map(decimal.Decimal,input().split())\n\na=[]\na+=[(decimal.Decimal(math.log(x))*(y**z),0)]\na+=[(decimal.Decimal(math.log(x))*(z**y),-1)]\na+=[(decimal.Decimal(math.log(x))*y*z,-2)]\n\na+=[(decimal.Decimal(math.log(y))*(x**z),-4)]\na+=[(decimal.Decimal(math.log(y))*(z**x),-5)]\na+=[(decimal.Decimal(math.log(y))*x*z,-6)]\n\na+=[(decimal.Decimal(math.log(z))*(x**y),-8)]\na+=[(decimal.Decimal(math.log(z))*(y**x),-9)]\na+=[(decimal.Decimal(math.log(z))*x*y,-10)]\n\n\n# print(a)\n# print(a)\n\nprint(output[-max(a)[1]])", "from math import log\nfrom decimal import Decimal\n\ndef a1(x, y, z):\n    return (y ** z) * Decimal(log(x))\n\ndef s1(x, y, z):\n    return \"x^y^z\"\n\ndef a2(x, y, z):\n    return (z ** y) * Decimal(log(x))\n\ndef s2(x, y, z):\n    return \"x^z^y\"\n\ndef a3(x, y, z):\n    return (y * z) * Decimal(log(x))\n\ndef s3(x, y, z):\n    return \"(x^y)^z\"\n\ndef a4(x, y, z):\n    return (y * z) * Decimal(log(x))\n\ndef s4(x, y, z):\n    return \"(x^z)^y\"\n\ndef a5(x, y, z):\n    return (x ** z) * Decimal(log(y))\n\ndef s5(x, y, z):\n    return \"y^x^z\"\n\ndef a6(x, y, z):\n    return (z ** x) * Decimal(log(y))\n\ndef s6(x, y, z):\n    return \"y^z^x\"\n\ndef a7(x, y, z):\n    return (x * z) * Decimal(log(y))\n\ndef s7(x, y, z):\n    return \"(y^x)^z\"\n\ndef a8(x, y, z):\n    return (z * x) * Decimal(log(y))\n\ndef s8(x, y, z):\n    return \"(y^z)^x\"\n\ndef a9(x, y, z):\n    return (x ** y) * Decimal(log(z))\n\ndef s9(x, y, z):\n    return \"z^x^y\"\n\ndef a10(x, y, z):\n    return (y ** x) * Decimal(log(z))\n\ndef s10(x, y, z):\n    return \"z^y^x\"\n\ndef a11(x, y, z):\n    return (x * y) * Decimal(log(z))\n\ndef s11(x, y, z):\n    return \"(z^x)^y\"\n\ndef a12(x, y, z):\n    return (y * x) * Decimal(log(z))\n\ndef s12(x, y, z):\n    return \"(z^y)^x\"\n\nx, y, z = list(map(Decimal, input().split()))\nans = s1(x, y, z)\na = [a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12]\ns = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12]\nmax = a1(x, y, z)\nfor i in range (12):\n    if max < a[i](x, y, z):\n        ans = s[i](x, y, z)\n        max = a[i](x, y, z)\nprint(ans)\n", "from decimal import *\ngetcontext().prec = 100\nx, y ,z = map(Decimal,input().split())\n\nop = ('x^y^z', 'x^z^y', '(x^y)^z', 'y^x^z', 'y^z^x', \\\n        '(y^x)^z', 'z^x^y','z^y^x','(z^x)^y')\n\narr = [[(y ** z) * x.ln() ,9], [(z ** y) * x.ln(), 8], [(z * y) * x.ln(),7], \\\n    [(x ** z) * y.ln(), 6], [(z ** x) * y.ln(), 5], [(x * z) * y.ln() ,4], \\\n    [(x ** y) * z.ln(),3], [(y ** x) * z.ln(), 2], [(x * y) * z.ln() ,1]]\n\nans = arr[0]\nfor i in arr:\n    if i[0]>ans[0]:\n        ans = i\n\nprint(op[-ans[1]])", "from math import log\ndef lbig(x, y, z, f):\n    if x == 1.0:\n        return 0.0\n    \n    w = 1.0\n    if x < 1.0:\n        x = 1.0/x\n\n    if f == True:\n        return w * (z * log(y) + log(log(x)))\n    \n    return w * (log(y) + log(z) + log(log(x)))\n\ndef rets(x, y, z, xs, ys, zs, n):\n    xss = [\n    (lbig(x, y, z, True), xs+'^'+ys+'^'+zs,n+1),\n    (lbig(x, z, y, True), xs+'^'+zs+'^'+ys,n+2),\n    (lbig(x, y, z, False), '('+xs+'^'+ys+')^'+zs,n+3),\n    (lbig(x, z, y, False), '('+xs+'^'+zs+')^'+ys,n+4),\n    ]\n    return xss\n\nx, y, z = list(map(float, input().split()))\nans = ''\nif x <= 1.0 and y <= 1.0 and z <= 1.0:\n    xss = [\n    (x**(y**z), 'x^y^z',1),\n    (x**(z**y), 'x^z^y',2),\n    (x**(y*z), '(x^y)^z',3),\n    (x**(z*y), '(x^z)^y',4),\n    ]\n    yss = [\n    (y**(x**z), 'y^x^z',5),\n    (y**(z**x), 'y^z^x',6),\n    (y**(x*z), '(y^x)^z',7),\n    (y**(z*x), '(y^z)^x',8),\n    ]\n    zss = [\n    (z**(x**y), 'z^x^y',9),\n    (z**(y**x), 'z^y^x',10),\n    (z**(x*y), '(z^x)^y',11),\n    (z**(y*x), '(z^y)^x',12),\n    ]\n    anss = sorted(xss+yss+zss, key=lambda x: (x[0], -x[2]))\n    ans = anss[-1][1]\nelse:\n    xss = []\n    yss = []\n    zss = []\n    if x > 1.0:\n        xss = rets(x, y, z, 'x', 'y', 'z', 0)\n    if y > 1.0:\n        yss = rets(y, x, z, 'y', 'x', 'z', 4)\n    if z > 1.0:\n        zss = rets(z, x, y, 'z', 'x', 'y', 8)\n    anss = sorted(xss+yss+zss, key=lambda x: (x[0],-x[2]))\n    # print(anss)\n    ans = anss[-1][1]\n    \nprint(ans)\n\n\n\n\n\n", "from math import log\nfrom decimal import Decimal\n\noutput = [\"x^y^z\", \"x^z^y\", \"(x^y)^z\", \"(x^z)^y)\", \"y^x^z\", \"y^z^x\", \"(y^x)^z\", \"(y^z)^x\", \"z^x^y\", \"z^y^x\", \"(z^x)^y\", \"(z^y)^x\"]\n\nx, y, z = list(map(Decimal, input().split()))\n\nval = [\t(Decimal(log(x)) * (y ** z), 0),\n\t\t(Decimal(log(x)) * (z ** y), -1),\n\t\t(Decimal(log(x)) * (y * z), -2),\n\t\t(Decimal(log(x)) * (y ** z), -3),\n\t\t(Decimal(log(y)) * (x ** z), -4),\n\t\t(Decimal(log(y)) * (z ** x), -5),\n\t\t(Decimal(log(y)) * (x * z), -6),\n\t\t(Decimal(log(y)) * (x * z), -7),\n\t\t(Decimal(log(z)) * (x ** y), -8),\n\t\t(Decimal(log(z)) * (y ** x), -9),\n\t\t(Decimal(log(z)) * (x * y), -10),\n\t\t(Decimal(log(z)) * (x * y), -11)\n\t\t]\n\nprint(output[-max(val)[1]])\n", "from math import log10\nfrom decimal import Decimal\n\nans = [\"x^y^z\", \"x^z^y\", \"(x^y)^z\", \"(x^z)^y)\", \"y^x^z\", \"y^z^x\", \"(y^x)^z\", \"(y^z)^x\", \"z^x^y\", \"z^y^x\", \"(z^x)^y\", \"(z^y)^x\"]\n\nx, y, z = list(map(Decimal, input().split()))\n\nval = [ (Decimal(log10(x)) * (y ** z), -0),\n        (Decimal(log10(x)) * (z ** y), -1),\n        (Decimal(log10(x)) * (y * z), -2),\n        (Decimal(log10(x)) * (y ** z), -3),\n        (Decimal(log10(y)) * (x ** z), -4),\n        (Decimal(log10(y)) * (z ** x), -5),\n        (Decimal(log10(y)) * (x * z), -6),\n        (Decimal(log10(y)) * (x * z), -7),\n        (Decimal(log10(z)) * (x ** y), -8),\n        (Decimal(log10(z)) * (y ** x), -9),\n        (Decimal(log10(z)) * (x * y), -10),\n        (Decimal(log10(z)) * (x * y), -11)\n        ]\n\nprint(ans[-max(val)[1]])\n", "import math\n\ns = ['x^y^z',\n     'x^z^y',\n     '(x^y)^z',\n     '(x^z)^y',\n     'y^x^z',\n     'y^z^x',\n     '(y^x)^z',\n     '(y^z)^x',\n     'z^x^y',\n     'z^y^x',\n     '(z^x)^y',\n     '(z^y)^x']\n\nx, y, z = map(float, input().split())\n\nma = float('-inf')\nc = -1\n\nif x > 1:\n    if ma < z * math.log(y) + math.log(math.log(x)):\n        ma = z * math.log(y) + math.log(math.log(x))\n        c = 0\n    \n    if ma < y * math.log(z) + math.log(math.log(x)):\n        ma = y * math.log(z) + math.log(math.log(x))\n        c = 1\n\n    if ma < math.log(y) + math.log(z) + math.log(math.log(x)):\n        ma = math.log(y) + math.log(z) + math.log(math.log(x))\n        c = 2\n\nif y > 1:\n    if ma < z * math.log(x) + math.log(math.log(y)):\n        ma = z * math.log(x) + math.log(math.log(y))        \n        c = 4\n    \n    if ma < x * math.log(z) + math.log(math.log(y)):\n        ma = x * math.log(z) + math.log(math.log(y))\n        c = 5\n\n    if ma < math.log(x) + math.log(z) + math.log(math.log(y)):\n        ma = math.log(x) + math.log(z) + math.log(math.log(y))\n        c = 6\n\nif z > 1:\n    if ma < y * math.log(x) + math.log(math.log(z)):\n        ma = y * math.log(x) + math.log(math.log(z))        \n        c = 8\n    \n    if ma < x * math.log(y) + math.log(math.log(z)):\n        ma = x * math.log(y) + math.log(math.log(z))\n        c = 9\n\n    if ma < math.log(x) + math.log(y) + math.log(math.log(z)):\n        ma = math.log(x) + math.log(y) + math.log(math.log(z))\n        c = 10\n\n# if max(x , y, z) <= 1\nif c == -1:\n    if ma < x ** (y ** z):\n        ma = x ** (y ** z)\n        c = 0\n    \n    if ma < x ** (z ** y):\n        ma = x ** (z ** y)\n        c = 1\n    \n    if ma < (x ** y) ** z:\n        ma = (x ** y) ** z\n        c = 2\n    \n    if ma < y ** (x ** z):\n        ma = y ** (x ** z)\n        c = 4\n    \n    if ma < y ** (z ** x):\n        ma = y ** (z ** x)\n        c = 5\n    \n    if ma < (y ** x) ** z:\n        ma = (y ** x) ** z\n        c = 6\n    \n    if ma < z ** (x ** y):\n        ma = z ** (x ** y)\n        c = 8\n    \n    if ma < z ** (y ** x):\n        ma = z ** (y ** x)\n        c = 9\n    \n    if ma < (z ** x) ** y:\n        ma = (z ** x) ** y\n        c = 10\n        \nprint(s[c])", "import math\nfrom decimal import *\np,q,r=x,y,z=input().split()\nx=float(x)\ny=float(y)\nz=float(z)\nif(x>1 and y>1 and z>1):\n\tp=z*math.log(y)+math.log(math.log(x))\n\tans=\"x^y^z\"\n\tmax=p\n\tp=y*math.log(z)+math.log(math.log(x))\n\tif(p>max):\n\t\tmax=p\n\t\tans=\"x^z^y\"\n\tp=math.log(y)+math.log(z)+math.log(math.log(x))\n\tif(p>max):\n\t\tmax=p\n\t\tans=\"(x^y)^z\"\n\tp=z*math.log(x)+math.log(math.log(y))\n\tif(p>max):\n\t\tmax=p\n\t\tans=\"y^x^z\"\n\tp=x*math.log(z)+math.log(math.log(y))\n\tif(p>max):\n\t\tmax=p\n\t\tans=\"y^z^x\"\n\tp=math.log(x)+math.log(z)+math.log(math.log(y))\n\tif(p>max):\n\t\tmax=p\n\t\tans=\"(y^x)^z\"\n\tp=y*math.log(x)+math.log(math.log(z))\n\tif(p>max):\n\t\tmax=p\n\t\tans=\"z^x^y\"\n\tp=x*math.log(y)+math.log(math.log(z))\n\tif(p>max):\n\t\tmax=p\n\t\tans=\"z^y^x\"\n\tp=math.log(x)+math.log(y)+math.log(math.log(z))\n\tif(p>max):\n\t\tmax=p\n\t\tans=\"(z^x)^y\"\nelse:\n\tif(not(x<1 and y<1 and z<1)):\n\t\tx=Decimal(p)\n\t\ty=Decimal(q)\n\t\tz=Decimal(r)\n\tp=x**(y**z)\n\tmax=p;\n\tans=\"x^y^z\"\n\tp=x**(z**y)\n\tif(p>max):\n\t\tmax=p\n\t\tans=\"x^z^y\"\n\tp=x**(y*z)\n\tif(p>max):\n\t\tmax=p\n\t\tans=\"(x^y)^z\"\n\tp=y**(x**z)\n\tif(p>max):\n\t\tmax=p\n\t\tans=\"y^x^z\"\n\tp=y**(z**x)\n\tif(p>max):\n\t\tmax=p\n\t\tans=\"y^z^x\"\n\tp=y**(x*z)\n\tif(p>max):\n\t\tmax=p\n\t\tans=\"(y^x)^z\"\n\tp=z**(x**y)\n\tif(p>max):\n\t\tmax=p\n\t\tans=\"z^x^y\"\n\tp=z**(y**x)\n\tif(p>max):\n\t\tmax=p\n\t\tans=\"z^y^x\"\n\tp=z**(x*y)\n\tif(p>max):\n\t\tmax=p\n\t\tans=\"(z^x)^y\"\nprint(ans)\n", "import math\n\nslog = lambda x: math.log(math.log(x))\na = [float(n) for n in input().split()]\nr = ([(lambda x, y, z: -10.0**10 if math.log(x) <= 0 else slog(x) + z * math.log(y), \"x^y^z\"),\n      (lambda x, y, z:-10.0**10 if math.log(x) <= 0 else slog(x) + y * math.log(z), \"x^z^y\"),\n      (lambda x, y, z:-10.0**10 if math.log(x) <= 0 else slog(x) + math.log(y) + math.log(z), \"(x^y)^z\"),\n      (lambda x, y, z:-10.0**10 if math.log(y) <= 0 else slog(y) + z * math.log(x), \"y^x^z\"),\n      (lambda x, y, z:-10.0**10 if math.log(y) <= 0 else slog(y) + x * math.log(z), \"y^z^x\"),\n      (lambda x, y, z:-10.0**10 if math.log(y) <= 0 else slog(y) + math.log(z) +  math.log(x), \"(y^x)^z\"),\n      (lambda x, y, z:-10.0**10 if math.log(z) <= 0 else slog(z) + y * math.log(x), \"z^x^y\"),\n      (lambda x, y, z:-10.0**10 if math.log(z) <= 0 else slog(z) + x * math.log(y), \"z^y^x\"),\n      (lambda x, y, z:-10.0**10 if math.log(z) <= 0 else slog(z) +  math.log(y) + math.log(x), \"(z^x)^y\")])\nrr = ([(lambda x, y, z: y**z * math.log(x), \"x^y^z\"),\n      (lambda x, y, z: z**y * math.log(x), \"x^z^y\"),\n      (lambda x, y, z: math.log(x) * y * z, \"(x^y)^z\"),\n      (lambda x, y, z: math.log(y) * x**z ,\"y^x^z\"),\n      (lambda x, y, z: math.log(y)*z**x, \"y^z^x\"),\n      (lambda x, y, z: math.log(y) * z * x, \"(y^x)^z\"),\n      (lambda x, y, z: math.log(z) * x ** y, \"z^x^y\"),\n      (lambda x, y, z: math.log(z)* y ** x, \"z^y^x\"),\n      (lambda x, y, z: math.log(z) * x * y, \"(z^x)^y\")])\nexp = \"\"\nbest = -10**50\nif all([x <= 1.0 for x in a]):\n\tfor f, e in rr:\n\t\tval = f(a[0], a[1],  a[2])\n\t\tif val - best > 1e-10:\n\t\t\tbest = val\n\t\t\texp = e\n\nelse:\n    for f, e in r:\n        val = f(a[0], a[1], a[2])\n        if val > best:\n            best = val\n            exp = e\n\nprint (exp)", "from math import log\nfrom decimal import *\n\nx, y, z = map(Decimal, input().split())\nlogd = lambda x: Decimal(log(x))\nr = ([(lambda x, y, z: y**z * logd(x), \"x^y^z\"),\n      (lambda x, y, z: z**y * logd(x), \"x^z^y\"),\n      (lambda x, y, z: logd(x) * y * z, \"(x^y)^z\"),\n      (lambda x, y, z: logd(y) * x**z ,\"y^x^z\"),\n      (lambda x, y, z: logd(y) * z**x, \"y^z^x\"),\n      (lambda x, y, z: logd(y) * z * x, \"(y^x)^z\"),\n      (lambda x, y, z: logd(z) * x ** y, \"z^x^y\"),\n      (lambda x, y, z: logd(z)* y ** x, \"z^y^x\"),\n      (lambda x, y, z: logd(z) * x * y, \"(z^x)^y\")])\nexp = \"\"\nbest = -10**50\nfor f, e in r:\n\tval = f(x, y, z)\n\tif val > best:\n\t\tbest = val\n\t\texp = e\n\nprint (exp)", "from math import log\nfrom decimal import *\n\nx, y, z = map(Decimal, input().split())\nlogd = lambda x: Decimal(log(x))\nr = sorted([(-logd(x) * y**z, \"x^y^z\"),\n      (-logd(x) * z**y, \"x^z^y\"),\n      (-logd(x) * y * z, \"(x^y)^z\"),\n      (-logd(y) * x**z ,\"y^x^z\"),\n      (-logd(y) * z**x, \"y^z^x\"),\n      (-logd(y) * z * x, \"(y^x)^z\"),\n      (-logd(z) * x ** y, \"z^x^y\"),\n      (-logd(z)* y ** x, \"z^y^x\"),\n      (-logd(z) * x * y, \"(z^x)^y\")], key=lambda a: a[0])\nprint (r[0][1])", "from math import log\nfrom decimal import *\n\nx, y, z = map(Decimal, input().split())\nlogd = lambda x: Decimal(log(x))\nr = sorted([(-logd(x) * y**z, \"x^y^z\"),\n      (-logd(x) * z**y, \"x^z^y\"),\n      (-logd(x) * y * z, \"(x^y)^z\"),\n      (-logd(y) * x**z ,\"y^x^z\"),\n      (-logd(y) * z**x, \"y^z^x\"),\n      (-logd(y) * z * x, \"(y^x)^z\"),\n      (-logd(z) * x ** y, \"z^x^y\"),\n      (-logd(z)* y ** x, \"z^y^x\"),\n      (-logd(z) * x * y, \"(z^x)^y\")], key=lambda a: a[0])\nprint (r[0][1])", "from decimal import Decimal\nx,y,z = map(Decimal, input().split())\na = ['x^y^z', 'x^z^y', '(x^y)^z', 'y^x^z', 'y^z^x', '(y^x)^z',\n         'z^x^y', 'z^y^x', '(z^x)^y']\nf = [y ** z * x.ln(), z ** y * x.ln(), y * z * x.ln(), x ** z * y.ln(),\n       z ** x * y.ln(), x * z * y.ln(), x ** y * z.ln(), y ** x * z.ln(),\n       x * y * z.ln()]\nmax, res = -10**18, 0\nfor i, j in enumerate(f):\n    if j > max:\n        max, res = j, i\nprint(a[res])", "from decimal import *\nfrom math import log\n\ndef d_log(x):\n    return Decimal(log(x))\n\ndef __starting_point():\n\n    #getcontext().prec = 1024\n    x , y , z = map( Decimal , input().split() )\n    exps = [ ( (y**z)*d_log(x), 0),\n             ( (z**y)*d_log(x), 1),\n             ( z*y*d_log(x), 2),\n             #( y*d_log(x**z), 3),\n             ( (x**z)*d_log(y), 4),\n             ( (z**x)*d_log(y), 5),\n             ( z*x*d_log(y), 6),\n             #( x*d_log(y**z), 7),\n             ( (x**y)*d_log(z), 8),\n             ( (y**x)*d_log(z), 9),\n             ( y*x*d_log(z), 10),\n             #( x*d_log(z**y), 11),\n            ]\n\n    exps.sort(key=lambda e:(-e[0],e[1]))\n    #for r,index in exps:\n    #    print( \"exp(\", index, \") =\" , r )\n\n    c = exps[0][1]\n\n    res = [ \"x^y^z\",   \"x^z^y\",    \"(x^y)^z\",   \"(x^z)^y\",\n            \"y^x^z\",   \"y^z^x\",    \"(y^x)^z\",   \"(y^z)^x\",\n            \"z^x^y\",   \"z^y^x\",    \"(z^x)^y\",   \"(z^y)^x\"\n           ]\n    print( res[c] )\n__starting_point()"]