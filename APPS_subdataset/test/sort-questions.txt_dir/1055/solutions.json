["n = int(input())\na = [int(ai) for ai in input().split()]\n\ndef solve(x):\n    n = len(x)\n    if sorted(x) == x:\n        return n\n    return max(solve(x[:n//2]), solve(x[n//2:]))\n\nprint(solve(a))\n", "def helper(arr):\n    if arr == sorted(arr): return len(arr)\n    return max(helper(arr[:len(arr) // 2]), helper(arr[len(arr) // 2:]))\n\ndef main():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(helper(arr))\n    return 0\n\nmain()", "ii = lambda: int(input())\nmi = lambda: map(int, input().split())\nli = lambda: list(mi())\n\ndef rec(a):\n    if all(a[i] <= a[i + 1] for i in range(len(a) - 1)):\n        return len(a)\n    x = len(a) // 2\n    return max(rec(a[:x]), rec(a[x:]))\n\nii()\nprint(rec(li()))", "n = m = int(input())\nA = [int(x) for x in input().split()]\n\nwhile True:\n    if any(sorted(A[i:i+m]) == A[i:i+m] for i in range(0,n,m)):\n        print(m)\n        break\n    m //= 2\n", "def mp():\n    return map(int, input().split())\n\ndef f(a):\n    if sorted(a) == a:\n        return len(a)\n    return max(f(a[:len(a) // 2]), f(a[len(a) // 2:]))\n\nn = int(input())\na = list(mp())\nprint(f(a))", "n=int(input())\narr=list(map(int,input().split()))\nans=1\nsize=2\nwhile(size<=n):\n    i=0\n    while(i<n):\n        j=i\n        flag=0\n        while(j<i+size-1):\n            if(arr[j]<=arr[j+1]):\n                j+=1\n            else:\n                flag=1\n                break\n        if(flag==0):\n            ans=max(ans,size)\n        i+=size\n    size=size*2\nprint(ans)\n\n\n", "# -*- coding: utf-8 -*-\n\n\ndef rli():\n    return list(map(int, input().split()))\n\n\ndef solve(nums):\n    if nums == sorted(nums):\n        return len(nums)\n    return max(solve(nums[:len(nums) // 2]), solve(nums[len(nums) // 2:]))\n\n\ndef main():\n    input()\n    nums = rli()\n    print(solve(nums))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "N = int(input())\nA = [int(a) for a in input().split()]\n\ndef calc(X):\n    if X == sorted(X):\n        return len(X)\n    A = X[:len(X)//2]\n    B = X[len(X)//2:]\n    return max(calc(A), calc(B))\n\nprint(calc(A))\n", "def cek(arr):\n    if arr == sorted(arr):\n        return len(arr)\n    else:\n        return max(cek(arr[:len(arr) // 2]), cek(arr[len(arr) // 2:]))\n\n\nn = int(input())\n\nseq = list(map(int, input().split()))\nprint(cek(seq))\n", "n = int(input())\na = [int(x) for x in input().strip().split()]\n\nans, k = 1, 2\nwhile k <= n:\n    i = 0\n    while i < n:\n        flag = True\n        for j in range(k - 1):\n            if a[i + j] > a[i + j + 1]:\n                flag = False\n                break\n        if flag:\n            ans = k\n        i += k\n    k = k * 2\n\nprint(ans)", "def is_sorted(a, l, r):\n    for i in range(l + 1, r):\n        if a[i] < a[i - 1]:\n            return False\n    return True\n\n\ndef solve(a, l, r):\n    if is_sorted(a, l, r):\n        return r - l\n    return max(solve(a, l, (r + l) // 2), solve(a, (r + l)//2, r))\n\n\ndef main() -> None:\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(solve(a, 0, n))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n = int(input())\nl = list(map(int, input().split()))\n\ndef isSorted(a):\n    for i in range(1, len(a)):\n        if a[i] < a[i-1]:\n            return False\n    return True\n\ndef sort(a):\n    if isSorted(a):\n        return a\n    t = len(a) // 2\n    a1 = a[:t]\n    a2 = a[t:]\n    a1 = sort(a1)\n    a2 = sort(a2)\n    if (len(a1) >= len(a2)):\n        return a1\n    else:\n        return a2\n\nprint(len(sort(l)))\n", "N = int(input())\nA = list(map(int, input().split()))\n\ndef longest(A):\n    if A == sorted(A):\n        return len(A)\n    \n    return max(longest(A[:len(A) // 2]), longest(A[len(A) // 2:]))\n\nprint(longest(A))", "n = int(input())\narr = list(map(int,input().split()))\ndef func(temp_arr):\n    if temp_arr == sorted(temp_arr):\n        return len(temp_arr)\n    return max(func(temp_arr[:len(temp_arr)//2]), func(temp_arr[len(temp_arr)//2:]))\n\nprint(func(arr))\n", "def check(ar: list):\n    ok = True\n    for i in range(1, len(ar)):\n        if ar[i] < ar[i - 1]:\n            ok = False\n            break\n    if ok:\n        return len(ar)\n    else:\n        return max(check(ar[:len(ar) // 2]), check(ar[len(ar) // 2:]))\n\n\nn = int(input())\na = list(map(int, input().split()))\nprint(check(a))\n", "def f(a):\n\tif a == sorted(a):\n\t\treturn len(a)\n\telse:\n\t\tk = len(a) // 2\n\t\tif len(a) % 2 == 0:\n\t\t\treturn max(f(a[:k]), f(a[k:]))\n\t\telse:\n\t\t\treturn max(f(a[:k]), f(a[k:]), f(a[k+1:]), f(a[k+1:]))\n\t\n\nn, a = int(input()), list(map(int, input().split()))\nprint(f(a))\n", "\ndef is_sorted(lst):\n    it = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] < it:\n            return False\n        it = lst[i]\n    return True\n\n\ndef do(lst):\n    if is_sorted(lst):\n        return len(lst)\n\n    v1 = do(lst[:len(lst) // 2])\n    v2 = do(lst[len(lst) // 2:])\n\n    return max(v1, v2)\n\n\nN = int(input())\n\nA = list(map(int, input().split()))\nprint(do(A))", "def f(A):\n    if len(A) == 1:\n        return 1\n    else:\n        if A == sorted(A):\n            return len(A)\n        else:\n            return max(f(A[:len(A) // 2]), f(A[len(A) // 2:]))\n\nn = int(input())\nA = list(map(int, input().split()))\nprint(f(A))", "n = int(input())\na = list(map(int, input().split()))\ndef check(x):\n\tif x != sorted(x):\n\t\treturn max(check(x[:len(x) // 2]), check(x[len(x) // 2:]))\n\treturn len(x)\nprint(check(a))", "kk=lambda:map(int,input().split())\nll=lambda:list(kk())\ndef dp(ls):\n\tif sorted(ls) == ls: return len(ls)\n\treturn max(dp(ls[:len(ls)//2]), dp(ls[len(ls)//2:]))\n_ = input(), print(dp(ll()))", "\ndef is_sorted(a):\n    prev = None\n\n    for i in a:\n        if prev is not None and i < prev:\n            return False\n        prev = i\n\n    return True\n\ndef solve(a):\n    if len(a) == 1:\n        return 1\n\n    if is_sorted(a):\n        return len(a)\n\n    return max(solve(a[:len(a)//2]), solve(a[len(a)//2:]))\n\ndef __starting_point():\n    n = int(input())\n    #n, m = (int(p) for p in input().split())\n    a = [int(p) for p in input().split()]\n    print(solve(a))\n\n__starting_point()", "n = int(input())\narr = [int(x) for x in input().split()]\nif n == 1:\n    print(1)\nelse:\n    for i in 16, 8, 4, 2:\n        if i > n:\n            continue\n        for k in range(0, n, i):\n            if sorted(arr[k:k+i]) == arr[k:k+i]:\n                print(i)\n                return\n    print(1)\n    return", "#Bhargey Mehta (Sophomore)\n#DA-IICT, Gandhinagar\nimport sys, math, queue\nsys.setrecursionlimit(1000000)\n#sys.stdin = open(\"input.txt\", \"r\")\n\nans = []\n\ndef solve(x):\n    if sorted(x) == x:\n        ans.append(len(x))\n    else:\n        solve(x[:len(x)//2])\n        solve(x[len(x)//2:])\n\nn = int(input())\na = list(map(int, input().split()))\n\nsolve(a)\nprint(max(ans))", "n=int(input())\na=[int(k) for k in input().split(\" \")]\n\nnn=n\n\nres=1\nwhile nn>1:\n    jj=0\n    while jj<n:\n        if sorted(a[jj:jj+nn])==a[jj:jj+nn]:\n            res=nn\n            break\n        jj+=nn\n    if res>=nn:\n        break\n    nn>>=1\n    \nprint(res)\n", "n = int(input())\na = list(map(int, input().split()))\n\n\ndef sort_(a):\n\tmid = len(a) // 2\n\tif sorted(a) == a:\n\t\treturn len(a)\n\telse:\n\t\treturn max(sort_(a[:mid]), sort_(a[mid:]))\n\nprint(sort_(a))"]