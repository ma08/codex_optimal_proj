["#\n#    ------------------------------------------------\n#           ____          _     Generatered using\n#          / ___|        | |\n#         | |    __ _  __| | ___ _ __  ______ _\n#         | |   / _` |/ _` |/ _ \\ '_ \\|_  / _` |\n#         | |__| (_| | (_| |  __/ | | |/ / (_| |\n#          \\____\\____|\\____|\\___|_| |_/___\\____|\n#\n#      GNU Affero General Public License v3.0\n#    ------------------------------------------------\n#    Author   : prophet\n#    Created  : 2020-07-24 11:19:20.229238\n#    UUID     : dFs0Ek0q78tkOXbf\n#    ------------------------------------------------\n#\nproduction = True\n\nimport sys, math, collections\n\ndef input(input_format = 0, multi = 0):\n\n    if multi > 0: return [input(input_format) for i in range(multi)]\n    else:\n        next_line = sys.stdin.readline()[:-1]\n\n        if input_format >= 10:\n            use_list = False\n            input_format = int(str(input_format)[-1])\n        else: use_list = True\n\n        if input_format == 0: formatted_input = [next_line]\n        elif input_format == 1: formatted_input = list(map(int, next_line.split()))\n        elif input_format == 2: formatted_input = list(map(float, next_line.split()))\n        elif input_format == 3: formatted_input = list(next_line)\n        elif input_format == 4: formatted_input = list(map(int, list(next_line)))\n        elif input_format == 5: formatted_input = next_line.split()\n        else: formatted_input = [next_line]\n\n        return formatted_input if use_list else formatted_input[0]\n\ndef out(output_line, output_format = 0, newline = True):\n\n    formatted_output = \"\"\n\n    if output_format == 0: formatted_output = str(output_line)\n    elif output_format == 1: formatted_output = \" \".join(map(str, output_line))\n    elif output_format == 2: formatted_output = \"\\n\".join(map(str, output_line))\n    elif output_format == 3: formatted_output = \"\".join(map(str, output_line))\n\n    print(formatted_output, end = \"\\n\" if newline else \"\")\n\ndef log(*args):\n    if not production:\n        print(\"$$$\", end = \"\")\n        print(*args)\n\nenu = enumerate\nter = lambda a, b, c: b if a else c\nceil = lambda a, b: -(-a // b)\nflip = lambda a: (a + 1) & 1\n\ndef mapl(iterable, format = 0):\n    \n    if format == 0: return list(map(int, iterable))\n    elif format == 1: return list(map(str, iterable))\n    elif format == 2: return list(map(list, iterable))\n#\n#   >>>>>>>>>>>>>>> START OF SOLUTION <<<<<<<<<<<<<<\n#\n\n\ndef solve():\n\n    n, k, l = input(1)\n    d = input(1)\n\n    log(k, l)\n    log(d)\n\n    f = [l - i for i in d]\n\n    log(f)\n\n    p = [(0, 2 * k - 1)]\n\n    for i in f:\n        a, b = p[-1]\n        if i >= k:\n            p.append((0, 2 * k - 1))\n        else:\n            fb = k + i\n            fa = max(a + 1, k - i)\n            log(i, fb, fa)\n            if fb < fa:\n                out(\"No\")\n                return\n\n            p.append((fa, fb))\n        log(p)\n    else:\n        out(\"Yes\")\n\n    log(\"\")\n    return\n\n\nfor i in range(input(11)): solve()\n\n#\n#   >>>>>>>>>>>>>>>> END OF SOLUTION <<<<<<<<<<<<<<<\n#\n", "for _ in range(int(input())):\n    n, k, l = list(map(int, input().split()))\n    dd = list(map(int, input().split()))\n    t = 0\n    curld = 0\n    di = False\n    for d in [-(2**30), *dd]:\n        if d > l:\n            break\n        ld = l - d\n        if d + k <= l:\n            curld = ld\n            di = False\n            continue\n        if di:\n            if ld >= curld + 1:\n                curld += 1\n            else:\n                break\n        else:\n            curld = min(curld - 1, ld)\n            if curld == 0:\n                di = True\n    else:\n        print('Yes')\n        continue\n    print('No')\n", "import sys\nimport os,io\ninput = sys.stdin.readline\n# input_all = sys.stdin.read\n# input = io.BytesIO(os.read(0,os.fstat(0).st_size)).readline\n# input_all = io.BytesIO(os.read(0,os.fstat(0).st_size)).read\ndef read_int():\n\treturn map(int, input().split())\ndef read_list():\n\treturn list(map(int, input().split()))\ndef print_list(l):\n\tprint(' '.join(map(str,l)))\n# import heapq as hq\n# import bisect as bs\n# from collections import deque as dq\n# from collections import defaultdict as dc \n# import math\n\n# f = open('test.py')\n# input = f.readline\n# input_all = f.read\n\n\nN = int(input())\nfor _ in range(N):\n\tn, k, l = read_list()\n\td = read_list()\n\tif max(d)>l:\n\t\tprint('No')\n\telse:\n\n\t\t# print(dic)\n\t\tflag = True\n\t\ttt = 2*k\n\t\tnow = tt\n\t\tfor i in range(n):\n\t\t\tif d[i]+k<=l:\n\t\t\t\ttmp = tt\n\t\t\telse:\n\t\t\t\ttm = d[i]+k-l\n\t\t\t\ttmp = [tm,2*k-tm]\n\t\t\t# print(tmp)\n\t\t\t# tmp = dic[d[i]]\n\t\t\tif tmp==tt:\n\t\t\t\tnow = tt\n\t\t\telif now==tt:\n\t\t\t\tnow = tmp\n\t\t\telse:\n\t\t\t\tnow = [max(now[0]+1,tmp[0]),min(now[1]+1,tmp[1])]\n\t\t\t\tif now[0]>now[1]:\n\t\t\t\t\tflag = False\n\t\t\t\t\tbreak\n\t\tif flag:\n\t\t\tprint('Yes')\n\t\telse:\n\t\t\tprint('No')", "for h in range(int(input())):\n    n, k, l = list(map(int, input().strip().split()))\n    \n    arr = list(map(int, input().strip().split()))\n    \n    \n    dp = [0 for i in range(len(arr)+1)]\n    dp[0] = -1\n    \n    # print(p)\n    \n    there = True\n    \n    for i in range(len(arr)):\n        if arr[i] > l:\n            there = False\n            break\n        elif arr[i]+k > l:\n            dp[i+1] = arr[i]\n        else:\n            dp[i+1] = -1\n    \n    if there == False:\n        print(\"No\")\n        continue\n    pointer = 0\n    \n    for i in range(n+1):\n        if dp[i] == -1:\n            if i == n:\n                continue\n            elif i < n:\n                maxi = l-dp[i+1]\n                pointer = -maxi-1\n        else:\n            pointer += 1\n            if dp[i] + abs(pointer) > l:\n                if pointer >= 0:\n                    there = False\n                    break\n                else:\n                    pointer = -(l-dp[i])\n    \n    if there == False:\n        print(\"No\")\n    else:\n        print(\"Yes\")\n            \n    \n    \n    \n", "import sys, os.path\nfrom collections import deque\nfrom fractions import Fraction as f\ndef IO():\n    if os.path.exists('input.txt'):\n        sys.stdin = open('input.txt', 'r')\n        sys.stdout = open('output.txt', 'w')\n    else:\n        input=sys.stdin.readline\n        print=sys.stdout.write\ndef nextInt():\n    return int(input())\ndef nextTuple():\n    return [int(a) for a in input().split()]\ndef nextArray():\n    return list(map(int, input().split()))\ndef nextLine():\n    return input()\ndef nextStringArray():\n    return list(input().split())\nIO()\n\n'''code starts here'''\n\nt=int(input())\nfor _ in range(t):\n    n,k,l=[int(x) for x in input().split()]\n    a=list(map(int,input().split()))\n    flag=0\n    count=-1\n    for i in range(n):\n        if a[i]>l:\n            flag=1\n            break\n    for i in range(n):\n        if a[i]+k>l:\n            if count==-1:\n                count=k+(a[i]+k)-l\n                continue\n            count+=1\n            count=count%(2*k)\n            if count<=k:\n                if a[i]+count>l:\n                    flag=1\n                    break\n            else:\n                now=k+(a[i]+k)-l\n                count=max(count,now)\n        else:\n            count=-1\n    if flag==1:\n        print(\"No\")\n    else:\n        print(\"Yes\")", "import sys\nimport collections  \ndef input():\n\treturn sys.stdin.readline().rstrip()\n \ndef split_input():\n\treturn [int(i) for i in input().split()]\n\n# tests = 1\ntests = int(input())\n\nfor _ in range(tests):\n\tn,k,l = split_input()\n\td = split_input()\n\tnewd = [l - i for i in d]\n\tif min(newd)<0:\n\t\tprint(\"No\")\n\t\tcontinue\n\tkvalue = newd[0]\n\tdec = True\n\tans = True\n\t# print(newd)\n\ti = 1\n\twhile i < n:\n\t\t# print(kvalue,dec)\n\t\tif newd[i] < 0:\n\t\t\tans = False\n\t\t\tbreak\n\t\tif newd[i] >= k:\n\t\t\tif i < n - 1:\n\t\t\t\tkvalue = newd[i+1]\n\t\t\t\tdec = True\n\t\t\t\ti += 2\n\t\t\t\tcontinue\n\t\tif kvalue == 0:\n\t\t\tdec = False\n\t\tif dec: \n\t\t\tif newd[i] < kvalue:\n\t\t\t\tkvalue = newd[i]\n\t\t\telse:\n\t\t\t\tkvalue -= 1\n\t\telse:\n\t\t\tif newd[i] <= kvalue:\n\t\t\t\tans = False\n\t\t\t\tbreak\n\t\t\telse:\n\t\t\t\tkvalue += 1\n\t\ti += 1\n\tif ans:\n\t\tprint(\"Yes\")\n\telse:\n\t\tprint(\"No\")\n\n\n", "import math\n######################################################\n# ps template\ndef mi(): return list(map(int, input().split()))\ndef ii(): return int(input())\ndef li(): return list(map(int, input().split()))\ndef si(): return input().split()\n\n#######################################################\nt = ii()\nfor _ in range(t):\n    n, k, l = mi()\n    a = li()\n    dp = [ -1 for i in range(n)]\n    ans = True\n    rev = False\n    if a[0]+k<=l:\n        dp[0] = 'F'\n    elif a[0]<=l:\n        dp[0] = l - a[0]\n        if dp[0] > 0:\n            rev = True\n        else:\n            rev = False\n    else:\n        dp[0] = -1\n    for i in range(1,n):\n        if dp[i-1]==-1 or a[i]>l:\n            ans = False\n            break\n        if a[i]+k<=l:\n            dp[i] = 'F'\n        elif dp[i-1]=='F':\n            dp[i] = l - a[i]\n            if dp[i]>0:\n                rev = True\n            else:\n                rev = False\n        elif rev:\n            if l-a[i]<=dp[i-1]-1:\n                dp[i] = l - a[i]\n                if dp[i]>0:\n                    rev = True\n                else:\n                    rev = False\n            else:\n                dp[i] = dp[i-1] - 1\n                if dp[i]>0:\n                    rev = True\n                else:\n                    rev = False\n        elif dp[i-1]+1+a[i]<=l:\n            dp[i] = dp[i-1]+1\n            if dp[i] == k:\n                rev= True\n        else:\n            ans = False\n            break\n    #print(dp)\n    if ans and dp[n-1]!=-1:\n        print(\"Yes\")\n    else:\n        print('No')\n\n", "f=lambda:map(int,input().split())\nt,=f()\nfor _ in[0]*t:\n    n,k,l=f();s=[*f()];a=0;z=k-1\n    for i in s:\n        if i+k<=l:z=k-1\n        elif z>=0and l>=i:z=min(z,l-i)-1\n        elif l<i or abs(z)>l-i:a=1\n        else:z-=1\n    print('YNeos'[a::2])", "import sys\n\ndef minp():\n\treturn sys.stdin.readline().strip()\n\ndef mint():\n\treturn int(minp())\n\ndef mints():\n\treturn list(map(int, minp().split()))\n\ndef solve():\n\tn, k, l = mints()\n\tx = 0\n\tpz = k\n\tfor d in mints():\n\t\tz = l - d\n\t\tif z < 0:\n\t\t\tprint(\"No\")\n\t\t\treturn\n\t\tif z >= k:\n\t\t\tx = 0\n\t\telif x < k:\n\t\t\tx = max(x + 1, k - z)\n\t\telif x >= k:\n\t\t\tx = x + 1\n\t\t\tif x - k > z:\n\t\t\t\tprint(\"No\")\n\t\t\t\treturn\n\t\tpz = max(z, k)\n\tprint(\"Yes\")\n\nfor i in range(mint()):\n\tsolve()\n", "for _ in range(int(input())):\n    n, k, l = map(int, input().split());dd = list(map(int, input().split()));t,curld,di = 0,0,False\n    for d in [-(2**30), *dd]:\n        if d > l:break\n        ld = l - d\n        if d + k <= l:curld,di = ld,False;continue\n        if di:\n            if ld >= curld + 1:curld += 1\n            else:break\n        else:\n            curld = min(curld - 1, ld)\n            if curld == 0:di = True\n    else:print('Yes');continue\n    print('No')", "\n\nfor _ in range(int(input())):\n\tnkl = list(map(int,input().split()))\n\tn = nkl[0]\n\tk = nkl[1]\n\tl = nkl[2]\n\td = list(map(int,input().split()))\n\tflag=1\n\tcount=0\n\tleez = 0\n\tfor i in range(n):\n\t\tif(d[i]>l):\n\t\t\tflag=0\n\t\t\tbreak\n\t\telse:\n\t\t\tif(l-d[i]>=k):\n\t\t\t\tcount=0\n\t\t\t\tcontinue\n\t\t\tcount+=1\n\t\t\tif(count==1):\n\t\t\t\tleez = l-d[i]\n\t\t\t\tcontinue\n\t\t\tleez = min(leez-1,l-d[i])\n\t\t\tif(leez>=0):\n\t\t\t\tcontinue\n\t\t\tif(-leez<=l-d[i]):\n\t\t\t\tcontinue\n\t\t\telse:\n\t\t\t\tflag=0\n\t\t\t\tbreak\n\tif(flag==1):\n\t\tprint(\"Yes\")\n\telse:\n\t\tprint(\"No\")\n\n\t\n\n\n", "import sys, math\nimport io, os\n#data = io.BytesIO(os.read(0,os.fstat(0).st_size)).readline\nfrom bisect import bisect_left as bl, bisect_right as br, insort\nfrom heapq import heapify, heappush, heappop\nfrom collections import defaultdict as dd, deque, Counter\n#from itertools import permutations,combinations\ndef data(): return sys.stdin.readline().strip()\ndef mdata(): return list(map(int, data().split()))\ndef outl(var) : sys.stdout.write('\\n'.join(map(str, var))+'\\n')\ndef out(var) : sys.stdout.write(str(var)+'\\n')\n#from decimal import Decimal\nfrom fractions import Fraction\n#sys.setrecursionlimit(100000)\nINF = float('inf')\nmod = int(1e9)+7\n\n\n\nfor t in range(int(data())):\n    n,k,l=mdata()\n    d=mdata()\n    flag=True\n    m=k\n    p=0\n    for j in range(0,n):\n        if l-d[j]>=k:\n            m=k-1\n            p=0\n        else:\n            if (d[j]+m>l and p==1) or d[j]>l:\n                flag=False\n                break\n            if p==0:\n                m=min(m-1,l-d[j]-1)\n                if m==-1:\n                    p=1\n                    m=1\n            else:\n                m+=1\n    if flag==True:\n        out(\"Yes\")\n    else:\n        out(\"No\")\n\n", "import sys\ninpy = [int(x) for x in sys.stdin.read().split()]\nt = inpy[0]\nindex = 1\nfor _ in range(t):\n    n, k, l = inpy[index], inpy[index+1], inpy[index+2]\n    index += 3\n    d = inpy[index:index+n]\n    \n    index += n\n    x, m = k, True\n    flag = True\n    for i in range(n):\n        diff = l - d[i]\n    \n        if diff < 0:\n            flag = False\n            break\n        if diff >= k:\n            x = k\n            m = True\n        else:\n            if m:\n                x = min(x - 1, diff)\n                if x ==  0:\n                    m = False\n            else:\n                x = x + 1\n                if x > diff:\n                    flag = False\n                    break    \n    if flag :   \n        print('Yes')\n    else:\n        print('No')\n\n\n\n", "import sys\n \ndef minp():\n\treturn sys.stdin.readline().strip()\n \ndef mint():\n\treturn int(minp())\n \ndef mints():\n\treturn map(int, minp().split())\n \ndef solve():\n\tn, k, l = mints()\n\tx = 0\n\tpz = k\n\tfor d in mints():\n\t\tz = l - d\n\t\tif z < 0:\n\t\t\tprint(\"No\")\n\t\t\treturn\n\t\tif z >= k:\n\t\t\tx = 0\n\t\telif x < k:\n\t\t\tx = max(x + 1, k - z)\n\t\telif x >= k:\n\t\t\tx = x + 1\n\t\t\tif x - k > z:\n\t\t\t\tprint(\"No\")\n\t\t\t\treturn\n\t\tpz = max(z, k)\n\tprint(\"Yes\")\n \nfor i in range(mint()):\n\tsolve()"]