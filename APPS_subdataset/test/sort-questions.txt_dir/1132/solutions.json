["import re\nimport itertools\nfrom collections import Counter, deque\n\nclass Task:\n    n, m = 0, 0\n    graph = []\n    answer = \"\"\n\t\n    def getData(self):\n        self.n, self.m = [int(x) for x in input().split(' ')]\n        for i in range(0, self.m):\n            self.graph += [[int(x) for x in input().split(' ')]]\n\n        #inFile = open('input.txt', 'r')\n        #inFile.readline().rstrip()\n        #self.childs = inFile.readline().rstrip()\n\n    def solve(self):\n        graph = self.graph\n        vertexDegrees = [0] * (self.n + 1)\n        for edge in graph:\n            vertexDegrees[edge[0]] += 1\n            vertexDegrees[edge[1]] += 1\n        vertexDegrees = vertexDegrees[1:]\n        if vertexDegrees.count(2) == len(vertexDegrees):\n            self.answer = 'ring topology'\n            return\n        if vertexDegrees.count(1) == 2 and vertexDegrees.count(2) == \\\n                len(vertexDegrees) - 2:\n            self.answer = 'bus topology'\n            return\n        if vertexDegrees.count(1) == len(vertexDegrees) - 1:\n            self.answer = 'star topology'\n            return\n        self.answer = 'unknown topology'\n\n    def printAnswer(self):\n        print(re.sub(r'[\\[\\],]', '', str(self.answer)))\n        #print(self.answer[:6])\n        #outFile = open('output.txt', 'w')\n        #outFile.write(self.answer)\n\ntask = Task()\ntask.getData()\ntask.solve()\ntask.printAnswer()\n", "\nbt=\"bus topology\"\nst=\"star topology\"\nrt=\"ring topology\"\nut=\"unknown topology\"\ndef main():\n    n,m=list(map(int,input().split()))\n    S=[ 0 for j in range(n)];\n    for _ in range(m):\n        x,y=list(map(int,input().split()))\n        S[x-1]+=1\n        S[y-1]+=1\n    if S.count(2)==len(S):\n        print (rt)\n        return\n    elif S.count(2)==len(S)-2 and S.count(1)==2:\n        print(bt)\n        return\n    elif (S.count(n-1)==1 and S.count(1)==len(S)-1):\n        print(st)\n        return\n    else:\n        print(ut)\n        return\nmain()    \n", "R = lambda: map(int, input().split())\nn, m = R()\nc = [0] * n\nfor i in range(m):\n  x, y = R()\n  c[x - 1] += 1\n  c[y - 1] += 1\nc1 = c2 = 0\nfor i in range(n):\n  if c[i] == 1:\n    c1 += 1\n  elif c[i] == 2:\n    c2 += 1\nif c2 == n:\n  print(\"ring topology\")\nelif c1 == 2 and c2 == n - 2:\n  print(\"bus topology\")\nelif c1 == n - 1:\n  print(\"star topology\")\nelse:\n  print(\"unknown topology\")", "n, m = map(int, input().split())\np = [0] * (n + 1)\nfor i in range(m):\n    a, b = map(int, input().split())\n    p[a] += 1\n    p[b] += 1\n\nans = 'unknown topology'\nif n == m:\n    if p.count(2) == n: ans = 'ring topology'\nelif n == m + 1:\n    if n - 1 in p: ans = 'star topology'\n    elif p.count(1) == 2 and p.count(2) == n - 2: ans = 'bus topology'\nprint(ans)", "n,m=list(map(int,input().split()))\nl=[0]*n\nd=l[:]\nfor _ in range(m):\n    a,b=list(map(int,input().split()))\n    l[a-1]+=1\n    l[b-1]+=1\nfor i in l:\n    d[i]+=1\nif(d[1]==2 and d[2]==n-2):\n    print('bus topology')\nelif(d[2]==n):\n    print('ring topology')\nelif(d[1]==n-1 and d[n-1]==1):\n    print('star topology')\nelse:\n    print('unknown topology')\n", "n, m = (int(x) for x in input().split())\ncnt = [0] * n\nfor i in range(m):\n\tu, v = (int(x) for x in input().split())\n\tcnt[u - 1] += 1\n\tcnt[v - 1] += 1\nif cnt.count(1) == n - 1:\n\tprint('star topology')\nelif cnt.count(2) == n:\n\tprint('ring topology')\nelif cnt.count(1) == 2 and cnt.count(2) == n - 2:\n\tprint('bus topology')\nelse:\n\tprint('unknown topology')\n", "# 292B\n\n__author__ = 'artyom'\n\nread = lambda: map(int, input().split())\nn, m = read()\ngraph = [set() for _ in range(1 + n)]\ndegrees = [0] * (n + 1)\nfor __ in range(m):\n  u, v = read()\n  graph[u].add(v)\n  graph[v].add(u)\n  degrees[u] += 1\n  degrees[v] += 1\n\n\ndef dfs(start):\n  stack = [(start, None)]\n  visited = [0] * (n + 1)\n  while stack:\n    v, parent = stack.pop()\n    if degrees[v] > 2:\n      return 'star' if all([degrees[u] == 1 for u in graph[v]]) else 'unknown'\n    for u in graph[v]:\n      if u != parent:\n        if visited[u]:\n          return 'ring' if u == start else 'unknown'\n        stack.append((u, v))\n    visited[v] = 1\n  return 'bus'\n\n\nprint(dfs(1) + ' topology')", "n, m = [int(k) for k in input().split()]\nans = 'bus topology'\ndict = {}\ncount = 0\nt = 0\nif m >= n-1:\n    for i in range(m):\n        first, second = [int(k) for k in input().split()]\n        if first not in dict:\n            dict[first] = set()\n            dict[first].add(second)\n        else:\n            if len(dict[first]) == 1:\n                count += 1\n            else: t += 1\n            dict[first].add(second)\n        if second not in dict:\n            dict[second] = set()\n            dict[second].add(first)\n        else:\n            if len(dict[second]) == 1:\n                count += 1\n            else: t += 1\n            dict[second].add(first)\nif count == n-2 and m == n-1:\n    print('bus topology')\nelif count == 1:\n    print('star topology')\nelif count == n and t == 0:\n    print('ring topology')\nelse:\n    print('unknown topology')", "n, m = [int(k) for k in input().split()]\nans = 'bus topology'\ndict = {}\ncount = 0\nt = 0\nif m >= n-1:\n    for i in range(m):\n        first, second = [int(k) for k in input().split()]\n        if first not in dict:\n            dict[first] = set()\n            dict[first].add(second)\n        else:\n            if len(dict[first]) == 1:\n                count += 1\n            else: t += 1\n            dict[first].add(second)\n        if second not in dict:\n            dict[second] = set()\n            dict[second].add(first)\n        else:\n            if len(dict[second]) == 1:\n                count += 1\n            else: t += 1\n            dict[second].add(first)\nif count == n-2 and m == n-1:\n    print('bus topology')\nelif count == 1:\n    print('star topology')\nelif count == n and t == 0:\n    print('ring topology')\nelse:\n    print('unknown topology')\n", "x,y = 0,0\ncountZero = 0\ncountOne = 0\n\nn,m = [int(i) for i in input().split()]\na = [0]*n\n\n\nfor i in range(m):\n    x,y = [int(i) for i in input().split()]\n    a[y-1]+=1\n    a[x-1]+=1\n\nfor i in a:\n        if i==1:\n            countZero+=1\n        elif i>1:\n            countOne+=1\n\nif n==m:\n    if countZero==0 and countOne==n:\n        print('ring topology')\n    else:\n        print('unknown topology')\nelif n-m==1:\n    if countZero==2 and countOne==n-2:\n        print('bus topology')\n    elif countZero==n-1 and countOne==1:\n        print('star topology')\n    else:\n        print('unknown topology')\nelse:\n    print('unknown topology')\n\n", "\nimport sys\nimport math\nn,m=list(map(int,input().split()))\n\ndegree=[0]*(n+1)\n\nfor _ in range(0,int(m)):\n    a,b=list(map(int,input().split()))\n    degree[a]=degree[a]+1\n    degree[b]=degree[b]+1\n\n\nif degree.count(1)==2 and degree.count(2)==n-2:\n    print('bus topology')\nelif degree.count(2)==n:\n    print('ring topology')\nelif degree.count(1)==n-1 and degree.count(n-1)==1:\n    print('star topology')\nelse:\n    print('unknown topology')\n", "n,m=input().split()\nn=int(n);m=int(m)\na=[0]*n\nfor i in range(0,m):\n\tx,y=input().split()\n\tx=int(x);y=int(y)\n\ta[x-1]+=1;a[y-1]+=1\nr=\"unknown\"\ns=set(a)\nif s=={2}:\n\tr=\"ring\"\nif s=={1,2}:\n\tr=\"bus\"\nif s=={1,m}:\n\tr=\"star\"\nprint(r,\"topology\")", "def solve():\n    n, m = list(map(int, input().split()))\n    if n not in (m, m + 1):\n        return 3\n    l = [0] * (n + 1)\n    for _ in range(m):\n        x, y = list(map(int, input().split()))\n        l[x] += 1\n        l[y] += 1\n    c2 = l.count(2)\n    if m == n == c2:\n        return 1\n    if m == n - 1:\n        c1 = l.count(1)\n        if c1 == 2 and c2 == n - 2:\n            return 0\n        if c1 == m and m in l:\n            return 2\n    return 3\n\n\ndef main():\n    print((\"bus\", \"ring\", \"star\", \"unknown\")[solve()], \"topology\")\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "3\n\nn, m = [int(x) for x in input().split()]\ndegree = {0:0, 1:0, 2:0, n - 1:0}\nvisited = [0] * n\nadjlist = [[] for x in range(n)]\nfor i in range(m):\n\tx, y = [int(x) for x in input().split()]\n\tx -= 1\n\ty -= 1\n\tadjlist[x].append(y) \n\tadjlist[y].append(x)\n\nfor i in range(n):\n\tcur_degree = len(adjlist[i])\n\tif cur_degree not in degree:\n\t\tdegree[cur_degree] = 1\n\telse:\n\t\tdegree[cur_degree] += 1\n\ndegree_other = False\n\nfor val in list(degree.keys()):\n\tif val != 1 and val != 2 and val != n - 1 and val != 0:\n\t\tdegree_other = True\t\n\nif degree_other == True:\n\tprint(\"unknown topology\")\nelif degree[1] == n - 1 and degree[n - 1] == 1:\n\tprint(\"star topology\")\nelif degree[1] == 2 and degree[2] == n - 2:\n\tprint(\"bus topology\")\nelif degree[2] == n:\n\tprint(\"ring topology\")\nelse:\n\tprint(\"unknown topology\")\n", "n,m=list(map(int,input().split()))\n\nl=[0]*n\n\nd=l[:]\n\nfor _ in range(m):\n\n    a,b=list(map(int,input().split()))\n\n    l[a-1]+=1\n\n    l[b-1]+=1\n\nfor i in l:\n\n    d[i]+=1\n\nif(d[1]==2 and d[2]==n-2):\n\n    print('bus topology')\n\nelif(d[2]==n):\n\n    print('ring topology')\n\nelif(d[1]==n-1 and d[n-1]==1):\n\n    print('star topology')\n\nelse:\n\n    print('unknown topology')\n\n\n\n\n\n# Made By Mostafa_Khaled\n", "import sys\nfrom math import *\n\ndef minp():\n\treturn sys.stdin.readline().strip()\n\ndef mint():\n\treturn int(minp())\n\ndef mints():\n\treturn list(map(int, minp().split()))\n\nn, m = mints()\ne = [[] for i in range(n+1)]\n\ndef isstar():\n\tc = None\n\tfor i in range(1, n+1):\n\t\tif len(e[i]) > 1:\n\t\t\tif c != None:\n\t\t\t\treturn False\n\t\t\tc = i\n\tif c == None:\n\t\treturn False\n\t#for i in range(1,n+1)\n\t#\tif i != c and e[i][0] != i:\n\treturn len(e[c]) == n-1\n\ndef isbus():\n\tc = None\n\tfor i in range(1, n+1):\n\t\tif len(e[i]) == 1:\n\t\t\tc = i\n\tif c == None:\n\t\treturn False\n\tcnt = 2\n\tp = c\n\tc = e[c][0]\n\twhile len(e[c]) == 2:\n\t\tif e[c][0] == p:\n\t\t\tp = c\n\t\t\tc = e[c][1]\n\t\telse:\n\t\t\tp = c\n\t\t\tc = e[c][0]\n\treturn len(e[c]) == 1\n\ndef isring():\n\tp = 1\n\tif len(e[1]) != 2:\n\t\treturn False\n\tc = e[1][0]\n\twhile len(e[c]) == 2 and c != 1:\n\t\tif e[c][0] == p:\n\t\t\tp = c\n\t\t\tc = e[c][1]\n\t\telse:\n\t\t\tp = c\n\t\t\tc = e[c][0]\n\treturn c == 1\n\nfor i in range(m):\n\ta, b = mints()\n\te[a].append(b)\n\te[b].append(a)\nif isstar():\n\tprint(\"star topology\")\nelif isbus():\n\tprint(\"bus topology\")\nelif isring():\n\tprint(\"ring topology\")\nelse:\n\tprint(\"unknown topology\")\n", "def main():\n    n, m = list(map(int, input().split()))\n    types = ['bus', 'ring', 'star', 'unknown']\n\n    occ = [0] * n\n    for i in range(m):\n        a, b = list(map(int, input().split()))\n        occ[a-1] += 1\n        occ[b-1] += 1\n\n    cnt = [0] * 3\n    for v in occ:\n        cnt[min(2, v-1)] += 1\n\n    if cnt == [2, n - 2, 0]:\n        res = types[0]\n    elif cnt == [0, n, 0]:\n        res = types[1]\n    elif cnt == [n - 1, 0, 1]:\n        res = types[2]\n    else:\n        res = types[3]\n\n    print(res, 'topology')\n        \n\ndef __starting_point():\n    main()\n\n__starting_point()", "from array import array\nfrom collections import Counter\n\n\nn, m = list(map(int, input().split()))\n\na = array('L')\n\na.extend((0 for i in range(n)))\n\nfor i in range(m):\n\tx, y = list(map(int, input().split()))\n\ta[x-1] += 1\n\ta[y-1] += 1\n\nca = array('L')\nca.extend((0 for i in range(max(a)+1)))\n\nfor i in a:\n\tca[i] += 1\n\ndef c(i):\n\tif i >= len(ca) or i < 0:\n\t\treturn 0\n\telse:\n\t\treturn ca[i]\n\t\t\n\nif c(1) == 2 and c(2) == n-2:\n\tprint(\"bus topology\")\nelif c(2) == n:\n\tprint(\"ring topology\")\nelif c(1) == n-1 and c(n-1) == 1:\n\tprint(\"star topology\")\nelse:\n\tprint(\"unknown topology\")\n", "n, m = list(map(int, input().split()))\n\nvs = [0 for i in range(n)]\n\nfor i in range(m):\n    x, y = list(map(int, input().split()))\n    vs[x - 1] = vs[x - 1] + 1\n    vs[y - 1] = vs[y - 1] + 1\n\nif max(vs) == m and n == m + 1:\n    print('star topology')\nelse:\n    ones = sum([1 if x == 1 else 0 for x in vs])\n    if n == m + 1 and ones == 2:\n        print('bus topology')\n    else:\n        doubles = sum([1 if x == 2 else 0 for x in vs])\n        if n == m and doubles == n:\n            print('ring topology')\n        else:\n            print('unknown topology')\n", "mod = 1000000007\nii = lambda : int(input())\nsi = lambda : input()\ndgl = lambda : list(map(int, input()))\nf = lambda : map(int, input().split())\nil = lambda : list(map(int, input().split()))\nls = lambda : list(input())\nn,m=f()\nl=[0]*n\nfor _ in range(m):\n    a,b=f()\n    l[a-1]+=1\n    l[b-1]+=1\nl.sort()\nif l[0]==1 and l[1]==1 and all(i==2 for i in l[2:]):\n    print('bus topology')\nelif all(i==2 for i in l):\n    print('ring topology')\nelif all(i==1 for i in l[:n-1]) and l[-1]==n-1:\n    print('star topology')\nelse:\n    print('unknown topology')", "from functools import reduce\ndef add(a,b):\n\treturn a+b\nn,m = [int(x) for x in input().split()]\nneigh = [[] for x in range(n)]\nfor i in range(m):\n\tx,y = [int(a) for a in input().split()]\n\tneigh[x-1].append(y)\n\tneigh[y-1].append(x)\noneneigh, twoneigh, nneigh = 0,0,0\nfor i in neigh:\n\tif len(i) == 1:\n\t\toneneigh += 1\n\telif len(i) == 2:\n\t\ttwoneigh += 1\n\telse:\n\t\tnneigh += 1\nif twoneigh == n:\n\tprint('ring topology')\nelif oneneigh == 2 and twoneigh == n-2:\n\tprint('bus topology')\nelif nneigh == 1 and oneneigh == m:\n\tprint('star topology')\nelse:\n\tprint('unknown topology')", "def bus_topology(neigh):\n\t#check if exactly two nodes have 1 neighbor\n\t#check if all other nodes have 2 neighbors\n\tsingle_neighbors = 0\n\tfor i in range(1, len(neigh)):\n\t\tif len(neigh[i]) == 1:\n\t\t\tsingle_neighbors += 1\n\t\telif len(neigh[i]) > 2:\n\t\t\treturn False\n\t\n\tif single_neighbors == 2:\n\t\treturn True\n\telse:\n\t\treturn False\n\ndef ring_topology(neigh):\n\t#check if all nodes have exactly two neighbors\n\tfor i in range(1, len(neigh)):\n\t\tif len(neigh[i]) > 2:\n\t\t\treturn False\n\treturn True\n\ndef star_topology(neigh, n):\n\t#check if one node has n-1 neighbors\n\t#check if all nodes have 1 neighbor \n\tcenternode = 0\n\tfor i in range(1, len(neigh)):\n\t\tif len(neigh[i]) == n-1:\n\t\t\tcenternode += 1\n\t\telif len(neigh[i]) != 1:\n\t\t\treturn False\n\n\tif centernode == 1:\n\t\treturn True\n\telse:\n\t\treturn False\n\nn,m = [int(x) for x in input().split()]\n#nodes, edges\nneighbors = [[] for x in range(n+1)]\n\nfor i in range(m):\n\tu,v = (int(x) for x in input().split())\n\tneighbors[u].append(v)\n\tneighbors[v].append(u)\n\n#for i in range(len(neighbors)):\n#\tprint(i, neighbors[i])\n\nif bus_topology(neighbors):\n\tprint(\"bus topology\")\nelif ring_topology(neighbors):\n\tprint(\"ring topology\")\nelif star_topology(neighbors,n):\n\tprint(\"star topology\")\nelse:\n\tprint(\"unknown topology\")", "from collections import Counter\n\nn, m = map(int, input().split())\n\ng = [[] for _ in range(n)]\n\nfor i in range(m):\n    x, y = map(int, input().split())\n    g[x - 1].append(y - 1)\n    g[y - 1].append(x - 1)\n\nbus = ([2] * (n - 2)) + ([1] * 2)\nstar = [1] * (n - 1) + [n - 1]\n\nlns = [len(lst) for lst in g]\nif lns == [2] * n:\n    print(\"ring topology\")\nelif Counter(lns) == Counter(bus):\n    print(\"bus topology\")\nelif Counter(lns) == Counter(star):\n    print(\"star topology\")\nelse:\n    print(\"unknown topology\")", "n, m = map(int, input().split())\na = []\nfor i in range(0, n+1):\n    a.append([])\nfor i in range(m):\n    i, j = map(int, input().split())\n    a[i].append(j)\n    a[j].append(i)\nc = 0\nd = 0\nf = 0\nfor el in a:\n    if(len(el)==1):\n        c+=1 \n    elif(len(el)==2):\n        d+=1 \n    elif(len(el)==n-1):\n        f+=1 \nif(c==2 and d==n-2):\n    print(\"bus topology\")\nelif(d==n):\n    print(\"ring topology\")\nelif(f==1 and c==n-1):\n    print(\"star topology\")\nelse:\n    print(\"unknown topology\")", "n,m = map(int,input().split())\na = []\nfor h in range(0,n+1):\n    a.append([])\nfor i in range(m):\n    k,j = map(int,input().split())\n    a[k].append(j)\n    a[j].append(k)\nd2 = 0\nd1 = 0\nd3 = 0\nfor u in a:\n    if len(u) == 1 :\n        d1+=1\n    if len(u) == 2 :\n        d2+=1\n    if len(u) == n-1:\n        d3+=1\nif d1 == 2 and d2 == n-2:\n    print(\"bus topology\")\nelif d3 == 1 and d1 == n-1:\n    print(\"star topology\")\nelif d2 == n:\n    print(\"ring topology\")\nelse:\n    print(\"unknown topology\")"]