["n = int(input())\nl = list(map(int, input().split()))\norder = [(l[i],i) for i in range(n)]\norder.sort(reverse = True)\n\nout = []\nfor v, ind in order:\n    for i in range(ind):\n        if v < l[i]:\n            out.append(str(i + 1)+' '+str(ind + 1))\n\nprint(len(out))\nprint('\\n'.join(out))\n", "import sys, math,os\nfrom io import BytesIO, IOBase\n#data = BytesIO(os.read(0,os.fstat(0).st_size)).readline\n# from bisect import bisect_left as bl, bisect_right as br, insort\n# from heapq import heapify, heappush, heappop\nfrom collections import defaultdict as dd, deque, Counter\n# from itertools import permutations,combinations\n# from decimal import Decimal\ndef data(): return sys.stdin.readline().strip()\ndef mdata(): return list(map(int, data().split()))\ndef outl(var): sys.stdout.write(' '.join(map(str, var)) + '\\n')\ndef out(var): sys.stdout.write(str(var) + '\\n')\n#sys.setrecursionlimit(100000 + 1)\nINF = 10**9\nmod = 998244353\n\nstep=[(1,0),(-1,0),(0,1),(0,-1)]\n\nn=int(data())\na=mdata()\na1=[]\nfor i in range(n):\n    a1.append((a[i],i))\na1=sorted(a1)\nans=[]\nfor i in range(n-1,-1,-1):\n    k=0\n    while a1[k][1]!=i:\n        k+=1\n    for j in range(k+1,n):\n        if a1[k][1]>a1[j][1]:\n            a[a1[k][1]],a[a1[j][1]]=a[a1[j][1]],a[a1[k][1]]\n            ans.append(str(a1[j][1]+1)+' '+str(a1[k][1]+1))\nflag=True\nfor i in range(n-1):\n    if a[i]>a[i+1]:\n        flag=False\n        break\nif flag==True:\n    out(len(ans))\n    out('\\n'.join(ans))\nelse:\n    out(-1)\n\n\n\n\n\n\n", "\"\"\"T=int(input())\nfor _ in range(0,T):\n    n=int(input())\n    a,b=map(int,input().split())\n    s=input()\n    s=[int(x) for x in input().split()]\n    for i in range(0,len(s)):\n        a,b=map(int,input().split())\"\"\"\n\n\n\n\nn=int(input())\ns=[int(x) for x in input().split()]\nkk=[]\nfor i in range(n):\n    h=[]\n    kk.append(h)\n\nfor i in range(0,len(s)):\n    for j in range(i+1,len(s)):\n        if(s[i]>s[j]):\n            kk[j].append((s[i],i))\n\n\nfor i in range(0,n):\n    kk[i].sort()\n\nfnl=[]\nfor i in range(n-1,-1,-1):\n    for j in range(0,len(kk[i])):\n        fnl.append((i,kk[i][j][1]))\n\nprint(len(fnl))\nfor i in range(0,len(fnl)):\n    print(fnl[i][1]+1,fnl[i][0]+1)\n", "import sys\nimport math \nfrom decimal import *\ndef I(): return int(sys.stdin.readline())\ndef IL(): return list(map(int,sys.stdin.readline().strip().split()))\ndef ILS(): return list(map(str,sys.stdin.readline().strip().split()))\n\ndef findinv(l):\n\tp = []\n\tfor i in range(len(l)): \n\t\tfor j in range(i+1,len(l)):\n\t\t\tif l[i] > l[j] : p.append((i,-1*l[j],j))\n\treturn p\ndef check(pp):\n\tfor i in range(1,len(pp)):\n\t\tif pp[i]<pp[i-1] : return False\n\treturn True\n\n\t\n\ndef solve():\n\tn = I()\n\ta = IL()\n\t# inv = findinv(l)\n\t# if len(inv) == 0 : print(0);return \n\t# inv.sort()\n\t# # print(inv)\n\t# ll = l.copy()\n\t# for a,_,b in inv:\n\t# \ttmp = ll[a]\n\t# \tll[a]= ll[b]\n\t# \tll[b] = tmp\n\t# if check(ll) : \n\t# \tprint(len(inv))\n\t# \tfor a,_,b in inv :\n\t# \t\tprint(a+1,b+1)\n\t# \t# print()\n\t# else : print(-1)\n\tb=a.copy()\n\n\t# for(int i=0;i<n;i++)b[i]=a[i];\n\tb.sort()\n\t# sort(b.begin(), b.end());\n\tinv = []\n\tfor i in range(n):\n\t\tinv.append([])\n\ttotal = 0\n\t# v<v<pair<int,int > >>inv(n);\n\tfor i in range(n):\n\t\tfor j in range(i+1,n):\n\t\t\tif(a[j]<a[i]):\n\t\t\t\ttotal+=1;\n\t\t\t\tinv[i].append([-1*a[j],-1*j]);\n\t\t\t\n\t\t\n\tfor i in range(n):\n\t\tinv[i].sort()\n\tfor i in range(n):\n\t\tfor j in range(len(inv[i])):\n\t\t\t# print(inv[i][j])\n\t\t\tinv[i][j][0] *=-1\n\t\t\tinv[i][j][1] *=-1\n\tfor i in range(n):\n\t\tfor j in range( len(inv[i]) ):\n\t\t\ttmp = a[inv[i][j][1]]\n\t\t\ta[inv[i][j][1]]  = a[i]\n\t\t\ta[i] = tmp\n\t\t\n\t# }\n\tflag=1 \n\tfor i in range(n): \n\t\tif(b[i]!=a[i]) : flag=0;\n\t\n\tif flag == 0 :\n\t\tprint(-1)\n\telse :\n\t\tprint(total)\n\t\tfor i in range(n):\n\t\t\tfor j in range(len(inv[i])):\n\t\t\t\tprint(i+1,inv[i][j][1]+1)\n\t\t\t\t\t\n\nsolve()", "import sys\n\ndef minp():\n\treturn sys.stdin.readline().strip()\n\ndef mint():\n\treturn int(minp())\n\ndef mints():\n\treturn list(map(int, minp().split()))\n\ndef issorted(a):\n\tfor i in range(1,len(a)):\n\t\tif a[i-1] > a[i]:\n\t\t\treturn False\n\treturn True\n\ndef stupid(a,inv,was,order):\n\tif len(order) == len(inv) and issorted(a):\n\t\treturn order\n\tfor i in range(len(inv)):\n\t\tif was[i] == 0:\n\t\t\twas[i] = 1\n\t\t\torder.append(i)\n\t\t\tx,_,y = inv[i]\n\t\t\ty = -y\n\t\t\ta[x],a[y] = a[y],a[x]\n\t\t\tr = stupid(a,inv,was,order)\n\t\t\ta[x],a[y] = a[y],a[x]\n\t\t\twas[i] = 0\n\t\t\tif r is not None:\n\t\t\t\treturn r\n\t\t\torder.pop()\n\treturn None\n\n#from random import randint\n\ndef solve():\n\t#a = [randint(0,3) for i in range(5)] \n\t#print(*a)\n\t#n = len(a)\n\tn = mint()\n\ta = list(mints())\n\tinv = []\n\tfor i in range(1,n):\n\t\tfor j in range(i):\n\t\t\tif a[i] < a[j]:\n\t\t\t\tinv.append((i,-a[j],-j))\n\tinv.sort(reverse=True)\n\t#print(inv)\n\t#r = stupid(a.copy(),inv,[0]*len(inv),[])\n\tr = list(range(len(inv)))\n\t#print(*r)\n\tif r is not None:\n\t\tprint(len(r))\n\t\tfor z in r:\n\t\t\tv, _, u = inv[z]\n\t\t\tu = -u\n\t\t\tprint(u+1,v+1)\n\telse:\n\t\tprint(\"wut\")\n\n#for i in range(mint()):\nsolve()\n", "n = int(input())\na = list(map(int,input().split()))\naWithIndex = []\nfor i in range(n):\n    aWithIndex.append((a[i],i))\naWithIndex.sort(key = lambda x: x[0])\naOrder = [-1] * n\nfor i in range(n):\n    aOrder[aWithIndex[i][1]] = i\naOrderInverse = [-1] * n\nfor i in range(n):\n    aOrderInverse[aOrder[i]] = i\nresult = []\nfor i in range(n):\n    for j in range(aOrder[i] - 1, i - 1, -1):\n        result.append(str(i + 1) + ' ' + str(aOrderInverse[j] + 1))\n        tmp = aOrder[i]\n        aOrder[i] = aOrder[aOrderInverse[j]]\n        aOrder[aOrderInverse[j]] = tmp\n    for j in range(n):\n        aOrderInverse[aOrder[j]] = j\nprint(len(result))\nif len(result) != 0:\n    print('\\n'.join(result))\n", "import sys\n\ndef minp():\n\treturn sys.stdin.readline().strip()\n\ndef mint():\n\treturn int(minp())\n\ndef mints():\n\treturn list(map(int, minp().split()))\n\ndef issorted(a):\n\tfor i in range(1,len(a)):\n\t\tif a[i-1] > a[i]:\n\t\t\treturn False\n\treturn True\n\ndef stupid(a,inv,was,order):\n\tif len(order) == len(inv) and issorted(a):\n\t\treturn order\n\tfor i in range(len(inv)):\n\t\tif was[i] == 0:\n\t\t\twas[i] = 1\n\t\t\torder.append(i)\n\t\t\tx,_,y = inv[i]\n\t\t\ty = -y\n\t\t\ta[x],a[y] = a[y],a[x]\n\t\t\tr = stupid(a,inv,was,order)\n\t\t\ta[x],a[y] = a[y],a[x]\n\t\t\twas[i] = 0\n\t\t\tif r is not None:\n\t\t\t\treturn r\n\t\t\torder.pop()\n\treturn None\n\nn = mint()\na = list(mints())\ninv = []\nfor i in range(1,n):\n\tfor j in range(i):\n\t\tif a[i] < a[j]:inv.append((i,-a[j],-j))\ninv.sort(reverse=True)\nr = list(range(len(inv)))\nif r is not None:\n\tprint(len(r))\n\tfor z in r:v, _, u = inv[z];u = -u;print(u+1,v+1)\nelse:\n\tprint(\"wut\")\n", "import sys\n\ndef minp():\n\treturn sys.stdin.readline().strip()\n\ndef mint():\n\treturn int(minp())\n\ndef mints():\n\treturn list(map(int, minp().split()))\n\ndef issorted(a):\n\tfor i in range(1,len(a)):\n\t\tif a[i-1] > a[i]:\n\t\t\treturn False\n\treturn True\n\nn = mint()\na = list(mints())\ninv = []\nfor i in range(1,n):\n\tfor j in range(i):\n\t\tif a[i] < a[j]:inv.append((i,-a[j],-j))\ninv.sort(reverse=True)\nr = list(range(len(inv)))\nif r is not None:\n\tprint(len(r))\n\tfor z in r:v, _, u = inv[z];u = -u;print(u+1,v+1)\nelse:\n\tprint(\"wut\")\n", "import sys\n\ndef minp():\n\treturn sys.stdin.readline().strip()\n\ndef mint():\n\treturn int(minp())\n\ndef mints():\n\treturn list(map(int, minp().split()))\n\n\nn = mint()\na = list(mints())\ninv = []\nfor i in range(1,n):\n\tfor j in range(i):\n\t\tif a[i] < a[j]:inv.append((i,-a[j],-j))\ninv.sort(reverse=True)\nr = list(range(len(inv)))\nif r is not None:\n\tprint(len(r))\n\tfor z in r:v, _, u = inv[z];u = -u;print(u+1,v+1)\nelse:\n\tprint(\"wut\")\n", "import sys\n\ndef minp():\n\treturn sys.stdin.readline().strip()\n\ndef mint():\n\treturn int(minp())\n\ndef mints():\n\treturn list(map(int, minp().split()))\n\n\nn = int(input())\na = list(map(int,input().split()))\ninv = []\nfor i in range(1,n):\n\tfor j in range(i):\n\t\tif a[i] < a[j]:inv.append((i,-a[j],-j))\ninv.sort(reverse=True)\nr = list(range(len(inv)))\nif r is not None:\n\tprint(len(r))\n\tfor z in r:v, _, u = inv[z];u = -u;print(u+1,v+1)\nelse:\n\tprint(\"wut\")\n", "n = int(input())\na = list(map(int,input().split()))\ninv = []\nfor i in range(1,n):\n\tfor j in range(i):\n\t\tif a[i] < a[j]:inv.append((i,-a[j],-j))\ninv.sort(reverse=True)\nr = list(range(len(inv)))\nif r is not None:\n\tprint(len(r))\n\tfor z in r:v, _, u = inv[z];u = -u;print(u+1,v+1)\nelse:\n\tprint(\"wut\")\n", "n,a,inv = int(input()),list(map(int,input().split())),[]\nfor i in range(1,n):\n\tfor j in range(i):\n\t\tif a[i] < a[j]:inv.append((i,-a[j],-j))\ninv.sort(reverse=True);r = list(range(len(inv)))\nif r is not None:\n\tprint(len(r))\n\tfor z in r:v, _, u = inv[z];u = -u;print(u+1,v+1)\nelse:print(\"wut\")", "# from debug import debug\ninf = int(1e6)\n\nn = int(input())\nlis = list(map(int, input().split()))\nstore = []\nindex = list(range(0, n))\nfor k in range(1, n):\n\tfor _ in range(k):\n\t\tfor i in range(1, k+1):\n\t\t\tif lis[i] < lis[i-1]:\n\t\t\t\tlis[i], lis[i-1] = lis[i-1], lis[i]\n\t\t\t\tindex[i], index[i-1] = index[i-1], index[i]\n\t\t\t\tstore.append((index[i]+1, index[i-1]+1))\nstore.reverse()\nprint(len(store))\nfor i in store:\n\tprint(*i)", "import sys\ninput = sys.stdin.readline\n\nn=int(input())\nA=list(map(int,input().split()))\n\nB=[]\nfor i in range(n):\n    for j in range(i+1,n):\n        if A[i]>A[j]:\n            B.append((A[i],i+1,j+1))\n\nB.sort()\nB.sort(reverse=True,key=lambda x:x[2])\n\nprint(len(B))\nfor x,y,z in B:\n    print(y,z)\n", "# Anuneet Anand\n\nn = int(input())\nA = list(map(int,input().split()))\n\nI = []\nfor i in range(n):\n\tfor j in range(i+1,n):\n\t\tif A[i]>A[j]:\n\t\t\tI.append([A[i],i+1,j+1])\n\nI.sort()\nI.sort(key = lambda x:x[2],reverse = True)\nprint(len(I))\nif len(I)>0:\n\tfor i in I:\n\t\tj = i[1:]\n\t\tprint(*j)\n", "# from debug import debug\ninf = int(1e6)\n\nn = int(input())\nlis = list(map(int, input().split()))\nstore = []\nindex = list(range(0, n))\nfor k in range(1, n):\n\tfor _ in range(k):\n\t\tfor i in range(1, k+1):\n\t\t\tif lis[i] < lis[i-1]:\n\t\t\t\tlis[i], lis[i-1] = lis[i-1], lis[i]\n\t\t\t\tindex[i], index[i-1] = index[i-1], index[i]\n\t\t\t\tstore.append((index[i]+1, index[i-1]+1))\nstore.reverse()\nprint(len(store))\nfor i in store:\n\tprint(*i)", "from bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nfrom heapq import heappush,heappop,heapify\nimport math\nfrom collections import *\nfrom functools import reduce,cmp_to_key\nimport sys\ninput = sys.stdin.readline\nM = mod = 998244353\ndef factors(n):return sorted(set(reduce(list.__add__, ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0))))\ndef inv_mod(n):return pow(n, mod - 2, mod)\n \ndef li():return [int(i) for i in input().rstrip('\\n').split()]\ndef st():return input().rstrip('\\n')\ndef val():return int(input().rstrip('\\n'))\ndef li2():return [i for i in input().rstrip('\\n')]\ndef li3():return [int(i) for i in input().rstrip('\\n')]\n\n\n\nn = val()\nl = li()\nl1 = []\nfor i in range(n):\n    for j in range(i + 1,n):\n        if l[i] > l[j]:\n            l1.append([l[i],i,j])\n\nprint(len(l1))\nl1.sort()\nl1.sort(reverse = 1,key = lambda x:x[-1])\nfor _,i,j in l1:print(i + 1,j + 1)\n", "n = int(input())\narr = list(map(int, input().split()))\nx = []\nfor i in range(n):\n    x.append([arr[i],i])\nx.sort(reverse=True)\nres = []\nfor v, pos in x:\n    for i in range(pos):\n        if arr[i] > v:\n            res.append(str(i+1)+' '+str(pos+1))\nprint(len(res))\nprint('\\n'.join(res))"]