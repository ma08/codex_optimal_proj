["import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(100000)\n\ndef getN():\n    return int(input())\ndef getList():\n    return list(map(int, input().split()))\nimport math\nfrom bisect import bisect_left\n\n\nn, k = getList()\nnums = getList()\nnums.sort()\nhalf = (n // 2) + 1\nnums = nums[half-1:]\nsm = sum(nums)\n\ndef check(arr, k, tgt):\n    for num in arr:\n        sub = max(0, (tgt - num))\n        if sub == 0:\n            return True\n        k -= sub\n        if k < 0:\n            return False\n\n    return True\n\n\nmn = 0\nmx = 3 * (10 ** 9)\n# print(nums, sm)\nwhile(mx-mn > 1):\n    md = (mx+mn) // 2\n    # print(md)\n    if check(nums, k, md):\n        mn = md\n    else:\n        mx = md\n\nif not check(nums, k, md):\n    md -= 1\nprint(md)\n", "import sys \nimport bisect\ninput = lambda: sys.stdin.readline().rstrip()\n\nn, k = list(map(int, input().split()))\narr = sorted(map(int, input().split()))\nmid = arr[n//2]\n\n\ns = mid\ne = int(2e9)\n\nwhile s <= e:\n  m = (s + e ) // 2\n  z = 0\n  for i in range(n//2, bisect.bisect_left(arr, m)):\n    if m > arr[i]:\n      z += m - arr[i]\n  if z > k:\n    e = m - 1\n  else:\n    s = m + 1\n\nprint(e)\n\n  \n\n  \n\n", "import sys\ninput = sys.stdin.readline\n\nn,k=list(map(int,input().split()))\nA=sorted(map(int,input().split()),reverse=True)\n\nMIN=1\nMAX=max(A)+k\n\n\nwhile MIN!=MAX:\n    AVE=(MIN+MAX+1)//2\n\n    score=0\n\n    for i in range(n//2+1):\n        if AVE>A[i]:\n            score+=AVE-A[i]\n\n    if score>k:\n        MAX=AVE-1\n    else:\n        MIN=AVE\n\nprint(MIN)\n        \n        \n    \n", "n,k = map(int,input().split())\na = list(map(int,input().split()))\na.sort()\nid = n//2\nfor i in range(n//2,n-1):\n    if (a[i+1]-a[i])*(i+1-id)>k:\n        print(a[i]+k//(i+1-id))\n        return\n    else:\n        k-=(a[i+1]-a[i])*(i+1-id)\nprint(a[-1]+k//(n-id))", "[n,k] = [int(w) for w in input().split()]\na = [int(w) for w in input().split()]\n\na.sort()\na.append(10**57)\nm = n//2\nfor i in range(m,n):\n    dk = (i-m+1)*(a[i+1]-a[i])\n    if k < dk:\n        break\n    k -= dk\nprint(a[i] + k//(i-m+1))\n", "n, k = [int(s) for s in input().split()]\narr = sorted([int(s) for s in input().split()])\narr = arr[::-1]\narr = [pow(10, 11)] + arr[0:(n // 2 + 1)]\nn = len(arr)\npoint = n - 1\nwhile(k != 0):\n    t = min(k, (n - point) * (arr[point - 1] - arr[point]))\n    k -= t\n    arr[point] += t // (n - point)\n    if k != 0:\n        point -= 1\nprint(arr[point])", "# n=int(input())\nn,k=(map(int,input().split()))\na=list(map(int,input().split()))\na.sort()\nmid=n//2\nfor i in range(mid,n-1):\n    if k-(a[i+1]-a[i])*(i-mid+1)>=0:\n        k-=(a[i+1]-a[i])*(i-mid+1)\n    else:\n        print(k//(i-mid + 1) + a[i]);return\nprint(k//(n-mid) + a[-1])\n\n        ", "def main():\n    import sys\n    input = sys.stdin.readline\n    \n    n, k = map(int, input().split())\n    arr = list(map(int, input().split()))\n    \n    arr.sort()\n    arr.append(10**12)\n    \n    median = arr[n >> 1]\n    \n    i = n // 2\n    while i <= n - 1 and arr[i + 1] == median:\n        i += 1\n    \n    cnt = i + 1 - (n // 2)\n    \n    while i <= n:\n        i += 1\n        while i <= n - 1 and arr[i + 1] == arr[i]:\n            i += 1\n        \n        diff = arr[i] - median\n        if diff * cnt > k:\n            ans = median + k // cnt\n            break\n        else:\n            median += diff\n            k -= cnt * diff\n            cnt = i + 1 - (n // 2)\n    \n    print(ans)\n    \n    return 0\n\nmain()", "n,k = list(map(int,input().split()))\n\nA = [int(x) for x in input().split()]\nA.sort()\nmedian = A[n//2]\n\ninf = 10**16\n\nfrom collections import defaultdict as dd, deque\nC = dd(int)\nfor x in A[n//2:]:\n    C[x] += 1\nC[inf] = 123\n\nnmedian = C[median]\n\nS = sorted(C.items())\n\ni = 0\nwhile i < len(S) and S[i][0] < median:\n    i += 1\n\nwhile True:\n    who,count = S[i+1]\n\n    afford = k//nmedian\n    if who != inf:\n        can =  who - median\n    else:\n        can = inf\n\n    if min(afford,can) == can:\n        k -= can*nmedian\n        median = who\n        nmedian += count\n    else:\n        median += afford\n        break\n    i += 1\nprint(median)\n\n\n", "n,k=list(map(int,input().split()))\narr = list(map(int,input().split()))\narr.sort()\nn //= 2\narr = arr[n:]\nn+=1\nmed = arr[0]\nflag = 1\nwhile flag < n:\n    if arr[flag]>med:\n        kk = (arr[flag]-med)*flag\n        if kk < k:\n            k -= kk\n            med = arr[flag]\n        else:\n            med += k//flag\n            k=0\n            break\n    flag += 1\nif flag==n:\n    med += k // flag\nprint(med)\n\n\n", "n, k = list(map(int, input().split()))\n\narr = sorted(list(map(int, input().split())))\n\nmedian = arr[n // 2]\n\njumps = []\n\nfor i in range(n // 2 + 1, n):\n    jumps.append(arr[i] - arr[i - 1])\n\nfor i in range(len(jumps)):\n    weight = i + 1\n    if weight * jumps[i] > k: # the median cannot go jumps[i] jumps\n        this_jump = k // weight\n        median += this_jump\n        k -= this_jump * weight\n        break\n    k -= weight * jumps[i]\n    median += jumps[i]\n\nweight = n // 2 + 1\nmedian += k // weight\n\nprint(median)\n", "n,k=map(int,input().split())\nl=list(map(int,input().split()))\nl.sort()\nsame=1\nmid=n//2\nwhile k>0:\n\tif same<=mid:\n\t\tdiff=l[mid+same]-l[mid]\n\t\ttemp=k\n\t\tk-=((diff)*same)\n\t\tif k>=0:\n\t\t\tl[mid]=l[mid+same]\n\t\telse:\n\t\t\tl[mid]=l[mid]+(temp//same)\n\telse:\n\t\tl[mid]=l[mid]+(k//(same))\n\t\tk=0\n\t#print (l[mid],same)\n\tsame+=1\nprint (l[mid])", "def mp():\n    return map(int, input().split())\n\nn, k = mp()\na = list(mp())\na.sort()\n\nl = 1\nr = 10 ** 20\nwhile l + 1 < r:\n    m = (l + r) // 2\n    s = 0\n    for i in range(n // 2, n):\n        s += max(0, m - a[i])\n    if k < s:\n        r = m\n    else:\n        l = m\n\nprint(l)", "n , k = list(map(int,input().split()))\nai = list(map(int,input().split()))\nai.sort()\nnum = n // 2\nnum2 = num\nans = ai[num]\nn2 = n - 1\nwhile num != n2 and k > 0:\n    num += 1\n    k -= (ai[num] - ai[num-1]) * (num - num2)\nif k < 0:\n    print(ai[num] + k // (num - num2))\nelse:\n    print(ai[num] + k // (num - num2 + 1))\n", "n, k = list(map(int, input().split()))\n\na = list(map(int, input().split()))\n\na.sort()\n\nx = len(a)//2\nrem = 1\nans = a[x]\n\nwhile k > 0:\n    if x+rem < len(a):\n        if k >= rem*(a[x+rem]-a[x+rem-1]):\n            k -= rem*(a[x+rem]-a[x+rem-1])\n            ans = a[x+rem]\n            rem += 1\n        else:\n            ans += k//rem\n            k = 0\n    else:\n        ans += k//rem\n        k = 0\nprint(ans)\n", "n, k = map(int, input().split())\nassert( n % 2 == 1 )\narr = sorted(map(int, input().split()))\n\narr = arr[n // 2:]\n\nmed = arr[0]\nfor i in range(1, len(arr)):\n    if k == 0:\n        break\n    if arr[i] == med:\n        continue\n    else:\n        diff = arr[i] - med\n        kdiff = min(diff * i, k)\n        med += kdiff // i\n        k -= kdiff\n\nprint(med + k // len(arr))", "n,m = list(map(int, input().split()))\na = list(map(int, input().split()))\na.sort()\na = a[n//2:]\n\nn = n//2+1\nn_inc = 1\n\n\n\nwhile m>0:\n\twhile n_inc < n and a[n_inc-1] == a[n_inc]:\n\t\tn_inc+=1\n\tif n_inc == n:\n\t\tto_inc = m // n_inc\n\telse:\n\t\tto_inc = min(m // n_inc, a[n_inc]-a[n_inc-1])\n\t\n\ttotal_inc = n_inc * to_inc\n\t\n\t#print(a, n_inc, to_inc, total_inc, m)\n\t\n\tm -= total_inc\n\ta[n_inc-1] += to_inc\n\t\n\t\n\tif n_inc==n or to_inc==0:\n\t\tbreak\n\t\n\t\nprint(a[n_inc-1])\n\t\t\n\n", "n, k = [int(i) for i in input().split()]\nl = [int(i) for i in input().split()]\n\nl.sort()\nl = l[n//2:]\n\n\n\nwhile k != 0 :\n    mini = l[0]\n    compte = l.count(mini)\n    if compte == len(l) :\n        reste = k//len(l)\n        l[0] += reste\n        k = 0\n        break\n    deux_mini = l[compte]\n    diff = deux_mini - mini\n    if k >= diff*compte :\n        k -= diff * compte\n        for i in range(compte) :\n            l[i] = deux_mini\n    else :\n        reste = k//compte\n        l[0] += reste\n        k = 0\n        break\n\nprint(l[0])\n", "import sys\ninput = sys.stdin.readline\n\nn, k = list(map(int, input().split()))\nl = list(map(int, input().split()))\nl = sorted(l)\np = n // 2\nans = l[p]\ntgt = 1\nwhile (p < n - 1):\n\tdiff = l[p + 1] - l[p]\n\tif k >= diff * tgt:\n\t\tk -= diff * tgt\n\t\tp += 1\n\t\tans = l[p]\n\t\ttgt += 1\n\telse:\n\t\tprint(ans + k // tgt)\n\t\treturn\nprint(ans + k // tgt)\n", "n, k = map(int, input().split())\narray = list(map(int, input().split()))\narray.sort()\nmed = n // 2\n\ndef key(m):\n    s = 10**10\n    ind = None\n    for i in range(n):\n        if 0 <= m - array[i] <= s:\n            s = m - array[i]\n            ind = i\n    if ind == None:\n        return False\n    if ind < med:\n        return False\n    else:\n        for i in range(ind-1, med-1, -1):\n            s += m - array[i]\n        return s <= k\n\n\nleft = array[med]\nright = 10 ** 10\nwhile right - left != 1:\n    mid = (right + left) // 2\n    if key(mid):\n        left = mid\n    else:\n        right = mid\nprint(left)", "n, k = input().split()\nn = int(n)\nk = int(k)\n\nw = input().split()\nw = [int(i) for i in w]\n\n\nif n == 1:\n    print(w[0] + k)\n\nelse:\n    w = sorted(w)\n    idx = len(w)//2 + 1\n    mul = 1\n    gain = 0\n\n    for i in range(idx-1, len(w)-1):\n        d = w[i+1] - w[i]\n        if k > d * mul:\n            #remainder\n            k = k - d*mul\n            gain += d\n        else:\n            gain += k // mul\n            k = k - d*mul\n            break\n            \n        mul += 1\n    # if for last elt\n    if k > 0:\n        gain += k // mul\n    \n    print(w[idx-1] + gain)\n        \n", "######################################################################\n# Write your code here\nimport sys\nimport math\ninput = sys.stdin.readline\n#import resource\n#resource.setrlimit(resource.RLIMIT_STACK, [0x10000000, resource.RLIM_INFINITY])\n#sys.setrecursionlimit(0x100000)\n# Write your code here\nRI = lambda : [int(x) for x in sys.stdin.readline().strip().split()]\nrw = lambda : input().strip().split()\n#from collections import defaultdict as df\nimport heapq \n#heapq.heapify(li) heappush(li,4) heappop(li)\n#import random\n#random.shuffle(list)\ninfinite = float('inf')\n#######################################################################\n\n\nn,k=RI()\n\nl=RI()\n\nl.sort()\n\ni=n//2\nmedian=l[i]\nsteps=0\ncount=0\nwhile(i<n):\n    temp=l[i]\n    while(i<n and l[i]==temp):\n        count+=1\n        i+=1\n    if(i<n):\n        a=k//count\n        if(a==0):\n            break\n        else:\n            diff=l[i]-temp\n            if(a>=diff):\n                k-=(diff*count)\n                median=l[i]\n                continue\n            else:\n                k-=(a * count)\n                median+=a\n                break\n    else:\n        a=k//count\n        if(a==0):\n            break\n        else:\n            median+=a\n            break\nprint(median)\n"]