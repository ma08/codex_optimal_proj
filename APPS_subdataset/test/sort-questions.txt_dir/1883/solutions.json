["import sys\ndef Z(s):\n    return int(s)-1\n\nn=int(sys.stdin.readline())\n\nHotels=[False]*(n)\n\nRep=[0]*(n+1)\nChains=[]\n\nType=list(map(int,sys.stdin.readline().split()))\nfor i in range(n):\n    if(Type[i]==1):\n        Hotels[i]=True\nA=list(map(Z,sys.stdin.readline().split()))\n\nfor item in A:\n    Rep[item]+=1\nfor i in range(n):\n    if(Hotels[i]):\n        Chains.append([i])\n        x=A[i]\n        if(x==-1):\n            continue\n        while(A[x]!=-1 and Rep[x]<=1):\n            Chains[-1].append(x)\n            x=A[x]\n        if(Rep[x]<=1):\n            Chains[-1].append(x)\n\n\n    \n        \nif(n==1):\n    print(1)\n    print(1)\nelse:\n        \n    X=max(Chains,key=len)\n\n\n\n    sys.stdout.write(str(len(X))+\"\\n\")\n    sys.stdout.write(str(X[-1]+1))\n\n    for i in range(len(X)-2,-1,-1):\n        sys.stdout.write(\" \"+str(X[i]+1))       \n        \n", "3\n\ndef readln(): return tuple(map(int, input().split()))\n\nn, = readln()\nt = (-1,) + readln()\nv = (0,) + readln()\ncnt = [0] * (n + 1)\nfor i in range(1, n + 1):\n    cnt[v[i]] += 1\nans = []\nfor i in range(1, n + 1):\n    if t[i] == 1:\n        j = i\n        tmp = [i]\n        while(t[v[j]] == 0) and cnt[v[j]] == 1:\n            j = v[j]\n            tmp.append(j)\n        if(len(tmp) > len(ans)):\n            ans = tmp\nprint(len(ans))\nprint(*tuple(reversed(ans)))\n", "n = int(input())\na, b = [0] + list(map(int, input().split())), [0] + list(map(int, input().split()))\nans, p = [], [0] * (n + 1)\nfor i in b:\n    p[i] += 1\nfor i in range(1, n + 1):\n    if a[i] == 1:\n        t = [i]\n        x = b[i]\n        while p[x] == 1:\n            t.append(x)\n            x = b[x]            \n        if len(t) > len(ans): ans = t[:]\nans.reverse()\nprint(len(ans))\nprint(' '.join(str(x) for x in ans))", "import sys\ndef Z(s):\n    return int(s)-1\n\nn=int(sys.stdin.readline())\n\nHotels=[False]*(n)\n\nRep=[0]*(n+1)\nChains=[]\n\nType=list(map(int,sys.stdin.readline().split()))\nfor i in range(n):\n    if(Type[i]==1):\n        Hotels[i]=True\nA=list(map(Z,sys.stdin.readline().split()))\n\nfor item in A:\n    Rep[item]+=1\nfor i in range(n):\n    if(Hotels[i]):\n        Chains.append([i])\n        x=A[i]\n        if(x==-1):\n            continue\n        while(A[x]!=-1 and Rep[x]<=1):\n            Chains[-1].append(x)\n            x=A[x]\n        if(Rep[x]<=1):\n            Chains[-1].append(x)\n\n\n    \n        \nif(n==1):\n    print(1)\n    print(1)\nelse:\n        \n    X=max(Chains,key=len)\n\n\n\n    sys.stdout.write(str(len(X))+\"\\n\")\n    sys.stdout.write(str(X[-1]+1))\n\n    for i in range(len(X)-2,-1,-1):\n        sys.stdout.write(\" \"+str(X[i]+1))       \n        \n", "import sys\n\n\nn = int(input())\ntype = input().split()\nfa = list(map(int, input().split()))\n\ndegree = [0] * (n+1)\nfor i in fa:\n    degree[i]+=1\n\ntype = [0] + type\nfa= [0] + fa\nmax=0\nmaxi=0\n\nfor i in range(1, n+1):\n    if type[i] == '1': # it's hotel\n        cnt = 0\n\n        cur=fa[i]\n        while not (cur==0 or type[cur] == '1' or degree[cur]>1):\n            cnt+=1\n            cur=fa[cur]\n\n        if(max <= cnt):\n            max=cnt\n            maxi=i\nprint(max+1)\nans = []\ncur=maxi\nwhile not(not cur or type[cur] == '1' and cur!=maxi or degree[cur]>1):\n    ans.append(cur)\n    cur=fa[cur]\n\nprint(*ans[::-1])", "import sys\n\ndef solve():\n    n = int(input())\n    types = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    res = list()\n    count = [0] * (n + 1)\n    for val in a:\n        count[val-1]+=1\n    for i in range(n):\n        if types[i] == 1:\n            temp = list()\n            cur = i\n            while True:\n                if count[cur] > 1 or cur < 0: break\n                temp.append(cur + 1)\n                cur = a[cur] - 1\n            if len(temp) > len(res):\n                res = temp\n    print(len(res))\n    return ' '.join(map(str, res[::-1]))\n    # adj = [list() for _ in range(n)]\n    # visited = [0] * (n + 1)\n    # best = -1\n    # start = -1\n    # bestlen = 0\n    # for i in range(n):\n    #     if a[i] > 0: adj[a[i] - 1].append(i)\n    # # counter = 0\n    # for i in range(n):\n    #     if visited[i] == 0:\n    #         cur = i\n    #         # temp = list()\n    #         # temp.append(cur)\n    #         temp = 1\n    #         visited[cur] += 1\n    #         while len(adj[cur]) == 1:\n    #             # print(cur)\n    #             if len(adj[cur]) > 0 and adj[cur][0] == cur: break\n    #             cur = adj[cur][0]\n    #             # temp.append(cur)\n    #             visited[cur]+=1\n    #             temp+=1\n    #             # if counter == 10000: return - 1\n    #         if types[cur] == 1 and temp > bestlen:\n    #             best = cur\n    #             bestlen = temp\n    #             start = i\n    # res = list()\n    # while True:\n    #     res.append(best)\n    #     if best == start: break\n    #     next = a[best] - 1\n    #     best = next\n    # res = res[::-1]\n    # for i in range(len(res)): res[i] += 1\n    # print(len(res))\n    # return ' '.join(map(str, res))\n\nif sys.hexversion == 50594544 : sys.stdin = open(\"test.txt\")\nprint(solve())", "import sys\n\ndef solve():\n    n = int(input())\n    types = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    res = list()\n    count = [0] * (n + 1)\n    for val in a:\n        count[val-1]+=1\n    for i in range(n):\n        if types[i] == 1:\n            temp = list()\n            cur = i\n            while True:\n                if count[cur] > 1 or cur < 0: break\n                temp.append(cur + 1)\n                cur = a[cur] - 1\n            if len(temp) > len(res):\n                res = temp\n    print(len(res))\n    return ' '.join(map(str, res[::-1]))\n\nif sys.hexversion == 50594544 : sys.stdin = open(\"test.txt\")\nprint(solve())", "n = int(input())\nt = [0] + list(map(int, input().split()))\na = [0] + list(map(int, input().split()))\n\nans, cnt = [], [0 for i in range(n + 1)]\n\nfor i in a:\n    cnt[i] += 1\n\nfor i in range(1, n + 1):\n    if t[i] == 1:\n        crt = [i]\n        x = a[i]\n        while cnt[x] == 1:\n            crt.append(x)\n            x = a[x]\n        if len(crt) > len(ans):\n            ans = crt[:]\nans.reverse()\nprint(len(ans))\nprint(' '.join(map(str, ans)))\n", "n = int(input())\nt = [0] + list(map(int, input().split()))\na = [0] + list(map(int, input().split()))\n\nans, cnt = [], [0 for i in range(n + 1)]\n\nfor i in a:\n    cnt[i] += 1\n\nfor i in range(1, n + 1):\n    if t[i] == 1:\n        crt = [i]\n        x = a[i]\n        while cnt[x] == 1:\n            crt.append(x)\n            x = a[x]\n        if len(crt) > len(ans):\n            ans = crt[:]\nans.reverse()\nprint(len(ans))\nprint(' '.join(map(str, ans)))\n\n", "n = int(input())\nt = [0] + list(map(int, input().split()))\na = [0] + list(map(int, input().split()))\n\nans, cnt = [], [0 for i in range(n + 1)]\n\nfor i in a:\n    cnt[i] += 1\n\nfor i in range(1, n + 1):\n    if t[i] == 1:\n        crt = [i]\n        x = a[i]\n        while cnt[x] == 1:\n            crt.append(x)\n            x = a[x]\n        if len(crt) > len(ans):\n            ans = crt[:]\nans.reverse()\nprint(len(ans))\nprint(' '.join(map(str, ans)))", "n = int(input())\n\nt = [0] + list(map(int, input().split()))\n\na = [0] + list(map(int, input().split()))\n\n\n\nans, cnt = [], [0 for i in range(n + 1)]\n\n\n\nfor i in a:\n\n    cnt[i] += 1\n\n\n\nfor i in range(1, n + 1):\n\n    if t[i] == 1:\n\n        crt = [i]\n\n        x = a[i]\n\n        while cnt[x] == 1:\n\n            crt.append(x)\n\n            x = a[x]\n\n        if len(crt) > len(ans):\n\n            ans = crt[:]\n\nans.reverse()\n\nprint(len(ans))\n\nprint(' '.join(map(str, ans)))\n\n\n\n# Made By Mostafa_Khaled\n", "n = int(input())\nt = [0] + list(map(int, input().split()))\na = [0] + list(map(int, input().split()))\n\nres, cnt = [], [0] * (n + 1)\nfor i in a:\n    cnt[i] += 1\nfor i in range(1, n+1):\n    if t[i] == 0: \n        continue\n    curr_res = [i]\n    x = a[i]\n    while cnt[x] == 1:\n        curr_res.append(x)\n        x = a[x]\n    if len(curr_res) > len(res):\n        res = curr_res[:]\nres.reverse()\nprint(len(res))\nprint(*res)\n"]