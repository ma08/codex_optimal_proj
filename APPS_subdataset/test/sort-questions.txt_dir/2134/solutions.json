["n=int(input())\nlst1=list(map(int,input().split()))[:n]\nlst2=list(map(int,input().split()))[:n]\ndict={}\nfor a in lst1:\n    if a in dict:\n        dict[a]+=1\n\n    else:\n        dict[a]=1\n\n\nans=0\ngrp=[]\n\nfor k in dict:\n    if(dict[k]>1):\n        grp.append(k)\n\n\n\nfor i in range(n):\n    for k in grp:\n        \n        if(lst1[i]|k==k):\n            ans +=lst2[i]\n            break\nprint(ans)\n", "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Tue Oct  8 23:02:08 2019\n\n@author: Mridul Garg\n\"\"\"\n\nn = int(input())\n\na = [0]*n\nb = [0]*n\n\na = list(map(int, input().split(' ')))\nb = list(map(int, input().split(' ')))\n\nfor i in range(n):\n    a[i] = [a[i], b[i]]\na.sort(reverse = True, key = lambda x: x[0])\n\nsame = []\ncomp = a[0][0]\ncount = 1\nscore = a[0][1]\nfor i in range(1, n):\n    if comp == a[i][0] and i == n - 1:\n        count += 1\n        score += a[i][1]\n        same.append([comp, score, i])\n    \n    elif comp == a[i][0]:\n        count += 1\n        score += a[i][1]\n        \n    else:\n        if count > 1:\n            same.append([comp, score, i-1])\n            comp = a[i][0]\n            score = a[i][1]\n            count = 1\n        else:\n            comp = a[i][0]\n            score = a[i][1]\n            count = 1\n\n#scores = []\nrelevant = [] \n       \nif len(same) == 0:\n    print(0)\n    \nelse:\n    f = same[0][0]\n    fscore = same[0][1]\n    findex = same[0][2]\n    \n    for i in range(1, len(same)):\n        if f & same[i][0] != same[i][0]:\n            relevant.append(same[i][0])\n#            fscore += same[i][1]\n    \n    for i in range(findex + 1, n):\n        if f & a[i][0] == a[i][0]:\n            fscore += a[i][1]\n        else:\n            for j in relevant:\n                if a[i][0] & j == a[i][0]:\n                    fscore += a[i][1]\n                    break\n                \n    print(fscore)\n                \n    \n            \n   \n#else:\n#    \n#    for i in same:\n#        score = i[1]\n#        index = i[2]\n#        num = i[0]\n#        \n#        for j in range(index + 1, n):\n#            if num & a[j][0] == a[j][0]:\n#                score += a[j][1]\n#                \n#        scores.append([num, score])\n#        \n#    print(scores) \n#    temp = scores[0]\n#    for i in range(len(scores)):\n#        print('============================================')\n#        for j in range(len(scores)):\n#            if scores[i][0] & scores[j][0] != scores[j][0]:\n#                scores[i][1] += scores[j][1]\n#                print(scores[i][1])\n#        \n#    \n#    print(scores)\n#    print(max(scores))\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "def bitcode(lis):\n    bc = []\n    for n in lis:\n        if lis[n]>1:\n            bc.append(n)\n    return bc\n\nn = int(input())\nlis = {}\na = list(map(int,input().split()))\nb = list(map(int,input().split()))\nfor bc in a:\n    try:\n        lis[bc] += 1\n    except:\n        lis[bc] = 1\n\nbcs = bitcode(lis)\nif len(bcs)==0:\n    print(0)\nelse:\n    bsum = 0\n    for i in range(n):\n        if lis[a[i]] > 1:\n            bsum += b[i]\n            continue\n        for bc in bcs:\n            if (a[i] & ~bc) == 0:\n                bsum += b[i]\n                break\n    print(bsum)", "from collections import defaultdict\nimport sys\n\n\nn = int(input())\na = [int(val) for val in input().split()]\nb = [int(val) for val in input().split()]\n\ngroups = defaultdict(lambda: {'count': 0, 'skill': 0})\nfor i, val in enumerate(a):\n    groups[val]['count'] += 1\n    groups[val]['skill'] += b[i]\n\nif len(groups) == n:\n    print(0)\n    return\n\ngroup = []\noutput = 0\nindividuals = []\n\nfor val, desc in list(groups.items()):\n    if desc['count'] == 1:\n        individuals.append((val, desc['skill']))\n    else:\n        group.append(val)\n        output += desc['skill']\n\nfor ival, skill in individuals:\n    valid = False\n    for gval in group:\n        if ival | gval == gval:\n            valid = True\n    if valid:\n        output += skill\nprint(output)\n        \n", "# -*- coding:utf-8 -*-\n\n\"\"\"\n\ncreated by shuangquan.huang at 1/9/20\n\n\"\"\"\n\nimport collections\nimport time\nimport os\nimport sys\nimport bisect\nimport heapq\nfrom typing import List\n\n\ndef issub(u, v):\n    if u > v:\n        return False\n    if u == v:\n        return True\n    \n    b = 1\n    for i in range(v.bit_length()+1):\n        if v & b < u & b:\n            return False\n        b <<= 1\n    return True\n\n\ndef solve(N, A, B):\n    vi = collections.defaultdict(list)\n    for i, v in enumerate(A):\n        vi[v].append(i)\n        \n    wc = collections.Counter(A)\n    group = {k for k, v in wc.items() if v > 1}\n    others = {u for u in wc.keys() if u not in group and any(issub(u, v) for v in group)}\n    group |= others\n    \n    ans = 0\n    for u in group:\n        ans += sum([B[i] for i in vi[u]])\n    \n    return ans\n    \n\n# def test():\n#     N = 7000\n#     import random\n#     A = [random.randint(1, 10000) for i in range(N)]\n#     B = [random.randint(0, 10**9) for _ in range(N)]\n#     t0 = time.time()\n#     print(solve(N, A, B))\n#     print(time.time() - t0)\n#\n# test()\n#\nN = int(input())\nA = [int(x) for x in input().split()]\nB = [int(x) for x in input().split()]\nprint(solve(N, A, B))", "n = int(input())\na = list(map(int,input().split()))\nb = list(map(int,input().split()))\nlis=[]\nd={}\nfor i in a:\n    if i in d:\n        d[i]+=1\n    else:\n        d[i]=1\nans=0        \nfor i in d:\n    if d[i]>1:\n        lis.append(i)\nfor i in range(len(lis)):\n    for j in range(n):\n        if lis[i]==a[j]:\n            ans+=b[j]            \nfor i in range(n):\n    if d[a[i]]==1:\n        c=0\n        for j in range(len(lis)):\n            if a[i]&lis[j]==a[i]:\n                lis.append(a[i])\n                ans+=b[i]\n                break\nprint(ans)            \n\n\n", "n = int(input())\na = list(map(int,input().split()))\nb = list(map(int,input().split()))\nlis=[]\nd={}\nfor i in a:\n    if i in d:\n        d[i]+=1\n    else:\n        d[i]=1\nans=0        \nfor i in d:\n    if d[i]>1:\n        lis.append(i)\nfor i in range(len(lis)):\n    for j in range(n):\n        if lis[i]==a[j]:\n            ans+=b[j]            \nfor i in range(n):\n    if d[a[i]]==1:\n        c=0\n        for j in range(len(lis)):\n            if a[i]&lis[j]==a[i]:\n                lis.append(a[i])\n                ans+=b[i]\n                break\nprint(ans)            ", "import sys\ninput=sys.stdin.readline\nfrom collections import defaultdict\n \nn=int(input())\na=list(map(int,input().split()))\nb=list(map(int,input().split()))\nc=defaultdict(int)\nfor i in range(n):\n    c[a[i]]+=1\n\n\ns=0\nfor i in range(n):\n    for j in c:\n        if c[j]>1:\n            if j|a[i]==j:\n                s+=b[i]\n                break\nprint(s)", "from collections import defaultdict\nN = int(input())\nif(N == 1):\n    print(0)\n    return\na = [int(x) for x in input().split()]\nb = [int(x) for x in input().split()]\nDict = defaultdict(int)\nSum = defaultdict(int)\nfor i in range(N):\n    Dict[a[i]] += 1\n    Sum[a[i]] += b[i]\nans = 0\nval = 0\nGroup = []\nfor i in Dict.keys():\n    if(Dict[i]>1):\n        Group.append(i)\n        ans += Sum[i]\n        val |= i\nfor i in range(N):\n    if(Dict[a[i]] == 1):\n        for k in Group:\n            if(a[i] | k <= k):\n                ans += Sum[a[i]]\n                break\nprint(ans)", "import sys\n\ninput = sys.stdin.readline\n\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\n\ndef lcm(a, b):\n    return (a * b) / gcd(a, b)\n\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    d={}\n    f={}\n    for i in range(n):\n        if a[i] not in d:\n            d[a[i]]=b[i]\n            f[a[i]]=1\n        else:\n            d[a[i]]+=b[i]\n            f[a[i]]+=1\n    ans=0\n    used=[0]*n\n    for i in list(f.keys()):\n        if f[i]>1:\n            for j in range(n):\n                if i|a[j]==i and not used[j]:\n                    used[j]=1\n    for i in range(n):\n        if used[i]:\n            ans+=b[i]\n    print(ans)\n    \n\n\n\n\n\n\n\n\n\n    return\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"]