["import re\nimport itertools\nfrom collections import Counter, deque\n\nclass Task:\n    a = []\n    d = 0\n    answer = 0\n\t\n    def getData(self):\n        n, m, self.d = [int(x) for x in input().split(' ')]\n        for _ in range(n):\n            self.a += [int(x) for x in input().split(' ')]\n        #inFile = open('input.txt', 'r')\n        #inFile.readline().rstrip()\n        #self.childs = inFile.readline().rstrip()\n\n    def solve(self):\n        a = self.a\n\n        for x in a:\n            if x % self.d != a[0] % self.d:\n                self.answer = -1\n                return\n        \n        a = [x // self.d for x in a]\n        a.sort()\n        \n        d = [sum(a)] + [0 for _ in range(1, a[-1] + 1)]\n        \n        lessCurrentLevel = 0\n        counter = Counter(a)\n        \n        for level in range(1, a[-1] + 1):\n            lessCurrentLevel += counter[level - 1]\n            d[level] = d[level - 1] + lessCurrentLevel - \\\n                    (len(a) - lessCurrentLevel)\n        self.answer = min(d)\n\n    def solve2(self):\n        a, d = self.a, self.d\n        for i in range(1, len(a)):\n            if a[i] % d != a[0] % d:\n                self.answer = -1\n                return\n        a = [x // d for x in a]\n        d = [abs(a[0] - i) for i in range(10000 + 1)]\n        for i in range(1, len(a)):\n            for j in range(0, len(d)):\n                d[j] += abs(a[i] - j)\n        self.answer = min(d)\n\n    def printAnswer(self):\n        print(self.answer)\n        #print(re.sub('[\\[\\],]', '', str(self.answer)))\n        #outFile = open('output.txt', 'w')\n        #outFile.write(self.answer)\n\ntask = Task()\ntask.getData()\ntask.solve()\ntask.printAnswer()\n", "def f(t):\n    t.sort()\n    return t[len(t) // 2]\n    \nn, m, d = map(int, input().split())\nt, p = [], [0] * (n * m)\nfor i in range(n):\n    t += list(map(int, input().split()))\nu = t[0] % d\nfor i, v in enumerate(t):\n    if u != v % d:\n        p = []\n        break\n    else: p[i] = v // d\nif p:\n    s = f(p)\n    print(sum(abs(i - s) for i in p))\nelse: print(-1)", "n, m, d = map(int, input().split())\nk, t = n * m, []\nfor i in range(n):\n    t += list(map(int, input().split()))\nu = t[0] % d\nfor v in t:\n    if u != v % d:\n        t = []\n        break\nif t:\n    t.sort()\n    s = t[k // 2]\n    print(sum(abs(v - s) for v in t) // d)\nelse: print(-1)", "n, m, d = (int(x) for x in input().split())\ns = set()\nl = []\nfor i in range(n):\n\ttmp = [int(x) for x in input().split()]\n\ts |= {x % d for x in tmp}\n\tl += [x // d for x in tmp]\nif len(s) != 1:\n\tprint(-1)\n\treturn\nl.sort()\nmean = l[n * m // 2]\nans = 0\nfor x in l:\n\tans += abs(x - mean)\nif n * m // 2 > 0:\n\tmean = l[n * m // 2 - 1]\n\tans2 = 0\n\tfor x in l:\n\t\tans2 += abs(x - mean)\n\tans = min(ans, ans2)\nprint(ans)\n", "def main():\n    n, m, d = list(map(int, input().split()))\n    l = [x for _ in range(n) for x in map(int, input().split())]\n    n *= m\n    m = min(l)\n    for i, x in enumerate(l):\n        x -= m\n        if x % d:\n            print(-1)\n            return\n        l[i] = x\n    l.sort()\n    m = l[n // 2]\n    print(sum(abs(x - m) for x in l) // d)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n, m, d = list(map(int, input().split()))\nmat = []\nfor _ in range(n):\n    for x in list(map(int, input().split())):\n        mat.append(x)\nx = mat[0] % d\nfor y in mat:\n    if y % d != x:\n        print(-1)\n        return\nmat = [(y - x) / d for y in mat]\nmat.sort()\nmed = mat[int((m * n) / 2)]\nprint(int(sum([abs(y - med) for y in mat])))\n", "from itertools import chain\nn, m, d = map(int, input().split())\na = [map(int, input().split()) for i in range(n)]\np = sorted(chain.from_iterable(a))\ne = set()\nans = 0\nfor i in p:\n    e.add(i % d)\nif len(e) > 1:\n    print(-1)\n    return\nelse:\n    if len(p) % 2 == 0:\n        med = p[(len(p)//2) - 1]\n        for i in p:\n            ans += abs(i - med)\n        print(ans // d)\n    else:\n        med = p[(len(p)//2)]\n        for i in p:\n            ans += abs(i - med)\n        print(ans // d)", "def polo(l, d):\n    l.sort()\n    #find median k\n    k = l[int(len(l)/2)]\n    s = 0\n\n    #loop through again and calculate if each element |x-k| % d == 0\n    #if so, add k to sum\n    for n in l:\n        if abs(n-k) % d == 0:\n            s = s + abs(n-k)\n        else:\n            return -1\n    return int(s / d)\n\n\nl = []\nn,m,d = [int(x) for x in input().split(' ')]\nfor _ in range(n):\n    l.extend(int(x) for x in input().split(' '))\n\nprint(polo(l, d))\n", "\"\"\"http://codeforces.com/problemset/problem/289/B\"\"\"\ndef solve(d, l):\n    l.sort()\n    m = l[0] % d\n    median = len(l) // 2\n    res = 0\n    for num in l:\n        if num % d != m:\n            return -1\n        res += abs(num - l[median]) // d\n    return res\n\ndef __starting_point():\n    f = lambda: list(map(int, input().split()))\n    n, m, d = f()\n    l = []\n    for i in range(n):\n        l += f()\n    print(solve(d, l))\n\n__starting_point()", "def solve(d, l):\n    l.sort()\n    m = l[0] % d\n    median = len(l) // 2\n    res = 0\n    for num in l:\n        if num % d != m:\n            return -1\n        res += abs(num - l[median]) // d\n    return res\n\ndef __starting_point():\n    f = lambda: list(map(int, input().split()))\n    n, m, d = f()\n    l = []\n    for i in range(n):\n        l += f()\n    print(solve(d, l))\n\n__starting_point()", "n,m,d = map(int,input().split())\narray = []\nfor i in range(n):\n\tarray.extend(map(int,input().split()))\narray.sort()\nmid = int(n*m/2)\nans = 0\nnotpossible = False\nfor i in range(n*m):\n\tif array[mid] > array[i]:\n\t\tdiff = array[mid] - array[i]\n\t\tif diff%d != 0:\n\t\t\tnotpossible = True\n\t\t\tbreak\n\t\tans += int(diff/d)\n\telif array[mid] < array[i]:\n\t\tdiff = array[i] - array[mid]\n\t\tif diff%d != 0:\n\t\t\tnotpossible = True\n\t\t\tbreak\n\t\tans += int(diff/d)\nif notpossible:\n\tprint(\"-1\")\nelse:\n\tprint(ans)", "import sys\n\ndef main():\n    (n, m, d) = list(map(int, sys.stdin.readline().split(' ')))\n    nums = []\n    for i in range(n):\n        nums = nums + list(map(int, sys.stdin.readline().split(' ')))\n    k = n * m\n    g = nums[0] % d\n    for i in range(1, k):\n        if nums[i] % d != g:\n            sys.stdout.write('-1\\n')\n            return\n    nums = sorted(nums)\n    ret = 0\n    median = nums[k//2]\n    for i in range(k):\n        ret += abs((nums[i] - median) // d)\n    sys.stdout.write(\"{}\\n\".format(ret))\n\n\nmain()\n\n", "n, m, d = list(map(int, input().split()))\nk, t = n * m, []\nfor i in range(n):\n    t += list(map(int, input().split()))\nu = t[0] % d\nfor v in t:\n    if u != v % d:\n        t = []\n        break\nif t:\n    t.sort()\n    s = t[k // 2]\n    print(sum(abs(v - s) for v in t) // d)\nelse:\n  print(-1)\n", "# http://codeforces.com/problemset/problem/289/B\nn,m,d = list(map(int, input().split()))\nmat = []\nfor _ in range(n):\n     for x in list(map(int, input().split())):\n        mat.append(x)\n    #mat.append([x for x in list(map(int, input().split()))])\n#print(mat)\nx = mat[0] % d\n#print(x)\nfor y in mat:\n    if y % d != x:\n        print(-1)\n        return\nmat = [(y-x)/d for y in mat]\n#print(mat)\nmat.sort()\n#print(mat)\nmed = mat[int((m*n) / 2)]\n#print(med)\nprint(int(sum([abs(y-med) for y in mat])))\n", "array = []\nn, m, d = input().split()\nn, m, d = int(n), int(m), int(d)\n\nfor i in range(n):\n    array += list(map(int, input().split()))\nrem = array[0] % d\nflag = False\nfor j in range(m*n):\n    if array[j] % d != rem:\n        flag = True\nif flag:\n    print('-1')\nelse:\n    array.sort()\n    median = len(array)//2\n    ans = 0\n    for i in range(n*m):\n        val = array[i] - array[median]\n        if val < 0:\n            val = -val\n        ans += val\n    print(ans//d)", "x,y,n=map(int,input().split())\na=[]\nb=[]\nfor i in range(x):\n    a+=list(map(int,input().split()))\nr=a[0]%n\ncount=0\ncount1=0\nfor i in a:\n    if i%n!=r:\n        print(-1)\n        return\na.sort()\ns=0\nx=a[(x*y)//2]\nfor i in a:\n    s+=abs(x-i)//n\nprint(s)", "n,m,d=map(int,input().split())\na=[]\nfor i in range(n):\n    a.extend(list(map(int,input().split())))\na.sort();k=0\nmi=(n*m)//2\nfor i in range(n*m):\n    if abs(a[mi]-a[i])%d!=0:\n        print(-1);return\n    else:\n        k+=(abs(a[mi]-a[i])//d)\nprint(k)", "n,m,d=map(int,input().split())\na=[]\nsum=0\nfor i in range(n):\n    a.extend(list(map(int,input().split())))\nx=a[0]%d\na.sort()\nmid=a[n*m//2]\nfor i in a:\n    if i%d!=x:\n        print('-1')\n        return\n    else   :\n        sum+=abs(i-mid)//d\nprint(sum)        ", "n,m,d=list(map(int,input().split()))\na=[]\nfor i in range(n):\n    b=list(map(int,input().split()))\n    a=a+b\na.sort()\nif d>a[n*m-1]-a[0] and a[0]!=a[n*m-1]:\n    print(-1)\nelse:\n    s=0\n    x=a[0]%d\n    m=a[n*m//2]\n    for i in a:\n        if i%d!=x:\n            print(-1)\n            return\n        s= s+ abs(m-i)/d\n    print(int(s))\n", "def med(list):\n    nonlocal n,m\n    s=sorted(list)\n    return s[(n*m-1)//2]\nnmd=list(input().split())\nn=int(nmd[0])\nm=int(nmd[1])\nd=int(nmd[2])\nsum=0\na=[[0]*m  for _ in range(n)]\nfor i in range(n):\n    a[i]=[int(j) for j in input().strip().split(\" \")]\nsum=0\nw=[]\nfor i in range(n):\n    for j in range(m):\n        w.append(a[i][j])\nk=med(w)\nfor i in range(n):\n    for j in range(m):\n        sum=sum+abs(a[i][j]-k)\n        w.append(a[i][j])\nif sum%d==0:\n    print(sum//d)\nelse:\n    print(-1)\n", "n,m,d=map(int,input().split())\na=[]\nfor i in range(n):\n    a.extend(list(map(int,input().split())))\na.sort();k=0\nmi=(n*m)//2\nfor i in range(n*m):\n    if abs(a[mi]-a[i])%d!=0:\n        print(-1)\n        return\n    else:\n        k+=(abs(a[mi]-a[i])//d)\nprint(k)", "n, m, d = [int(x) for x in input().split(' ')]\n\ntotal = n*m\ntotal_matrix = []\n\nfor i in range(n):\n\ttotal_matrix += [int(x) for x in input().split(' ')]\n\ntotal_matrix = sorted(total_matrix)\n\nmiddle = total // 2\nnot_possible = False\ncount = 0\n\nfor el in total_matrix:\n\tif abs(total_matrix[middle] - el) % d != 0:\n\t\tnot_possible = True\n\t\tbreak\n\telse:\n\t\tcount += abs(total_matrix[middle] - el) // d\n\nif not_possible:\n\tprint(-1)\nelse:\n\tprint(count)", "import statistics\n\ndef solve(array, d):\n    minval = min(array)\n    for i in range(len(array)):\n        if (array[i] - minval) % d:\n            return -1\n        array[i] //= d\n\n    # minimize sum |array_i - x|\n    # x = median\n    median = round(statistics.median(array))\n    moves = 0\n    for el in array:\n        moves += abs(el - median)\n\n    return moves\n\nline = input()\nn, m, d = list(map(int, line.strip().split()))\narray = []\n\nfor i in range(n):\n    line = input()\n    row = list(map(int, line.strip().split()))\n    array += row\n\nprint(solve(array, d))\n\n", "n, m, d = list(map(int, input().split()))\nll = []\nfor i in range(n):\n    temp = [int(x) for x in input().split()]\n    ll.append(temp)\nl = []\nfor i in range(n):\n    for j in range(len(ll[i])):\n        l.append(ll[i][j])\n# print(arr)\nflag = 0\nl = sorted(l)\nfor i in range(len(l) - 1):\n    if abs(l[i] - l[i + 1]) % d != 0:\n        flag = 1\n        break\n# print(l)\nmedian = l[len(l) // 2]\nmoves = 0\n# print(median)\nfor i in range(len(l)):\n    moves += abs(l[i] - median) // d\nif flag == 1:\n    print(-1)\nelse:\n    print(moves)\n"]