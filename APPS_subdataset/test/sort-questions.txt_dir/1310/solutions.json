["n = int(input()) + 1\nt = [0] + list(map(int, input().split()))\nfor i in range(1, n):\n    t[i] = t[i] ^ t[i - 1]\nprint(max(t[j] ^ t[i] for i in range(0, n) for j in range(i + 1, n)))", "n = int(input())\na = [int(i) for i in input().split()]\npref = [0] * (n + 1)\nfor i in range(n):\n    pref[i + 1] = pref[i] ^ a[i]\nres = a[0]\nfor i in range(n):\n    for j in range(i, n):\n        res = max(res, pref[j + 1] ^ pref[i])\nprint(res)", "n = int(input())\narr = list(map(int, input().split()))\nbest = 0\nfor i in range(n):\n\tx = 0\n\tfor j in range(i, n):\n\t\tx = (x^arr[j])\n\t\tbest = max(best, x)\nprint(best)\n", "m = int(input())\na = list(map(int, input().split()))\n\nnitest = 0\n\nfor i in range(m):\n\txor = 0\n\tfor j in range(i, m):\n\t\txor = a[j]^xor\n\t\tnitest = max(nitest, xor)\nprint(nitest)", "from operator import xor\nfrom functools import reduce\nn = int(input())\na = list(map(int, input().split()))\nprint(max(reduce(xor, a[i:j + 1]) for i in range(n) for j in range(i, n)))", "n = int(input())\nst = input()\nlis = st.split()\nfor i in range(n):\n    lis[i]= int(lis[i])  \nlisRes = []\nfor i in range(n):\n    res = lis[i]\n    lisRes.append(res)\n    for j in range(i+1,n):\n        res ^= lis[j]\n        lisRes.append(res)\n\nprint(max(lisRes))", "N = int(input())\nA = list(int(i) for i in input().split())\n\ndef rsq(i,j):\n\tnonlocal A\n\tif(i==0):\n\t\treturn A[j]\n\treturn A[j] ^ A[i-1]\n\nfor i in range(1,N):\n\tA[i] = A[i] ^ A[i-1]\n\nmaxv = 0\t\nfor i in range(N):\n\tfor j in range(i,N):\n\t\tmaxv = max(maxv, rsq(i,j))\nprint (maxv)", "def main():\n    input()\n    x, l = 0, [0]\n    for a in map(int, input().split()):\n        x ^= a\n        l.append(x)\n    x = 0\n    for i, a in enumerate(l):\n        for j in range(i):\n            y = a ^ l[j]\n            if x < y:\n                x = y\n    print(x)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "def main():\n    input()\n    x, l = 0, [0]\n    for a in map(int, input().split()):\n        x ^= a\n        l.append(x)\n    print(max(a ^ l[j] for i, a in enumerate(l) for j in range(i)))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "from functools import reduce\nn=int(input())\na=list(map(int,input().split()))\nprint(max([reduce(int.__xor__,a[i:j]) for j in range(1,n+1) for i in range(j)]))", "n,ans=int(input()),-10000\na=list(map(int,input().split()))\nfor i in range(n):\n  s=0\n  for j in range(i,n):\n    s^=a[j]\n    ans=max(ans,s)\nprint(ans)", "n = int( input() )\nans = -1\ntab = list( map( int, input(). split() ) )\nfor i in range(n):\n\tfoo = 0\n\tfor j in range(i, n):\n\t\tfoo ^= tab[j]\n\t\tans = max( ans, foo )\nprint( ans )\n", "#from dust i have come, dust i will be\n\nn=int(input())\na=list(map(int,input().split()))\n\nm=a[0]\n\nfor i in range(len(a)-1):\n    x=a[i]\n    m=max(m,x)\n    for j in range(i+1,len(a)):\n        x=x^a[j]\n        m=max(m,x)\n\n\nprint(max(m,max(a)))", "int_size = 32\n\nclass TrieNode:\n    def __init__(self):\n        self.child = [None]*2\n        self.value = 0\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self, key):\n        curr = self.root\n        \n        for i in range(int_size - 1, -1, -1):\n            current_bit = 1 if (key & (1 << i)) else 0\n\n            if curr.child[current_bit] == None:\n                curr.child[current_bit] = TrieNode()\n\n            curr = curr.child[current_bit]\n\n        curr.value = key\n\n    def max_xor(self, key): \n        curr = self.root\n        for i in range(int_size - 1, -1, -1):\n            current_bit = 1 if (key & (1 << i)) else 0\n            \n            if curr.child[1 - current_bit] != None:\n                curr = curr.child[1 - current_bit]\n            elif curr.child[current_bit] != None:\n                curr = curr.child[current_bit]\n            else:\n                raise Exception(\"Something is not right!!\")\n\n        return key ^ curr.value\n\n\nn = int(input())\narr = list(map(int, input().split()))\ntree = Trie()\ntree.insert(0)\n\nans = 0\nnow = 0\nfor i in range(n):\n    now = now ^ arr[i]\n    tree.insert(now)\n    ans = max(ans, tree.max_xor(now))\n\nprint(ans)", "count = int(input())\nnumber = [int(i) for i in input().split()]\nmax = -1\nfor i in range(0, count):\n    tmp = number[i]\n    if tmp > max:\n        max = tmp\n    if not i + 1 == count:    \n        for j in range(i + 1, count):\n            tmp = tmp ^ number[j]\n            if tmp > max:\n                max = tmp\nprint(\"%d\" % max)", "count = int(input())\nnumber = [int(i) for i in input().split()]\nmax = -1\nfor i in range(0, count):\n    tmp = number[i]\n    if tmp > max:\n        max = tmp    \n    for j in range(i + 1, count):\n        tmp = tmp ^ number[j]\n        if tmp > max:\n            max = tmp\nprint(\"%d\" % max)", "n = int(input())\na = list(map(int, input().split()))\nans = 0\nfor i in range(n):\n\tfor j in range(i,n):\n\t\tcur = 0\n\t\tfor k in range(i,j + 1):\n\t\t\tcur ^= a[k]\n\t\tans = max(ans, cur)\nprint(ans)", "import itertools\nimport functools\ndef allSubArrays(xs):\n    n = len(xs)\n    indices = list(range(n+1))\n    for i,j in itertools.combinations(indices,2):\n        yield xs[i:j]\nn=int(input())\nmy_list=list(map(int,input().split(\" \")))\nlist_=list(allSubArrays(my_list))\nfor i in range(len(list_)):\n    list_[i]=functools.reduce(lambda x,y:x^y,list_[i])\nprint(max(list_))\n", "n=int(input())\nmx=0;\na=list(map(int,input().split()))\nfor i in range(n):\n    sum=0\n    for j in range(i,n) :\n        sum^=a[j]\n        mx=max(mx,sum)\nprint(mx)\n", "n=int(input())\nmx=0;\na=list(map(int,input().split()))\nfor i in range(n):\n    sum=0\n    for j in range(i,n) :\n        sum^=a[j]\n        mx=max(mx,sum)\nprint(mx) \n", "x = int(input())\na = list(map(int, input().split()))\nsum = 0\nfor i in range(x):\n    ans = 0\n    for j in range(i, x):\n        ans ^= a[j]\n        sum = max(ans, sum)\nprint(sum)", "n=int(input());arr=list(map(int,input().split()));mx=0\nfor i in range(len(arr)):\n    t=0\n    for j in range(i,len(arr)):\n        t^=arr[j]\n        mx=max(mx,t)\nprint(mx)", "from math import *\nn=int(input());L=[int(x) for x in input().split()];Max=0\nfor i in range(len(L)):\n    t = 0\n    for j in range(i, len(L)):\n        t ^= L[j]\n        Max = max(Max, t)\nprint(Max)", "n = int(input())\na = list(map(int, input().split()))\nans = 0\nfor i in range(n):\n    x = 0\n    for j in range(n - i):\n        x ^= a[i + j]\n        ans = max(ans, x)\nprint(ans)", "n=int(input())\na=list(map(int,input().split()))\nc=[]\nfor j in range(n):\n    l=0\n    for i in range(j,len(a)):\n        l=l^a[i]\n        c.append(l)\nprint(max(c))"]