["n, m = list(map(int, input().split()))\nM = [list(map(int, input().split())) for r in range(n)]\n\ndepth = [[1] * m for r in range(n)]\n\nfor c in range(m):\n    for r in range(1, n):\n        if M[r][c] >= M[r - 1][c]:\n            depth[r][c] = depth[r - 1][c] + 1\n\nmax_depth = [max(col) for col in depth]\n\nans = \"\"\nk = int(input())\nfor i in range(k):\n    l, r = list(map(int, input().split()))\n    if max_depth[r - 1] >= r - l + 1:\n        ans += \"Yes\\n\"\n    else:\n        ans += \"No\\n\"\n\nprint(ans)\n", "import sys\n\ndef debug(x, table):\n    for name, val in table.items():\n        if x is val:\n            print('DEBUG:{} -> {}'.format(name, val), file=sys.stderr)\n            return None\n\ndef solve():\n    n, m = map(int, sys.stdin.readline().split())\n    A = [[int(i) for i in sys.stdin.readline().split()] for j in range(n)]\n    q = int(sys.stdin.readline().rstrip())\n    querys = [tuple(map(int, sys.stdin.readline().split())) for i in range(q)]\n\n    f = [i for i in range(n)]\n\n    for j in range(m):\n        s = 0\n        for i in range(n):\n            if i == n - 1 or A[i][j] > A[i + 1][j]:\n                for k in range(s, i + 1):\n                    f[k] = max(f[k], i)\n                s = i + 1\n\n    ans = []\n\n    for l, r in querys:\n        if r-1 <= f[l-1]:\n            ans.append('Yes')\n        else:\n            ans.append('No')\n\n    print(*ans, sep='\\n')\n\ndef __starting_point():\n    solve()\n__starting_point()", "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\nmod = 10**9 + 7\n\ndef LI(): return list(map(int, input().split()))\ndef II(): return int(input())\ndef LS(): return input().split()\ndef S(): return input()\n\n\ndef main():\n    n,m = LI()\n    a = [LI() for _ in range(n)] + [[-1]*m]\n    rr = list(range(n))\n    for j in range(m):\n        l = 0\n        for r in range(1,n+1):\n            if a[r][j] < a[r-1][j]:\n                while l < r:\n                    if rr[l] < r-1:\n                        rr[l] = r-1\n                    else:\n                        l = r\n                        break\n                    l += 1\n\n    #print(rr)\n    k = II()\n    ans = []\n    for _ in range(k):\n        l,r = LI()\n        if rr[l-1] >= r-1:\n            ans.append('Yes')\n        else:\n            ans.append('No')\n            \n    print('\\n'.join(ans))\n\nmain()", "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\nmod = 10**9 + 7\n\ndef LI(): return list(map(int, input().split()))\ndef II(): return int(input())\ndef LS(): return input().split()\ndef S(): return input()\n\n\ndef main():\n    n,m = LI()\n    a = [LI() for _ in range(n)] + [[-1]*m]\n    rr = list(range(n))\n    for j in range(m):\n        l = 0\n        for r in range(1,n+1):\n            if a[r][j] < a[r-1][j]:\n                while l < r:\n                    if rr[l] < r-1:\n                        rr[l] = r-1\n                    else:\n                        l = r\n                        break\n                    l += 1\n\n    #print(rr)\n    k = II()\n    l,r = LI()\n    t = ''\n    if rr[l-1] >= r-1:\n        t='Yes'\n    else:\n        t='No'\n    for _ in range(k-1):\n        l,r = LI()\n        if rr[l-1] >= r-1:\n            t+='\\nYes'\n        else:\n            t+='\\nNo'\n    \n    return t\n\nprint(main())", "n,m = [int(x) for x in input().split()]\narr = [[int(x) for x in input().split()] for i in range(n)]\n\nval = [ [1]*m for i in range(n)]\nfor i in range(m):\n\tfor j in range(1,n):\n\t\tif arr[j][i]>=arr[j-1][i]:\n\t\t\tval[j][i] = val[j-1][i] + 1\n\nbest = [max(i) for i in val]\t\n\nans = \"\"\nt = int(input())\nfor i in range(t):\n\tc,d = [int(x) for x in input().split()]\n\tif best[d-1]>=d-c+1:\n\t\tans += \"Yes\\n\"\n\telse:\n\t\tans += \"No\\n\"\nprint(ans)\n", "n,m = [int(x) for x in input().split()]\narr = [[int(x) for x in input().split()] for i in range(n)]\n\nval = [ [1]*m for i in range(n)]\nfor i in range(m):\n\tfor j in range(n-2,-1,-1):\n\t\tif arr[j][i]<=arr[j+1][i]:\n\t\t\tval[j][i] = val[j+1][i] + 1\n\nbest = [max(i) for i in val]\t\n\nans = \"\"\nt = int(input())\nfor i in range(t):\n\tc,d = [int(x) for x in input().split()]\n\tif best[c-1]>=d-c+1:\n\t\tans += \"Yes\\n\"\n\telse:\n\t\tans += \"No\\n\"\nprint(ans)\n", "n,m=[int(x) for x in input().split()]\narr=[[int(x) for x in input().split()]for i in range(0,n)]\nv=[[1]*m for i in range(0,n)]#a 2d array of size [n][m]\nfor i in range(0,m):\n     for j in range(1,n):\n          if(arr[j][i]>=arr[j-1][i]):\n               v[j][i]=v[j-1][i]+1#if in increasing order increase value by 1\n               \nbest=[max(i) for i in v]#to store largest value in row\nans=\"\"\nt=int(input())\nfor i in range(0,t):\n     x,y=[int(s) for s in input().split()]\n     if(best[y-1]>=y-x+1):#compare that largest value\n          ans+=\"Yes\\n\"\n     else :\n          ans+=\"No\\n\"\n\nprint(ans)\n\n", "#---------------EL FUTURO ES INCIERTO--------------#\nn,m=[int(x) for x in input().split()]\narr=[[int(x) for x in input().split()]for i in range(0,n)]\np = [ i for i in range(0,n+1)]\n\nfor j in range(0,m):\n\tcur = 0\n\tfor i in range(0,n-1):\n\t\tif(arr[i][j] <= arr[i+1][j]):\n\t\t\tp[i+1] = min(cur,p[i+1])\n\t\telse:\n\t\t\tcur = i+1\n\t#end for\n#end for\n\nq = int(input())\nres =\"\"\nfor _ in range(0,q):\n\ta,b = [int(x) for x in input().split()]\n\tb-=1\n\ta-=1\n\tif(p[b] <= a):\n\t\tres+=\"Yes\"\n\telse:\n\t\tres+=\"No\"\n\tif _!=q-1:\n\t    res+=\"\\n\"\n#end for\n\nprint (res)\n", "#!/usr/bin/env python3\ndef ri():\n    return list(map(int, input().split()))\n\nn, m = ri()\na = []\nfor i in range(n):\n    a.append(list(ri()))\n\nt = [[0 for i in range(m)] for j in range(n)]\nT = [0 for i in range(n)]\n\nfor i in range(m):\n    for j in range(n-1):\n        if a[j][i] > a[j+1][i]:\n            t[j+1][i] = 0\n        else:\n            t[j+1][i] = t[j][i] + 1\nfor i in range(n):\n    T[i] = max(t[i])\n\nk = int(input())\nans = []\nfor i in range(k):\n    l, r = ri()\n    l = l-1\n    r = r-1\n    if T[r] >= r-l:\n        ans.append(\"Yes\")\n    else:\n        ans.append(\"No\")\n\nprint('\\n'.join(ans))\n", "n,m = map(int,input().split())\nM = [list(map(int,input().split())) for i in range(n)]\ndepth = [[1]*m for i in range(n)]\nfor col in range(m):\n    for row in range(1,n):\n        if M[row][col]>=M[row-1][col]:\n            depth[row][col] = depth[row-1][col]+1 \nmax_depth = [max(row) for row in depth]\nans = \"\"\nk = int(input())\nfor i in range(k):\n    l,r = map(int,input().split())\n    if max_depth[r-1] >= r-l+1:\n        ans+=\"Yes\\n\"\n    else:\n        ans+=\"No\\n\"\nprint(ans)", "import sys\nN, M = list(map( int, input().split() ))\nG = [ list( map( int, input().split() ) ) for i in range( N ) ]\n\nrmaxv = [ 0 for i in range( N ) ]\nfor i in range( M ):\n  reach = [ 0 for j in range( N ) ]\n  for j in range( N - 1, -1, -1 ):\n    if j + 1 == N or not ( G[ j ][ i ] <= G[ j + 1 ][ i ] ):\n      reach[ j ] = 1\n    else:\n      reach[ j ] = reach[ j + 1 ] + 1\n    rmaxv[ j ] = max( rmaxv[ j ], reach[ j ] )\n\nQ = int( input() )\nans = []\nfor qi in range( Q ):\n  L, R = list(map( int, input().split() ))\n  if rmaxv[ L - 1 ] >= R - L + 1:\n    ans.append( \"Yes\\n\" )\n  else:\n    ans.append( \"No\\n\" )\nsys.stdout.write( ''.join( ans ) )\n", "from sys import stdin\n\nn, m = list(map(int, stdin.readline().rstrip().split()))\n\ndata = []\nfor i in range(0, n):\n    data.append(list(map(int, stdin.readline().rstrip().split())))\n\nsorted_data = [0] * n\nfor col in range(0, m):\n    mark_r = 0\n    cur_r = 1\n    st = []\n    while cur_r < n:\n        if data[cur_r][col] < data[cur_r - 1][col]:\n            st.extend([cur_r - 1] * (cur_r - mark_r))\n            mark_r = cur_r\n        cur_r += 1\n    st.extend([cur_r - 1] * (cur_r - mark_r))\n    for index, item in enumerate(st):\n        if sorted_data[index] < st[index]:\n            sorted_data[index] = st[index]\n\nq_count = int(stdin.readline().rstrip())\nfor _ in range(0, q_count):\n    l, r = [int(x) - 1 for x in stdin.readline().rstrip().split()]\n    if sorted_data[l] >= r:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n", "import sys\nn,m = list(map(int,sys.stdin.readline().rstrip().split()))\nmatrix = []\nfor _ in range(n):\n\trow = list(map(int,sys.stdin.readline().rstrip().split()))\n\tmatrix.append(row)\n\n# initialize table\nA = [[1 for _ in range(m)] for _ in range(n)]\nfor i in range(n-2,-1,-1):\n\tfor j in range(m):\n\t\tif matrix[i][j] <= matrix[i+1][j]:\n\t\t\tA[i][j] = A[i+1][j] + 1\n\n# rows = [0] * n\n# for i in range(n):\n# \tlst = [A[i][j] for j in range(m)]\n# \trows[i] = max(lst)\nrows = [max(row) for row in A]\n\nans = \"\"\nk = int(sys.stdin.readline().rstrip())\nfor _ in range(k):\n\tl,r = list(map(int,sys.stdin.readline().rstrip().split()))\n\tif rows[l-1] >= (r - l + 1):\n\t\tans += \"Yes\\n\"\n\telse:\n\t\tans += \"No\\n\"\nsys.stdout.write(ans)\n", "n,m = [int(x) for x in input().split()]\narr = [[int(x) for x in input().split()] for i in range(n)]\n\nval = [ [1]*m for i in range(n)]\nfor i in range(m):\n\tfor j in range(n-2,-1,-1):\n\t\tif arr[j][i]<=arr[j+1][i]:\n\t\t\tval[j][i] = val[j+1][i] + 1\n\nbest = [max(i) for i in val]\t\n\nans = \"\"\nt = int(input())\nfor i in range(t):\n\tc,d = [int(x) for x in input().split()]\n\tif best[c-1]>=d-c+1:\n\t\tans += \"Yes\\n\"\n\telse:\n\t\tans += \"No\\n\"\nprint(ans)\n\n\n\n\n# Made By Mostafa_Khaled\n", "import sys\nfrom math import log2,floor,ceil,sqrt\n# import bisect\n# from collections import deque\n\nRi = lambda : [int(x) for x in sys.stdin.readline().split()]\nri = lambda : sys.stdin.readline().strip()\n \ndef input(): return sys.stdin.readline().strip()\ndef list2d(a, b, c): return [[c] * b for i in range(a)]\ndef list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]\ndef list4d(a, b, c, d, e): return [[[[e] * d for j in range(c)] for j in range(b)] for i in range(a)]\ndef ceil(x, y=1): return int(-(-x // y))\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(N=None): return list(MAP()) if N is None else [INT() for i in range(N)]\ndef Yes(): print('Yes')\ndef No(): print('No')\ndef YES(): print('YES')\ndef NO(): print('NO')\nINF = 10 ** 18\nMOD = 10**9+7\n\nn,m = Ri()\narr=  []\nfor i in range(n):\n    temp = Ri()\n    arr.append(temp)\ndp =  list2d(n,m,1)\nfor i in range(1,n):\n    for j in range(m):\n        if arr[i][j] >= arr[i-1][j]:\n            dp[i][j] = dp[i-1][j]+1\ntdp = [0]*n\nfor i in range(n):\n    for j in range(m):\n        tdp[i] = max(tdp[i],dp[i][j])\nqq = int(ri())\nfor q in range(qq):\n    a,b = Ri()\n    a-=1\n    b-=1\n    if b- tdp[b]+1 <= a:\n        Yes()\n    else:\n        No()", "from sys import stdin\ninput = stdin.readline\nn, m = list(map(int, input().split()))\narr = list(list(map(int, input().split())) for _ in range(n))\ndp = [[1 for i in range(m)] for j in range(n)]\n\nfor i in range(1, n):\n    for j in range(m):\n        if arr[i][j] >= arr[i-1][j]: \n            dp[i][j] = dp[i-1][j] + 1\n\ndp, all_res = [max(i) for i in dp], []\nk = int(input())\nquries = list(list(map(int, input().split())) for _ in range(k))\nfor l, r in quries:\n    all_res.append('Yes' if dp[r-1] >= r-l+1 else 'No')\nprint('\\n'.join(all_res))\n", "import sys\ninput=sys.stdin.readline\nn,m=list(map(int,input().split()))\nM=[[] for i in range(m)]\nfor i in range(n):\n    z=list(map(int,input().split()))\n    for i in range(len(z)):\n        M[i].append(z[i])\n\ndp=[0 for i in range(n)]\ndp[-1]=1\nfor i in range(len(M)):\n   \n    x=M[i]\n    temp=[0 for i in range(len(x))]\n    temp[0]=1\n    for i in range(1,len(x)):\n        if(x[i]>=x[i-1]):\n            temp[i]=1\n        else:\n            temp[i]=2\n    re=[0 for i in range(len(temp))]\n    re[-1]=1\n    for i in range(len(re)-2,-1,-1):\n        if(temp[i+1]==2):\n            re[i]=1\n        else:\n            re[i]=re[i+1]+1\n    for i in range(len(dp)):\n        dp[i]=max(dp[i],re[i])\n\nr=int(input())\ndp[-1]=1\n\nfor i in range(r):\n    l,r=list(map(int,input().split()))\n    \n    if(dp[l-1]>=r-l+1):\n        print('Yes')\n    else:\n        print('No')\n        \n\n\n    \n    \n        \n    \n"]