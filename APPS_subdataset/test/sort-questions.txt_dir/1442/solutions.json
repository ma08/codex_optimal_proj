["#!/usr/bin/env python3\nimport collections\n\nn, s = list(map(int, input().split()))\n\nbuy_orders = collections.defaultdict(int)\nsell_orders = collections.defaultdict(int)\n\nfor i in range(n):\n    d, p, q = input().split()\n    p, q = int(p), int(q)\n\n    if d == 'B':\n        buy_orders[p] += q\n    else:\n        sell_orders[p] += q\n\nbuy_orders = sorted(list(buy_orders.items()), reverse=True)\nsell_orders = sorted(list(sell_orders.items()), reverse=True)\n\nfor order in sell_orders[-s:]:\n    print('S', order[0], order[1])\nfor order in buy_orders[:s]:\n    print('B', order[0], order[1])\n", "__author__ = 'Andrey'\nn, s = list(map(int, input().split()))\nB = dict()\nS = dict()\nfor i in range(n):\n    t = input().split()\n    if t[0] == \"B\":\n        B[int(t[1])] = B.get(int(t[1]), 0) + int(t[2])\n    else:\n        S[int(t[1])] = S.get(int(t[1]), 0) + int(t[2])\nB_keys = sorted(list(B.keys()), reverse=True)\nS_keys = sorted(S.keys())\nif B_keys:\n    b_s = B_keys[min(s - 1, len(B_keys) - 1)]\nif S_keys:\n    s_s = S_keys[min(s - 1, len(S_keys) - 1)]\n    for key_1 in sorted(list(S.keys()), reverse=True):\n        if key_1 <= s_s:\n            print(\"S\", key_1, S[key_1])\nif B_keys:\n    b_s = B_keys[min(s - 1, len(B_keys) - 1)]\n    for key_2 in sorted(list(B.keys()), reverse=True):\n        if key_2 >= b_s:\n            print(\"B\", key_2, B[key_2])\n", "import math,string,itertools,fractions,heapq,collections,re,array,bisect,copy\nfrom itertools import chain, dropwhile, permutations, combinations\nfrom collections import defaultdict, deque\n\n# Guide:\n#   1. construct complex data types while reading (e.g. graph adj list)\n#   2. avoid any non-necessary time/memory usage\n#   3. avoid templates and write more from scratch\n#   4. switch to \"flat\" implementations\n\ndef VI(): return list(map(int,input().split()))\ndef I(): return int(input())\ndef LIST(n,m=None): return [0]*n if m is None else [[0]*m for i in range(n)]\n\n\ndef main(info=0):\n    n,s = VI()\n    d,p,q = LIST(n), LIST(n), LIST(n)\n    db = {}\n    ds = {}\n    for i in range(n):\n        d[i], p[i], q[i] = input().split()\n    p = [int(x) for x in p]\n    q = [int(x) for x in q]\n    for i in range(n):\n        if d[i]=='B':\n            if p[i] in db:\n                db[p[i]] = db[p[i]] + q[i]\n            else:\n                db[p[i]] = q[i]\n        if d[i]=='S':\n            if p[i] in ds:\n                ds[p[i]] = ds[p[i]] + q[i]\n            else:\n                ds[p[i]] = q[i]\n    lb = sorted(list(db.items()))[::-1][:s]\n    ls = sorted(list(ds.items()))[:s][::-1]\n\n    for k,v in ls:\n        print(\"S {} {}\".format(k,v))\n    for k,v in lb:\n        print(\"B {} {}\".format(k,v))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n, s2 = map(int, input().split())\nb = {}\ns = {}\nb1 = set()\ns1 = set()\nfor i in range(n):\n    v = list(map(str, input().split()))\n    if v[0] == 'B':\n        if v[1] in b1:\n            b[v[1]] += int(v[2])\n        else:\n            b[v[1]] = int(v[2])\n            b1.add(v[1])\n    if v[0] == 'S':\n        if v[1] in s1:\n            s[v[1]] += int(v[2])\n        else:\n            s[v[1]] = int(v[2])\n            s1.add(v[1])\nansb = []\nanss = []\n\nfor i, j in b.items():\n    ansb.append((int(i), int(j)))\nansb.sort(reverse = True)\n\nfor i, j in s.items():\n    anss.append((int(i), int(j)))\nanss.sort()\nk = len(ansb)\np = len(anss)\ni = 0\nj = min(s2 - 1, p - 1)\ns1 = s2\n\nwhile s1 > 0 and p > 0:\n    print('S', anss[j][0], anss[j][1])\n    j -= 1\n    s1 -= 1\n    p -= 1\n\n\nwhile s2 > 0 and k > 0:\n    print('B', ansb[i][0], ansb[i][1])\n    k -= 1\n    s2 -= 1\n    i += 1", "n, s = map(int, input().split())\npricesell = dict()\npricebuy = dict()\nsellp = set()\nbuyp = set()\nfor i in range(n):\n    tmp = input().split()\n    if tmp[0] == \"B\":\n        if int(tmp[1]) in buyp:\n            pricebuy[int(tmp[1])] += int(tmp[2])\n        else:\n            pricebuy[int(tmp[1])] = int(tmp[2])\n        buyp.add(int(tmp[1]))\n    else:\n        if int(tmp[1]) in sellp:\n            pricesell[int(tmp[1])] += int(tmp[2])\n        else:\n            pricesell[int(tmp[1])] = int(tmp[2])\n        sellp.add(int(tmp[1]))\nbuy = list(pricebuy.items())\nsell = list(pricesell.items())\nbuy.sort(reverse=True)\nsell.sort()\nbuy1 = buy[:min(s, len(buy))]\nsell1 = sell[:min(s, len(sell))]\nsell1.sort(reverse=True)\nbuy1 = list(map(lambda x: \"B \" + str(x[0]) + \" \" + str(x[1]), buy1))\nsell1 = list(map(lambda x: \"S \" + str(x[0]) + \" \" + str(x[1]), sell1))\nprint(*sell1, sep=\"\\n\")\nprint(*buy1, sep=\"\\n\")", "n,z=map(int,input().split())\nb=[]\ns=[]\nfor i in range(n):\n\th=input().split()\n\tif h[0]==\"B\":\n\t\tbb=True\n\t\tfor j in range(len(b)):\n\t\t\t(x,y)=b[j]\n\t\t\tif x==int(h[1]):\n\t\t\t\tb[j]=(x,y+int(h[2]))\n\t\t\t\tbb=False\n\t\tif bb:b+=[(int(h[1]),int(h[2]))]\n\telse:\n\t\tbb=True\n\t\tfor j in range(len(s)):\n\t\t\t(x,y)=s[j]\n\t\t\tif x==int(h[1]):\n\t\t\t\ts[j]=(x,y+int(h[2]))\n\t\t\t\tbb=False\n\t\tif bb:s+=[(int(h[1]),int(h[2]))]\n\nb=sorted(b,key=lambda colonnes:colonnes[0])\ns=sorted(s,key=lambda colonnes:colonnes[0])\n\ni=0\nh=0\nwhile h<z and len(s)-1-i>=0:\n\tif len(s)-1-i<z:\n\t\tprint(\"S\",s[len(s)-1-i][0],s[len(s)-1-i][1])\n\t\th+=1\n\ti+=1\nfor i in range(z):\n\tif len(b)-1-i>=0:print(\"B\",b[len(b)-1-i][0],b[len(b)-1-i][1])", "n, s = map(int, input().split())\nbuy = dict()\nsell = dict()\nfor i in range(n):\n    d, p, q = map(str, input().split())\n    p = int(p)\n    q = int(q)\n    if d == 'B':\n        if p in buy:\n            buy[p] += q\n        else:\n            buy[p] = q\n    else:\n        if p in sell:\n            sell[p] += q\n        else:\n            sell[p] = q        \nbk = list(buy.keys())\nbv = list(buy.values())\nbl = list(zip(bk, bv))\nsk = list(sell.keys())\nsv = list(sell.values())\nsl = list(zip(sk, sv))\nbl.sort(reverse = True)\nsl.sort()\nbb = len(bl)\nss = len(sl)\n\nif s > ss:\n    sl.sort(reverse = True)\n    for i in range(ss):\n        print('S', sl[i][0], sl[i][1])\nelse:\n    sl.sort()\n    for i in range(s - 1, -1, -1):\n            print('S', sl[i][0], sl[i][1])  \n            \nif s > bb:\n    for i in range(bb):\n        print('B', bl[i][0], bl[i][1])\nelse:\n    for i in range(s):\n            print('B', bl[i][0], bl[i][1])    ", "import operator\n\nn,s=list(map(int,input().split()))\norders=[]\nfor i in range(n):\n\torders.append(tuple(map(str,input().split()))) #d,p,q\n\naggr={}\nfor order in orders:\n\tkey=(order[0][0],int(order[1]))\n\tif key not in aggr:\n\t\taggr[key]=0\n\taggr[key]+=int(order[2]) #volume\n\nbooks={\"B\":[],\"S\":[]}\nfor key in aggr:\n\tbook=books[key[0]]\n\tvolume=aggr[key]\n\tbook.append((key[0],key[1],volume)) #d,p,q\n\n\nfor k in books:\n\tbooks[k]=list(reversed(sorted(books[k],key=operator.itemgetter(1))))\n\nlenB=len(books[\"S\"])\nfor i in range(min(lenB,s)):\n\torder=books[\"S\"][max(0,lenB-s)+i]\n\tprint(\"S %d %d\" %(order[1],order[2]))\n\nfor i in range(min(len(books[\"B\"]),s)):\n\torder=books[\"B\"][i]\n\tprint(\"B %d %d\" %(order[1],order[2]))\n\n\n\n\n\n\n\n", "from sys import stdin,stdout\ninput = stdin.readline\n\nb = {}\ns = {}\n\nn, l = map(int,input().split(' '))\nfor i in range(n):\n    d,p,q = input().split(' ')\n    p,q = int(p),int(q)\n    if d == 'B':\n        try:\n            b[p] += q\n        except KeyError:\n            b[p] = q\n    else:\n        try:\n            s[p] += q\n        except KeyError:\n            s[p] = q\n\nfor key in sorted(sorted(s)[0:min(l,len(s))],reverse=True):\n    print(\"S %s %s\" % (key, s[key]))\n\nfor key in sorted(b,reverse=True)[0:min(l,len(b))]:\n    print(\"B %s %s\" % (key, b[key]))", "B = [0] *  (10 ** 5 + 2)\nS = [0] * (10 ** 5 + 2)\na, b = list(map(int, input().split()))\nfor i in range(a):\n    l = list(map(str, input().split()))\n    if l[0] == 'S':\n        S[int(l[1])] += int(l[2])\n    if l[0] == 'B':\n        B[int(l[1])] += int(l[2])\ncount = 0\nans = []\nfor i in range(10 ** 5 + 2):\n    if S[i] != 0:\n        count += 1\n        ans.append(('S', i, S[i]))\n        if count == b:\n            break    \nfor i in range(len(ans) - 1, -1, -1):\n    print(ans[i][0], ans[i][1], ans[i][2])\ncount = 0\nfor i in range(10 ** 5 + 1, -1, -1):\n    if B[i] != 0:\n        count += 1\n        print('B', i, B[i])\n        if count == b:\n            break\n", "n,s=[int(x) for x in input().split()]\nordenes = {}\nfor i in range(n):\n    d,p,q=input().split()\n    head = d + \" \" + p\n    p,q=int(p),int(q)\n    if head not in ordenes:\n        ordenes[head]=0\n    ordenes[head]+=q\n\nventas = {}\ncompras = {}\n\nfor i in ordenes:\n    if i[0]==\"B\":\n        compras[int(i[2:])]=str(ordenes[i])\n    else:\n        ventas[int(i[2:])]=str(ordenes[i])\n\nlistacompras=list(compras.keys())\nlistaventas = list(ventas.keys())\nlistacompras.sort(reverse=True)\nlistaventas.sort(reverse=True)\n\nfor i in range(-s,0):\n    if i<-len(ventas):\n        continue\n    print(\"S \"+str(listaventas[i])+\" \"+str(ventas[listaventas[i]]))\n\n\nfor i in range(s):\n    if i>=len(compras):\n        break\n    print(\"B \"+str(listacompras[i])+\" \"+str(compras[listacompras[i]]))\n", "n,s = [int(x) for x in input().split()]\nbuy_dict = {}\nsell_dict = {}\nfor i in range(n):\n\tchtype,pi,di = input().split()\n\tpi = int(pi)\n\tdi = int(di)\n\tif chtype=='B':\n\t\tbuy_dict[pi] = buy_dict.get(pi,0)+di\n\telse:\n\t\tsell_dict[pi] = sell_dict.get(pi,0)+di\nbuy_list = sorted(list(buy_dict.items()),reverse=True)[:s]\nsell_list = reversed(sorted(sell_dict.items())[:s])\nfor pi,qi in sell_list:\n\tprint('S',pi,qi)\nfor pi,qi in buy_list:\n\tprint('B',pi,qi)\n", "n, s = list(map(int, input().split()))\nB = []\nS = []\nfor i in range(n):\n    st = list(input().split())\n    st[1], st[2] = int(st[1]), int(st[2])\n    if st[0] == 'B':\n        B.append(st)\n    else:\n        S.append(st)\nB.sort()\nS.sort()\ni = 0\nwhile i < len(B) - 1:\n    if B[i][1] == B[i + 1][1]:\n        B[i][2] += B[i + 1][2]\n        del(B[i + 1])\n    else:\n        i += 1\ni = 0\nwhile i < len(S) - 1:\n    if S[i][1] == S[i + 1][1]:\n        S[i][2] += S[i + 1][2]\n        del(S[i + 1])\n    else:\n        i += 1\nB.reverse()\nb = []\nfor i in range(min(s, len(S))):\n    b.append(S[i])\nb.reverse()\nfor i in range(len(b)):\n    print(*b[i])\nfor i in range(min(s, len(B))):\n    print(*B[i])", "import heapq\n\n\nn, s = map(int, input().split())\napplications_sell = []\napplications_buy = []\n\nfor i in range(n):\n    cur1, cur2, cur3 = map(str, input().split())\n    if cur1 == 'S':\n        heapq.heappush(applications_sell, [cur1, int(cur2), int(cur3)])\n    else:\n        heapq.heappush(applications_buy, [cur1, -int(cur2), int(cur3)])\n\nglass_sell = []\nif len(applications_sell):\n    glass_sell.append(heapq.heappop(applications_sell))\n\nwhile len(applications_sell) > 0:\n    cur = heapq.heappop(applications_sell)\n    if glass_sell[-1][1] == cur[1]:\n        glass_sell[-1][2] += cur[2]\n    else:\n        glass_sell.append(cur)\n\nglass_buy = []    \nif len(applications_buy):\n    glass_buy.append(heapq.heappop(applications_buy))\n\nwhile len(applications_buy) > 0:\n    cur = heapq.heappop(applications_buy)\n    if glass_buy[-1][1] == cur[1]:\n        glass_buy[-1][2] += cur[2]\n    else:\n        glass_buy.append(cur)\n\nfor i in range(min(len(glass_sell), s) - 1, -1, -1):\n    print(glass_sell[i][0], glass_sell[i][1], glass_sell[i][2])\n\nfor i in range(min(len(glass_buy), s)):\n    print(glass_buy[i][0], -glass_buy[i][1], glass_buy[i][2])", "n,s=list(map(int,input().split()))\nsem=[-1]*(100001)\nbum=[-1]*(100001)\nfor i in range(n):\n    wh,p,q=input().split()\n    p=int(p)\n    q=int(q)\n    if wh=='B':\n        if bum[p]==-1:\n            bum[p]=0\n        bum[p]+=q\n    else:\n        if sem[p]==-1:\n            sem[p]=0\n        sem[p]+=q\nfins=[]\nfinb=[]\nts=s\nfor i in range(100000,-1,-1):\n    if not ts:\n        break\n    if(bum[i]!=-1):\n        finb.append((i,bum[i]))\n        ts-=1\nts=s\nfor i in range(100001):\n    if not ts:\n        break\n    if(sem[i]!=-1):\n        fins.append((i,sem[i]))\n        ts-=1\nts=s\nfor i in range(len(fins)-1,-1,-1):\n    if not ts:\n        break\n    a,b=fins[i]\n    print('S',a,b)\n    ts-=1\nts=s\nfor i in range(len(finb)):\n    if not ts:\n        break\n    a,b=finb[i]\n    print('B',a,b)\n    ts-=1\n\n\n\n\n\n\n\n\n\n", "n, ss = map(int, input().split())\nbuy, send = dict(), dict()\nfor i in range(n):\n    s = list(map(str, input().split()))\n    c_v = list(map(int, s[1:]))\n    if s[0] == 'B':\n        if c_v[0] in buy:\n            buy[c_v[0]] += c_v[1]\n        else:\n            buy[c_v[0]] = c_v[1]\n    else:\n        if c_v[0] in send:\n            send[c_v[0]] += c_v[1]\n        else:\n            send[c_v[0]] = c_v[1]\nlength_s, length_b = len(send), len(buy)\nbuy_ = sorted(buy)[0 if length_b < ss else length_b - ss:]\nsend_ = sorted(send)[:min(length_s, ss)]\nfor i in range(len(send_) - 1, -1, -1):\n    print('S', send_[i], send[send_[i]])\nfor i in range(len(buy_) - 1, -1, -1):\n    print('B', buy_[i], buy[buy_[i]])", "n, s = list(map(int, input().split()))\nbuy = {}\nsale = {}\nfor i in range(n):\n    cur = input().split()\n    p = int(cur[1])\n    q = int(cur[2])\n    if cur[0] == 'B':\n        if p in buy:\n            buy[p] += q\n        else:\n            buy[p] = q\n    else:\n        if p in sale:\n            sale[p] += q\n        else:\n            sale[p] = q\n\nitems = list(sale.items())\nitems.sort()\nitems = items[:s]\nitems.reverse()\nfor i in items:\n    print('S', i[0], i[1])\n    \nitems = list(buy.items())\nitems.sort()\nitems.reverse()\nc = 0\nfor i in items:\n    if c == s:\n        break\n    print('B', i[0], i[1])\n    c += 1\n", "n, s = (list(map(int, input().split())))\n\nbuyorder = []\nsellorder = []\n\nfor i in range(n):\n    line = input()\n    order = line.split()\n    order[1] = int(order[1])\n    order[2] = int(order[2])\n\n    if order[0] == \"B\" :\n        for m in buyorder:\n            if m[1] == order[1]:\n                m[2] += order[2]\n                break\n        else:\n            buyorder.append(order)\n    else:\n        for m in sellorder:\n            if m[1] == order[1]:\n                m[2] += order[2]\n                break\n        else:\n            sellorder.append(order)\n\n\nbuyorder.sort(key= lambda data : data[1], reverse = True)\nsellorder.sort(key= lambda data : data[1], reverse = False)\n\nif len(sellorder)<s:\n    sellorder.sort(key= lambda data : data[1], reverse = True)\n    for i in sellorder:\n        print(i[0], i[1], i[2])\nelse:\n    newsell = []\n    for i in range(s):\n        newsell.append(sellorder[i])\n    newsell.sort(key= lambda data : data[1], reverse = True)\n    for i in range(s):\n        print(newsell[i][0], newsell[i][1], newsell[i][2])\n\nif len(buyorder)<s:\n    for i in buyorder:\n        print(i[0], i[1], i[2])\nelse:\n    for i in range(s):\n        print(buyorder[i][0], buyorder[i][1], buyorder[i][2])\n", "n, deaph = map(int, input().split())\nbuy = [0] * (10 ** 5 + 1)\nsell = [0] * (10 ** 5 + 1)\nfor i in range(n):\n    s = input()\n    t = s[0]\n    c, v = map(int, s[2:].split())\n    if t == \"B\":\n        buy[c] += v\n    elif t == \"S\":\n        sell[c] += v\n\n\nans_sell = []\ncnt = 0\ni = 0\nwhile cnt < deaph and i < len(sell):\n    if sell[i] != 0:\n        ans_sell.append((i, sell[i]))\n        cnt += 1\n    i += 1\nfor i in range(len(ans_sell)-1, 0-1, -1):\n    print(\"S\", ans_sell[i][0], ans_sell[i][1])\n\ncnt = 0\ni = len(buy) - 1\nwhile cnt < deaph and i >= 0:\n    if buy[i] != 0:\n        print(\"B\", i, buy[i])\n        cnt += 1\n    i -= 1", "n, s = map(int, input().split())\nbuys = dict()\nsell = dict()\nfor _ in range(n):\n  f = input().split()\n  if (f[0] == \"B\"):\n    buys[int(f[1])] = buys.get(int(f[1]), 0) + int(f[2])\n  else:\n    sell[int(f[1])] = sell.get(int(f[1]), 0) + int(f[2])\nbres = sorted(buys.keys(), reverse = True)\nsres = sorted(sell.keys())\nif bres:\n  bs = bres[min(s - 1, len(bres) - 1)]\nif sres:\n  ss = sres[min(s - 1, len(sres) - 1)]\n  for key in sorted(sell.keys(), reverse = True):\n    if (key <= ss):\n      print(\"S\", key, sell[key])\nif bres:\n  bs = bres[min(s - 1, len(bres) - 1)]\n  for key in sorted(buys.keys(), reverse = True):\n    if (key >= bs):\n      print(\"B\", key, buys[key])", "s = input()\nn, d = int(s.split()[0]), int(s.split()[1])\nb, s = {}, {}\nwb, ws = [], []\nfor i in range(0, n):\n\tst = input().split()\n\tst[1] = int(st[1])\n\tst[2] = int(st[2])\n\tif st[0] == 'B':\n\t\tif st[1] not in b:\n\t\t\tb[st[1]] = st[2]\n\t\telse:\n\t\t\tb[st[1]] += st[2];\n\t\tif st[1] not in wb:\n\t\t\twb.append(st[1]);\n\telse:\n\t\tif st[1] not in s:\n\t\t\ts[st[1]] = st[2]\n\t\telse:\n\t\t\ts[st[1]] += st[2];\n\t\tif st[1] not in ws:\n\t\t\tws.append(st[1]);\nws.sort()#[:d]#.sort(reverse=True)\nwb.sort(reverse=True)#[:d]\nws = ws[:d]\nwb = wb[:d]\nws.sort(reverse=True)\nfor i in ws:\n\tprint('S %s %s' %(i, s[i]))\nfor i in wb:\n\tprint('B %s %s' %(i, b[i]))", "from collections import defaultdict\n\nn, depth = [int(x) for x in input().split(' ')]\nl = []\ns = defaultdict(int)\nb = defaultdict(int)\nsl = []\nbl = []\nfor i in range(n) :\n    d, p, q = [x for x in input().split(' ')]\n    p = int(p)\n    q = int(q)\n    if d == 'S' : s[p] += q\n    else : b[p] += q\n\nfor p, q in list(s.items()): sl += [(p, q)]\nfor p, q in list(b.items()): bl += [(p, q)]\n\nsl.sort()\nbl.sort()\nsp = [\"S {0} {1}\".format(i[0], i[1]) for i in sorted(sl[0:depth], key=lambda x: -x[0])]\nbp = [\"B {0} {1}\".format(i[0], i[1]) for i in bl[-1:-depth-1:-1]]\n\nfor i in (sp + bp) : print(i)\n", "from collections import defaultdict\nn, s = [int(s) for s in input().split()]\nbuyq = defaultdict(int)\nselq = defaultdict(int)\nsq = 0\nbq = 0\nfor i in range(n):\n    d, p, q = input().split()\n    p = int(p)\n    q = int(q)\n    if d == 'B':\n        buyq[p] += q\n    else:\n        selq[p] += q\na = sorted(selq.keys())\nfor i in a[min(s, len(selq))-1::-1]:\n    print(\"S\", i, selq[i])\n\nb = sorted(buyq.keys())\nfor i in b[::-1][:min(s, len(buyq)):]:\n    print(\"B\", i, buyq[i])\n", "import sys\nimport os\ndef getint():\n    return list(map(int,input().split(' ')))\nn,s=getint()\ndic={'B':{},'S':{}}\nfor i in range(n):\n    d,p,q=list(input().split(' '))\n    p=int(p)\n    q=int(q)\n    dic[d][p]=dic[d].get(p,0)+q\nfor key in sorted(dic['S'],reverse=True)[-s:]:\n    print('S',key,dic['S'][key])\nfor key in sorted(dic['B'],reverse=True)[:s]:\n    print('B',key,dic['B'][key])\n    #for line in sorted(dic['B'])[:s]:\n        #print('B',line)\n"]