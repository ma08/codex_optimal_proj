["n,c = list(map(int, input().split()))\nP = list(map(int, input().split()))\nT = list(map(int, input().split()))\na = 0\nt = 0\nfor i in range(n):\n    t += T[i]\n    a += max(0,P[i]-c*t)\nt = 0\nb = 0\nfor i in range(n-1,-1,-1):\n    t += T[i]\n    b += max(0,P[i]-c*t)\nif a > b:\n    print(\"Limak\")\nelif a < b:\n    print(\"Radewoosh\")\nelse:\n    print(\"Tie\")\n", "n, c = map(int, input().split())\np = list(map(int, input().split()))\nt = list(map(int, input().split()))\ns1 = s2 = 0\nt1 = t2 = 0\nfor i in range(n):\n    t1 += t[i]\n    s1 += max(0, p[i] - c * t1)\nfor i in range(n - 1, -1, -1):\n    t2 += t[i]\n    s2 += max(0, p[i] - c * t2)\nif s1 > s2:\n    print(\"Limak\")\nelif s2 > s1:\n    print(\"Radewoosh\")\nelse:\n    print(\"Tie\")", "n,c = list(map(int, input().split(\" \")))\nlimak = 0\nrade = 0\nscore = input().split(\" \")\ntime = input().split(\" \")\nlTime = 0\nrTime = 0\nfor i in range(n):\n    lTime += int(time[i])\n    limak += max(0,int(score[i])-lTime*c)\n    rTime += int(time[n-1-i])\n    rade += max(0,int(score[n-1-i])-rTime*c)\nif limak > rade:\n    print(\"Limak\")\nelif rade > limak:\n    print(\"Radewoosh\")\nelse:\n    print(\"Tie\")\n", "n, c = map(int, input().split())\np, t = list(map(int, input().split())), list(map(int, input().split()))\nt1, t2, p1, p2 = 0, 0, 0, 0\nfor i in range(n):\n    t1 += t[i]\n    p1 += max(0, p[i] - c * t1)\n    t2 += t[n - i - 1]\n    p2 += max(0, p[n - i - 1] - c * t2)\nif p1 == p2:\n    print('Tie')\nelse:\n    print('Limak' if p1 > p2 else 'Radewoosh')", "def solve(n, c, a1, a2):\n    curr = 0\n    ans = 0\n    for i in range(n):\n        curr += a2[i]\n        ans += max(0, a1[i] - c * curr)\n    return ans\n\nn, c = map(int, input().split())\na1 = list(map(int, input().split()))\na2 = list(map(int, input().split()))\ns1 = s2 = 0\nr1 = solve(n, c, a1, a2)\nr2 = solve(n, c, a1[::-1], a2[::-1])\nif r1 > r2:\n    print(\"Limak\")\nelif r1 == r2:\n    print(\"Tie\")\nelse:\n    print(\"Radewoosh\")", "n, c = [int(x) for x in input().split(\" \")]\nP = [int(x) for x in input().split(\" \")]\nT = [int(x) for x in input().split(\" \")]\n\n\ndef score(P, T, c):\n    s = 0\n    x = 0\n    for p, t in zip(P, T):\n        x += t\n        s += max(0, p - c * x)\n    return s\n\nLimak = score(P, T, c)\nRadewoosh = score(reversed(P), reversed(T), c)\n\nif Limak > Radewoosh:\n    print(\"Limak\")\nelif Limak < Radewoosh:\n    print(\"Radewoosh\")\nelse: print(\"Tie\")\n", "n,c=list(map(int,input().split()))\np1=list(map(int,input().split()))\np2=p1[::-1]\nt=list(map(int,input().split()))\nt1=[t[0]]\nfor x in t[1:]: t1+=[t1[-1]+x]\nt2=[t[-1]]\nfor x in t[:-1][::-1]: t2+=[t2[-1]+x]\ns1=s2=0\nfor i in range(n):\n    s1+=max(0,p1[i]-c*t1[i])\n    s2+=max(0,p2[i]-c*t2[i])\nif s1==s2: print(\"Tie\")\nif s1>s2: print(\"Limak\")\nif s1<s2: print(\"Radewoosh\")\n", "nc = list(map(int,input().split()))\nn = nc[0]\nc = nc[1]\npoints = list(map(int,input().split()))\ntimes = list(map(int,input().split()))\nlPoints = 0\nrPoints = 0\n#split into two, test l and r separately\ntimeSpent = 0\nfor i in range(n):\n    timeSpent += times[i]\n    lPoints += max(0,(points[i]-(timeSpent*c)))\n#do Radewoosh\ntimeSpent = 0\ni = n-1\nwhile i >= 0:\n    timeSpent += times[i]\n    rPoints += max(0,(points[i]-(timeSpent*c)))\n    i -= 1\nif rPoints > lPoints:\n    print(\"Radewoosh\")\nelif lPoints > rPoints:\n    print(\"Limak\")\nelse:\n    print(\"Tie\")", "m,c=list(map(int,input().split()))\np=list(map(int,input().split()))\nn=list(map(int,input().split()))\n\nsum1,sum2,sm=0,0,0\n\nfor i in range(m):\n    sm+=n[i]\n    sum1=sum1+max(0,p[i]-c*sm )\n\nsm=0\ni=m-1\nwhile i>=0:\n    sm+=n[i]\n    sum2=sum2+max(0,p[i]-c*sm)\n    i-=1\nif sum1>sum2:\n    print(\"Limak\")\nelif sum2>sum1:\n    print(\"Radewoosh\")\nelif sum1 == sum2 :\n    print(\"Tie\")\n", "n,c = map(int,input().split())\np = list(map(int,input().split()))\nt = list(map(int,input().split()))\nx = 0\ny = 0\nres = 0\nfor i,j in enumerate(p):\n    res += c*t[i]\n    x += max(0,j - res)\np = p[::-1]\nt = t[::-1]\nres = 0\nfor i,j in enumerate(p):\n    res += c*t[i]\n    y += max(0,j - res)\n\nif x > y:\n    print(\"Limak\")\nelif x == y:\n    print(\"Tie\")\nelse:\n    print(\"Radewoosh\")", "temp = input().strip().split()\nn = int(temp[0])\nc = int(temp[1])\n\npVals = input().strip().split()\ntVals = input().strip().split()\npVals = [int(stng) for stng in pVals]\ntVals = [int(stng) for stng in tVals]\n\nl = 0\nmins = 0\nfor i in range(n):\n    mins = mins + tVals[i]\n    l = l + max(0, pVals[i] - c*mins)\n\nr = 0\nmins = 0\nfor i in range(n-1, -1,-1):\n    mins = mins + tVals[i]\n    r = r + max(0, pVals[i] - c*mins)\n\nif l > r:\n    print(\"Limak\")\nelif r > l:\n    print(\"Radewoosh\")\nelse:\n    print(\"Tie\")", "from sys import stdin as Si\nfrom itertools import combinations_with_replacement as Cr\ndef __starting_point():\n    n,c = list(map(int,Si.readline().split()))\n\n    S = tuple(map(int,Si.readline().split()))   #score\n    T = tuple(map(int,Si.readline().split()))   #time\n    L,R=0,0\n    for i in range(n):\n        #print(S[i],sum(T[:i+1])*c,S[n-1-i],sum(T[n-1-i:])*c)\n        L+= max(0, S[i]-sum(T[:i+1])*c)\n        R+= max(0,S[n-1-i]-sum(T[n-1-i:])*c)\n    if L>R: print('Limak')\n    elif R>L:   print('Radewoosh')\n    else:   print('Tie')\n        \n        \n\n                  \n                \n\n'''\n    A = input()\n    stack = []      #Real Stack\n    Graph = {\n        ')':'('\n        }\n    count = 0\n    def black(A):\n        #p for possibility\n        stak =[]\n        for e in A:\n            if e in ['(']:\n                stak.append(e)\n            else:\n                if stak==[] or Graph[e]!=stak[-1]:\n                    p=False\n                else:\n                    stak.pop(len(stak)-1)     #pop last \n        if len(stak) ==0:\n            p=True\n        else:\n            p=False\n        if not p:   return [0]\n        else:\n            #stak is not empty\n            stak = []\n            count = []\n            for e in range(len(A)):\n                if A[e]=='(' or stak==[]:  stak.append(A[e])\n                else:\n                    if A[e]==')' and Graph[A[e]]==stak[-1]:\n                        while Graph[A[e]]==stak[-1]:\n                            stak.pop(-1)\n                            if e==len(A)-1: break\n                            e+=1\n                            if A[e]=='(' or stak==[]:   break\n                        count.append(1)\n            return count\n\n    rov = []\n    P = False \n    for e in A:\n        if e in ['(']:  stack.append(e)\n        else:\n            if stack!=[]:\n                stack.append(e)\n                if stack.count('(')==stack.count(')'):\n                    x=black(stack)\n                    if x!=[0]:    P = True\n                    if x==[1]:\n                        rov.append(1)\n                    else:\n                        rov.append(sum(x[:-1]))\n                    stack=[]\n    if not P:   print(0)\n    else:\n        pro =1\n        for i in rov:   pro*=i\n        print(pro)\n    \n'''\n\n__starting_point()", "n, c = map(int, input().split())\nP = list(map(int, input().split()))\nT = list(map(int, input().split()))\nt = 0\nL = 0\nfor i in range(n):\n\tt += T[i]\n\tL += max(P[i] - c * t, 0)\nt = 0\nR = 0\nfor i in range(n - 1, -1, -1):\n\tt += T[i]\n\tR += max(P[i] - c * t, 0)\nif L > R:\n\tprint(\"Limak\")\nelif R > L:\n\tprint(\"Radewoosh\")\nelse:\n\tprint(\"Tie\")", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport time\n\n#   = input()\n#   = int(input())\n\n#() = (i for i in input().split())\n#   = [i for i in input().split()]\n\n(n, c) = (int(i) for i in input().split())\np      = [int(i) for i in input().split()]\nt      = [int(i) for i in input().split()]\n\nstart = time.time()\n\ntnow  = 0\nT     = sum(t)\n\nsl = 0\nsr = 0\n\nfor i in range(n):\n    sr += max(0, p[i] - c*(T-tnow))\n    tnow += t[i]\n    sl += max(0, p[i] - c*tnow)\n\nif sl > sr:\n    print('Limak')\nelif sl == sr:\n    print('Tie')\nelse:\n    print('Radewoosh')\n\nfinish = time.time()\n#print(finish - start)\n", "def main():\n    n, c = [int(t) for t in input().split()]\n    p = [int(t) for t in input().split()]\n    t = [int(t) for t in input().split()]\n\n    limak_score, x = 0, 0\n    for pi, ti in zip(p, t):\n        x += ti\n        limak_score += max(0, pi - c * x)\n\n    radewoosh_score, x = 0, 0\n    for pi, ti in zip(reversed(p), reversed(t)):\n        x += ti\n        radewoosh_score += max(0, pi - c * x)\n\n    if limak_score > radewoosh_score:\n        print('Limak')\n    elif radewoosh_score > limak_score:\n        print('Radewoosh')\n    else:\n        print('Tie')\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import sys\nimport math\nimport itertools as it\nimport operator as op\n\n\nn, c = list(map(int, sys.stdin.readline().split()))\nP = list(map(int, sys.stdin.readline().split()))\nT = list(map(int, sys.stdin.readline().split()))\n\ntl = tr = sl = sr = 0\nfor i in range(n):\n  tl += T[i]\n  tr += T[n-1-i]\n  sl += max(0, P[i] - c*tl)\n  sr += max(0, P[n-1-i] - c*tr)\n\nif sl > sr:\n  print('Limak')\nelif sl == sr:\n  print('Tie')\nelse:\n  print('Radewoosh')\n", "n,c=list(map(int,input().split()))\nin1=list(map(int,input().split()))\nin2=list(map(int,input().split()))\nt1,t2,op1,op2=0,0,0,0\nfor i in range(0,n):\n\tt1+=in2[i]\n\top1+=(in1[i]-c*t1 if(in1[i]-c*t1)>0 else 0)\n\tt2+=in2[n-i-1]\n\top2+=(in1[n-i-1]-c*t2 if(in1[n-i-1]-c*t2)>0 else 0)\nif(op1==op2):\n\tprint(\"Tie\")\nelse:\n\tprint(\"Limak\" if op1>op2 else \"Radewoosh\")\n", "n, c = map(int, input().split())\ncosts = list(map(int, input().split()))\ntimes = list(map(int, input().split()))\nlimac = 0\ntime = 0\nfor i in range(len(times)):\n    time += times[i]\n    limac += max(0, costs[i] - c * time)\ncosts.reverse()\ntimes.reverse()\nRadewoosh = 0\ntime = 0\nfor i in range(len(times)):\n    time += times[i]\n    Radewoosh += max(0, costs[i] - c * time)\nif limac > Radewoosh:\n    print(\"Limak\")\nelif limac < Radewoosh:\n    print(\"Radewoosh\")\nelse:\n    print(\"Tie\")", "'__author__'=='deepak Singh Mehta'\n\n\n\n\n\n\n\ndef __starting_point():\n    n,c = list(map(int,input().split()))\n    p = list(map(int,input().split()))\n    t = list(map(int,input().split()))\n    limak = 0\n    eff = 0\n    for i in range(len(p)):\n        eff += t[i]\n        limak += max(0,p[i]-(eff*c))\n    rade = 0\n    eff = 0\n    for i in range(len(p)-1,-1,-1):\n        eff += t[i]\n        rade += max(0,p[i]-(eff*c))\n        #print(\"aa-> \",rade)\n    if limak>rade:\n        print(\"Limak\")\n    elif limak<rade:\n        print(\"Radewoosh\")\n    else:\n        print(\"Tie\")\n\n__starting_point()", "n, c = list(map(int, input().split()))\np = list(map(int, input().split()))\nt = list(map(int, input().split()))\nsum_l = 0\nsum_r = 0\nt_l = 0\nt_r = 0\nfor i in range(n):\n    t_l += t[i]\n    sum_l += max(0, p[i] - t_l * c)\np.reverse()\nt.reverse()\nfor i in range(n):\n    t_r += t[i]\n    sum_r += max(0, p[i] - t_r * c)\nif sum_l > sum_r:\n    print(\"Limak\")\nelif sum_l < sum_r:\n    print(\"Radewoosh\")\nelse:\n    print(\"Tie\")\n", "a=input()\nb=a.split()\nn=int(b[0])\nc=int(b[1])\na=input()\nb=a.split()\na=input()\nt=a.split()\nfor i in range(len(b)):\n\tb[i]=int(b[i])\nfor i in range(len(t)):\n\tt[i]=int(t[i])\n\ntime=0\ncoun_lew=0\ncoun=0\nfor i in range(n):\n\ttime+=t[i]\n\tcoun=b[i]-c*time\n\tif coun<=0:\n\t\tcoun=0\n\tcoun_lew+=coun\n\ntime=0\ncoun_rew=0\ncoun=0\nfor i in range(n-1,-1,-1):\n\ttime+=t[i]\n\tcoun=b[i]-c*time\n\tif coun<=0:\n\t\tcoun=0\n\tcoun_rew+=coun\n\nif coun_lew>coun_rew:\n\tprint(\"Limak\")\nelif coun_lew<coun_rew:\n\tprint(\"Radewoosh\")\nelse:\n\tprint(\"Tie\")", "n, c = list(map(int, input().split()))\np = list(map(int, input().split()))\nt = list(map(int, input().split()))\n\np_l, p_t = 0,0\nfor i in range(n):\n    p_l += max(0, p[i] - c * sum(t[:i+1]))\n    p_t += max(0, p[n - i - 1] - c * sum(t[n-i-1:]))\nif p_l > p_t:\n    print('Limak')\nelif p_l == p_t:\n    print('Tie')\nelse:\n    print('Radewoosh')\n", "n,c = map(int,input().split())\np = list(map(int,input().split()))\nt = list(map(int,input().split()))\nbar = ['Limak','Tie','Radewoosh']\ns1 = 0; t1 = 0\ns2 = 0; t2 = 0\nfor i in range(n):\n    t1 += t[i]\n    t2 += t[n-i-1]\n    s1 += max(0,p[i]-t1*c)\n    s2 += max(0,p[n-i-1]-t2*c)\nif s1>s2:\n    print(bar[0])\nelif s1<s2:\n    print(bar[2])\nelse:\n    print(bar[1])", "nc = input().split()\nnc = [ int(nc[i]) for i in range(2) ]\np = input().split()\np = [ int(p[i]) for i in range(nc[0]) ]\nt = input().split()\nt = [ int(t[i]) for i in range(nc[0]) ]\n\nlimak = 0\nradewoosh = 0\n\ntime = 0\nfor prob in range(nc[0]):\n    time += t[prob]\n    limak += max(0, p[prob]-nc[1]*time)\n\ntime = 0\nfor prob in range(nc[0]-1, -1, -1):\n    time += t[prob]\n    radewoosh += max(0, p[prob]-nc[1]*time)\n\nif limak > radewoosh:\n    print('Limak')\nelif limak < radewoosh:\n    print('Radewoosh')\nelse:\n    print('Tie')\n", "def first():\n    inp = input().split(' ')\n    n = int(inp[0])\n    c = int(inp[1])\n    p = []\n    t = []\n    ip = input().split(' ')\n    for i in ip:\n        p.append(int(i))\n    it = input().split(' ')\n    for i in it:\n        t.append(int(i))\n    fs,ft = 0,0\n    ss,st = 0,0\n    for i in range(n):\n        ft += t[i]\n        fs += max(0, p[i]-c*ft)\n        st += t[n-i-1]\n        ss += max(0, p[n-i-1]-c*st)\n\n    if(fs > ss):\n        print(\"Limak\")\n    elif(ss > fs):\n        print(\"Radewoosh\")\n    else:\n        print(\"Tie\")\n\n\nfirst()"]