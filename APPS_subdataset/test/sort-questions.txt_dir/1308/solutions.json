["def getIntList():\n    return list(map(int, input().split()));\ndef getTransIntList(n):\n    first=getIntList();\n    m=len(first);\n    result=[[0]*n for _ in range(m)];\n    for i in range(m):\n        result[i][0]=first[i];\n    for j in range(1, n):\n        curr=getIntList();\n        for i in range(m):\n            result[i][j]=curr[i];\n    return result;\nn, m = getIntList()\ns=input();\norda=ord('a');\na=[ord(s[i])-orda for i in range(n)];\ncountSame=[1]*n;\nupLim=0;\nfor lowLim in range(n):\n    if lowLim<upLim:\n        continue;\n    for upLim in range(lowLim+1, n):\n        if a[upLim]!=a[lowLim]:\n            break;\n    else:\n        upLim+=1;\n    for i in range(lowLim, upLim):\n        countSame[i]=upLim-i;\ndef test(x, y, l):\n    map1=[0]*27;\n    map2=[0]*27;\n    count=0;\n    lowLim=min(countSame[x], countSame[y])-1;\n    for i in range(lowLim, l):\n        x1=map1[a[x+i]];\n        x2=map2[a[y+i]];\n        if x1!=x2:\n            return 'NO';\n        if x1==0:\n            count+=1;\n            map1[a[x+i]]=count;\n            map2[a[y+i]]=count;\n    return 'YES';\nresults=[];\nfor _ in range(m):\n    x, y, l=getIntList();\n    results.append(test(x-1, y-1, l));\nprint('\\n'.join(results));", " \ndef getIntList():\n    return list(map(int, input().split()))\n\ndef getTransIntList(n):\n    first=getIntList()\n    m=len(first)\n    result=[[0]*n for _ in range(m)]\n    for i in range(m):\n        result[i][0]=first[i]\n    for j in range(1, n):\n        curr=getIntList()\n        for i in range(m):\n            result[i][j]=curr[i]\n    return result\n\nn, m = getIntList()\ns=input()\norda=ord('a')\na=[ord(s[i])-orda for i in range(n)]\ncountSame=[1]*n\nupLim=0\nfor lowLim in range(n):\n    if lowLim<upLim:\n        continue\n    for upLim in range(lowLim+1, n):\n        if a[upLim]!=a[lowLim]:\n            break\n    else:\n        upLim+=1\n    for i in range(lowLim, upLim):\n        countSame[i]=upLim-i\n\n\ndef judge(x, y, l):\n    map1=[0]*27\n    map2=[0]*27\n    count=0\n    lowLim=min(countSame[x], countSame[y])-1\n    for i in range(lowLim, l):\n        x1=map1[a[x+i]]\n        x2=map2[a[y+i]]\n        if x1!=x2:\n            return 'NO'\n        if x1==0:\n            count+=1\n            map1[a[x+i]]=count\n            map2[a[y+i]]=count\n    return 'YES'\n\nresults=[]\n\nfor _ in range(m):\n    x, y, l=getIntList()\n    results.append(judge(x-1, y-1, l))\n\nprint('\\n'.join(results))", " \ndef getIntList():\n    return list(map(int, input().split()))\n\n\ndef getTransIntList(n):\n    first = getIntList()\n    m = len(first)\n    result = [[0]*n for _ in range(m)]\n    for i in range(m):\n        result[i][0] = first[i]\n    for j in range(1, n):\n        curr = getIntList()\n        for i in range(m):\n            result[i][j] = curr[i]\n    return result\n\n\nn, m = getIntList()\ns = input()\norda = ord('a')\na = [ord(s[i])-orda for i in range(n)]\ncountSame = [1]*n\nupLim = 0\nfor lowLim in range(n):\n    if lowLim < upLim:\n        continue\n    for upLim in range(lowLim+1, n):\n        if a[upLim] != a[lowLim]:\n            break\n    else:\n        upLim += 1\n    for i in range(lowLim, upLim):\n        countSame[i] = upLim-i\n\n\ndef judge(x, y, l):\n    map1 = [0]*27\n    map2 = [0]*27\n    count = 0\n    lowLim = min(countSame[x], countSame[y])-1\n    for i in range(lowLim, l):\n        x1 = map1[a[x+i]]\n        x2 = map2[a[y+i]]\n        if x1 != x2:\n            return 'NO'\n        if x1 == 0:\n            count += 1\n            map1[a[x+i]] = count\n            map2[a[y+i]] = count\n    return 'YES'\n\n\nresults = []\n\nfor _ in range(m):\n    x, y, l = getIntList()\n    results.append(judge(x-1, y-1, l))\n\nprint('\\n'.join(results))"]