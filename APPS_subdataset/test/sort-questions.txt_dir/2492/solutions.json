["import numpy as np\nn,k = map(int,input().split())\na = np.array(list(map(int,input().split())))\na.sort()\nposi = a[a>0]\nzero = a[a==0]\nnega = a[a<0]\n\ndef cnt(x):\n    c = 0\n    if x >= 0:\n        c += len(zero)*n\n    c += np.searchsorted(a, x // posi, side = 'right').sum()\n    c += (n-np.searchsorted(a, (- x - 1) // (-nega), side = 'right')).sum()\n    c -= np.count_nonzero(a * a <= x)\n    return c // 2\n\nl = - 10 ** 18\nr = 10 ** 18\nwhile l + 1 < r:\n    m = (l + r) // 2\n    if cnt(m) < k:\n        l = m\n    else:\n        r = m\nprint(r)", "import numpy as np\n\n\ndef main():\n    N, K = [int(x) for x in input().split()]\n    A = np.array(input().split(), np.int64)\n    A = np.sort(A)\n    minus = A[A<0]\n    zero = A[A==0]\n    plus = A[A>0]\n\n\n    def f(x):\n        \"\"\"number of products <=x\n        \"\"\"\n        res = 0\n        if x >= 0:\n            res += len(zero) * N\n        # positive\n        res += np.searchsorted(A, x // plus, side=\"right\").sum()\n\n        # negative\n        res += (N - np.searchsorted(A, (-x-1) // (-minus), side=\"right\")).sum()\n\n        # remove dup\n        res -= np.count_nonzero(A*A <= x)\n        res //= 2\n\n        return res\n\n    l = -10**18\n    r = 10**18\n\n    while l+1 < r:\n        mid = (l+r)//2\n        if f(mid) >= K:\n            r = mid\n        else:\n            l = mid\n    print(r)\n\n\ndef __starting_point():\n    main()\n__starting_point()", "import numpy as np\nn, k = map(int,input().split())\na = np.array(list(map(int,input().split())))\na.sort()\nposi = a[a>0]\nzero = a[a==0]\nnega = a[a<0]\nl = -10**18-1\nr = 10**18+1\nwhile r-l > 1:\n    mid = (r+l)//2\n    cnt = 0\n    if mid >= 0:\n        cnt += len(zero)*n\n    cnt += a.searchsorted(mid//posi, side=\"right\").sum()\n    cnt += (n - a.searchsorted(-(-mid//nega), side=\"left\")).sum()\n    cnt -= np.count_nonzero(a*a <= mid)\n    cnt //= 2\n    if cnt >= k:\n        r = mid\n    else:\n        l = mid\nprint(r)", "def d_pairs():\n    # \u53c2\u8003: https://maspypy.com/atcoder-\u53c2\u52a0\u611f\u60f3-2019-02-16abc-155\n    import numpy as np\n    N, K = [int(i) for i in input().split()]\n    A = np.array([int(i) for i in input().split()], np.int64)\n\n    A = np.sort(A)\n    zero = A[A == 0]\n    positive = A[A > 0]\n    negative = A[A < 0]\n\n    def f(c):\n        \"\"\"\u6570\u5217 A \u304b\u3089 2 \u8981\u7d20\u3092\u9078\u3093\u3067\u7a4d\u3092\u53d6\u3063\u305f\u3068\u304d\u3001c \u4ee5\u4e0b\u3068\u306a\u308b\u3088\u3046\u306a\u30da\u30a2\u306e\u9078\u3073\u65b9\"\"\"\n        count_pair = 0\n\n        # a (\u6570\u5217\u306e\u8981\u7d20) == 0 \u304b\u3064 c >= 0 \u306a\u3089\u3001a * x <= c \u3068\u306a\u308b x \u306f\u6570\u5217\u306e\u4efb\u610f\u306e\u8981\u7d20\n        if c >= 0:\n            count_pair += len(zero) * N\n        # a > 0 \u306e\u5834\u5408\n        count_pair += np.searchsorted(A, c // positive, side='right').sum()\n        # a < 0 \u306e\u5834\u5408 (\u5168\u4f53\u304b\u3089\u5f15\u304f\u3088\u3046\u306b\u3059\u308b\u3068\u3001\u898b\u901a\u3057\u304c\u3088\u3044)\n        count_pair += (N - np.searchsorted(A, (-c - 1) // (-negative), side='right')).sum()\n        # \u6dfb\u5b57\u306e\u9806\u5e8f\u306b\u5236\u7d04\u304c\u3042\u308b\u3053\u3068\u3092\u53cd\u6620\u3059\u308b\n        count_pair -= np.count_nonzero(A * A <= c)  # \u300c\u6dfb\u5b57\u304c\u540c\u3058\u8981\u7d20\u3092 2 \u5ea6\u9078\u3093\u3060\u5834\u5408\u300d\u3092\u5f15\u304f\n        return count_pair // 2\n\n    # \u6570\u5217\u304b\u3089\u8981\u7d20\u3092 2 \u500b\u9078\u3093\u3067\u7a4d\u3092\u53d6\u3063\u305f\u3068\u304d\u3001\u5236\u7d04\u304b\u3089\u3042\u308a\u5f97\u308b\u5024\u306e\u7bc4\u56f2\n    lower, upper = -10 ** 18, 10 ** 18\n    while upper - lower > 1:\n        x = (lower + upper) // 2\n        if f(x) >= K:\n            upper = x\n        else:\n            lower = x\n    return upper\n\nprint(d_pairs())", "#abc_155_d\nimport numpy as np\nn,k = [int(i) for i in input().split()]\na = [int(i) for i in input().split()]\na = np.array(a)\na.sort()\n\nplus = a[a>0]\nzero = a[a==0]\nminus= a[a<0]\n\nleft = -10**18\nright = 10**18\n\nwhile left+1 < right:\n    mid = (left+right)//2\n    cnt = 0\n    \n    if mid >=0:\n        cnt += len(zero) * n\n    \n    cnt += a.searchsorted(mid//plus, side=\"right\").sum()\n    cnt += (n - a.searchsorted(-(-mid//minus), side=\"left\")).sum()\n    cnt -= np.count_nonzero(a*a <= mid)\n    cnt /= 2\n    \n    if cnt >= k:\n        right = mid\n    if cnt < k:\n        left=mid\n        \nprint(right)", "import numpy as np\nimport sys\n\ninput = sys.stdin.readline\n\nn, k = [int(x) for x in input().split()]\nA = np.array([int(a) for a in input().split()], dtype=\"int64\")\n\nA = np.sort(A)\n\nA_pos = A[A > 0]\nA_neg = A[A < 0]\nA_zero = A[A == 0]\n\n# \u7a4d\u304cc\u4ee5\u4e0b\u3068\u306a\u308b\u7d44\u307f\u5408\u308f\u305b\u306e\u6570\u3092\u6c42\u3081\u308b\ndef n_comb_lt(c):\n    n_comb = 0\n    # A[i] > 0\u3067\u3042\u308bA[i]\u306b\u3064\u3044\u3066\n    target = c // A_pos  # target\u4ee5\u4e0b\u306e\u5024\u304cA[i]\u306e\u76f8\u65b9\n    n_comb += np.searchsorted(A, target, side=\"right\").sum()\n\n    # A[i] == 0\u3067\u3042\u308bA[i]\u306b\u3064\u3044\u3066\n    n_comb += n * len(A_zero) if c >= 0 else 0\n\n    # A[i] < 0\u3067\u3042\u308bA[i]\u306b\u3064\u3044\u3066\n    target = -(-c // A_neg)\n    n_comb += (n - np.searchsorted(A, target, side=\"left\")).sum()\n\n    # \u7d44\u307f\u5408\u308f\u305b\u306e\u3046\u3061\u3001A[i]*A[i]\u3068\u306a\u3063\u3066\u3044\u308b\u3082\u306e\u3092\u5f15\u3044\u3066\u30012\u3067\u5272\u308b\n    n_comb -= A[A * A <= c].size\n    n_comb //= 2\n\n    return n_comb\n\nok = -10 ** 18 - 1\nng = 10 ** 18 + 1\n\n# k\u756a\u76ee\u306e\u7a4d\u306f\u3001\u7a4d\u304cm\u672a\u6e80\u3068\u306a\u308b\u7d44\u307f\u5408\u308f\u305b\u304ck\u500b\u672a\u6e80\u3068\u306a\u308b\u6700\u5927\u306em\n# \u2190\u2192\u7a4d\u304c(m-1)\u4ee5\u4e0b\u3068\u306a\u308b\u7d44\u307f\u5408\u308f\u305b\u304ck\u500b\u672a\u6e80\u3068\u306a\u308b\u6700\u5927\u306em\nwhile ng - ok > 1:\n    mid = (ng + ok) // 2\n    if n_comb_lt(mid - 1) < k:\n        ok = mid\n    else:\n        ng = mid\n\nprint(ok)", "# coding: utf-8\nimport sys\nimport numpy as np\n\nsr = lambda: sys.stdin.readline().rstrip()\nir = lambda: int(sr())\nlr = lambda: list(map(int, sr().split()))\n\n# neg, zero, pos\u306b\u5206\u3051\u3066\u3001\u4e8c\u5206\u63a2\u7d22\nN, K = lr()\nA = np.array(lr()); A.sort()\nneg = A[A<0]\nzero = A[A==0]\npos = A[A>0]\n\ndef check(x):\n    '''x\u4ee5\u4e0b\u306e\u7a4d\u304cK\u500b\u4ee5\u4e0a\u3042\u308b\u306a\u3089True\u3092\u8fd4\u3059'''\n    cnt = 0  # \u6700\u5f8c\u306b\uff12\u3067\u308f\u308b\n    if x >= 0:\n        cnt += len(zero) * N\n    cnt += (np.searchsorted(A, x//pos, side='right')).sum()\n    cnt += (N - np.searchsorted(A, (-x-1)//(-neg), side='right')).sum()\n    cnt -= np.count_nonzero(A*A <= x)\n    assert cnt % 2 == 0\n    return (cnt//2) >= K\n\nok = 10**20; ng = -10**20\nwhile abs(ng-ok) > 1:\n    mid = (ok+ng) // 2\n    if check(mid):\n        ok = mid\n    else:\n        ng = mid\n\nprint(ok)\n# 30\n", "# -*- coding: utf-8 -*-\n#\u5c3a\u53d6\u308a\u6cd5\n\nimport numpy as np\nn, k = map(int,input().split())\na = np.array(list(map(int,input().split())))\na.sort()\nposi = a[a>0]\nzero = a[a==0]\nnega = a[a<0]\n#print(posi)\n# 2\u5206\u63a2\u7d22, mid\u3088\u308a\u5c0f\u3055\u3044\u3082\u306e\u3092\u6570\u3048\u308b\nl = -10**18-1\nr = 10**18+1\nwhile r-l > 1:\n    mid = (r+l)//2\n    cnt = 0\n    if mid >= 0:\n        cnt += len(zero)*n\n\n    # a.searchsorted(v, side=\"left\"): a[i-1] < v <= a[i]\u3067\u3042\u308bv\u306eindex\u3092\u8fd4\u3059\n    # a.searchsorted(v, side=\"right\"): a[i-1] <= v < a[i]\u3067\u3042\u308bv\u306eindex\u3092\u8fd4\u3059\n\n    cnt += a.searchsorted(mid//posi, side=\"right\").sum()\n    cnt += (n - a.searchsorted(-(-mid//nega), side=\"left\")).sum()\n    cnt -= np.count_nonzero(a*a <= mid)\n    cnt //= 2\n    #print(\"mid:\", mid)\n    #print(\"mid//posi:\", mid//posi)\n    #print(\"search:\", a.searchsorted(mid//posi,side=\"right\"))\n    #print(\"-(-mid//nega):\", -(-mid//nega))\n    #print(\"search:\", a.searchsorted(-(-mid//nega),side=\"left\"))\n    #print(\"nonzero_count:\", np.count_nonzero(a*a<=mid))\n    #print(\"count:\", cnt)\n    #print('-' * 20)\n    if cnt >= k:\n        r = mid\n    else:\n        l = mid\nprint(r)", "import sys\nsr = lambda: sys.stdin.readline().rstrip()\nir = lambda: int(sr())\nlr = lambda: list(map(int, sr().split()))\nimport numpy as np\ndef resolve():\n    N, K = lr()\n    A = np.sort(np.array(lr(), np.int64))\n    z = A[A == 0]\n    p = A[A > 0]\n    n = A[A < 0]\n    \n    def count_func(x):\n        cnt = 0\n        if x >= 0:\n            cnt += len(z) * N\n        cnt += np.searchsorted(A, x // p, side='right').sum()\n        cnt += (N - np.searchsorted(A, -(-x // n), side='left')).sum()\n        cnt -= np.count_nonzero(A * A <= x)\n        assert cnt % 2 == 0\n        return cnt // 2\n    \n    l = -10 ** 18\n    r = 10 ** 18\n    while l + 1 < r:\n        x = (l + r) // 2\n        if count_func(x) >= K:\n            r = x\n        else:\n            l = x\n    \n    print(r)\nresolve()", "import numpy as np\nimport sys\ninput=sys.stdin.readline\nn, k = list(map(int, input().split()))\na = np.array(list(map(int, input().split())))\npos = np.sort(a[a>0])\nneg = np.sort(np.abs(a[a<0]))\nzero = (a==0).sum()\n\nINF = 2*(10**18)\nl = -INF\nr = INF\nwhile(r-l>1):\n    mid = (l+r)//2\n    cnt = 0\n    if mid >= 0:\n        cnt = len(pos)*len(neg)  #(+) * (-)\n        cnt += (len(pos)+len(neg)) * zero # 0 * (non-zero)\n        cnt += (zero*(zero-1))//2 # 0 * 0\n        x = np.searchsorted(pos, mid//pos, side='right').sum() #(+) * (+)\n        x += np.searchsorted(neg, mid//neg, side='right').sum() #(-) * (-)\n        x -= (pos*pos<=mid).sum()\n        x -= (neg*neg<=mid).sum()\n        cnt += x/2\n    else:\n        #\u7a4d\u304cmid\u4ee5\u4e0a\u306b\u306a\u308c\u3070\u826f\u3044 -> mid\u3088\u308a\u3082\u5c0f\u3055\u3044\n        cnt = (len(neg) - np.searchsorted(neg, abs(mid)//pos + (mid%pos!=0), side='left')).sum()\n    #print(mid, cnt)\n    #cnt := \u7a4d\u304cmid\u4ee5\u4e0b\u306b\u306a\u308b\u7269\u306e\u6570\n    #k\u756a\u76ee\u306e\u6570\u3000-> \u305d\u308c\u4ee5\u4e0b\u306e\u3082\u306e\u304ck\u500b\u4ee5\u4e0a\u3042\u308b\u4e8b\u304c\u5fc5\u8981\n    #cnt\u304ck\u500b\u3088\u308a\u3082\u5c11\u306a\u3044 -> \u6761\u4ef6\u3092\u6e80\u305f\u3057\u3066\u3044\u306a\u3044\n    #cnt\u304c\u305d\u308c\u4ee5\u4e0a\u306a\u3089ok\n    if cnt < k:\n        l = mid\n    else:\n        r = mid\nprint(r)\n", "import numpy as np\nn,k=map(int,input().split())\na=np.array(list(map(int,input().split())))\na.sort()\np=a[a>0]\nz=a[a==0]\nm=a[a<0]\nl=-10**18\nr=10**18\nwhile r-l>1:\n  mid=(r+l)//2\n  cnt=0\n  if mid>=0:\n    cnt+=len(z)*n\n  cnt+=a.searchsorted(mid//p,side='right').sum()\n  cnt+=(n-a.searchsorted(-(-mid//m),side='left')).sum()\n  cnt-=np.count_nonzero(a*a<=mid)\n  cnt//=2\n  if cnt>=k:\n    r=mid\n  else:\n    l=mid\nprint(r)", "import bisect\nimport numpy as npy\nn,k = map(int,input().split())\na = list(map(int,input().split()))\na.sort()\nn0,np,nn = 0,0,0\nfor i in a:\n  if i>0:  np += 1\n  elif i == 0:  n0 += 1\n  else:  nn += 1\nkp = (np**2-np+nn**2-nn)//2\nk0 = n0*(n-n0)+(n0**2-n0)//2\nkn = nn*np\nif kn < k <= kn+k0:\n  print(0)\n  return\nnls = []\npls = []\nfor i in range(n):\n  if a[i] < 0:\n    nls.append(a[i])\n  elif a[i] > 0:\n    pls.append(a[i])\nln = len(nls)\nlp = len(pls)\nnls = npy.array(nls,dtype=npy.int64)\npls = npy.array(pls,dtype=npy.int64)\nif k <= kn:\n  l = a[0]*a[-1]-1\n  r = 0\n  while l+1 < r:\n    m = (l+r)//2\n    mls = m//nls\n    tmp = npy.searchsorted(pls,mls,side=\"right\").sum()\n    if tmp > kn-k:\n      l = m\n    else:\n      r = m\n  print(l)\nelse:\n  nls = -nls\n  nls = nls[::-1]\n  k -= kn+k0\n  l = 0\n  r = max(a[0]**2,a[-1]**2)+1\n  while l+1 < r:\n    m = (l+r)//2\n    tmp  = npy.searchsorted(nls,m//nls,side=\"right\").sum()\n    tmp += npy.searchsorted(pls,m//pls,side=\"right\").sum()\n    tmp -= npy.searchsorted(nls**2,m,side=\"left\")\n    tmp -= npy.searchsorted(pls**2,m,side=\"left\")\n    if tmp >= 2*k:\n      r = m\n    else:\n      l = m\n  print(r)", "import sys\ninput = sys.stdin.readline\nimport numpy as np\n\ndef main():\n    N, K = map(int,input().split())\n    A = np.sort(np.array(list(map(int, input().split())), np.int64))\n    z = A[A == 0]\n    p = A[A > 0]\n    n = A[A < 0]\n    \n    def count_func(x):\n        cnt = 0\n        if x >= 0:\n            cnt += len(z) * N\n        cnt += np.searchsorted(A, x // p, side='right').sum()\n        cnt += (N - np.searchsorted(A, -(-x // n), side='left')).sum()\n        cnt -= np.count_nonzero(A * A <= x)\n        assert cnt % 2 == 0\n        return cnt // 2\n    \n    l = -10 ** 18\n    r = 10 ** 18\n    while l + 1 < r:\n        x = (l + r) // 2\n        if count_func(x) >= K:\n            r = x\n        else:\n            l = x\n    \n    print(r)\n    \ndef __starting_point():\n    main()\n__starting_point()", "import numpy as np\nimport sys\n\ninput = sys.stdin.readline\n\nn, k = [int(x) for x in input().split()]\nA = np.array([int(a) for a in input().split()], dtype=\"int64\")\n\nA = np.sort(A)\n\nA_pos = A[A > 0]\nA_neg = A[A < 0]\nA_zero = A[A == 0]\n\n# \u7a4d\u304cc\u4ee5\u4e0b\u3068\u306a\u308b\u7d44\u307f\u5408\u308f\u305b\u306e\u6570\u3092\u6c42\u3081\u308b\ndef n_comb_lt(c):\n    n_comb = 0\n    # A[i] > 0\u3067\u3042\u308bA[i]\u306b\u3064\u3044\u3066\n    target = c // A_pos  # target\u4ee5\u4e0b\u306e\u5024\u304cA[i]\u306e\u76f8\u65b9\n    n_comb += np.searchsorted(A, target, side=\"right\").sum()\n\n    # A[i] == 0\u3067\u3042\u308bA[i]\u306b\u3064\u3044\u3066\n    n_comb += n * len(A_zero) if c >= 0 else 0\n\n    # A[i] < 0\u3067\u3042\u308bA[i]\u306b\u3064\u3044\u3066\n    target = -(-c // A_neg)\n    n_comb += (n - np.searchsorted(A, target, side=\"left\")).sum()\n\n    # \u7d44\u307f\u5408\u308f\u305b\u306e\u3046\u3061\u3001A[i]*A[i]\u3068\u306a\u3063\u3066\u3044\u308b\u3082\u306e\u3092\u5f15\u3044\u3066\u30012\u3067\u5272\u308b\n    n_comb -= A[A * A <= c].size\n    n_comb //= 2\n\n    return n_comb\n\nok = -10 ** 18 - 1\nng = 10 ** 18 + 1\n\n# k\u756a\u76ee\u306e\u7a4d\u306f\u3001\u7a4d\u304cm\u672a\u6e80\u3068\u306a\u308b\u7d44\u307f\u5408\u308f\u305b\u304ck\u500b\u672a\u6e80\u3068\u306a\u308b\u6700\u5927\u306em\n# \u2190\u2192\u7a4d\u304c(m-1)\u4ee5\u4e0b\u3068\u306a\u308b\u7d44\u307f\u5408\u308f\u305b\u304ck\u500b\u672a\u6e80\u3068\u306a\u308b\u6700\u5927\u306em\nwhile ng - ok > 1:\n    mid = (ng + ok) // 2\n    if n_comb_lt(mid - 1) < k:\n        ok = mid\n    else:\n        ng = mid\n\nprint(ok)\n", "\nimport numpy as np\ndef resolve():\n    n, k = list(map(int, input().split()))\n    a = np.array(input().split(), dtype=np.int64)\n    a.sort()\n\n    zero = np.count_nonzero(a == 0)\n    positive = a[a > 0]\n    negative = a[a < 0]\n\n    def count(x):  # \u7a4d\u304c x \u4ee5\u4e0b\u306e\u30da\u30a2\u306f\u4f55\u500b\u3042\u308b\u304b\uff1f\n        ans = 0\n        if x >= 0:  # \u7247\u5074\u304c 0 \u306e\u5834\u5408\n            ans += n * zero\n        ans += np.searchsorted(a, x // positive, side=\"right\").sum()  # \u7247\u5074\u304c\u6b63\u306e\u5834\u5408\n        ans += n * len(negative) - np.searchsorted(a, -(-x // negative), side=\"left\").sum()  # \u7247\u5074\u304c\u8ca0\u306e\u5834\u5408 \u5207\u308a\u4e0a\u3052\u306f -(-a//b)\n        ans -= np.count_nonzero(a * a <= x)  # \u540c\u3058\u3082\u306e2\u3064\u306f\u9078\u3079\u306a\u3044\n        return ans // 2\n\n    ok = 10 ** 18\n    ng = -ok - 1\n    while ok - ng > 1:  # \u4e8c\u5206\u63a2\u7d22\n        cen = (ok + ng) // 2\n        if count(cen) >= k:\n            ok = cen\n        else:\n            ng = cen\n    print(ok)\n\ndef __starting_point():\n    resolve()\n\n__starting_point()", "def main():\n    import numpy as np\n    from bisect import bisect_left, bisect_right\n\n    N, K = map(int, input().split())\n    A = list(map(int, input().split()))\n\n    A.sort()\n\n    n = bisect_left(A, 0)\n    p = bisect_right(A, 0)\n\n    Negative = np.array(A[:n], dtype = np.int64)\n    Positive = np.array(A[p:], dtype = np.int64)\n\n    Number_Negative = len(Negative) * len(Positive)\n    Number_Positive = len(Negative) * (len(Negative) - 1) // 2 + len(Positive) * (len(Positive) - 1) // 2\n    Number_Zero = N * (N - 1) // 2 - Number_Negative - Number_Positive\n\n    # print (Number_Negative)\n    # print (Negative)\n    # print (Number_Positive)\n    # print (Positive)\n    # print (Number_Zero)\n\n    def Ncount(x): #x\u4ee5\u4e0b\u306e\u6570\u3092\u6570\u3048\u308b(x < 0)\n        tmp = 0\n        for a in Negative:\n            tmp += len(Positive) - bisect_left(Positive, (x + a + 1) // a)\n        # print (x, tmp)\n        return tmp\n\n    def Ncount1(x):\n        tmp = (len(Positive) - np.searchsorted(Positive, (-x - 1) // (-Negative), side = 'right')).sum() \n        return tmp \n\n    def Pcount(x): #x\u4ee5\u4e0b\u306e\u6570\u3092\u6570\u3048\u308b(x > 0)\n        tmp = 0\n        for index, a in enumerate(Positive):\n            tmp += bisect_right(Positive[index + 1:], x // a)\n        for index, b in enumerate(Negative):\n            tmp += len(Negative[index + 1:]) - bisect_left(Negative[index + 1:], (x + b + 1) // b)\n            # print (bisect_right(Negative[index + 1:], x / b))\n        # print (x, tmp)\n        return tmp\n\n    def Pcount1(x):\n        tmp = 0\n        tmp += np.searchsorted(Positive, x // Positive, side = 'right').sum()\n        tmp += (len(Negative) - np.searchsorted(Negative, (-x - 1) // (-Negative), side = 'rigth')).sum()\n        tmp -= np.count_nonzero(Positive * Positive <= x)\n        tmp -= np.count_nonzero(Negative * Negative <= x)\n        return tmp // 2\n\n    if Number_Negative >= K:\n        # \u3053\u3053\u306b\u4e8c\u5206\u63a2\u7d22\u3092\u66f8\u304f\n        l = -10 ** 18\n        r = 0\n        while r - l > 1:\n            mid = (l + r) // 2\n            if K <= Ncount1(mid):\n                r = mid\n            else:\n                l = mid\n        print (r)\n        return\n            \n\n    elif Number_Negative < K <= Number_Negative + Number_Zero:\n        print (0)\n        return\n\n    else:\n        # \u3053\u3053\u306b\u4e8c\u5206\u63a2\u7d22\u3092\u66f8\u304f\n        l = 0\n        r = 10 ** 18\n        K -= (Number_Negative + Number_Zero)\n        while r - l > 1:\n            mid = (l + r) // 2\n            if K <= Pcount1(mid):\n                r = mid\n            else:\n                l = mid\n\n        print (r)\n        # return\n\n    # print (Pcount(l) + Number_Negative + Number_Zero)\n    # print (Pcount(r) + Number_Negative + Number_Zero)\n\ndef __starting_point():\n    main()\n__starting_point()", "def d_pairs():\n    # \u53c2\u8003: https://maspypy.com/atcoder-\u53c2\u52a0\u611f\u60f3-2019-02-16abc-155\n    import numpy as np\n    N, K = [int(i) for i in input().split()]\n    A = np.array([int(i) for i in input().split()], np.int64)\n\n    A = np.sort(A)\n    zero = A[A == 0]\n    positive = A[A > 0]\n    negative = A[A < 0]\n\n    def f(c):\n        \"\"\"\u6570\u5217 A \u304b\u3089 2 \u8981\u7d20\u3092\u9078\u3093\u3067\u7a4d\u3092\u53d6\u3063\u305f\u3068\u304d\u3001c \u4ee5\u4e0b\u3068\u306a\u308b\u3088\u3046\u306a\u30da\u30a2\u306e\u9078\u3073\u65b9\"\"\"\n        count_pair = 0\n\n        # a (\u6570\u5217\u306e\u8981\u7d20) == 0 \u304b\u3064 c >= 0 \u306a\u3089\u3001a * x <= c \u3068\u306a\u308b x \u306f\u6570\u5217\u306e\u4efb\u610f\u306e\u8981\u7d20\n        if c >= 0:\n            count_pair += len(zero) * N\n        # a > 0 \u306e\u5834\u5408\n        count_pair += np.searchsorted(A, c // positive, side='right').sum()\n        # a < 0 \u306e\u5834\u5408 (\u5168\u4f53\u304b\u3089\u5f15\u304f\u3088\u3046\u306b\u3059\u308b\u3068\u3001\u898b\u901a\u3057\u304c\u3088\u3044)\n        count_pair += (N - np.searchsorted(A, (-c - 1) // (-negative), side='right')).sum()\n        # \u6dfb\u5b57\u306e\u9806\u5e8f\u306b\u5236\u7d04\u304c\u3042\u308b\u3053\u3068\u3092\u53cd\u6620\u3059\u308b\n        count_pair -= np.count_nonzero(A * A <= c)  # \u300c\u6dfb\u5b57\u304c\u540c\u3058\u8981\u7d20\u3092 2 \u5ea6\u9078\u3093\u3060\u5834\u5408\u300d\u3092\u5f15\u304f\n        return count_pair // 2\n\n    # \u6570\u5217\u304b\u3089\u8981\u7d20\u3092 2 \u500b\u9078\u3093\u3067\u7a4d\u3092\u53d6\u3063\u305f\u3068\u304d\u3001\u5236\u7d04\u304b\u3089\u3042\u308a\u5f97\u308b\u5024\u306e\u7bc4\u56f2\n    lower, upper = -10 ** 18, 10 ** 18\n    while upper - lower > 1:\n        x = (lower + upper) // 2\n        if f(x) >= K:\n            upper = x\n        else:\n            lower = x\n    return upper\n\nprint(d_pairs())", "import numpy as np\nN, K = map(int, input().split())\nL = np.array(list(map(int, input().split())))\n\nL = np.sort(L)\npos = L[0<L]\nneg = L[0>L]\nzero = len(L[L==0])\n\ndef f(x):\n  tmp = 0\n  if x>=0:\n    tmp += zero*N\n  tmp += np.searchsorted(L, x//pos, side='right').sum()\n  tmp += (N - np.searchsorted(L, -(-x//neg), side='left')).sum()\n  tmp -= np.count_nonzero(L*L<=x)\n  return tmp//2\n\nl, r = -10**18, 10**18\nwhile l<r-1:\n  m = (l+r)//2\n  count = f(m)\n  if count >= K:\n    r = m\n  else:\n    l = m\n\nprint(r)", "import numpy as np\nN, K = map(int, input().split())\nA = np.array(list(map(int, input().split())))\nA = np.sort(A)\n\nG = A[A > 0]\nZ = A[A == 0]\nL = A[A < 0]\n\nl, r = 10**18, -10**18\n\nwhile l-r > 1:\n  # \u300c\u7a4d\u304cm\u4ee5\u4e0b\u306b\u306a\u308b\u30da\u30a2\u306e\u6570\u300d\u3092\u8abf\u3079\u308b\u3002\n  m = (l+r) // 2\n\n  # A[A > 0]\u5185\u304b\u3089\u6761\u4ef6\u3092\u6e80\u305f\u3059\u3082\u306e\u306e\u6570?\n  Pk = np.searchsorted(A, m//G, side=\"right\").sum()\n\n  # A[A < 0]\u5185\u304b\u3089\u6761\u4ef6\u3092\u6e80\u305f\u3059\u3082\u306e\u306e\u6570?\n  Nk = (N - np.searchsorted(A, (-m-1)//(-L), side=\"right\")).sum()\n\n  # \u540c\u3058\u8981\u7d20\u540c\u58eb\u306e\u7a4d\u306f\u91cd\u8907\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u6761\u4ef6\u3092\u6e80\u305f\u3057\u3066\u3044\u305f\u3089\u6e1b\u3089\u3059\n  duplicate = np.count_nonzero(A*A <= m)\n\n  # A[0]\u5185\u304b\u3089\u6761\u4ef6\u3092\u6e80\u305f\u3059\u3082\u306e\u306e\u6570?\n  Zk = 0\n  if m >= 0:\n    Zk += len(Z) * N\n\n  # \u6761\u4ef6\u3092\u6e80\u305f\u3059\u8981\u7d20\u306e\u6570\u3092\u5408\u308f\u305b\u308b\n  k = Pk + Nk + Zk - duplicate\n  \n  # \u5168\u8981\u7d20\u304c\u4e8c\u91cd\u306b\u306a\u3063\u3066\u3044\u308b\u3002\u91cd\u8907\u8981\u7d20\u3092\u524a\u9664\n  k //= 2\n\n  # \u6761\u4ef6\u3092\u6e80\u305f\u3059\u8981\u7d20\u6570k\u304cK\u500b\u4ee5\u4e0a\u306a\u3089m\u3092\u4f4e\u304f\u3001K\u3088\u308a\u5c11\u306a\u3044\u306a\u3089m\u3092\u9ad8\u304f\u3059\u308b\n  if k >= K:\n    l = m\n  else:\n    r = m\n#l\u3068r\u304c\u4e00\u81f4\u3059\u308c\u3070m\u304c\u4e00\u610f\u306b\u5b9a\u307e\u308b\nprint(l)", "import itertools\nimport numpy as np\n\nN, K = list(map(int, input().split(' ')))\nA = list(map(int, input().split(' ')))\nA = np.sort(A)\n\npositive = A[A>0]\nnegative = A[A<0]\nzero = A[A==0]\n\nl = -10**18\nr = 10**18\n\nwhile l + 1 < r:\n    x = (l+r) // 2 # \u4e2d\u592e\u4f4d\u7f6e\n    cnt = 0\n    if x >= 0:\n        cnt += N * len(zero)\n    \n    # x//pos : \u4e2d\u592e\u5024/pos\u306e\u305d\u308c\u305e\u308c\u306e\u5024\n    cnt += A.searchsorted(x//positive, side=\"right\").sum()\n    cnt += (N - A.searchsorted(-(-x//negative), side=\"left\")).sum()\n    cnt -= np.count_nonzero(A * A <= x)\n    cnt //= 2\n \n    if cnt >= K:\n        r = x\n    else:\n        l = x\nprint(r) \n", "import bisect\nimport numpy as np\n\nN,K = list(map(int,input().split()))\nA = list(map(int,input().split()))\n\n#N,K = 9,9\n#A = [-3,-2,-2,-2,0,0,1,2,2]\n\ndef simple():\n    B = sorted([A[i] * A[j] for i in range(N) for j in range(i+1,N)])\n    return B[K-1]\n\ndef solve():\n    A.sort()\n\n    iplus = bisect.bisect_right(A,0)\n    izeros = bisect.bisect_left(A,0)\n\n    pluss = np.array(A[iplus:]).astype(np.int64)\n    zeros = A[izeros:iplus]\n    minuss = np.array(A[:izeros]).astype(np.int64)\n\n    nplus = len(pluss)\n    nzero = len(zeros)\n    nminus = len(minuss)\n\n    npminus = nplus * nminus\n    npzeros = nzero * (nplus + nminus) + nzero * (nzero-1)//2\n\n    if npminus < K <= npminus + npzeros:\n        return 0\n    elif K <= npminus:\n        mn = A[-1] * A[0] - 1\n        mx = 0\n        while mx-mn > 1:\n            mid = (mn+mx)//2\n            xs = -(-mid//minuss)\n            cnt = nplus * nminus\n            cnt -= np.sum(np.searchsorted(pluss,xs,side=\"left\"))\n            if cnt >= K:\n                mx = mid\n            else:\n                mn = mid\n        return mx\n    else:\n        nK = K - npminus - npzeros\n        pluss2 = (-minuss)[::-1]\n        mn = -1\n        mx = max(A[0]**2, A[-1]**2)\n        pluss_p2 = pluss**2\n        pluss2_p2 = pluss2**2\n        while mx-mn > 1:\n            mid = (mn+mx)//2\n            cnt = 0\n            xs = mid//pluss\n            cnt += np.sum(np.searchsorted(pluss,xs,side='right'))\n            cnt -= np.count_nonzero(pluss_p2 <= mid)\n            xs2 = mid//pluss2\n            cnt += np.sum(np.searchsorted(pluss2,xs2,side='right'))\n            cnt -= np.count_nonzero(pluss2_p2 <= mid)\n            cnt = cnt //2\n            #print(mn,mid,mx,cnt)\n            if nK <= cnt:\n                mx = mid\n            else:\n                mn = mid\n        return mx\n\nprint((solve()))\n#for K in range(1,N*(N-1)//2+1):\n#    print(solve(),simple())\n\n", "import numpy as np\n\nn,k = map(int,input().split())\na = np.array(list(map(int,input().split())))\n\na.sort()\npos = a[a>0]\nzero = a[a==0]\nneg = a[a<0]\nnegpos = (neg*(-1))[::-1]\n\nlenn = len(neg)\nlenz = len(zero)\nlenp = len(pos)\n\nnnres = lenn * lenp\nnzres = int(lenz*(lenn+lenp)+lenz*(lenz-1)/2)\nnpres = int(lenn*(lenn-1)/2 + lenp*(lenp-1)/2)\n\nif k<=nnres:\n    def count_nnres(x):\n        cnt = np.searchsorted(neg,x//pos,side='right').sum()\n        return int(cnt)\n    left = -10**18\n    right = -1\n    while left+1<right:\n        mid = (left+right)//2\n        nebefore = count_nnres(mid)\n        if nebefore >= k:\n            right = mid\n        elif nebefore < k:\n            left = mid\n    print(right)\n    \nelif nnres<k<=nnres+nzres:\n    print(0)\n    \nelif nnres+nzres<k:\n    def count_npres(x):\n        cnt = 0\n        cnt += int(np.searchsorted(pos,x//pos,side='right').sum() - ((x//pos)>=pos).sum())//2\n        cnt += int(np.searchsorted(negpos,x//negpos,side='right').sum() - ((x//negpos)>=negpos).sum())//2\n        return cnt\n    k -= nnres+nzres\n    left = 1\n    right = 10**18\n    while left+1<right:\n        mid = (left+right)//2\n        nebefore = count_npres(mid)\n        if nebefore >= k:\n            right = mid\n        elif nebefore < k:\n            left = mid\n    print(right)", "import numpy as np\nn, k = list(map(int, input().split()))\na = np.array(list(map(int, input().split())))\n\na.sort()\n\nplus = a[a > 0]\nminus = a[a < 0]\nzero = a[a == 0]\n\n#inf\u3060\u3068\u5272\u3063\u3066\u3082inf\nleft = -10 ** 18\nright = 10 ** 18\n\nwhile left + 1 < right:\n    x = (left + right) // 2\n    cnt = 0\n    if x >= 0:\n        cnt += n * len(zero)\n    cnt += a.searchsorted(x // plus, side=\"right\").sum()\n    cnt += (n - a.searchsorted(-(-x // minus), side=\"left\")).sum()\n    cnt -= np.count_nonzero(a * a <= x)\n    cnt //= 2\n\n    if cnt >= k:\n        right = x\n    else:\n        left = x\n\nprint(right)\n", "#https://maspypy.com/atcoder-%E5%8F%82%E5%8A%A0%E6%84%9F%E6%83%B3-2019-02-16abc-155\nimport numpy as np\nN,K=map(int,input().split())\nA=np.array(list(map(int,input().split())))\nA.sort()\nG=A[A>0]\nZ=A[A==0]\nL=A[A<0]\n\nok=10**18+1\nng=-10**18-1\n\n#x\u4ee5\u4e0b\u304cK\u500b\u4ee5\u4e0a\u3067\u3042\u308bx\u306e\u6700\u5c0f\u5024\n\nwhile ok-ng>1:\n  mid = (ng+ok)//2\n  #mid\u4ee5\u4e0b\u306e\u30da\u30a2\u306e\u500b\u6570\u3092\u6570\u3048\u308b\n  \n  #\u6b63\u306e\u3082\u306e\u306e\u3046\u3061\u3001mid\u4ee5\u4e0b\u306e\u30da\u30a2\u306e\u500b\u6570\u3092\u6570\u3048\u308b\n  cg=np.searchsorted(A,mid//G,side=\"right\").sum()\n  \n  #\u8ca0\u306e\u3082\u306e\u306e\u3046\u3061mid\u4ee5\u4e0b\u306e\u30da\u30a2\u306e\u500b\u6570\u3092\u6570\u3048\u308b\n  cl=(N-np.searchsorted(A,(-mid-1)//(-L),side=\"right\")).sum()\n  \n  #\u540c\u3058\u6570\u5b57\u540c\u58eb\u306e\u7a4d\u304cmid\u4ee5\u4e0b\u306e\u3082\u306e\u3092\u6570\u3048\u308b\n  d = np.count_nonzero(A*A <= mid)\n  \n  #0\u304cmid\u4ee5\u4e0b\u306a\u3089\u3001\u305d\u308c\u3082\u30d7\u30e9\u30b9\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\n  z=0\n  if mid>=0:\n    z += len(Z)*N\n  \n  c=cg+cl+z-d\n  \n  #\u4e8c\u91cd\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u5272\u308b\n  c //=2\n  \n  #mid\u4ee5\u4e0b\u306e\u30da\u30a2\u306e\u500b\u6570\u304cK\u500b\u4ee5\u4e0a\u306e\u3068\u304d\n  if c>=K:\n    ok=mid\n  else:\n    ng=mid\n    \nprint(ok)   ", "import numpy as np\n\ndef count_pair(x):\n    cnt = 0\n    cnt += (n-np.searchsorted(A, x//A_nega, side='right')).sum()\n    if x > 0:\n        cnt += len(A_zero)*n\n    cnt += np.searchsorted(A, -(-x//A_posi), side='left').sum()\n    cnt = (cnt-(A**2 < x).sum())//2\n    return cnt\n\nn, k = list(map(int, input().split()))\n* A, = list(map(int, input().split()))\nA = np.array(A)\nA = np.sort(A)\nA_posi = A[A > 0]\nA_zero = A[A == 0]\nA_nega = A[A < 0]\ninf = 10**18+1\nl, r = -inf, inf\nwhile r - l > 1:\n    c = (l + r) // 2\n    if count_pair(c) < k:\n        l = c\n    else:\n        r = c\nprint(l)\n", "import numpy as np\n\nn, k = list(map(int, input().split()))\na = list(map(int, input().split()))\n\na = np.array(a)\na.sort()\n\nnega = a[a<0]\nzero = a[a==0]\nposi = a[a>0]\n\nl = -10**18-1\nr = 10**18+1\nwhile r - l > 1:\n   mid = (r+l)//2\n   cnt = 0\n   if mid >= 0:\n      cnt += len(zero)*n\n   cnt += a.searchsorted(mid//posi, side='right').sum()\n   cnt += (n - a.searchsorted(-(-mid//nega), side='left')).sum()\n   cnt -= np.count_nonzero(a*a <= mid)\n   cnt //=2\n   if cnt >= k:\n      r = mid\n   else:\n      l= mid\n\nprint(r)\n\n", "import numpy as np\n\nn, k = map(int, input().split())\na = np.array(input().split(), np.int64)\n\na = np.sort(a)\nzero = a[a == 0]\npos = a[a > 0]\nneg = a[a < 0]\n\ndef f(x):\n    \"\"\"count the number of products , <= x\"\"\"\n    cnt_tpl = 0\n    # zero and ...\n    if x >= 0:\n        cnt_tpl += len(zero) * n\n    # positive and ...\n    cnt_tpl += np.searchsorted(a, x // pos, side='right').sum()\n    # negative and ...\n    cnt_tpl += (n - np.searchsorted(a, (-x - 1) // (-neg), side='right')).sum()\n    # a^2\n    cnt_tpl -= np.count_nonzero(a * a <= x)\n    assert cnt_tpl % 2 == 0\n    return cnt_tpl // 2\n\nleft = -10 ** 18\nright = 10 ** 18\nwhile left + 1 < right:\n    x = (left + right) // 2\n    if f(x) >= k:\n        right = x\n    else:\n        left = x\n\nprint(right)", "import numpy as np\nn, k = list(map(int,input().split()))\n\n# np.int64\u3092\u3064\u3051\u306a\u3044\u3068\u3001\u5f8c\u3067A**2\u3092\u8a08\u7b97\u3057\u305f\u3068\u304d\u306b\u6841\u3042\u3075\u308c\u3059\u308b\nA = np.array(sorted(list(map(int,input().split()))), np.int64)\nposA = A[A > 0] # \u6b63\u306e\u6570\u306e\u307f\u306e\u914d\u5217\nnegA = A[A < 0] # \u8ca0\u306e\u6570\u306e\u307f\u306e\u914d\u5217\nz = (A==0).sum() # 0\u306e\u500b\u6570\n\nleft = -10**18\nright = 10**18\n\nwhile left+1 < right:\n    num = (left+right)//2\n    # \u30da\u30a2\u7a4d\u306e\u914d\u5217\u306e\u4e2d\u3067\u3001num\u3088\u308a\u5c0f\u3055\u3044\u3082\u306e\u306e\u6570\u3092\u6570\u3048\u3066\u3044\u304f\u3002\n    count = 0 # \u307e\u305a\u306f0\u3067\u521d\u671f\u5316\u3059\u308b\u3002\n    # \u3082\u3057num\u304c0\u4ee5\u4e0a\u3067\u3042\u308c\u3070\u3001\u7a4d\u304c\u30bc\u30ed\u306b\u306a\u308b\u30da\u30a2\u7a4d\u306e\u6570\u3092\u8db3\u3057\u3053\u3080\n    if num >= 0:\n        # \u3053\u306e\u6bb5\u968e\u3067\u306f\u5024\u304c\u30bc\u30ed\u306e\u3082\u306e\u306b\u3064\u3044\u3066\u81ea\u5206\u3068\u306e\u7a4d\u3092\u3042\u3048\u3066\u30ab\u30a6\u30f3\u30c8\u3059\u308b\n        count += z*n \n    # \u6b63\u306e\u6570\u306b\u5bfe\u3057\u3066\u3001\u304b\u3051\u3066\u3082num\u3092\u8d85\u3048\u306a\u3044\u6700\u5927\u306e\u6570\u5b57\u306e\u30ea\u30b9\u30c8\n    limit_pos = num // posA\n    # limit_pos\u306e\u5404\u6570\u5b57\u3092\u4e0b\u56de\u308b\u6570\u304cA\u306e\u4e2d\u306b\u4f55\u500b\u3042\u308b\u304b\u306e\u30ea\u30b9\u30c8\n    limit_idx = np.searchsorted(A, limit_pos, side='right')\n    count += limit_idx.sum()\n\n    # \u8ca0\u306e\u6570\u306b\u5bfe\u3057\u3066\u3001\u304b\u3051\u3066\u3082num\u3092\u8d85\u3048\u306a\u3044\u6700\u5927\u306e\u6570\u5b57\u306e\u30ea\u30b9\u30c8\n    limit_neg = -(-num // negA)\n    # limit_neg\u306e\u5404\u6570\u5b57\u3092\u4e0b\u56de\u308b\u6570\u304cA\u306e\u4e2d\u306b\u4f55\u500b\u3042\u308b\u304b\u306e\u30ea\u30b9\u30c8\n    limit_idx = n - np.searchsorted(A, limit_neg, side='left')\n    count += limit_idx.sum()\n    \n    duplicate_cases = (A ** 2 <= num).sum()\n\n    count -= duplicate_cases\n    count //= 2\n\n    if count >= k:\n        right = num\n    else:\n        left = num\n\nprint(right)\n\n", "import numpy as np\n\n\ndef partsolve(A, x, positive, zero, negative):\n    \"\"\"\n    :param A:\n    :param x:\n    :return: A\u306e\u7a4d\u306e\u30da\u30a2\u306e\u4e2d\u3067\u3001x\u4ee5\u4e0b\u3068\u306a\u308b\u30da\u30a2\u306e\u500b\u6570\n    \"\"\"\n    count = 0\n    if x >= 0:\n        count = len(zero) * len(A)\n    P = x // positive\n    Pc = np.searchsorted(A, P, side='right')\n    count += Pc.sum()\n\n    N = (-x-1) // -negative\n    Nc = np.searchsorted(A, N, side='right')\n    Nc = len(A) - Nc\n    count += Nc.sum()\n\n    count -= np.count_nonzero(A * A <= x)\n    return count // 2\n\ndef solve(N, K, As):\n    A = np.array(sorted(As), np.int64)\n    positive = A[A > 0]\n    zero = A[A == 0]\n    negative = A[A < 0]\n\n    left = -10 ** 18\n    right = 10 ** 18\n    while right - left > 1:\n        mid = left + (right - left) // 2\n        c = partsolve(A, mid, positive, zero, negative)\n        if c < K:\n            left = mid\n        else:\n            right = mid\n    return right\n\n\ndef __starting_point():\n    N, K = tuple(map(int, input().split(\" \")))\n    As = list(map(int, input().split(\" \")))\n    print((solve(N, K, As)))\n\n\n__starting_point()", "import numpy as np\ndef f(nums, a):\n  return 0  if nums.size<=1 else (np.searchsorted(nums, a//nums, side='right').sum()-np.searchsorted(nums, int(pow(a, 1/2)), side='right'))//2\n\nN, K=map(int, input().split())\nA=np.sort(list(map(int, input().split())))\n\np=np.sum(A>0)\nq=np.sum(A<0)\nZ=N-p-q\nAP=A[-p:] if p>0 else np.array([])\nAN=A[:q] if q>0 else np.array([])\n\nb=(N-Z)*Z+Z*(Z-1)//2\na=p*q\n\nif K<=a:\n  x=AP[-1]*AN[0]-1\n  y=AP[0]*AN[-1]\n  while y-x>1:\n    tmp=(y+x)//2\n    counter=np.searchsorted(AN, tmp//AP, side='right').sum()\n    if counter<K:\n      x=tmp\n    else:\n      y=tmp\n  print(y)\nelif K<=a+b:\n  print(0)\nelse:\n  x=0\n  y=10**18\n  K=K-a-b\n  if q<=1:\n    while y-x>1:\n      tmp=(y+x)//2\n      if f(AP, tmp)<K:\n        x=tmp\n      else:\n        y=tmp\n    print(y)\n    return\n    \n  AN=AN[::-1]\n  AN=-AN\n  \n  if p<=1:\n    while y-x>1:\n      tmp=(y+x)//2\n      counter=f(AN, tmp)\n      if counter<K:\n        x=tmp\n      else:\n        y=tmp\n    print(y)\n    return\n    \n  while y-x>1:\n    tmp=(y+x)//2\n    if f(AP, tmp)+f(AN, tmp)<K:\n      x=tmp\n    else:\n      y=tmp\n  print(y)", "import numpy as np\n\ndef check(mid):\n  cnt=0\n  if mid>=0:\n    cnt+=len(zero)*N\n  cnt+=np.searchsorted(A, mid//pos, side=\"right\").sum()\n  cnt+=(N-np.searchsorted(A, (-mid-1)//(-neg), side=\"right\")).sum()\n  cnt-=np.count_nonzero(A*A<=mid)\n  return cnt//2\n\nN,K=map(int,input().split())\nA=np.array(sorted(map(int,input().split())))\n\npos=A[A>0]\nzero=A[A==0]\nneg=A[A<0]\n\nhigh=10**18\nlow=-10**18\nwhile low+1<high:\n  mid=(high+low)//2\n  if check(mid)>=K:\n    high=mid\n  else:\n    low=mid\nprint(high)", "import numpy as np\ndef resolve():\n    n, k = map(int, input().split())\n    a = np.array(input().split(), dtype=np.int64)\n    a.sort()\n \n    zero = np.count_nonzero(a == 0)\n    positive = a[a > 0]\n    negative = a[a < 0]\n \n    def count(x):  # \u7a4d\u304c x \u4ee5\u4e0b\u306e\u30da\u30a2\u306f\u4f55\u500b\u3042\u308b\u304b\uff1f\n        ans = 0\n        if x >= 0:  # \u7247\u5074\u304c 0 \u306e\u5834\u5408\n            ans += n * zero\n        ans += np.searchsorted(a, x // positive, side=\"right\").sum()  # \u7247\u5074\u304c\u6b63\u306e\u5834\u5408\n        ans += n * len(negative) - np.searchsorted(a, -(-x // negative), side=\"left\").sum()  # \u7247\u5074\u304c\u8ca0\u306e\u5834\u5408 \u5207\u308a\u4e0a\u3052\u306f -(-a//b)\n        ans -= np.count_nonzero(a * a <= x)  # \u540c\u3058\u3082\u306e2\u3064\u306f\u9078\u3079\u306a\u3044\n        return ans // 2\n \n    ok = 10 ** 18\n    ng = -ok - 1\n    while ok - ng > 1:  # \u4e8c\u5206\u63a2\u7d22\n        cen = (ok + ng) // 2\n        if count(cen) >= k:\n            ok = cen\n        else:\n            ng = cen\n    print(ok)\n \ndef __starting_point():\n    resolve()\n__starting_point()", "from sys import stdin\nimport numpy as np\ndef main():\n    #\u5165\u529b\n    readline=stdin.readline\n    n,k=map(int,readline().split())\n    a=np.array(readline().strip().split(),dtype=\"int64\")\n    \n    a.sort()\n    neg=a[a<0]\n    neg_p=neg**2\n    zero=a[a==0]\n    pos=a[a>0]\n    pos_p=pos**2\n    l=-10**18-1\n    r=10**18\n    while l<r-1:\n        x=(l+r)//2\n        cnt=0\n        if len(neg)>0:\n            cnt+=(len(a)-np.searchsorted(a,(x+neg+1)//neg)).sum()\n            cnt-=len(neg_p[neg_p<=x])\n        if len(zero)>0:\n            if x>=0:\n                cnt+=(len(a)-1)*len(zero)\n        if len(pos)>0:\n            cnt+=np.searchsorted(a,x//pos,side=\"right\").sum()\n            cnt-=len(pos_p[pos_p<=x])\n\n        cnt//=2\n        if cnt>=k: r=x\n        else: l=x\n\n    print(r)\n\ndef __starting_point():\n    main()\n__starting_point()", "import numpy as np\n\nfrom bisect import bisect\n\nDEBUG = False\n\n\nN, K = list(map(int, input().split()))\nA = list(map(int, input().split()))\n\nA.sort()\nA = np.array(A, dtype=np.int64)\nneg = A[A < 0]\nzero = A[A == 0]\npos = A[A > 0]\n\n# Only keep the abs value of the negatives and flip so it's sorted\nrevAbsNeg = -neg[::-1]\n\n\ndef countDistinctPairsLessThan(arr, prod):\n    # Given a sorted array find the number of distinct pairs that are < prod\n    # O(N * log(N)) where N = len(arr)\n\n    N = arr.shape[0]\n    assert arr.shape == (N,)\n    count3 = np.sum(\n        np.minimum(np.arange(N), np.searchsorted(arr, (prod - 1) // arr, side=\"right\"))\n    )\n\n    if DEBUG:\n        count = 0\n        for i, x in enumerate(arr):\n            count += bisect(arr, (prod - 1) // x, 0, i)\n\n        count2 = 0\n        for i in range(len(arr)):\n            for j in range(i + 1, len(arr)):\n                if arr[i] * arr[j] < prod:\n                    count2 += 1\n        assert count == count2 == count3\n    return count3\n\n\ndef countPairsLessThanOrEqual(arr1, arr2, prod):\n    # Given two sorted arrays containing *positive* numbers only,\n    # find the number of pairs between the two arrays that are <= prod\n    # O(N * log(M)) where N = len(arr1), M = len(arr2)\n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n\n    count3 = np.sum(np.searchsorted(arr2, prod // arr1, side=\"right\"))\n\n    if DEBUG:\n        count = 0\n        for x in arr1:\n            count += bisect(arr2, prod // x)\n        count2 = 0\n        for x in arr1:\n            for y in arr2:\n                if x * y <= prod:\n                    count2 += 1\n        assert count == count2 == count3\n    return count3\n\n\ndef getIndex(prod):\n    # Count number of pairs strictly less than prod\n    count = 0\n    if prod < 0:\n        # All negatives except for the negatives with abs value less than or equal -prod\n        count += len(pos) * len(neg)\n        count -= countPairsLessThanOrEqual(pos, revAbsNeg, -prod)\n    elif prod >= 0:\n        # All negatives\n        count += len(pos) * len(neg)\n        if prod > 0:\n            # All zeroes\n            count += len(zero) * len(neg)\n            count += (len(zero) * (len(zero) - 1)) // 2\n            count += len(zero) * len(pos)\n            # Positives with positives\n            count += countDistinctPairsLessThan(pos, prod)\n            # Negatives with negatives\n            count += countDistinctPairsLessThan(revAbsNeg, prod)\n\n    if DEBUG:\n        count2 = 0\n        for i in range(N):\n            for j in range(i + 1, N):\n                if A[i] * A[j] < prod:\n                    count2 += 1\n        assert count == count2\n    return count\n\n\ndef bisect_f(f, lo, hi):\n    if DEBUG:\n        assert f(lo) and not f(hi)\n    while hi - lo > 1:\n        mid = (lo + hi) // 2\n        if f(mid):\n            lo = mid\n        else:\n            hi = mid\n        if DEBUG:\n            assert f(lo) and not f(hi)\n    if DEBUG:\n        assert hi - lo == 1\n        assert f(lo) and not f(hi)\n    return lo\n\n\ndef solve(K):\n    lo = -10 ** 18\n    hi = 10 ** 18 + 1\n    if DEBUG:\n        assert getIndex(lo) <= K < getIndex(hi)\n    prod = bisect_f(lambda prod: getIndex(prod) <= K, lo, hi)\n    if DEBUG:\n        assert getIndex(prod) <= K < getIndex(prod + 1)\n    return prod\n\n\nif DEBUG:\n    for k in range((N * (N - 1)) // 2):\n        print((\"k\", k, solve(k)))\n\nprint((solve(K - 1)))  # K is 1-indexed\n", "import numpy as np\nn, k = list(map(int,input().split()))\na = np.array(list(map(int,input().split())))\na.sort()\nposi = a[a>0]\nzero = a[a==0]\nnega = a[a<0]\n\n# 2\u5206\u63a2\u7d22, mid\u3088\u308a\u5c0f\u3055\u3044\u3082\u306e\u3092\u6570\u3048\u308b\nl = -10**18-1\nr = 10**18+1\nwhile r-l > 1:\n    mid = (r+l)//2\n    cnt = 0\n    if mid >= 0:\n        cnt += len(zero)*n\n    \n    # a.searchsorted(v, side=\"left\"): a[i-1] < v <= a[i]\u3067\u3042\u308bv\u306eindex\u3092\u8fd4\u3059  \n    # a.searchsorted(v, side=\"right\"): a[i-1] <= v < a[i]\u3067\u3042\u308bv\u306eindex\u3092\u8fd4\u3059  \n\n    cnt += a.searchsorted(mid//posi, side=\"right\").sum()\n    cnt += (n - a.searchsorted(-(-mid//nega), side=\"left\")).sum()\n    cnt -= np.count_nonzero(a*a <= mid)\n    cnt //= 2\n    # print(\"mid:\", mid)\n    # print(\"mid//posi:\", mid//posi)\n    # print(\"search:\", a.searchsorted(mid//posi,side=\"right\"))\n    # print(\"-(-mid//nega):\", -(-mid//nega))\n    # print(\"search:\", a.searchsorted(-(-mid//nega),side=\"left\"))\n    # print(\"nonzero_count:\", np.count_nonzero(a*a<=mid))\n    # print(\"count:\", cnt)\n    # print('-' * 20)\n    if cnt >= k:\n        r = mid\n    else:\n        l = mid\nprint(r)\n", "import sys\nimport numpy as np\nINF = 10**18+5\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**6)\n\n\ndef main():\n    n, k = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    a = np.sort(a)\n    ap = a[a > 0]\n    an = a[a < 0]\n    zc = n * (n - ap.size - an.size)\n\n    l = -INF\n    r = INF\n    while(l+1 < r):\n        x = (l+r)//2\n\n        total = (n-np.searchsorted(a, -(-x // an), side='left')).sum()\n        if x >= 0:\n            total += zc\n        total += np.searchsorted(a, x // ap, side='right').sum()\n        total -= a[a*a <= x].size\n        total //= 2\n        if total < k:\n            l = x\n        else:\n            r = x\n\n    print(r)\n\n\nmain()\n", "N,K=list(map(int, input().split()))\nA=list(map(int, input().split()))\nA=sorted(A)\nimport numpy as np\nA=np.array(A,dtype=\"int64\")\nZ=A[A==0]\nH=A[A<0]\nS=A[A>0]\nl,r=-10**19,10**19\nwhile r-l>1:\n  mid=(r+l)//2\n  cnt=0\n  cnt+=A.searchsorted(mid//S,side=\"right\").sum()\n  cnt+=(N-A.searchsorted((-mid-1)//(-H),side=\"right\")).sum()\n  cnt-=np.count_nonzero(A*A<=mid)\n  if mid>=0:\n    cnt+=len(Z)*N \n  cnt//=2\n  if cnt>=K:\n    r=mid\n  else:\n    l=mid \nprint(r)\n", "import numpy as np\nn,k=list(map(int,input().split()))\na = np.array(list(map(int,input().split())))\na.sort()\n\np = a[a>0]\nm = a[a<0]\nz = np.count_nonzero(a==0)\n\ndef count(x):\n  cnt = 0\n  if x>=0:\n    cnt+=z*n\n  cnt += a.searchsorted(x//p,side='right').sum()\n  cnt += n*len(m) - a.searchsorted(-(-x//m),side='left').sum()\n  cnt -= np.count_nonzero(a*a<=x)\n  return cnt//2\nl,r = -10**19,10**19\nwhile r-l>1:\n  mid = (l+r)//2\n  cnt = count(mid)\n  if cnt >= k:\n    r = mid\n  else:\n    l = mid\nprint(r)\n", "import numpy as np\n\nN, K = list(map(int, input().split()))\nA = np.sort(np.array(input().split(),np.int64))\nz = A[A == 0]\np = A[A > 0]\nn = A[A < 0]\n\n\n\ndef check(x):\n    # x\u4ee5\u4e0b\u306e\u6570\u304cK\u500b\u4ee5\u4e0a\u3042\u308b\u6642\u3001True\u3092\u8fd4\u3059\n    count = 0 #\u6700\u5f8c\u306b\uff12\u3067\u5272\u308b\n    if x >= 0:\n        count += len(z) * N\n    count += (np.searchsorted(A, x//p, side='right')).sum()\n    count += (N - np.searchsorted(A, (-x-1)//(-n), side='right')).sum()\n    count -= np.count_nonzero(A * A <= x) #\u30da\u30a2\u306a\u306e\u3067\u81ea\u5206\u81ea\u8eab\u306f\u99c4\u76ee\n    assert count % 2 == 0\n    count //= 2\n    return count >= K\n\nleft = - 10 ** 19 # NG\nright = 10 ** 19 # OK\nwhile right > left + 1:\n    mid = (left+right) // 2\n    if check(mid):\n        right = mid\n    else:\n        left = mid\n\nprint(right)\n", "import numpy as np\n\nn, k = list(map(int, input().split()))\n\nA = np.array(input().split(), np.int64)\n\nA.sort()\n\nposA = A[A > 0]\nnegA = A[A < 0]\nzeros = (A==0).sum()\n\nleft = -10**18\nright = 10**18\n\nwhile left+1 < right:\n    num = (left+right)//2\n    \n    less_count = 0\n    \n    if num >= 0:\n        less_count += zeros * n\n    \n    limit_pair_for_pos = num // posA\n    limit_idxs = np.searchsorted(A, limit_pair_for_pos, side='right')\n    less_count += limit_idxs.sum()\n\n    limit_pair_for_neg = -(num // -negA)\n    limit_idxs = n - np.searchsorted(A, limit_pair_for_neg, side='left')\n    less_count += limit_idxs.sum()\n\n    duplicate_cases = (A**2 <= num).sum()\n    less_count -= duplicate_cases\n    less_count //= 2\n    \n    if less_count >= k:\n        right = num\n    else:\n        left = num\n\nprint(right)\n", "import numpy as np\n\nn,k = map(int,input().split())\na = list(map(int,input().split()))\na = np.array(a)\na.sort()\nplus = a[a>0]\nzero = np.count_nonzero(a==0)\nminus = a[a<0]\n\nlow = -10**20\nhi = 10**20\n\nwhile hi-low > 1:\n    # n*n\u306e\u30de\u30b9\u304b\u3089ave\u4ee5\u4e0b\u3068\u3044\u3046\u6761\u4ef6\u3092\u6e80\u305f\u3059\u500b\u6570\u3092\u30ab\u30a6\u30f3\u30c8\u3059\u308b\u30a4\u30e1\u30fc\u30b8\n    item = 0\n    ave = (hi+low)//2\n\n    # ave\u304c\u30d7\u30e9\u30b9\u306e\u6642\u30bc\u30ed\u306e\u5206\u306f\u6761\u4ef6\u3092\u6e80\u305f\u3059\u305f\u3081\u52a0\u7b97\u3057\u3066\u3084\u308b\n    if ave >= 0:\n        item += zero*n\n\n    # bisect\u7d50\u679c*(serch\u3057\u305f\u3044plus) <= ave\u3000\u3092\u5909\u5f62\n    # bisect\u7d50\u679c <= ave//(serch\u3057\u305f\u3044plus)\u3000\u306b\u306a\u308b\n    item += a.searchsorted(ave//plus,side='right').sum()\n\n    # \u30de\u30a4\u30ca\u30b9\u306e\u65b9\u3082\u5f0f\u5909\u5f62\u306e\u3084\u308a\u65b9\u306f\u540c\u3058\n    # \u30de\u30a4\u30ca\u30b9\u306e\u65b9\u306f\u7d50\u679c\u304cave\u3088\u308a\u5927\u304d\u3044\u3082\u306e\u3092\u9664\u5916\u3059\u308b\n    item += n*len(minus)-a.searchsorted(-(-ave//minus),side='left').sum()\n\n    # \u6700\u5f8c\u306b\u6761\u4ef6\u306f\u6e80\u305f\u3057\u3066\u3044\u308b\u3082\u306e\u306e\u3001\u81ea\u5206\u81ea\u8eab\u3092\u304b\u3051\u3066\u3044\u308b\u3082\u306e\u3092\u5f15\u3044\u3066\u3084\u308b\n    item -= np.count_nonzero(a*a <= ave)\n    \n    # \u4e8c\u5206\u63a2\u7d22\u90e8\u5206\u7d44\u307f\u5408\u308f\u305b\u306e\u969b\u306b(a,b),(b,a)\u306e\uff12\u901a\u308a\u8db3\u3057\u3066\u308b\u306e\u3067\u5272\u308b\n    if item//2 >= k:\n        hi = ave\n    else:\n        low = ave\n\nprint(hi)", "from math import floor,ceil,sqrt,factorial,log\nfrom collections import Counter, deque\nfrom functools import reduce\nimport numpy as np\ndef S(): return input()\ndef I(): return int(input())\ndef MS(): return map(str,input().split())\ndef MI(): return map(int,input().split())\ndef LS(): return list(MS())\ndef LI(): return list(MI())\ndef LLS(): return [list(map(str, l.split() )) for l in input()]\ndef LLI(): return [list(map(int, l.split() )) for l in input()]\ndef LLSN(n: int): return [LS() for _ in range(n)]\ndef LLIN(n: int): return [LI() for _ in range(n)]\n\nn, k = MI()\n\na = np.array(sorted([int(i) for i in input().split()]))\n\npos = a[a > 0]\nzero = a[a == 0]\nneg = a[a < 0]\n\n# 2\u5206\u63a2\u7d22, mid \u3088\u308a\u5c0f\u3055\u3044\u3082\u306e\u3092\u6570\u3048\u308b\nl = -10 ** 18 - 1\nr = 10 ** 18 + 1\nwhile r - l > 1:\n    mid = (r + l) // 2\n    cnt = 0\n    if mid >= 0:\n        cnt += len(zero) * n\n \n    cnt += a.searchsorted(mid // pos, side=\"right\").sum()\n    cnt += (n - a.searchsorted(-(-mid // neg), side=\"left\")).sum()\n    cnt -= np.count_nonzero(a * a <= mid)\n    cnt //= 2\n    if cnt >= k:\n        r = mid\n    else:\n        l = mid\n\nprint(r)", "import numpy as np\ndef main():\n    n, k = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    a.sort()\n    cnt_neg, cnt_zro, cnt_pos = 0, 0, 0\n    neg_a, zro_a, pos_a = [], [], []\n    n_ap = neg_a.append\n    z_ap = zro_a.append\n    p_ap = pos_a.append\n    for v in a:\n        if v < 0:\n            cnt_neg += 1\n            n_ap(v)\n        elif v == 0:\n            cnt_zro += 1\n            z_ap(v)\n        else:\n            cnt_pos += 1\n            p_ap(v)\n    num_neg_pair = cnt_neg * cnt_pos\n    num_pos_pair = cnt_neg*(cnt_neg-1)//2 + cnt_pos*(cnt_pos-1)//2\n    num_zro_pair = n*(n-1)//2 - num_neg_pair - num_pos_pair\n    if k <= num_neg_pair:\n        neg_a = np.array(neg_a)\n        pos_a = np.array(pos_a)\n        l = -1*10**18\n        r = 0\n        while l+1 < r:\n            p = (l+r)//2\n            cnt = np.searchsorted(pos_a, p//neg_a, side=\"riget\").sum()\n            result = n*cnt_neg - (cnt + (cnt_neg + cnt_zro)*cnt_neg)\n            if result < k:\n                l = p\n            else:\n                r = p\n        print(l)\n    elif k <= num_neg_pair + num_zro_pair:\n        print(\"0\")\n    else:\n        k -= num_neg_pair + num_zro_pair\n        for i in range(len(neg_a)):\n            neg_a[i] = -neg_a[i]\n        neg_a = np.array(neg_a)\n        neg_a = np.sort(neg_a)\n        pos_a = np.array(pos_a)\n        l = 1\n        r = 10**18+1\n        while l+1 < r:\n            p = (l+r)//2\n            cnt_1 = np.searchsorted(neg_a, (p+neg_a-1)//neg_a, side=\"left\").sum()\n            cnt_2 = np.searchsorted(pos_a, (p+pos_a-1)//pos_a, side=\"left\").sum()\n            cnt_1 -= np.count_nonzero(neg_a < (p+neg_a-1)//neg_a)\n            cnt_2 -= np.count_nonzero(pos_a < (p+pos_a-1)//pos_a)\n            result = (cnt_1 + cnt_2)//2\n            if result < k:\n                l = p\n            else:\n                r = p\n        print(l)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "# coding: utf-8\nimport numpy as np\n\n\ndef solve(*args: str) -> str:\n    n, k = list(map(int, args[0].split()))\n    A = np.array(sorted(map(int, args[1].split())))\n    N = A[A < 0]\n    P = A[0 < A]\n\n    count = 0\n    left, right = -10**18, 10**18\n    while left+1 < right:\n        x = (left+right)//2\n        count = 0\n\n        if k <= len(N)*len(P):\n            count += (len(P)-np.searchsorted(P, -(-x//N), side='left')).sum()\n\n        elif (n*(n-1) - len(N)*(len(N)-1) - len(P)*(len(P)-1))//2 < k:\n            for D in (-(N[::-1]), P):\n                count += np.searchsorted(D, x//D, side='right').sum()\n                count -= len(D[D*D <= x])\n            count //= 2\n            count += (n*(n-1) - len(N)*(len(N)-1) - len(P)*(len(P)-1))//2\n\n        else:\n            right = 0\n            break\n\n        if count < k:\n            left = x\n        else:\n            right = x\n\n    return str(right)\n\n\ndef __starting_point():\n    print((solve(*(open(0).read().splitlines()))))\n\n__starting_point()", "import numpy as np\nN,K=map(int,input().split())\nA=list(map(int,input().split()))\n\nA=np.array(A)\n\nA_pos=np.sort(A[A>0])\nA_neg=np.sort(A[A<0])\nA_neg2=-A_neg[::-1]\nn_pos=len(A_pos)\nn_neg=len(A_neg)\nn_zero=N-n_pos-n_neg\n\ndef position_in_neg(x):\n    y=n_pos-np.searchsorted(A_pos,x//A_neg,side='right')\n    return y.sum()\n\ndef position_in_pos(x):\n    z=np.searchsorted(A_pos,-(-x//A_pos),side='left')\n    w=np.searchsorted(A_neg2,-(-x//A_neg2),side='left')\n    tmp=len(A_pos[A_pos**2<x])+len(A_neg2[A_neg2**2<x])\n    return (z.sum()+w.sum()-tmp)//2\n\ndef position(x):\n    if x<0:\n        return position_in_neg(x)\n    elif x==0:\n        return n_pos*n_neg\n    else:\n        return position_in_pos(x)+n_pos*n_neg+(n_pos+n_neg)*n_zero+n_zero*(n_zero-1)//2\n\nl=-pow(10,18)\nr=pow(10,18)\nwhile(r-l>1):\n    mid=(l+r)//2\n    if position(mid)<K:\n        l=mid\n    else:\n        r=mid\nprint(l)", "import numpy as np\nn,k = list(map(int,input().split()))\na = list(map(int,input().split()))\na = np.array(a)\na.sort()\np = a[a>0]\nz = a[a==0]\nm = a[a<0]\nlow = -10**18\nhigh = 10**18\nwhile high-low>1:\n    mid = (high + low) //2\n    count = 0\n    if mid >= 0:\n        count += len(z)*n\n    count += a.searchsorted(mid//p,side = \"right\").sum()\n    count += (n-a.searchsorted(-(-mid//m),side = \"left\")).sum()\n    count -= np.count_nonzero(a*a <= mid)\n    count /= 2\n    if count >= k:\n        high = mid\n    if count < k:\n        low = mid\nprint(high)\n", "# https://maspypy.com/atcoder-%E5%8F%82%E5%8A%A0%E6%84%9F%E6%83%B3-2019-02-16abc-155\nimport numpy as np\n\nN, K = list(map(int, input().split()))\nA = np.array(list(map(int, input().split())))\nA.sort()\nG = A[A > 0]\nZ = A[A == 0]\nL = A[A < 0]\n\nok = 10 ** 18 + 1\nng = -10 ** 18 - 1\n\n# x\u4ee5\u4e0b\u304cK\u500b\u4ee5\u4e0a\u3067\u3042\u308bx\u306e\u6700\u5c0f\u5024\n\nwhile ok - ng > 1:\n    mid = (ng + ok) // 2\n    # mid\u4ee5\u4e0b\u306e\u30da\u30a2\u306e\u500b\u6570\u3092\u6570\u3048\u308b\n\n    # \u6b63\u306e\u3082\u306e\u306e\u3046\u3061\u3001mid\u4ee5\u4e0b\u306e\u30da\u30a2\u306e\u500b\u6570\u3092\u6570\u3048\u308b\n    cg = np.searchsorted(A, mid // G, side=\"right\").sum()\n\n    # \u8ca0\u306e\u3082\u306e\u306e\u3046\u3061mid\u4ee5\u4e0b\u306e\u30da\u30a2\u306e\u500b\u6570\u3092\u6570\u3048\u308b\n    cl = (N - np.searchsorted(A, (mid + 1) // L, side=\"right\")).sum()\n\n    # \u540c\u3058\u6570\u5b57\u540c\u58eb\u306e\u7a4d\u304cmid\u4ee5\u4e0b\u306e\u3082\u306e\u3092\u6570\u3048\u308b\n    d = np.count_nonzero(A * A <= mid)\n\n    # 0\u304cmid\u4ee5\u4e0b\u306a\u3089\u3001\u305d\u308c\u3082\u30d7\u30e9\u30b9\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\n    z = 0\n    if mid >= 0:\n        z += len(Z) * N\n\n    c = cg + cl + z - d\n\n    # \u4e8c\u91cd\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u5272\u308b\n    c //= 2\n\n    # mid\u4ee5\u4e0b\u306e\u30da\u30a2\u306e\u500b\u6570\u304cK\u500b\u4ee5\u4e0a\u306e\u3068\u304d\n    if c >= K:\n        ok = mid\n    else:\n        ng = mid\n\nprint(ok)\n", "import numpy as np\n\n\ndef partsolve(A, x, positive, zero, negative):\n    \"\"\"\n    :param A:\n    :param x:\n    :return: A\u306e\u7a4d\u306e\u30da\u30a2\u306e\u4e2d\u3067\u3001x\u4ee5\u4e0b\u3068\u306a\u308b\u30da\u30a2\u306e\u500b\u6570\n    \"\"\"\n    count = 0\n    if x >= 0:\n        count = len(zero) * len(A)\n    P = x // positive\n    Pc = np.searchsorted(A, P, side='right')\n    count += Pc.sum()\n\n    N = (-x-1) // -negative\n    Nc = np.searchsorted(A, N, side='right')\n    Nc = len(A) - Nc\n    count += Nc.sum()\n\n    count -= np.count_nonzero(A * A <= x)\n    return count // 2\n\ndef solve(N, K, As):\n    A = np.array(sorted(As), np.int64)\n    positive = A[A > 0]\n    zero = A[A == 0]\n    negative = A[A < 0]\n\n    left = -10 ** 18\n    right = 10 ** 18\n    while right - left > 1:\n        mid = left + (right - left) // 2\n        c = partsolve(A, mid, positive, zero, negative)\n        if c < K:\n            left = mid\n        else:\n            right = mid\n    return right\n\n\ndef __starting_point():\n    N, K = tuple(map(int, input().split(\" \")))\n    As = list(map(int, input().split(\" \")))\n    print((solve(N, K, As)))\n\n\n__starting_point()", "# coding: utf-8\nimport numpy as np\n\n\ndef solve(*args: str) -> str:\n    n, k = list(map(int, args[0].split()))\n    A = np.array(sorted(map(int, args[1].split())))\n    N = A[A < 0]\n    P = A[0 < A]\n\n    count = 0\n    left, right = -10**18, 10**18\n    while left+1 < right:\n        x = (left+right)//2\n        count = (n-np.searchsorted(A, -(-x//N), side='left')).sum()\n        count += n * (A == 0).sum() if 0 <= x else 0\n        count += np.searchsorted(A, x//P, side='right').sum()\n        count -= (A*A <= x).sum()\n        count //= 2\n\n        if count < k:\n            left = x\n        else:\n            right = x\n\n    return str(right)\n\n\ndef __starting_point():\n    print((solve(*(open(0).read().splitlines()))))\n\n__starting_point()", "from numpy import *\nN,K = map(int,input().split())\nA = array(sorted(list(map(int,input().split()))))\nnega = A[A<0]\nzera = A[A==0]\nposa = A[0<A]\n\ndef cnt(x):\n  y = 0\n  if x>=0:\n    y+=N*len(zera)\n  y+=searchsorted(A,x//posa,side=\"right\").sum()\n  y+=N*len(nega)-searchsorted(A,-(-x//nega)).sum() \n  y-=len(A[A*A<=x])\n  return y//2\n\nr = 10**18\nl = -r-1\n\nwhile r-l>1:\n  c=(r+l)//2\n  if K<=cnt(c):\n    r=c\n  else:\n    l=c\n\nprint(r)", "# coding: utf-8\nimport sys\n#from operator import itemgetter\nsysread = sys.stdin.readline\nread = sys.stdin.read\n#from heapq import heappop, heappush\n#from collections import defaultdict\nsys.setrecursionlimit(10**7)\n#import math\n#from itertools import combinations\n#import bisect# lower_bound etc\nimport numpy as np\ndef run():\n    N, K, *A = list(map(int, read().split()))\n    B = [a for a in A if a>0]\n    C = [a for a in A if a<0]\n    C_abs = [-c for c in C]\n    O = A.count(0)\n    B = np.array(sorted(B), dtype= np.int64)\n    C = np.array(sorted(C), dtype = np.int64)\n    C_abs = np.array(sorted(C_abs), dtype = np.int64)\n    n_neg = len(B) * len(C)\n    n_0 = O * (O - 1) // 2 + O * (len(B) + len(C))\n\n    def find(x):\n        ret = 0\n        if x < 0:\n            ret += np.searchsorted(C, x//B, side='right').sum()\n\n        elif x == 0:\n            ret += n_0 + n_neg\n        else:\n            ret += n_neg + n_0\n            b_count = (B ** 2 <= x).sum()\n            c_count = (C ** 2 <= x).sum()\n            ret += (np.searchsorted(B, x//B, side='right').sum() - b_count) // 2\n\n            ret += (np.searchsorted(C_abs, x//C_abs, side='right').sum() - c_count) // 2\n        return ret\n\n    high = 10 ** 18\n    low = -high\n    current = 0\n    while high - low > 1:\n        tmp = find(current)\n        if tmp < K:\n            low = current\n        else:\n            high = current\n\n        current = (low + high) // 2\n\n    print(high)\n\ndef __starting_point():\n    run()\n__starting_point()", "import numpy as np\n\nN, K = list(map(int, input().split()))\nA = np.array(tuple(map(int, input().split())), dtype=np.int64)\n\nA = np.sort(A)\npos = A[A > 0]\nneg = A[A < 0]\nzero = len(A[A == 0])\n\ndef cnt(x):\n    \"\"\"return #{a <= x | a in A}\"\"\"\n    ret = 0\n\n    if x >= 0:\n        ret += zero * N\n\n    ret += np.searchsorted(A, x // pos, side='right').sum()\n    ret += (N - np.searchsorted(A, (-x - 1) // (-neg), side='right')).sum()\n    ret -= ((A * A) <= x).sum()\n    return ret // 2\n\noverEq = 10**18 + 100\nless = -10**18 - 100\n\nwhile less + 1 < overEq:\n    mid = (overEq + less) // 2\n    if cnt(mid) >= K:\n        overEq = mid\n    else:\n        less = mid\n\nprint(overEq)\n", "import sys\nimport numpy as np\n\nN, K = map(int, sys.stdin.readline().rstrip().split())\nA = np.array(sys.stdin.readline().rstrip().split(), np.int64)\n\n# A \u3092\u30bd\u30fc\u30c8\u3057\u3001\u8ca0\uff0f\u30bc\u30ed\uff0f\u6b63\u3000\u306b\u5206\u3051\u308b\nA = np.sort(A)\nzero = A[A == 0]\npos = A[A > 0]\nneg = A[A < 0]\n\n\ndef f2(x):\n    \"\"\"\n    \u7a4d\u304c x \u4ee5\u4e0b\u306b\u306a\u308b\u30da\u30a2\u306e\u500b\u6570\u3092\u8fd4\u3059\n\n    - (i,j) \u3068 (j,i), (i,i) \u306e\u91cd\u8907\u3092\u8a31\u3057\u3066\u5f8c\u3067\u8abf\u6574\n    - A = [a_0, a_1, a_2, ... ,a_n-1] \u3067\u3001\n         \u8ca0 \uff5e 0 \uff5e \u6b63 \u307e\u3067\u6df7\u3056\u3063\u305f\u72b6\u614b\u3067\n         target k \u3068\u639b\u3051\u5408\u308f\u305b\u3066 x \u4ee5\u4e0b\u306b\u306a\u308b\u5834\u6240 (index) \u3092\u63a2\u3059\n    -           \\__-5_-1__0_0_...__1___2\n      a_0   = -5|  25  5  0 0 ... -5 -10\n      a_1   = -1|   5  1  0 0 ... -1  -2\n      a_2   =  0|   0  0  0 0 ...  0   0\n      a_3   =  0|   0  0  0 0 ...  0   0\n      a_4   =  1|  -5 -1  0 0 ...  1   2\n      .....     |\n      a_n-1 =  2| -10 -2  0 0 ...  2   4\n    \"\"\"\n\n    cnt_tpl = 0\n\n    # k < 0 \u306e\u639b\u3051\u5408\u308f\u305b -> \u53f3\u304b\u3089\n    B = A.copy()\n    B = -B\n    B.sort()\n    cnt_tpl += np.searchsorted(B, x // (-neg), side='right').sum()\n\n    # a_2, a_3, k = 0 \u306a\u3089 \u305d\u306e\u30da\u30a2\u306f\u3059\u3079\u3066 0 (x//0\u306b\u306a\u308b\u306e\u3067\u5225\u6271\u3044)\n    if x >= 0:\n        cnt_tpl += len(zero) * N\n\n    # k > 0 \u306e\u639b\u3051\u5408\u308f\u305b -> \u5de6\u304b\u3089\u4f55\u756a\u76ee\u307e\u3067, x \u4ee5\u4e0b\u306b\u3067\u304d\u308b\u304b\uff1f\n    cnt_tpl += np.searchsorted(A, x // pos, side='right').sum()\n\n    # (i, i) \u3067 x \u4ee5\u4e0b\u306b\u306a\u3063\u305f\u3082\u306e\u304c\u3042\u308c\u3070\u3001\u524a\u9664\u3059\u308b\n    cnt_tpl -= np.count_nonzero(A * A <= x)\n\n    assert cnt_tpl % 2 == 0\n    return cnt_tpl // 2\n\n\n# \u4e8c\u5206\u63a2\u7d22\nleft = -10 ** 18\nright = 10 ** 18\nwhile left + 1 < right:\n    x = (left + right) // 2\n    if f2(x) >= K:\n        right = x\n    else:\n        left = x\n\n\nprint(right)", "import sys\nreadline=sys.stdin.readline\n\nimport numpy as np\n\nN,K=list(map(int,readline().split()))\nA=np.array(readline().split(),dtype=int)\n\nnega_list=A[A<0]\nposi_list=A[A>0]\nzero_num=A[A==0].size\n\n# print(nega_list)\n# print(posi_list)\n# print(zero_num)\n\nnega_list=np.sort(nega_list)\nposi_list=np.sort(posi_list)\n\nnega_cnt=nega_list.size * posi_list.size\nposi_cnt=((posi_list.size * posi_list.size-1) // 2) + ((nega_list.size * nega_list.size-1) // 2)\n\nzero_cnt=(zero_num * (zero_num-1)) // 2 + zero_num * (nega_list.size + posi_list.size)\n\n# print(nega_cnt)\n# print(posi_cnt)\n# print(zero_cnt)\n\n\n# K\u304c\u3069\u3053\u306b\u5c5e\u3059\u308b\u304b\u3092\u5224\u65ad\nif K <= nega_cnt:\n  # \u8ca0\u306e\u6570\u304c\u7b54\u3048\n  # \u304b\u3051\u3066X\u4ee5\u4e0b\u306b\u306a\u308b\u7d44\u307f\u5408\u308f\u305b\u3092K\u500b\u4ee5\u4e0a\u4f5c\u308c\u308c\u3070OK\n  \n  def isOkNega(x):\n    return np.searchsorted(nega_list,x//posi_list,side=\"right\").sum() >= K\n    \n  ok=0\n  ng=-10**18-1\n  while (ok-ng)>1:\n    mid=(ok+ng)//2\n    if isOkNega(mid):\n      ok=mid\n    else:\n      ng=mid\n  print(ok)\n  \nelif K <= nega_cnt+zero_cnt:\n  # 0\u304c\u7b54\u3048\n  print((0))\n  \nelse:  \n  # \u6b63\u306e\u6570\u304c\u7b54\u3048\n  K-=(nega_cnt+zero_cnt)\n  # \u6b63\u306e\u30b0\u30eb\u30fc\u30d7\u5185\u306e\u7a4d\u3001\u8ca0\u306e\u30b0\u30eb\u30fc\u30d7\u5185\u306e\u7a4d\u3001\u305d\u308c\u305e\u308c\u3092\u5408\u308f\u305b\u3066X\u4ee5\u4e0b\u306e\u6570\u3092K\u500b\u4ee5\u4e0a\u4f5c\u308c\u308b\n  \n  # \u8ca0\u306e\u6570\u30ea\u30b9\u30c8\u306f\u3001\u639b\u3051\u5408\u308f\u305b\u305f\u7d76\u5bfe\u5024\u304c\u5c0f\u3055\u3044\u3082\u306e\u3092\u6c42\u3081\u308b\u5fc5\u8981\u304c\u3042\u308b\u305f\u3081\u3001\u6b63\u306e\u30ea\u30b9\u30c8\u306b\u5909\u66f4\n  nega_list = np.flipud(nega_list * (-1))\n  \n  # \u81ea\u5206\u81ea\u8eab\u3068\u306e\u7a4d\u306f\u9664\u5916\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u305f\u3081\u3001\u81ea\u5206\u540c\u58eb\u306e\u7a4d\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\n  self_nega=nega_list * nega_list\n  self_posi=posi_list * posi_list\n  \n  def isOkPosi(x):\n    # print(\"x\",x)\n    # \u91cd\u8907\u3092\u8003\u3048\u305a\u306b\u3001\u8ca0\u306e\u6570\u540c\u58eb\u306e\u7a4d\u3067\u6761\u4ef6\u3092\u6e80\u305f\u3059\u3082\u306e\u3092\u30ab\u30a6\u30f3\u30c8\n    nega_all = np.searchsorted(nega_list, x // nega_list, side = \"right\")\n    # print(nega_all)\n    # print(\"self_nega[self_nega <= x]\",self_nega[self_nega <= x])\n    # \u81ea\u5206\u81ea\u8eab\u3092\u639b\u3051\u5408\u308f\u305b\u305f\u3082\u306e\u3067\u3001\u6761\u4ef6\u3092\u6e80\u305f\u3059\u3082\u306e\u306e\u500b\u6570\u306f\u30ab\u30a6\u30f3\u30c8\u304b\u3089\u9664\u5916\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\n    nega_cnt = nega_all.sum() - self_nega[self_nega <= x].size\n    # print(nega_cnt)\n    \n    # \u540c\u3058\u30da\u30a2\u3092\u4e8c\u56de\u6570\u3048\u3066\u3044\u308b\u305f\u30811/2\u3059\u308b\n    nega_cnt //= 2\n    \n    # \u6b63\u306e\u6570\u30ea\u30b9\u30c8\u3067\u540c\u3058\u3053\u3068\u3092\u3059\u308b\n    posi_all = np.searchsorted(posi_list, x // posi_list, side = \"right\")\n    # print(posi_all)\n    # print(\"self_posi[self_posi <= x]\",self_posi[self_posi <= x])\n    posi_cnt = posi_all.sum() - self_posi[self_posi <= x].size\n    # print(posi_cnt)\n    posi_cnt //= 2\n        \n    return nega_cnt + posi_cnt >= K\n  \n  ok=10**18+1\n  ng=0\n  while abs(ok-ng)>1:\n    mid=abs(ok+ng)//2\n    if isOkPosi(mid):\n      ok=mid\n    else:\n      ng=mid\n  print(ok)\n", "import numpy as np\nfrom numba import njit\nN, K = [int(_) for _ in input().split()]\nA = np.array(sorted([int(_) for _ in input().split()]))\n\n\n@njit\ndef solve(N, K, A):\n    lb = -10**18 - 1\n    rb = 10**18 + 1\n\n    def check(x):\n        #x\u4ee5\u4e0b\u306e\u7a4d\u304cK\u500b\u4ee5\u4e0a\u3042\u308b\n        cnt = 0\n        for i, a in enumerate(A):\n            #\u533a\u9593i2\u2208[0,i) \u3067A[i]*A[i2]<=x\u3068\u306a\u308b\u3088\u3046\u306ai2\u306e\u500b\u6570\n            l = 0\n            r = i\n            if a > 0:\n                l = -1\n                r = np.searchsorted(A, x // a, side='right')\n            elif a < 0:\n                l = np.searchsorted(A, 0 - x // (-a), side='left')\n                r = N + 1\n            elif x < 0:\n                r = 0\n            l = min(max(l, 0), i)\n            r = max(min(r, i), 0)\n            cnt += r - l\n        return cnt >= K\n\n    # Min x for check(x) == True\n    while rb - lb > 1:\n        mid = (rb + lb) // 2\n        if check(mid):\n            rb = mid\n        else:\n            lb = mid\n    print(rb)\n\n\nsolve(N, K, A)\n", "# D - Pairs\n\nimport numpy as np\n\nN, K = map(int, input().split())\nA = np.array(sorted(list(map(int, input().split()))), np.int64)\n\nn_zero = len(A[A == 0])\nA_posi = A[A > 0]\nA_nega = A[A < 0]\n\ndef n_pairs_less_than_or_equal_to_border(product_border):\n    n_pairs = -np.sum(A*A <= product_border) # i==j\u304b\u3064\u6761\u4ef6\u3092\u6e80\u305f\u3059\u30da\u30a2\u306e\u500b\u6570\u3092\u5148\u306b\u5f15\u304d\u3001\u4ee5\u964d\u91cd\u8907\u3092\u8a31\u3057\u3066\u6570\u3048\u308b\n    n_pairs += n_zero * N * (product_border >= 0)\n\n    n_pairs += np.searchsorted(A, product_border//A_posi, side=\"right\").sum()\n    n_pairs += (N - np.searchsorted(A, -(-product_border//A_nega), side=\"left\")).sum()\n\n    # \u4e0a\u8a182\u884c\u306f\u4e0b\u8a18\u3068\u540c\u69d8\u306e\u51e6\u7406\u3060\u304c\u4e0b\u8a18\u306e\u5b9f\u88c5\u3060\u3068TLE\n    # for i in range(N):\n    #     if A[i] > 0:\n    #         n_pairs += np.searchsorted(A, product_border//A[i], side=\"right\")\n    #     elif A[i] < 0:\n    #         n_pairs += N - np.searchsorted(A, -(-product_border//A[i]), side=\"left\")\n\n    n_pairs //= 2\n    return n_pairs\n\n\nlower = -(10**18)\nupper = 10**18\n\nwhile lower <= upper:\n    x = (lower + upper) // 2\n    if n_pairs_less_than_or_equal_to_border(x) >= K:\n        ans = x\n        upper = x - 1\n    else:\n        lower = x + 1\n\nprint(ans)", "import numpy as np\nn,k = list(map(int,input().split()))\na = np.array(list(map(int,input().split())))\na.sort()\n\np = a[a>0]\nzeros = np.count_nonzero(a==0)\nm = a[a<0]\n\n#\u6570x\u304c\u4f55\u756a\u76ee\u306b\u5927\u304d\u3044\u7a4d\u304b\u8a08\u7b97\u3002\u8907\u6570\u3042\u308b\u5834\u5408\u306f\u6700\u5927\u5024\ndef count(x):\n  cnt = 0\n  #0\u4ee5\u4e0a\u3060\u3063\u305f\u3089\u307e\u305a0\u306e\u500b\u6570\u3092\u8db3\u3059\n  if x >= 0:\n    cnt += zeros*n #\u540c\u3058\u8981\u7d20\u306e\uff12\u3058\u3087\u3046\u306f\u3042\u3068\u3067\u9664\u304f\u306e\u3067\u3053\u3053\u3067\u306f\u6c17\u306b\u305b\u305a\u304b\u3051\u308b\n  #\u30d7\u30e9\u30b9\u90e8\u5206\u306e\u30ab\u30a6\u30f3\u30c8\n  #x//p\u306fp\u3092\u304b\u3051\u3066\u3082x\u3092\u8d85\u3048\u306a\u3044\u6570\n  cnt += a.searchsorted(x//p,side='right').sum()\n  #\u30de\u30a4\u30ca\u30b9\u90e8\u5206\u306e\u30ab\u30a6\u30f3\u30c8\n  #\u30de\u30a4\u30ca\u30b9\u306f\u66f8\u3051\u308b\u3068\u5927\u5c0f\u304c\u9006\u8ee2\u3059\u308b\n  cnt += n*len(m) - a.searchsorted(-(-x//m),side='left').sum()\n  #\u4e8c\u4e57\u3092\u5f15\u304f\n  cnt -= np.count_nonzero(a*a<=x)\n  return cnt//2\n\n#\u5341\u5206\u306b\u5927\u304d\u3044\u7bc4\u56f2\nl,r = -10**19,10**19\n#r==l\u306b\u306a\u308b\u307e\u3067\nwhile r-l>1:\n  mid = (r+l)//2\n  #\u771f\u3093\u4e2d\u304ck\u4ee5\u4e0a\u3060\u3063\u305f\u3089r\u3092\u5c0f\u3055\u304f\u3057\u3066\u518d\u6311\u6226\n  if count(mid) >= k:\n    r = mid\n  else:\n    l = mid\nprint(r)\n\n  \n", "import numpy as np\nn, k = list(map(int, input().split()))\na = np.array(list(map(int, input().split())))\npos = np.sort(a[a>0])\nneg = np.sort(np.abs(a[a<0]))\nzero = (a==0).sum()\n\nINF = 2*(10**18)\nl = -INF\nr = INF\n\nwhile(r-l>1):\n    mid = (l+r)//2\n    cnt = 0\n    if mid >= 0:\n        cnt = len(pos)*len(neg)  #(+) * (-)\n        cnt += (len(pos)+len(neg)) * zero # 0 * (non-zero)\n        cnt += (zero*(zero-1))//2 # 0 * 0\n        x = np.searchsorted(pos, mid//pos, side='right').sum() #(+) * (+)\n        x += np.searchsorted(neg, mid//neg, side='right').sum() #(-) * (-)\n        x -= (pos*pos<=mid).sum()\n        x -= (neg*neg<=mid).sum()\n        cnt += x/2\n    else:\n        #\u7a4d\u304cmid\u4ee5\u4e0a\u306b\u306a\u308c\u3070\u826f\u3044 -> mid\u3088\u308a\u3082\u5c0f\u3055\u3044\n        cnt = (len(neg) - np.searchsorted(neg, abs(mid)//pos + (mid%pos!=0), side='left')).sum()\n    #print(mid, cnt)\n    #cnt := \u7a4d\u304cmid\u4ee5\u4e0b\u306b\u306a\u308b\u7269\u306e\u6570\n    #k\u756a\u76ee\u306e\u6570\u3000-> \u305d\u308c\u4ee5\u4e0b\u306e\u3082\u306e\u304ck\u500b\u4ee5\u4e0a\u3042\u308b\u4e8b\u304c\u5fc5\u8981\n    #cnt\u304ck\u500b\u3088\u308a\u3082\u5c11\u306a\u3044 -> \u6761\u4ef6\u3092\u6e80\u305f\u3057\u3066\u3044\u306a\u3044\n    #cnt\u304c\u305d\u308c\u4ee5\u4e0a\u306a\u3089ok\n    if cnt < k:\n        l = mid\n    else:\n        r = mid\nprint(r)\n", "# coding: utf-8\nimport sys\nimport numpy as np\n\nsr = lambda: sys.stdin.readline().rstrip()\nir = lambda: int(sr())\nlr = lambda: list(map(int, sr().split()))\n\n# neg, zero, pos\u306b\u5206\u3051\u3066\u3001\u4e8c\u5206\u63a2\u7d22\nN, K = lr()\nA = np.array(lr()); A.sort()\nneg = A[A<0]\nzero = A[A==0]\npos = A[A>0]\n\ndef check(x):\n    '''x\u4ee5\u4e0b\u306e\u7a4d\u304cK\u500b\u4ee5\u4e0a\u3042\u308b\u306a\u3089True\u3092\u8fd4\u3059'''\n    cnt = 0  # \u6700\u5f8c\u306b\uff12\u3067\u308f\u308b\n    if x >= 0:\n        cnt += len(zero) * N\n    cnt += (np.searchsorted(A, x//pos, side='right')).sum()\n    cnt += (N - np.searchsorted(A, (-x-1)//(-neg), side='right')).sum()\n    cnt -= np.count_nonzero(A*A <= x)\n    assert cnt % 2 == 0\n    return (cnt//2) >= K\n\nok = 10**18; ng = -10**18-1\nwhile abs(ng-ok) > 1:\n    mid = (ok+ng) // 2\n    if check(mid):\n        ok = mid\n    else:\n        ng = mid\n\nprint(ok)\n# 30\n", "import numpy as np\nn,k=list(map(int,input().split()))\na=np.array(list(map(int,input().split())))\na.sort()\np=a[a>0]\nz=np.count_nonzero(a==0)\nm=a[a<0]\nr=10**19\nl=-r\nwhile r-l>1:\n    # \u533a\u9593[l,r]\u3092\u534a\u5206\u306b\u5206\u3051\u3066\u63a2\u7d22\u3002\u6700\u7d42\u7684\u306br\u304c\u6c42\u3081\u308b\u5024\u306b\u306a\u308b\u3088\u3046\u306b\u3059\u308b\u3002\n    # b\u4ee5\u4e0b\u306e\u3082\u306e\u304ck\u500b\u4ee5\u4e0a\u3042\u308b\u3088\u3046\u306a\u3001\u6700\u5c0f\u306eb\u3092\u6c42\u3081\u308b\u3002b\u3092\u5927\u304d\u304f\u3059\u308b\u2192b\u4ee5\u4e0b\u306e\u3082\u306e\u3082\u5897\u3048\u308b\u3002b\u4ee5\u4e0b\u306e\u3082\u306e\u304c\u3081\u3061\u3083\u304f\u3061\u3083\u3042\u308b\u2192b\u3092\u6e1b\u3089\u3059\u3002\n    b=(l+r)//2\n    c=0\n    if b>=0:\n        c+=z*n\n    # \u914d\u5217a\u306b\u5bfe\u3057\u3001\u914d\u5217b//p\u306e\u8981\u7d20\u305f\u3061\u3092\u305d\u308c\u305e\u308csearchsorted\u3059\u308b\u3002\u7d50\u679c\u306e\u914d\u5217\u306fb//p\u3068\u540c\u3058\u5f62\u306b\u306a\u308b\u3002\n    c+=a.searchsorted(b//p,side='right').sum()\n    # \u914d\u5217a\u306b\u5bfe\u3057\u3001\u914d\u5217b//m\u306e\u8981\u7d20\u305f\u3061\u3092\u305d\u308c\u305e\u308csearchsorted\u3059\u308b\u3002\u7d50\u679c\u306e\u914d\u5217\u306fb//m\u3068\u540c\u3058\u5f62\u306b\u306a\u308b\u3002\n    c+=n*len(m)-a.searchsorted(-(-b//m),side='left').sum()\n    c-=np.count_nonzero(a*a<=b)\n    if c//2>=k:\n        r=b\n    else:\n        l=b\nprint(r)\n", "import numpy as np\n\nfrom bisect import bisect\n\nDEBUG = False\n\n\ndef bisect_f(f, lo, hi):\n    if DEBUG:\n        assert f(lo) and not f(hi)\n    while hi - lo > 1:\n        mid = (lo + hi) // 2\n        if f(mid):\n            lo = mid\n        else:\n            hi = mid\n        if DEBUG:\n            assert f(lo) and not f(hi)\n    if DEBUG:\n        assert hi - lo == 1\n        assert f(lo) and not f(hi)\n    return lo\n\n\nN, K = list(map(int, input().split()))\nA = list(map(int, input().split()))\nA.sort()\nneg = []\nzero = []\npos = []\nfor x in A:\n    if x < 0:\n        neg.append(x)\n    elif x == 0:\n        zero.append(x)\n    else:\n        assert x > 0\n        pos.append(x)\n\nrevAbsNeg = [-x for x in reversed(neg)]  # Reverse neg and keep magnitude only\nposSq = [x ** 2 for x in pos]\nnegSq = [x ** 2 for x in revAbsNeg]\n\npos = np.array(pos, dtype=np.int64)\nrevAbsNeg = np.array(revAbsNeg, dtype=np.int64)\n\n\ndef countDistinctPairsLessThan(arr, prod):\n    # Given a sorted array find the number of pairs that are < prod\n    # O(N * log(N)) where N = len(arr)\n\n    N = arr.shape[0]\n    assert arr.shape == (N,)\n    count3 = np.sum(\n        np.minimum(np.arange(N), np.searchsorted(arr, (prod - 1) // arr, side=\"right\"))\n    )\n\n    if DEBUG:\n        count = 0\n        for i, x in enumerate(arr):\n            count += bisect(arr, (prod - 1) // x, 0, i)\n\n        count2 = 0\n        for i in range(len(arr)):\n            for j in range(i + 1, len(arr)):\n                if arr[i] * arr[j] < prod:\n                    count2 += 1\n\n        print((count, count2, count3))\n        assert count == count2 == count3\n    return count3\n\n\ndef countPairsLessThanOrEqual(arr1, arr2, prod):\n    # Given two sorted arrays containing *positive* numbers only,\n    # find the number of pairs between the two arrays that are <= prod\n    # O(N * log(M)) where N = len(arr1), M = len(arr2)\n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n\n    count3 = np.sum(np.searchsorted(arr2, prod // arr1, side=\"right\"))\n\n    if DEBUG:\n        count = 0\n        for x in arr1:\n            count += bisect(arr2, prod // x)\n        count2 = 0\n        for x in arr1:\n            for y in arr2:\n                if x * y <= prod:\n                    count2 += 1\n        assert count == count2 == count3\n    return count3\n\n\ndef getIndex(prod):\n    # Count number of pairs strictly less than prod\n    count = 0\n    if prod < 0:\n        # All negatives except for the negatives with abs value less than or equal -prod\n        count += len(pos) * len(neg)\n        count -= countPairsLessThanOrEqual(pos, revAbsNeg, -prod)\n    elif prod >= 0:\n        # All negatives\n        count += len(pos) * len(neg)\n        if prod > 0:\n            # All zeroes\n            count += len(zero) * len(neg)\n            count += (len(zero) * (len(zero) - 1)) // 2\n            count += len(zero) * len(pos)\n            # Positives with positives\n            count += countDistinctPairsLessThan(pos, prod)\n            # Negatives with negatives\n            count += countDistinctPairsLessThan(revAbsNeg, prod)\n\n    if DEBUG:\n        count2 = 0\n        for i in range(N):\n            for j in range(i + 1, N):\n                if A[i] * A[j] < prod:\n                    count2 += 1\n        assert count == count2\n    return count\n\n\ndef solve(K):\n    lo = -10 ** 18\n    hi = 10 ** 18 + 1\n    if DEBUG:\n        assert getIndex(lo) <= K < getIndex(hi)\n    prod = bisect_f(lambda prod: getIndex(prod) <= K, lo, hi)\n    if DEBUG:\n        assert getIndex(prod) <= K < getIndex(prod + 1)\n    return prod\n\n\nif DEBUG:\n    for k in range((N * (N - 1)) // 2):\n        print((\"k\", k, solve(k)))\n\nprint((solve(K - 1)))  # K is 1-indexed\n\n", "import numpy as np\nn,k=map(int,input().split())\na=list(map(int,input().split()))\na.sort()\na = np.array(a,dtype=\"int64\")\na_minus = a[a<0]\na_plus = a[a>0]\na_zero = a[a==0]\n#print(a_plus)\nl = - 10**19\nr = 10**19\n\n\nwhile r - l > 1:\n  mid = (l+r)//2\n  # mid\u4ee5\u4e0b\u306e\u500b\u6570\u3092\u8abf\u3079\u308b\n  cnt = 0\n  # \u6b63\u306e\u6570\u306e\u7d44\u307f\u5408\u308f\u305b\u3067mid\u4ee5\u4e0b\u306e\u500b\u6570\u3092\u8abf\u3079\u308b\n  cnt += a.searchsorted(mid//a_plus, side=\"right\").sum()\n  # \u8ca0\u306e\u6570\u3067\u540c\u69d8\n  cnt += (n - a.searchsorted((-mid-1)//(-a_minus), side=\"right\")).sum()\n  # \u540c\u3058\u6570\u306e\u7d44\u307f\u5408\u308f\u305b(\u5dee\u3057\u5f15\u304f\u3088\u3046)\n  cnt -= np.count_nonzero(a*a<=mid)\n  # \u30bc\u30ed\u3082\u540c\u69d8(mid>=0\u306e\u3068\u304d\u306e\u307f)\n  cnt += len(a_zero)*n if mid >= 0 else 0\n  \n  # \u91cd\u8907\u3092\u5272\u308b\n  cnt //= 2\n  \n  if cnt >= k:\n    r = mid\n  else:\n    l = mid\n  \nprint(r)", "import numpy as N\nn,k=map(int,input().split())\nA=N.array(list(map(int,input().split())))\nA.sort()\np=A[A>0]\nz=N.count_nonzero(A==0)\nm=A[A<0]\nr=10**19\nl=-r\nwhile r-l>1:\n    b=(l+r)//2\n    c=0\n    if b>=0:\n        c+=z*n\n    c+=A.searchsorted(b//p,side='right').sum()\n    c+=n*len(m)-A.searchsorted(-(-b//m),side='left').sum()\n    c-=N.count_nonzero(A*A<=b)\n    if c//2>=k:\n        r=b\n    else:\n        l=b\nprint(r)", "import numpy as np\nN, K = list(map(int, input().split()))\n\nA = np.array(list(map(int, input().split())))\nA.sort()\n\npos = A[A > 0]\nneg = A[A < 0]\nzero = A[A == 0]\n\nl = -10**18\nr = 10**18\n\nwhile l + 1 < r:\n    x = (l+r) // 2\n    cnt = 0\n    if x >= 0:\n        cnt += N * len(zero)\n\n    cnt += A.searchsorted(x//pos, side=\"right\").sum()\n    cnt += (N - A.searchsorted(-(-x//neg), side=\"left\")).sum()\n    cnt -= np.count_nonzero(A * A <= x)\n    cnt //= 2\n\n    if cnt >= K:\n        r = x\n    else:\n        l = x\n\nprint(r)\n\n\n", "import numpy as np\ndef f(nums, a):\n  return 0  if nums.size<=1 else (np.searchsorted(nums, a//nums, side='right').sum()-np.searchsorted(nums, int(pow(a, 1/2)), side='right'))//2\n\nN, K=map(int, input().split())\nA=np.sort(list(map(int, input().split())))\n\np=np.sum(A>0)\nq=np.sum(A<0)\nZ=N-p-q\nAP=A[-p:] if p>0 else np.array([])\nAN=A[:q] if q>0 else np.array([])\n\nb=(N-Z)*Z+Z*(Z-1)//2\na=p*q\n\nif K<=a:\n  x=AP[-1]*AN[0]-1\n  y=AP[0]*AN[-1]\n  while y-x>1:\n    tmp=(y+x)//2\n    counter=np.searchsorted(AN, tmp//AP, side='right').sum()\n    if counter<K:\n      x=tmp\n    else:\n      y=tmp\n  print(y)\nelif K<=a+b:\n  print(0)\nelse:\n  if q>1:\n    AN=-AN[::-1]\n  x=0\n  y=10**18\n  K=K-a-b\n  while y-x>1:\n    tmp=(y+x)//2\n    if f(AP, tmp)+f(AN, tmp)<K:\n      x=tmp\n    else:\n      y=tmp\n  print(y)", "N,K=map(int, input().split())\nA=list(map(int, input().split()))\nA=sorted(A)\nimport numpy as np\nA=np.array(A,dtype=\"int64\")\nZ=A[A==0]\nH=A[A<0]\nS=A[A>0]\nl,r=-10**19,10**19\nwhile r-l>1:\n  mid=(r+l)//2\n  cnt=0\n  cnt+=A.searchsorted(mid//S,side=\"right\").sum()\n  cnt+=(N-A.searchsorted((-mid-1)//(-H),side=\"right\")).sum()\n  cnt-=np.count_nonzero(A*A<=mid)\n  if mid>=0:\n    cnt+=len(Z)*N \n  cnt//=2\n  if cnt>=K:\n    r=mid\n  else:\n    l=mid \nprint(r)", "import numpy as np\n \nN,K=list(map(int, input().split()))\nA=np.sort(np.array(input().split(),np.int64))\nz=A[A==0]\np=A[A>0]\nn=A[A<0]\n \ndef f(x):\n cnt=0\n if x>=0:\n  cnt+=len(z)*N\n cnt+=np.searchsorted(A,x//p,side='right').sum()\n cnt+=(N-np.searchsorted(A,(-x-1)//(-n),side='right')).sum()\n cnt-=np.count_nonzero(A*A<=x)\n assert cnt%2==0\n return cnt//2\n \nl=-10**18\nr=10**18\nwhile l+1<r:\n x=(l+r)//2\n if f(x)>=K:\n  r=x\n else:\n  l=x\nprint(r)\n", "import sys\n#sys.setrecursionlimit(10**9)\ninput = sys.stdin.readline\n\nimport numpy as np\n\nn, k = list(map(int, input().split()))\nA = np.array(input().split(), np.int64)\nA = np.sort(A)\n\nP = A[A>0]\nZ = A[A==0]\nN = A[A<0]\n\n#t = n*(n-1)//2\n\ndef ok(x):\n    # x\u4ee5\u4e0b\u306b\u306a\u308b\u7d44\u307f\u5408\u308f\u305b\u304ck\u500b\u4ee5\u4e0a\n    cnt = 0\n    #cnt += np.searchsorted(A, np.ceil(x/P), side='right').sum()\n    cnt += np.searchsorted(A, x//P, side='right').sum()\n    #cnt += n-np.searchsorted(A, np.floor(x/N), side='left').sum()\n    cnt += (n-np.searchsorted(A, (-x-1)//(-N), side='right')).sum()\n    if x >= 0:\n        cnt += len(Z)*n\n    cnt -= np.count_nonzero(A*A <= x)\n    cnt = cnt//2\n    if cnt >= k:\n        return True\n    else:\n        return False\n\nl = -10**18-1\nr = 10**18+1\nwhile l+1 < r:\n    c = (l+r)//2\n    if ok(c):\n        r = c\n    else:\n        l = c\nprint(r)\n", "import numpy as np\n\n\ndef get_Negative(K, pos, neg):\n    K = len(pos) * len(neg) - K + 1\n    l = 0\n    r = 10 ** 18 + 10\n    while r - l > 1:\n        m = (l + r) // 2\n        target = m // pos\n        x = np.searchsorted(neg, target, side=\"right\").sum()\n        if x >= K:\n            r = m\n        else:\n            l = m\n    return -r\n\n\ndef get_Positive(K, pos, neg):\n    l = 0\n    r = 10 ** 18 + 10\n    tmp_pos = np.arange(len(pos))\n    tmp_neg = np.arange(len(neg))\n    while r - l > 1:\n        m = (r + l) // 2\n        cnt = 0\n        if len(pos) > 1:\n            t1 = m // pos\n            x1 = np.searchsorted(pos, t1, side=\"right\")\n            x1 = np.maximum(0, x1 - tmp_pos - 1)\n            cnt += x1.sum()\n        if len(neg) > 0:\n            t2 = m // neg\n            x2 = np.searchsorted(neg, t2, side=\"right\")\n            x2 = np.maximum(0, x2 - tmp_neg - 1)\n            cnt += x2.sum()\n        if cnt >= K:\n            r = m\n        else:\n            l = m\n    return r\n\n\ndef main():\n    N, K = map(int, input().split())\n    A = np.array(input().split(), dtype=np.int64)\n\n    positive = A[A > 0]\n    negative = -A[A < 0]\n    positive.sort()\n    negative.sort()\n\n    Npos = len(positive)\n    Nneg = len(negative)\n    Nzero = N - Npos - Nneg\n\n    P_neg = Npos * Nneg\n    P_pos = 0\n    if Npos:\n        P_pos += Npos * (Npos - 1) // 2\n    if Nneg:\n        P_pos += Nneg * (Nneg - 1) // 2\n    P_zero = N * (N - 1) // 2 - P_pos - P_neg\n\n    if K <= P_neg:\n        ans = get_Negative(K, positive, negative)\n        return ans\n    K -= P_neg\n    if K <= P_zero:\n        return 0\n    K -= P_zero\n    ans = get_Positive(K, positive, negative)\n    return ans\n\n\ndef __starting_point():\n    print(main())\n__starting_point()", "import numpy as np\nN,K = [int(i) for i in input().split(' ')]\n\nA = np.array([int(i) for i in input().split(' ')])\n\nA.sort()\nzero = A[A==0]\nminus = A[A<0]\nplus = A[A>0]\n\ndef index_count(x):\n    cnt = 0\n    if x >= 0:\n        cnt += len(zero) * N\n    cnt += np.searchsorted(A,x//plus,side='right').sum()\n    cnt += (N - np.searchsorted(A,-(-x//minus),side='left')).sum()\n    cnt -= np.count_nonzero(A*A <= x)\n\n    assert cnt % 2 == 0\n    return cnt //2\n\n\nleft = -10**18\nright = 10**18\n\nwhile left + 1 < right:\n    mid = (left +right) //2\n    a = index_count(mid)\n    if a >= K:\n        right = mid\n    else:\n        left = mid\n\nprint(right)", "import numpy as np\n\n\ndef partsolve(A, x, positive, zero, negative):\n    \"\"\"\n    :param A:\n    :param x:\n    :return: A\u306e\u7a4d\u306e\u30da\u30a2\u306e\u4e2d\u3067\u3001x\u4ee5\u4e0b\u3068\u306a\u308b\u30da\u30a2\u306e\u500b\u6570\n    \"\"\"\n    count = 0\n    if x >= 0:\n        count = len(zero) * len(A)\n    P = x // positive\n    Pc = np.searchsorted(A, P, side='right')\n    count += Pc.sum()\n\n    N = (-x-1) // -negative\n    Nc = np.searchsorted(A, N, side='right')\n    Nc = len(A) - Nc\n    count += Nc.sum()\n\n    count -= np.count_nonzero(A * A <= x)\n    return count // 2\n\ndef solve(N, K, As):\n    A = np.array(sorted(As), np.int64)\n    positive = A[A > 0]\n    zero = A[A == 0]\n    negative = A[A < 0]\n\n    left = -10 ** 18\n    right = 10 ** 18\n    while right - left > 1:\n        mid = left + (right - left) // 2\n        c = partsolve(A, mid, positive, zero, negative)\n        if c < K:\n            left = mid\n        else:\n            right = mid\n    return right\n\n\n\ndef __starting_point():\n    N, K = tuple(map(int, input().split(\" \")))\n    As = list(map(int, input().split(\" \")))\n    print((solve(N, K, As)))\n\n\n__starting_point()", "import sys\nimport numpy as np\n\n\nTEST_INPUT = [\n    \"\"\"\n    4 3\n    3 3 -4 -2\n    \"\"\",\n    \"\"\"\n    10 40\n    5 4 3 2 -1 0 0 0 0 0\n    \"\"\",\n    \"\"\"\n    30 413\n    -170202098 -268409015 537203564 983211703 21608710 -443999067 -937727165 -97596546 -372334013 398994917 -972141167 798607104 -949068442 -959948616 37909651 0 886627544 -20098238 0 -948955241 0 -214720580 277222296 -18897162 834475626 0 -425610555 110117526 663621752 0\n    \"\"\"\n]\nANSWER = [\n    \"-6\",\n    \"6\",\n    \"448283280358331064\"\n]\n\n\nclass InputHandler:\n\n    def __init__(self, text_lines=\"\", is_test=False):\n        self.data = list(text_lines.split(\"\\n\"))\n        self.index = 0\n        self.is_test = is_test\n\n    def input(self):\n        if self.is_test:\n            self.index += 1\n            return self.data[self.index].strip()\n        else:\n            return sys.stdin.readline().rstrip()\n\n\ndef query(a, n, a_arr_p, a_arr_n, n_zeros, k):\n\n    # return (num of pairs <= a) < k\n\n    if a >= 0:\n        # negative\n        res = len(a_arr_p) * len(a_arr_n)\n        # zero\n        res += n_zeros * (n - n_zeros) + n_zeros * (n_zeros - 1) // 2\n        # p * p\n        res_pp = np.searchsorted(a_arr_p, a // a_arr_p, side=\"right\").sum()\n        res_pp -= (a_arr_p * a_arr_p <= a).sum()\n        res += res_pp // 2\n        # n * n\n        res_nn = np.searchsorted(a_arr_n, a // a_arr_n, side=\"right\").sum()\n        res_nn -= (a_arr_n * a_arr_n <= a).sum()\n        res += res_nn // 2\n    else:\n        # p * n\n        res = len(a_arr_p) * len(a_arr_n) - np.searchsorted(a_arr_n, (a_arr_p - a - 1) // a_arr_p, side=\"left\").sum()\n    # print(a, res)\n    if res >= k:\n        return True\n    else:\n        return False\n\n\ndef solve(n, k, a_list):\n\n    left = - 10 ** 18 - 1\n    right = 10 ** 18 + 1\n    center = 0\n\n    a_arr = np.array(a_list)\n\n    a_arr_p = a_arr[a_arr > 0]\n    a_arr_n = - a_arr[a_arr < 0]\n    n_zeros = (a_arr == 0).sum()\n    a_arr_p.sort()\n    a_arr_n.sort()\n\n    while left<right:\n        center=(left+right)//2\n        if query(center, n, a_arr_p, a_arr_n, n_zeros, k):\n            right=center\n        else:\n            left=center+1\n\n    return right\n\n\ndef input_and_solve(ih):\n    n, k = list(map(int, ih.input().split()))\n    a_list = list(map(int, ih.input().split()))\n    res = solve(n, k, a_list)\n    return res\n\n\ndef main():\n    ih = InputHandler()\n    res = input_and_solve(ih)\n    print(res)\n\n\ndef test():\n    for test_input, ans in zip(TEST_INPUT, ANSWER):\n        ih = InputHandler(test_input, True)\n        res = input_and_solve(ih)\n        # print(res, ans)\n        assert str(res) == str(ans)\n\n\ndef __starting_point():\n    #test()\n    main()\n\n__starting_point()", "import numpy as np\n\nN, K=map(int, input().split())\nA=np.sort(list(map(int, input().split())))\n\np=np.sum(A>0)\nq=np.sum(A<0)\nZ=N-p-q\nif p>0:\n  AP=A[-p:]\nelse:\n  AP=[]\nif q>0:\n  AN=A[:q]\nelse:\n  AN=[]\n\nb=(N-Z)*Z+Z*(Z-1)//2\na=p*q\n\nif K<=a:\n  x=AP[-1]*AN[0]-1\n  y=AP[0]*AN[-1]\n  while y-x>1:\n    tmp=(y+x)//2\n    counter=np.searchsorted(AN, tmp//AP, side='right').sum()\n    if counter<K:\n      x=tmp\n    else:\n      y=tmp\n  print(y)\nelif K<=a+b:\n  print(0)\nelse:\n  x=0\n  y=10**18\n  K=K-a-b\n  if q<=1:\n    while y-x>1:\n      tmp=(y+x)//2\n      counter=(np.searchsorted(AP, tmp//AP, side='right').sum()-np.searchsorted(AP, int(pow(tmp, 1/2)), side='right'))//2\n      if counter<K:\n        x=tmp\n      else:\n        y=tmp\n    print(y)\n    return\n    \n  AN=AN[::-1]\n  AN=-AN\n  \n  if p<=1:\n    while y-x>1:\n      tmp=(y+x)//2\n      counter=(np.searchsorted(AN, tmp//AN, side='right').sum()-np.searchsorted(AN, int(pow(tmp, 1/2)), side='right'))//2\n      if counter<K:\n        x=tmp\n      else:\n        y=tmp\n    print(y)\n    return\n    \n  while y-x>1:\n    tmp=(y+x)//2\n    counter1=(np.searchsorted(AP, tmp//AP, side='right').sum()-np.searchsorted(AP, int(pow(tmp, 1/2)), side='right'))//2\n    counter2=(np.searchsorted(AN, tmp//AN, side='right').sum()-np.searchsorted(AN, int(pow(tmp, 1/2)), side='right'))//2\n    counter=counter1+counter2\n    if counter<K:\n      x=tmp\n    else:\n      y=tmp\n  print(y)", "import numpy as np\nn,k=map(int,input().split())\na=np.sort(np.array(input().split(),'int64'))\n\nplus=a[a>0]\nzeros=np.sum(a==0)\nminus=a[a<0]\n\ndef counter(T):\n  c=0\n  if T>=0:\n    c+=zeros*n\n  c+=np.searchsorted(a,T//plus,side='right').sum()\n  c+=(n-np.searchsorted(a,(-T-1)//(-minus),side='right')).sum()\n  c-=np.count_nonzero(a*a<=T)\n  return c//2\n\nleft=-10**18\nright=10**18\nwhile abs(right-left)>1:\n  mid=(left+right)//2\n  if counter(mid)>=k:\n    right=mid\n  else:\n    left=mid\nprint(right)", "# https://maspypy.com/atcoder-%E5%8F%82%E5%8A%A0%E6%84%9F%E6%83%B3-2019-02-16abc-155\nimport numpy as np\n\nN, K = list(map(int, input().split()))\nA = np.array(list(map(int, input().split())))\nA.sort()\nG = A[A > 0]\nZ = A[A == 0]\nL = A[A < 0]\n\nok = 10 ** 18 + 1\nng = -10 ** 18 - 1\n\n# x\u4ee5\u4e0b\u304cK\u500b\u4ee5\u4e0a\u3067\u3042\u308bx\u306e\u6700\u5c0f\u5024\n\nwhile ok - ng > 1:\n    mid = (ng + ok) // 2\n    # mid\u4ee5\u4e0b\u306e\u30da\u30a2\u306e\u500b\u6570\u3092\u6570\u3048\u308b\n\n    # \u6b63\u306e\u3082\u306e\u306e\u3046\u3061\u3001mid\u4ee5\u4e0b\u306e\u30da\u30a2\u306e\u500b\u6570\u3092\u6570\u3048\u308b\n    cg = np.searchsorted(A, mid // G, side=\"right\").sum()\n\n    # \u8ca0\u306e\u3082\u306e\u306e\u3046\u3061mid\u4ee5\u4e0b\u306e\u30da\u30a2\u306e\u500b\u6570\u3092\u6570\u3048\u308b\n    cl = (N - np.searchsorted(A, (-mid - 1) // (-L), side=\"right\")).sum()\n\n    # \u540c\u3058\u6570\u5b57\u540c\u58eb\u306e\u7a4d\u304cmid\u4ee5\u4e0b\u306e\u3082\u306e\u3092\u6570\u3048\u308b\n    d = np.count_nonzero(A * A <= mid)\n\n    # 0\u304cmid\u4ee5\u4e0b\u306a\u3089\u3001\u305d\u308c\u3082\u30d7\u30e9\u30b9\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\n    z = 0\n    if mid >= 0:\n        z += len(Z) * N\n\n    c = cg + cl + z - d\n\n    # \u4e8c\u91cd\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u5272\u308b\n    c //= 2\n\n    # mid\u4ee5\u4e0b\u306e\u30da\u30a2\u306e\u500b\u6570\u304cK\u500b\u4ee5\u4e0a\u306e\u3068\u304d\n    if c >= K:\n        ok = mid\n    else:\n        ng = mid\n\nprint(ok)\n", "import sys\nreadline=sys.stdin.readline\n\nimport numpy as np\n\nN,K=list(map(int,readline().split()))\nA=np.array(readline().split(),dtype=int)\n\nnega_list=A[A<0]\nposi_list=A[A>0]\nzero_num=A[A==0].size\n\nnega_list=np.sort(nega_list)\nposi_list=np.sort(posi_list)\n\nnega_cnt=nega_list.size * posi_list.size\nposi_cnt=((posi_list.size * posi_list.size-1) // 2) + ((nega_list.size * nega_list.size-1) // 2)\n\nzero_cnt=(zero_num * (zero_num-1)) // 2 + zero_num * (nega_list.size + posi_list.size)\n\n# K\u304c\u3069\u3053\u306b\u5c5e\u3059\u308b\u304b\u3092\u5224\u65ad\nif K <= nega_cnt:\n  # \u8ca0\u306e\u6570\u304c\u7b54\u3048\n  # \u304b\u3051\u3066X\u4ee5\u4e0b\u306b\u306a\u308b\u7d44\u307f\u5408\u308f\u305b\u3092K\u500b\u4ee5\u4e0a\u4f5c\u308c\u308c\u3070OK\n  \n  def isOkNega(x):\n    return np.searchsorted(nega_list,x//posi_list,side=\"right\").sum() >= K\n    \n  ok=0\n  ng=-10**18-1\n  while (ok-ng)>1:\n    mid=(ok+ng)//2\n    if isOkNega(mid):\n      ok=mid\n    else:\n      ng=mid\n  print(ok)\n  \nelif K <= nega_cnt+zero_cnt:\n  # 0\u304c\u7b54\u3048\n  print((0))\n  \nelse:  \n  # \u6b63\u306e\u6570\u304c\u7b54\u3048\n  K-=(nega_cnt+zero_cnt)\n  # \u6b63\u306e\u30b0\u30eb\u30fc\u30d7\u5185\u306e\u7a4d\u3001\u8ca0\u306e\u30b0\u30eb\u30fc\u30d7\u5185\u306e\u7a4d\u3001\u305d\u308c\u305e\u308c\u3092\u5408\u308f\u305b\u3066X\u4ee5\u4e0b\u306e\u6570\u3092K\u500b\u4ee5\u4e0a\u4f5c\u308c\u308b\n  \n  # \u8ca0\u306e\u6570\u30ea\u30b9\u30c8\u306f\u3001\u639b\u3051\u5408\u308f\u305b\u305f\u7d76\u5bfe\u5024\u304c\u5c0f\u3055\u3044\u3082\u306e\u3092\u6c42\u3081\u308b\u5fc5\u8981\u304c\u3042\u308b\u305f\u3081\u3001\u6b63\u306e\u30ea\u30b9\u30c8\u306b\u5909\u66f4\n  nega_list = np.flipud(nega_list * (-1))\n  \n  # \u81ea\u5206\u81ea\u8eab\u3068\u306e\u7a4d\u306f\u9664\u5916\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u305f\u3081\u3001\u81ea\u5206\u540c\u58eb\u306e\u7a4d\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\n  self_nega=nega_list * nega_list\n  self_posi=posi_list * posi_list\n  \n  def isOkPosi(x):\n    # \u91cd\u8907\u3092\u8003\u3048\u305a\u306b\u3001\u8ca0\u306e\u6570\u540c\u58eb\u306e\u7a4d\u3067\u6761\u4ef6\u3092\u6e80\u305f\u3059\u3082\u306e\u3092\u30ab\u30a6\u30f3\u30c8\n    nega_all = np.searchsorted(nega_list, x // nega_list, side = \"right\")\n    \n    # \u81ea\u5206\u81ea\u8eab\u3092\u639b\u3051\u5408\u308f\u305b\u305f\u3082\u306e\u3067\u3001\u6761\u4ef6\u3092\u6e80\u305f\u3059\u3082\u306e\u306e\u500b\u6570\u306f\u30ab\u30a6\u30f3\u30c8\u304b\u3089\u9664\u5916\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\n    nega_cnt = nega_all.sum() - self_nega[self_nega <= x].size\n    \n    # \u540c\u3058\u30da\u30a2\u3092\u4e8c\u56de\u6570\u3048\u3066\u3044\u308b\u305f\u30811/2\u3059\u308b\n    nega_cnt //= 2\n    \n    # \u6b63\u306e\u6570\u30ea\u30b9\u30c8\u3067\u540c\u3058\u3053\u3068\u3092\u3059\u308b\n    posi_all = np.searchsorted(posi_list, x // posi_list, side = \"right\")\n    posi_cnt = posi_all.sum() - self_posi[self_posi <= x].size\n    posi_cnt //= 2\n        \n    return nega_cnt + posi_cnt >= K\n  \n  ok=10**18+1\n  ng=0\n  while abs(ok-ng)>1:\n    mid=abs(ok+ng)//2\n    if isOkPosi(mid):\n      ok=mid\n    else:\n      ng=mid\n  print(ok)\n", "import numpy as np\n\nn, k = map(int, input().split()) \na_list = np.array(list(map(int, input().split())))\n\na_list.sort()\n\nzero_list = a_list[a_list == 0]\nminus_list = a_list[a_list < 0]\nplus_list = a_list[a_list > 0]\n\ndef index_count(x):\n    cnt = 0\n    if x >= 0:\n        cnt += len(zero_list) * n\n    cnt += np.searchsorted(a_list, x // plus_list, side='right').sum()\n    cnt += (n - np.searchsorted(a_list, -(-x // minus_list), side='left')).sum()\n    cnt -= np.count_nonzero(a_list * a_list <= x)\n \n    assert cnt % 2 == 0\n    return cnt // 2\n \n \nleft = -10**18\nright = 10**18\n \nwhile left + 1 < right:\n    mid = (left + right) // 2\n    a = index_count(mid)\n    if a >= k:\n        right = mid\n    else:\n        left = mid\n \nprint(right)", "# https://maspypy.com/atcoder-%E5%8F%82%E5%8A%A0%E6%84%9F%E6%83%B3-2019-02-16abc-155#toc3\n# https://atcoder.jp/contests/abc155/submissions/10152895\n# \u5199\u7d4c\n\n\n# \u6761\u4ef6\u3092\u6e80\u305f\u3059\u8981\u7d20\u3092\u62bd\u51fa\n# ndarray[\u6761\u4ef6\u5f0f]\n\ndef binary_search(*, ok, ng, func):\n    while abs(ok - ng) > 1:\n        mid = (ok + ng) // 2\n        if func(mid):\n            ok = mid\n        else:\n            ng = mid\n    return ok\n\n\ndef main():\n    import sys\n    import numpy as np\n\n    inf = 10 ** 18 + 1\n    input = sys.stdin.readline\n\n    N, K = list(map(int, input().split()))\n    A = np.array(input().split(), dtype=np.int64)\n\n    A.sort()\n\n    zero = A[A == 0]\n    pos = A[A > 0]\n    neg = A[A < 0]\n\n    def count(x):\n        \"\"\"\n        \u5b9a\u6570c\u306b\u5bfe\u3057\u3066 Ai*Aj<=c \u3068\u306a\u308b(i,j)\u306e\u6570\u3048\u4e0a\u3052\n        \u9806\u5e8f\u5236\u7d04 i<j -> \u9806\u5e8f\u5236\u7d04\u306e\u306a\u3044(i,j)\u304b\u3089i==j\u306e\u5834\u5408\u306e\u500b\u6570\u3092\u5f15\u3044\u30662\u3067\u5272\u308b\n        i\u3092\u56fa\u5b9a\u3057\u3066 a=Ai \u3068\u3059\u308b\n        a=0\n            ax=0(<=c?),\u89e3\u306a\u3057\u307e\u305f\u306f\u4efb\u610f\u306ex\n        a>0\n            ax<=c\n            <-> x<=c/a\n            <-> x<=c//a\n        a<0\n            ax<=c\n            <-> (-a)x>=(-c)\n\n            \u5426\u5b9a\u3092\u3068\u308a,a\u306e\u5bfe\u5019\u88dc\u5168\u4f53=N\u304b\u3089\u5f15\u304f\n\n            (-a)x<(-c)\n            <-> (-a)x<=(-c-1)\n            <-> x<=(-c-1)//(-a)\n        \"\"\"\n        cnt = 0\n        if x >= 0:\n            cnt += zero.size * N  # (a:=0)*v<=x\n        cnt += np.searchsorted(a=A, v=x // pos, side='right').sum()  # (a:>0)*v<=x\n        cnt += (N - np.searchsorted(a=A, v=(-x - 1) // (-neg), side='right')).sum()  # (a:<0)*v<=x\n        cnt -= ((A * A) <= x).sum()  # i==j\n        assert cnt % 2 == 0\n        return cnt // 2\n\n    ans = binary_search(\n        ng=-inf,\n        ok=inf,\n        func=lambda x: count(x) >= K\n    )\n\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import numpy as np\n# in your code\ndef p(*args, **kargs):\n    if DBG:print(*args, **kargs)\nread = input \nrn = lambda :list(map(int, read().split()))\ndebug = False\ndef sol(A):\n    A = np.array(A, np.int64)\n    A = np.sort(A)\n    _A = np.sort(-A)\n\n    pos = A[A>0]\n    neg = A[A<0]\n    zero = A[A==0]\n    def searchsorted(*args, **kargs):\n        ret = np.searchsorted(*args, **kargs)\n\n#         print(args, kargs)\n#         print(ret)\n        return ret\n\n    # python \u4fdd\u8bc1\u4f59\u6570>0\uff0c\u5373\uff0c\u6574\u9664\uff0c\u5411\u65e0\u7a77\u5c0fround\u3002\n    # <= x\uff0cpairs that <= x\n    def  f(x):\n        ret = 0\n        if x >= 0:\n            ret += len(zero) * len(A)\n            ret += searchsorted(A, x//pos, side=\"right\").sum()\n            ret += searchsorted(_A, x//(-neg), side=\"right\").sum()\n        else :\n            ret += searchsorted(A, x//pos,  side=\"right\").sum()\n            ret += searchsorted(_A, x//(-neg),  side=\"right\").sum()\n\n        ret -= np.count_nonzero(A*A<=x)\n        assert ret % 2 == 0\n        return ret // 2\n        if debug: print(pos, neg, zero)\n    return f\n\nf = sol([-4, -2, 3, 3 ])\nassert f(-12) == 2\nassert f(-6) == 4 # or 3\n# \u4e8c\u5206\u641c\u7d22\ndef bs(A, index):\n    A = np.array(A, np.int64)\n    f = sol(A)\n    max_ele = max(abs(A))\n\n    right = max_ele * max_ele + 1\n    left  = - right\n    while left + 1 < right:\n        middle = (left + right)//2\n        m_index = f(middle)\n        if debug : print(middle, m_index, left, right, sep=\"\\t\")\n        if index <= m_index:\n            right = middle\n        else :\n            left = middle\n    return right\n\nn,index = rn()\nA = np.array(read().split(), np.int64)\nprint(bs(A, index))\n", "import numpy as np\nfrom numba import njit\n\n\n@njit\ndef main(I):\n    N,K=I[0],I[1]\n    A = I[2:]\n    A.sort()\n    lb = -10**18-1\n    rb = 10 ** 18 + 1\n    while rb - lb > 1:\n        target = (rb + lb) // 2\n        if 1:\n            cnt=0\n            for i, a in enumerate(A):\n                if a==0:\n                    d = i if target >= 0 else 0\n                elif a < 0:\n                    il = np.searchsorted(A,0- (-target)//a,side='left')\n                    d = max(i - il, 0)\n                else:\n                    ir = np.searchsorted(A,target//a,side='right')\n                    d = min(ir, i)\n                cnt+=d\n        if cnt>=K:\n            rb = target\n        else:\n            lb = target\n    return rb\n\nI=np.array([int(_) for _ in open(0).read().split()],dtype=int)\nprint(main(I))", "import numpy as np\n\nn, k = [int(i) for i in input().split()]\na = np.array(sorted([int(i) for i in input().split()]))\nposi = a[a > 0]\nzero = a[a == 0]\nnega = a[a < 0]\n\n# 2\u5206\u63a2\u7d22, mid \u3088\u308a\u5c0f\u3055\u3044\u3082\u306e\u3092\u6570\u3048\u308b\nl = -10 ** 18 - 1\nr = 10 ** 18 + 1\nwhile r - l > 1:\n    mid = (r + l) // 2\n    cnt = 0\n    if mid >= 0:\n        cnt += len(zero) * n\n\n    cnt += a.searchsorted(mid // posi, side=\"right\").sum()\n    cnt += (n - a.searchsorted(-(-mid // nega), side=\"left\")).sum()\n    cnt -= np.count_nonzero(a * a <= mid)\n    cnt //= 2\n    if cnt >= k:\n        r = mid\n    else:\n        l = mid\nprint(r)\n", "import numpy as np\n\nN, K = list(map(int,input().split()))\nA = np.array(list(map(int,input().split())))\nA.sort()\nposi = A[A > 0]\nzero = A[A == 0]\nnega = A[A < 0]\n\n# \u7a4d\u304cx\u4ee5\u4e0b\u306e\u7d44\u3092\u6c42\u3081\u308b\ndef check(x):\n    count = 0  # \u7a4d\u304cx\u4ee5\u4e0b\u306e\u7d44\n    if x >= 0:\n        count += len(zero) * N  # zero * N\n    count += np.searchsorted(A, x // posi, side = 'right').sum()  # posi * N\n    count += (N - np.searchsorted(A, (-x - 1) // (-nega), side = 'right')).sum()  # nega * N\n    count -= np.count_nonzero(A * A <= x)  # \u81ea\u5206\u81ea\u8eab\u3068\u306e\u7d44\n    return count // 2  #\u91cd\u8907\u3092\u6d88\u3059\n\n# \u4e8c\u5206\u63a2\u7d22\nlow = -10 ** 18\nhigh = 10 ** 18\nwhile low + 1 < high:\n    mid = (low + high) // 2\n    if check(mid) < K:  # OK\n        low = mid\n    else:               # NG\n        high = mid\n\nprint(high)\n", "import numpy as np\n\nn,k=list(map(int,input().split()))\nA=np.array(input().split(),np.int64)\nA.sort()\n\nzero=A[A==0]\nneg=A[A<0]\npos=A[A>0]\n\ndef f(x): # count pairs x or less\n    cnt=0\n    #zero\n    if x>=0:\n        cnt += len(zero)*n\n    #pos\n    cnt += A.searchsorted(x//pos,side=\"right\").sum()\n    #neg\n    cnt += (n-A.searchsorted(-(-x//neg),side=\"left\")).sum()\n    #except a*a\n    cnt-=np.count_nonzero(A*A<=x)\n    return cnt//2\n\nl=-10**18\nr=10**18\n\nwhile l<r:\n    pov=(l+r)//2\n    if f(pov)>=k:\n        r=pov\n    else:\n        l=pov+1\nprint(l)\n", "import numpy as np\nN,K = map(int,input().split())\na = np.array(input().split(),np.int64)\na = np.sort(a)\nzero = a[a==0]\npos = a[a>0]\nneg = a[a<0]\n\ndef f(x):\n    count = 0\n    c = x // pos\n    count += np.searchsorted(a, c, side='right').sum()\n    count += N*len(zero) if x >= 0 else 0\n    c = -(-x // neg)\n    count += (N - np.searchsorted(a, c, side='left')).sum()\n    count -= a[a*a <= x].size\n    count //= 2\n    return count\n\nright = 10**18\nleft = -10**18\nwhile right-left>1:\n    mid = (right + left)//2\n    if f(mid)<K:\n        left = mid\n    else:\n        right = mid\n        \nprint(right)", "import numpy as np\nn,k=map(int,input().split())\na=np.array(list(map(int,input().split())))\na.sort()\np=a[a>0]\nz=a[a==0]\nm=a[a<0]\nl=-10**18\nr=10**18\nwhile r-l>1:\n  mid=(r+l)//2\n  cnt=0\n  if mid>=0:\n    cnt+=len(z)*n\n  cnt+=a.searchsorted(mid//p,side='right').sum()\n  cnt+=(n-a.searchsorted(-(-mid//m),side='left')).sum()\n  cnt-=np.count_nonzero(a*a<=mid)\n  cnt//=2\n  if cnt>=k:\n    r=mid\n  else:\n    l=mid\nprint(r)", "N,K=list(map(int, input().split()))\nA=list(map(int, input().split()))\nA=sorted(A)\nimport numpy as np\nA=np.array(A,dtype=\"int64\")\nZ=A[A==0]\nH=A[A<0]\nS=A[A>0]\nl,r=-10**19,10**19\nwhile r-l>1:\n  mid=(r+l)//2\n  cnt=0\n  cnt+=A.searchsorted(mid//S,side=\"right\").sum()\n  cnt+=(N-A.searchsorted((mid+1)//(H),side=\"right\")).sum()\n  cnt-=np.count_nonzero(A*A<=mid)\n  if mid>=0:\n    cnt+=len(Z)*N \n  cnt//=2\n  if cnt>=K:\n    r=mid\n  else:\n    l=mid \nprint(r)\n", "import numpy as np\n\nn, k = list(map(int, input().split()))\na = list(map(int, input().split()))\n\na = np.array(a)\na.sort()\n\nnega = a[a<0]\nzero = a[a==0]\nposi = a[a>0]\n\nl = -10**18-1\nr = 10**18+1\nwhile r - l > 1:\n   mid = (r+l)//2\n   cnt = 0\n   if mid >= 0:\n      cnt += len(zero)*n\n   cnt += a.searchsorted(mid//posi, side='right').sum()\n   cnt += (n - a.searchsorted(-(-mid//nega), side='left')).sum()\n   cnt -= np.count_nonzero(a*a <= mid)\n   cnt //=2\n   if cnt >= k:\n      r = mid\n   else:\n      l= mid\n\nprint(r)\n", "from sys import stdin\nimport numpy as np\ndef main():\n    #\u5165\u529b\n    readline=stdin.readline\n    n,k=map(int,readline().split())\n    a=np.array(readline().strip().split(),dtype=\"int64\")\n    \n    a.sort()\n    neg=a[a<0]\n    neg_p=neg**2\n    zero=a[a==0]\n    pos=a[a>0]\n    pos_p=pos**2\n    l=-10**18-1\n    r=10**18\n    while l<r-1:\n        x=(l+r)//2\n        cnt=0\n        if neg.size>0:\n            cnt+=(a.size-np.searchsorted(a,(x+neg+1)//neg)).sum()\n            cnt-=neg_p[neg_p<=x].size\n        if zero.size>0:\n            if x>=0:\n                cnt+=(a.size-1)*zero.size\n        if pos.size>0:\n            cnt+=np.searchsorted(a,x//pos,side=\"right\").sum()\n            cnt-=pos_p[pos_p<=x].size\n\n        cnt//=2\n        if cnt>=k: r=x\n        else: l=x\n\n    print(r)\n\ndef __starting_point():\n    main()\n__starting_point()", "import numpy as np\n\nn, k = list(map(int, input().split()))\na = np.array(list(map(int, input().split())))\na.sort()\n\nzero = a[a==0]\npos = a[a>0]\nneg = a[a<0]\n\nl = -10**18\nr = 10**18\n\n# \u4e8c\u5206\u63a2\u7d22\n# x\u4ee5\u4e0b\u306b\u306a\u308b\u7d44\u307f\u5408\u308f\u305b\u304c\u3044\u304f\u3064\u3042\u308b\u304b\u8a08\u7b97\u3059\u308b\nwhile l+1<r:\n    x = (l + r) // 2\n    cnt = 0\n\n    # 0\u306b\u306a\u308b\u7d44\u307f\u5408\u308f\u305b\u306e\u500b\u6570\u306e\u30ab\u30a6\u30f3\u30c8\u3092\u8ffd\u52a0\n    if x >= 0:\n        cnt += n * len(zero)\n\n    cnt += a.searchsorted(x//pos,side='right').sum()\n    cnt += (n-a.searchsorted(-(-x//neg),side='left')).sum()\n    cnt -= np.count_nonzero(a*a<=x)\n    cnt//=2\n\n    if cnt >= k:\n        r = x\n    else:\n        l = x\n\nprint(r)\n"]