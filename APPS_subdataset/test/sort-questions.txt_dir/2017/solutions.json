["import sys\nfrom collections import defaultdict\n \nclass BIT():\n    def __init__(self, n):\n        self.n = n\n        self.tree = [0] * n\n    \n    def _get_sum(self, r):\n        '''\n        sum on interval [0, r)\n        '''\n        result = 0\n        while r > 0:\n            result += self.tree[r-1]\n            r &= (r - 1)\n        return result\n    \n    def get_sum(self, l, r):\n        '''\n        sum on interval [l, r)\n        '''\n        return self._get_sum(r) - self._get_sum(l)\n    \n    def add(self, i, value=1):\n        while i < self.n:\n            self.tree[i] += value\n            i |= (i + 1)\n\nreader = (line.rstrip() for line in sys.stdin)\ninput = reader.__next__\n\nn = int(input())\nswaps = []\nfor _ in range(n):\n    i, j = list(map(int, input().split()))\n    swaps.append(i)\n    swaps.append(j)\n\npos = defaultdict(list)\nfor i, val in enumerate(swaps):\n    pos[val].append(i)\n\nc = 0\nprev = -1\ncompr = [0] * (2*n)\ndecompr = {}\nfor val in sorted(swaps):\n    if prev == val: continue\n    for j in pos[val]:\n        compr[j] = c\n    decompr[c] = val\n    c += 1\n    prev = val\n\narr = list(range(c))\nfor t in range(n):\n    i, j = compr[t<<1], compr[t<<1|1]\n    arr[i], arr[j] = arr[j], arr[i]\n\nbit = BIT(c)\ntotal_inv = 0\nfor i, val in enumerate(arr):\n    total_inv += bit.get_sum(val+1, c)\n    if i != val:\n        total_inv += abs(decompr[val] - decompr[i]) - abs(val - i)\n    bit.add(val)\nprint(total_inv)\n"]