["def check(k):\n    anew = [a[i] + (i + 1) * k for i in range(n)]\n    anew.sort()\n    asum = sum(anew[:k])\n    if asum <= s:\n        return asum\n    else:\n        return 0\n\n\nn, s = [int(i) for i in input().split()]\na = [int(i) for i in input().split()]\nmin_sum = 0\nL = 0\nR = n + 1\nwhile R - L > 1:\n    m = (L + R) // 2\n    res = check(m)\n    if res:\n        L = m\n        min_sum = res\n    else:\n        R = m\nprint(L, min_sum)\n", "n, S = list(map(int, input().split()))\na = [int(x) for x in input().split()]\n\ndef calc(k):\n    prices = [a[i] + (i + 1) * k for i, x in enumerate(a)]\n    prices.sort()\n    return sum(prices[:k])\n\nl, r = 0, n\nwhile l != r:\n    m = (l + r + 1) // 2\n    if calc(m) <= S:\n        l = m\n    else:\n        r = m - 1\n\nprint(l, calc(l))\n", "n, s = list(map(int, input().split(' ')))\nb = list(map(int, input().split(' ')))\n\n\ndef tr(m):\n    bb = [x + (i+1)*m for (i,x) in enumerate(b)]\n    bb = sorted(bb)\n    res = sum(bb[:m])\n\n    if res <= s:\n        return res\n    else:\n        return None\n\n\nres = None\nlo = 0\nhi = n\n\nd = {}\nmaxgood = -1\n\nwhile lo < hi:\n    mid = (lo+hi)//2\n    #print(\"\\nl m h\", lo, mid, hi)\n    temp = tr(mid)\n    d[mid] = temp\n    if temp is not None:\n        lo = mid+1\n        maxgood = max(maxgood, mid)\n    else:\n        hi = mid\n    #print(\"new l m h\", lo, mid, hi, \"\\n\")\n\ntemp = tr(hi)\nd[hi] = temp\nif temp is not None:\n    maxgood = max(maxgood, hi)\n\ntemp = tr(lo)\nd[lo] = temp\nif temp is not None:\n    maxgood = max(maxgood, lo)\n\ntemp = tr(mid)\nd[mid] = temp\nif temp is not None:\n    maxgood = max(maxgood, mid)\n\nprint(maxgood, d[maxgood])\n", "def good(k):\n    newp = []\n    for i in range(len(prices)):\n        newp.append(prices[i] + (i + 1) * k)\n    newp.sort()\n    mincosts[k] = sum(newp[:k])\n    return mincosts[k] <= s\n\n\ndef binsearch():\n    l = 0\n    r = n + 1\n    while r - l > 1:\n        m = (l + r) // 2\n        if good(m):\n            l = m\n        else:\n            r = m\n    if r < n + 1 and good(r):\n        return r\n    return l\n\nn, s = map(int, input().split())\nprices = list(map(int, input().split()))\nmincosts = [0 for i in range(n + 1)]\n\nb = binsearch()\nprint(b, mincosts[b])", "def proverka(k, a, s):\n    b = []\n    for i in a:\n        b.append(i)\n    for i in range(len(b)):\n        b[i] = b[i] + k * (i + 1)\n    b.sort()\n    cnt = 0\n    index = 0\n    while(cnt < k and s - b[index] >= 0):\n        cnt += 1\n        s -= b[index]\n        index += 1\n    if(cnt < k):\n        return False\n    else:\n        return True\nn, s = list(map(int, input().split()))\na = list(map(int, input().split()))\nl = 0\nr = n + 1\nwhile(l + 1 < r):\n    if(proverka((l+r)//2, a, s)):\n        l = (l+r)//2\n    else:\n        r = (l+r)//2\nfor i in range(n):\n    a[i] = a[i] + l * (i + 1)\na.sort()\nqwer = 0\nindex = 0\nwhile(index < l and qwer + a[index] <=  s):\n    qwer += a[index]\n    index += 1\nprint(l, qwer)\n", "import sys\nfrom itertools import accumulate\n\ndef solve():\n    def check(m):\n        if m == 0:\n            return 0\n\n        b = [ai + (i + 1)*m for i, ai in enumerate(a)]\n        b.sort()\n\n        return sum(b[:m])\n\n    n, S = map(int, input().split())\n    a = [int(i) for i in input().split()]\n\n    btm = -1\n    top = n + 1\n\n    while top - btm > 1:\n        mid = (top + btm) // 2\n\n        if check(mid) <= S:\n            btm = mid\n        else:\n            top = mid\n\n    k = btm\n    T = check(k)\n\n    print(k, T)\n\ndef __starting_point():\n    solve()\n__starting_point()", "def func(c,k,s,n):\n\tnc=[]\n\tfor i in range(n):\n\t\tnc.append(c[i]+(i+1)*(k+1))\n\tnc.sort()\n\tval=sum(nc[:k+1])\n\tif(val<=s):\n\t\treturn val\n\telse:\n\t\treturn -1\n\ninp=input().split()\nn=int(inp[0])\ns=int(inp[1])\nc=[]\nval=input().split()\ni=1\nfor v in val:\n\tc.append(int(v))\n\ti+=1\nbegin=0\nend=n-1\nflag=0\nwhile(begin<=end):\n\tmid=(begin+end)//2\n\tif(func(c,mid,s,n)!=-1):\n\t\tif(mid==n-1):\n\t\t\tprint(mid+1,func(c,mid,s,n))\n\t\t\tflag=1\n\t\t\tbreak\n\t\tif(func(c,mid+1,s,n)==-1):\n\t\t\tprint(mid+1,func(c,mid,s,n))\n\t\t\tflag=1\n\t\t\tbreak\n\t\telse:\n\t\t\tbegin=mid+1\n\telse:\n\t\tend=mid-1\nif(flag==0):\n\tprint(\"0 0\")\n\n", "import sys\n\ndef main():\n    n,s = map(int,sys.stdin.readline().split())\n\n    a = list(map(int, sys.stdin.readline().split()))\n    \n    l= 0\n    r = n\n\n    bestk =0\n    bests = 0\n    while l<r:\n        mid = (l+r)//2\n        x = [a[i]+(i+1)*mid for i in range(n)]\n        x.sort()\n        t = 0\n        for i in range(mid):\n            t+=x[i]\n        if t<=s:\n            bests = t \n            bestk = mid\n            l = mid+1\n        else:\n            r = mid-1\n    mid = l\n    x = [a[i]+(i+1)*mid for i in range(n)]\n    x.sort()\n    t = 0\n    for i in range(mid):\n        t+=x[i]\n    if t<=s:\n        bestk = mid \n        bests = t\n\n    print(bestk, bests)\n\nmain()", "def canBuy(k):\n\tfullCost = [(i + 1) * k + cost[i] for i in range(0, n)]\n\tfullCost = sorted(fullCost)\n\tfullSum = sum(fullCost[:k])\n\treturn fullSum <= money\n\ndef canBuyCost(k):\n\tfullCost = [(i + 1) * k + cost[i] for i in range(0, n)]\n\tfullCost = sorted(fullCost)\n\tfullSum = sum(fullCost[:k])\n\treturn fullSum if fullSum <= money else -1\n\nn, money = [int(x) for x in input().split()]\ncost = [int(x) for x in input().split()]\n\nleft = 0\nright = n\nwhile left < right - 1:\n\tmid = (left + right) // 2\n\tif canBuy(mid):\n\t\tleft = mid\n\telse:\n\t\tright = mid\n\nrightRes = canBuyCost(right)\nif rightRes == -1:\n\tprint(left, canBuyCost(left))\nelse:\n\tprint(right, rightRes)", "from sys import stdin\n\n\ndef cost_of(data, k):\n    kl = []\n    for index, item in enumerate(data):\n        kl.append(item + (index + 1) * k)\n    kl.sort()\n\n    accu = 0\n    for i in range(0, k):\n        accu += kl[i]\n\n    return accu\n\n\nn, s = list(map(int, stdin.readline().rstrip().split()))\ndata = list(map(int, stdin.readline().rstrip().split()))\nleft, right = 0, n\ncleft, cright = 0, cost_of(data, n)\n\nif s >= cright:\n    print(\"{0} {1}\".format(n, cright))\n    return\n\nlast_center = -1\ncenter = -1\nwhile left <= right:\n    last_center = center\n    center = (left + right) // 2\n    ccenter = cost_of(data, center)\n\n    if center == last_center:\n        rs = right if s >= cright else left\n        left = rs\n        break\n    if s < ccenter:\n        right = center - 1\n        cright = cost_of(data, right)\n    else:\n        left = center\n        cleft = cost_of(data, left)\n\nprint(left, cost_of(data, left))\n", "from itertools import count\n\nn, m = list(map(int, input().split()))\np = [int(num) for num in input().split()]\n\n\ndef calc(cnt):\n    new_p = list(map(lambda ind, num: num + cnt * ind, count(1), p))\n    return sum(sorted(new_p)[:cnt])\n\n\ndef can(cnt):\n    return calc(cnt) <= m\n\n\nl = 0\nr = n + 1\nwhile r - l > 1:\n    mid = (l + r) // 2\n    if can(mid):\n        l = mid\n    else:\n        r = mid\n\nprint(l, calc(l))\n", "from sys import stdin\n\n\ndef check(n, s, a):\n    a.sort(key=lambda x: x[1] * n + x[0])\n    r = 0\n    for i in a[:n]:\n        r += i[0] + i[1] * n\n    return r\n\n\ndef main():\n    n, s = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    for i in range(n):\n        a[i] = [a[i], i + 1]\n    l = 0\n    res = 0\n    r = n + 1\n    while r - l > 1:\n        m = (l + r) // 2\n        b = a[:]\n        res_new = check(m, s, b)\n        if res_new <= s:\n            l = m\n            res = res_new\n        else:\n            r = m\n    print(l, res)\n\n\nmain()", "import sys\nn, s = list(map(int, sys.stdin.readline().split()))\nl = list(map(int, sys.stdin.readline().split()))\nt = list([x[1] + n * (x[0]+1) for x in enumerate(l)])\nupper = n-1\nlower = 0\nwhile upper > lower:\n    k = (upper + lower) // 2\n    # print(\"u\",upper,'l',lower)\n    t = list([x[1] + k * (x[0] + 1) for x in enumerate(l)])\n    h = sum(sorted(t)[:k])\n    if h == s:\n        break\n    if h < s:\n        lower = k + 1\n    else:\n        upper = k - 1\n\nt = list([x[1] + upper * (x[0] + 1) for x in enumerate(l)])\nif sum(sorted(t)[:upper]) <= s:\n    z = list([x[1] + (upper + 1) * (x[0] + 1) for x in enumerate(l)])\n    if sum(sorted(z)[:upper+1]) <s:\n        print(upper+1, sum(sorted(z)[:upper+1]))\n    else:\n        print(upper, sum(sorted(t)[:upper]))\nelse:\n    t = list([x[1] + (upper-1) * (x[0] + 1) for x in enumerate(l)])\n    print(upper-1, sum(sorted(t)[:upper-1]))\n\n", "n,s = map(int, input().split())\na = list(map(int, input().split()))\n\ndef check(m):\n    ac = sorted([a[i-1] + i*m for i in range(1,n+1)])\n    w = sum(ac[:m])\n    if w <= s:\n        return True, w\n    else:\n        return False, 0\n\nl,r = 0, len(a) + 1\nlast = -1\nlastw = 0\nwhile l < r:\n    m = l + (r - l)//2\n    st, w = check(m)\n    if st:\n        last = m\n        lastw = w\n        if l == m:\n            break\n        l = m\n    else:\n        r = m\nprint(last, lastw)", "def f(k):\n    cur = sum(sorted([a[i] + (i + 1) * k for i in range(n)])[:k])\n    return cur, cur <= S\nread = lambda: map(int, input().split())\nn, S = read()\na = list(read())\nl, r = 0, n + 1\nwhile r - l > 1:\n    m = (l + r) >> 1\n    if f(m)[1]: l = m\n    else: r = m\nprint(l, f(l)[0])", "def calc(cnt):\n    return sum(sorted(num + cnt * ind for ind, num in enumerate(price, 1))[:cnt])\n\nn, money = list(map(int, input().split()))\nprice = [int(num) for num in input().split()]\n\ncan = 0\ncant = n + 1\nwhile cant - can > 1:\n    mid = (can + cant) // 2\n    if calc(mid) <= money:\n        can = mid\n    else:\n        cant = mid\n\nprint(can, calc(can))\n", "from sys import stdin as fin\n# fin = open(\"cfr417c.in\", \"r\")\n\nn, S = map(int, fin.readline().split())\narr = list(map(int, fin.readline().split()))\n\ndef test(k):\n    nonlocal arr, n, S\n    costs = sorted([arr[i] + (i+1)*k for i in range(n)])\n    csum = sum(costs[:k])\n    # print(costs)\n    if csum <= S:\n        return csum\n    else:\n        return 0\n\nl, r, m = 0, n + 1, 0\nans, ansm = 0, 0\nwhile l + 1 != r:\n    m = (l + r) // 2\n    # print(l, r, m)\n    csum = test(m)\n    if not csum:\n        r = m\n    else:\n        ans = csum\n        ansm = m\n        l = m\nprint(ansm if ans else 0, ans)", "n,s=[int(i) for i in input().split()]\nll=[int(i) for i in input().split()]\ncurr=0;\nl=0\nh=n\nwhile l<=h :\n\tmid = (h+l)//2;\n\tk=ll[:]\n\tfor i in range(n):k[i]=(i+1)*mid+ll[i];\n\tk.sort();\n\t#print(k)\n\tsm=sum(k[:mid])\n\t#print(mid,sm)\n\tif sm<=s:\n\t\tcurr=mid\n\t\tl=mid+1\n\t\tans=sm\n\telse:\n\t\th=mid-1\nprint(curr,ans)", "def newArr(a, k):\n    b = a\n    i = 0\n    n = len(a)\n    while i < n:\n        b[i] += (i+1)*k\n        i += 1\n    return b\n\ndef minSum(a, k):\n    a.sort()\n    sm = 0\n    cnt = 0\n    i = 0\n    while i < k:\n        sm += a[i]\n        i += 1\n    return sm\n\n\ninp = input().split()\nn = int(inp[0])\nS = int(inp[1])\ninp = input().split()\na = []\nfor x in inp:\n    a.append(int(x))\nl = 0\nr = n\nwhile l<r:\n    mid = (l+r)//2\n    if l+1 == r:\n        mid = r\n    b = newArr(list(a), mid)\n    if minSum(b, mid) <= S:\n        l = mid\n    else:\n        r = mid - 1\nans = l\nprint(str(ans) + ' ' + str( minSum(newArr(a, ans), ans) ))\n", "n, S = map(int, input().split())\na = list(map(int, input().split()))\nl, r, m, cost = 0, n + 1, -1, -1\nwhile r - l > 1:\n  m = (l + r) // 2\n  cost = sum(sorted([a[i] + (i + 1) * m for i in range(n)])[:m])\n  l, r = ((l, m) if cost > S else (m, r))\nprint(l, sum(sorted([a[i] + (i + 1) * l for i in range(n)])[:l]))", "from sys import stdin\ninFile = stdin\ntokens = []\ntokens_next = 0\n\ndef next_str():\n    nonlocal tokens, tokens_next\n    while tokens_next >= len(tokens):\n        tokens = inFile.readline().split()\n        tokens_next = 0\n    tokens_next += 1\n    return tokens[tokens_next - 1]\n\ndef nextInt():\n    return int(next_str())\n\ndef min_cost(a, k):\n    if k > len(a):\n        return False\n\n    new_a = [a[i] + (i + 1) * k for i in range(len(a))]\n    new_a = sorted(new_a)\n    return sum(new_a[:k])\n\nn = nextInt()\nS = nextInt()\na = [nextInt() for _ in range(n)]\n\nlow = 0\nhigh = n + 1\nwhile low + 1 < high:\n    mid = (low + high) // 2\n    if min_cost(a, mid) <= S:\n        low = mid\n    else:\n        high = mid\n\nprint(low, min_cost(a, low)) ", "from sys import stdin\ninFile = stdin\ntokens = []\ntokens_next = 0\n\ndef next_str():\n    nonlocal tokens, tokens_next\n    while tokens_next >= len(tokens):\n        tokens = inFile.readline().split()\n        tokens_next = 0\n    tokens_next += 1\n    return tokens[tokens_next - 1]\n\ndef nextInt():\n    return int(next_str())\n\nfrom heapq import heapify, heappop\ndef min_cost(a, k):\n    if k > len(a):\n        return False\n\n    new_a = [a[i] + (i + 1) * k for i in range(len(a))]\n    heapify(new_a)\n    s = 0\n    for _ in range(k):\n        s += heappop(new_a)\n    return s\n\nn = nextInt()\nS = nextInt()\na = [nextInt() for _ in range(n)]\n\nlow = 0\nhigh = n + 1\nwhile low + 1 < high:\n    mid = (low + high) // 2\n    if min_cost(a, mid) <= S:\n        low = mid\n    else:\n        high = mid\n\nprint(low, min_cost(a, low)) ", "#!/usr/bin/env python3\n\n\nn, S = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\n\nlo, hi = 0, n + 1\nwhile lo < hi:\n    mid = (lo + hi) // 2\n    if mid > n:\n        hi = mid\n        continue\n    if sum(sorted(x + (i + 1) * mid for i, x in enumerate(a))[:mid]) <= S:\n        lo = mid + 1\n    else:\n        hi = mid\nlo -= 1\nprint(lo, sum(sorted(x + (i + 1) * lo for i, x in enumerate(a))[:lo]))\n", "n,s = list(map(int,input().split()))\narr = list(map(int,input().split()))\n\ndef buy(k):\n    nonlocal n,s,arr\n    if k==0:\n        return 0\n    temp = sorted([arr[i-1]+i*k for i in range(1,n+1)])\n    return sum(temp[:k])\n\ndef main():\n\n\n    f,l = 0,n\n    while f<l:\n        if f==l-1:\n            a,b=buy(f),buy(l)\n            return (l,b) if b<=s else (f,a)\n        m = (f+l)//2\n        if buy(m)<=s:\n            f=m\n        else:\n            l=m\n\na,b=main()\nprint(a,b)\n", "n,s = list(map(int,input().split()))\narr = list(map(int,input().split()))\n\nfrom heapq import heapify, heappop\n\ndef buy(k):\n    nonlocal n,s,arr\n    if k==0:\n        return 0\n    ans = 0 \n    temp = [arr[i-1]+i*k for i in range(1,n+1)]\n    heapify(temp)\n    for i in range(k):\n        ans += heappop(temp)\n    return ans\n\ndef main():\n\n\n    f,l = 0,n\n    while f<l:\n        if f==l-1:\n            a,b=buy(f),buy(l)\n            return (l,b) if b<=s else (f,a)\n        m = (f+l)//2\n        if buy(m)<=s:\n            f=m\n        else:\n            l=m\n\na,b=main()\nprint(a,b)\n"]