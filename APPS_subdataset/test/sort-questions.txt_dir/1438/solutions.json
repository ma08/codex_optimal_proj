["n,k = list(map(int, input().split()))\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\nr = 0\nok = 1\nwhile ok:\n    L = [0 for _ in range(n)]\n    for i in range(n):\n        B[i] = B[i] - A[i]\n        if B[i] < 0:\n            L[i] = -B[i]\n            B[i] = 0\n    if sum(L) <= k:\n        r += 1\n        k = k - sum(L)\n    else:\n        ok = 0\nprint(r)\n        \n", "def can_make(a, b, k, n):\n    k2 = k\n    for t, v in zip(a, b):\n        diff = v - t * n\n        if diff < 0:\n            k2 += diff\n\n    return k2 >= 0\n\ndef main():\n    n, k = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    lo = 0\n    hi = 10**15\n    while lo + 1 < hi:\n        mid = (lo + hi) // 2\n        if can_make(a, b, k, mid):\n            lo = mid\n        else:\n            hi = mid\n\n    print(lo)\n\nmain()\n", "import sys\n\nn, k = list(map(int, sys.stdin.readline().split()))\nlst = list(map(int, sys.stdin.readline().split()))\ningr = list(map(int, sys.stdin.readline().split()))\nans = [[0,0,0] for i in range(n)]\nfor i in range(n):\n    ans[i][0] = ingr[i]//lst[i]\n    ans[i][1] = ingr[i]%lst[i]\n    ans[i][2] = i\nans.sort(key = lambda x: [x[0],x[1]])\nminn = ans[0][0]\nwhile (k > 0):\n    ans[0][1] += 1\n    k -= 1\n    if (ans[0][1] >= lst[ans[0][2]]):\n        ans[0][0] += 1\n        ans[0][1] = 0\n    ans.sort(key = lambda x: [x[0],x[1]])\n    if (ans[0][0] > minn):\n        minn = ans[0][0]\nprint(minn)\n", "read = lambda: list(map(int, input().split()))\nn, k = read()\na = list(read())\nb = list(read())\nc = [0] * n\nr = [0] * n\nfor i in range(n):\n    c[i] = b[i] // a[i]\n    r[i] = a[i] - b[i] % a[i]\nwhile k:\n    cur = min(c)\n    i = c.index(min(c))\n    if k >= r[i]:\n        k -= r[i]\n        c[i] += 1\n        r[i] = a[i]\n    else: break\nans = min(c)\nprint(ans)\n", "from sys import stdin, stdout\nn, k = map(int, stdin.readline().split())\nno = list(map(int, stdin.readline().split()))\nyes = list(map(int, stdin.readline().split()))\nmn = float('inf')\nfor i in range(n):\n    mn = min(mn, yes[i] // no[i])\ncnt = mn\nwhile k > 0:\n    for i in range(n):\n        if yes[i] // no[i] == mn:\n            k -= no[i] * (mn + 1) - yes[i]\n            yes[i] = no[i] * (mn + 1)\n    if k >= 0:\n        cnt += 1\n        mn += 1\nstdout.write(str(cnt))", "# coding: utf-8\n\nn, mp = list(map(int, input().split(\" \")))\na_list = list(map(int, input().split(\" \")))\nb_list = list(map(int, input().split(\" \")))\n\ndef bake(mp):\n    minus = 0\n    for i in range(n):\n        b_list[i] -= a_list[i]\n        if b_list[i] < 0:\n            minus += b_list[i]\n            b_list[i] = 0\n    mp += minus\n    if mp >= 0:\n        return 1, mp\n    else:\n        return 0, mp\n\ndef init_bake():\n    c = min([b // a for a, b in zip(a_list, b_list)])\n    for i in range(n):\n        b_list[i] -= a_list[i] * c\n    return c\n\ncookies = init_bake()\nwhile True:\n    c, mp = bake(mp)\n    if c == 0:\n        break\n    cookies += c\n\nprint(cookies)\n", "n,k=map(int,input().split())\na=list(map(int,input().split()))\nb=list(map(int,input().split()))\nc=[b[i]//a[i] for i in range(n)]\nd=[b[i]%a[i] for i in range(n)]\nwhile k:\n    i=c.index(min(c))\n    mi=min(k,a[i]-d[i])\n    d[i]+=mi\n    k-=mi\n    c[i]+=d[i]//a[i]\n    d[i]%=a[i]\nprint(min(c))", "def main():\n    def is_answer(ans):\n        need = 0\n        for i in range(n):\n            need += max(0, a[i] * ans - b[i])\n        return need <= k\n    \n    \n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    left = 0\n    right = 10 ** 18\n    while (right - left > 1):\n        middle = (left + right) // 2\n        if (is_answer(middle)):\n            left = middle\n        else:\n            right = middle\n    print(left)\nmain()", "n,k = list(map(int, input().split()))\na = (list(map(int, input().split())))\nb = (list(map(int, input().split())))\nc = list(zip(a,b))\nc.sort(key=lambda x:(x[1]//x[0]))\ni = 0\ncount = c[0][1]//c[0][0]\npart = 0\nfull = 0\nwhile k>0 and i<n:\n    if count < c[i][1]//c[i][0]:\n        if k>part:\n            k-=part\n            part = 0\n            count += 1\n            dco = min(c[i][1]//c[i][0]-count, k//full)\n            count += dco\n            k -= dco*full\n            part = full+c[i][0] - c[i][1]%c[i][0]\n            full += c[i][0]\n        else:\n            break\n    else:\n        part += c[i][0] - c[i][1]%c[i][0]\n        full += c[i][0]\n    #~ print(part, full)\n    i+=1\nif k>part:\n    count += 1\n    k-=part\ncount += k//full\nprint(count)\n", "def bake(n, k, ai, bi):\n    min_cookies = bi[0] // ai[0]\n    for j in range(1, n):\n        cookies = bi[j] // ai[j]\n        if cookies < min_cookies:\n            min_cookies = cookies\n    possible = True\n    while possible:\n        cks = min_cookies + 1\n        tenk = k\n        for j in range(n):\n            if bi[j] < (cks * ai[j]):\n                tenk = tenk - ((cks * ai[j]) - bi[j])\n                if tenk < 0:\n                    possible = False\n                    return min_cookies\n        min_cookies = cks\n    return min_cookies\n\n\ndef main():\n    n, k = [int(i) for i in input().strip().split()]\n    ai = [int(i) for i in input().strip().split()]\n    bi = [int(i) for i in input().strip().split()]\n    ans = bake(n, k, ai, bi)\n    print(ans)\n\ndef __starting_point():\n    main()\n\n\n__starting_point()", "n, k = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\nlo = 0\nhi = 2*1e9\n\ndef p(cookies):\n\tpowder = k\n\tfor i in range(len(b)):\n\t\thave = b[i]\n\t\tone = a[i]\n\t\tremainder = have - (one * cookies)\n\t\tif remainder < 0:\n\t\t\tpowder += remainder\n\tif powder >= 0:\n\t\treturn True\n\treturn False\n\t\nwhile lo < hi:\n\tm = (lo + hi) // 2\n\tif p(m):\n\t\tlo = m + 1\n\telse:\n\t\thi = m\nprint(int(lo if p(lo) else lo - 1))", "n, k = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\nkol = [b[i] // a[i] for i in range(n)]\nost = [b[i] % a[i] for i in range(n)]\n\nans = min(kol)\n\ncheck = True\nwhile check:\n    check = False\n    for i in range(n):\n        if kol[i] == ans:\n            if k >= a[i] - ost[i]:\n                k -= a[i] - ost[i]\n                ost[i] = 0\n                kol[i] += 1\n                check = True\n\n    if check:\n        ans = min(kol)\n\nprint(ans)", "def check():\n    nonlocal n, k, A, B\n    a = k\n    h = 0\n    for i in range(n):\n        if k < 0:\n            h = 1\n            break\n        else:\n            if B[i] >= A[i]:\n                B[i] -= A[i]\n            else:\n                if B[i] + k < A[i]:\n                    h = 1\n                    break\n                else:\n                    k -= (A[i] - B[i])\n                    B[i] = 0\n\n    if h == 1:\n        return False\n    else:\n        return True\n    \nn, k = map(int, input().split())\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\np = 0\nwhile check():\n    p += 1\nprint(p)", "n,k = list(map(int,input().split()))\na = list(map(int,input().split()))\nb = list(map(int,input().split()))\nc = [b[i]//a[i] for i in range(n)]\nc1 = [b[i]%a[i] for i in range(n)]\nwhile k>0:\n    x = min(c)\n    ind = c.index(x)\n    b[ind]+=1\n    k-=1\n    c[ind] = b[ind]//a[ind]\n    c1[ind] = b[ind]%a[ind]\nprint(min(c))\n", "n, k = list(map(int, input().split()))\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nS = 0\n_min = b[0] // a[0]\nfor i in range(n):\n    S += a[i]\n    x = b[i] // a[i]\n    if x < _min:\n        _min = x\nfor i in range(n):\n    b[i] -= a[i] * _min\ncnt = _min\nwhile True:\n    need = S\n    for i in range(n):\n        if b[i] < a[i]:\n            need -= b[i]\n            b[i] = 0\n        else:\n            need -= a[i]\n            b[i] -= a[i]\n    if need < k:\n        k -= need\n        cnt += 1\n    elif need == k:\n        cnt += 1\n        break\n    else:\n        break\nprint(cnt)\n        \n\n    \n", "n, k = list(map(int, input().split()))\n\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\n\ndef Possible(x) :\n    powder = k\n    for i in range(n) :\n        cnt = B[i] // A[i]\n        if cnt < x:\n            powder -= A[i]*x - B[i]\n            if powder < 0 :\n                return False\n    return True\n\nleft = 0\nright = 10**9 + 10**9 + 10\n\nwhile left + 1 < right :\n    mid = (left + right) // 2\n    if Possible(mid) :\n        left = mid\n    else :\n        right = mid\n\nprint(left)\n\n", "def minimum(l):\n    min_value = l[0]\n    min_index = 0\n    for i in range(1, len(l)):\n        if l[i] < min_value:\n            min_value = l[i]\n            min_index = i\n    return min_value, min_index\n\n\nn, k = [int(s) for s in input().split()]\nneeds = [int(s) for s in input().split()]\nhas = [int(s) for s in input().split()]\ncan_bake = [int(has[i] / needs[i]) for i in range(n)]\n# print(can_bake)\nwhile k > 0:\n    min_value, min_index = minimum(can_bake)\n    has[min_index] += 1\n    k -= 1\n    can_bake[min_index] = int(has[min_index] / needs[min_index])\nprint(min(can_bake))\n", "n, k = list(map(int, input().split()))\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\nresults = [None] * n\n\nfor i in range(n):\n    div, mod = b[i] // a[i], b[i] % a[i]\n    insufficient = a[i] - mod\n    results[i] = [div, mod, insufficient, i]\n\n\nresults.sort()\n\ni = 0\n\nwhile k > 0:\n    k -= 1\n    index = results[i][3]\n    new_insufficient = results[i][2] - 1\n    if new_insufficient == 0:\n        results[i][0] += 1\n        results[i][1] = 0\n        results[i][2] = a[index]\n    else:\n        results[i][1] += 1\n        results[i][2] -= 1\n    results.sort()\n\nprint(results[0][0])\n\n", "n, magic = list(map(int, input().split()))\ngramNeed = list(map(int, input().split()))\ngramHas = list(map(int, input().split()))\n\nable = []\nremain = []\nfor i in range(n):\n    able.append([gramHas[i] // gramNeed[i], gramHas[i] % gramNeed[i], gramNeed[i]])\nable.sort(key = lambda x: x[0])\nans = able[0][0]\nfor i in range(n):\n    able[i][0] -= ans\nwhile magic > 0:\n    i = 0\n    for i in range(n):\n        if able[i][0] == 0:\n            able[i][1] += 1\n            magic -= 1\n            if able[i][1] == able[i][2]:\n                able[i][0] += 1\n                able[i][1] = 0\n            break\n    if min(able, key = lambda x: x[0])[0] != 0:\n        ans += 1\n        for i in range(n):\n            able[i][0] -= 1\nprint(ans)\n\n\n\n\n\"\"\"\nmagic = 1\nneed =   2 1 4\nhas =   11 3 16\nable =   2 0 1\nremain = 1 0 0\n\nans = 3\n\nmagic = 3\nneed =   4 3  5  6\nhas =   11 15 14 20\nable =   0 3  0  1\nremain = 3 0  4  2\nlack  =  1 3  1  4\n\nans = 2\n\"\"\"\n", "def main():\n    from heapq import heapify, heappop, heappushpop\n    n, k = list(map(int, input().split()))\n    if n == 1:\n        a, b = int(input()), int(input())\n        print((b + k) // a)\n        return\n    l = list((b // a, a - (b % a), a) for a, b in zip(list(map(int, input().split())), list(map(int, input().split()))))\n    heapify(l)\n    b, r, a = heappop(l)\n    while k >= r:\n        k -= r\n        b, r, a = heappushpop(l, (b + 1, a, a))\n    print(b)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import sys\na=[]\nb=[]\nl=0\nval=0\nn,k=[int(x) for x in input().split()]\na=[int(x) for x in input().split()]\nb=[int(x) for x in input().split()]\nwhile k>0:\n    val=0\n    for i in range(n):\n        if a[i]<=b[i]:\n            b[i]-=a[i]\n        else:\n            val=val+a[i]-b[i]\n            b[i]=0\n    if val<=k:\n        l+=1\n    k-=val\nprint(l)", "def ok(x):\n    need = sum([max(0, a[i] * x - b[i]) for i in range(n)])\n    return need <= k\nn, k = (int(_) for _ in input().split())\na = [int(_) for _ in input().split()]\nb = [int(_) for _ in input().split()]\nlo, hi = 0, 2 * 10 ** 9\nwhile lo <= hi:\n    mid = (lo + hi) >> 1\n    if ok(mid):\n        lo = mid + 1\n    else:\n        hi = mid - 1\nprint(hi)\n", "import math\n\nn, k = list(map(int, input().split()))\nreq_ingr = list(map(int, input().split()))\nhvng_ingr = list(map(int, input().split()))\n\n\ndef if_sum_bigger(count):\n    summ = 0\n    for i in range(n):\n        summ += max(0, count * req_ingr[i] - hvng_ingr[i])\n    if summ <= k:\n        return True\n    else:\n        return False\n\nl = 0\nr = 2 * (10 ** 9) + 1\n\nwhile (r > l):\n    m = math.floor((r + l) / 2)\n    if if_sum_bigger(m):\n        l = m + 1\n    else:\n        r = m\nm = math.floor((r + l) / 2)\nif if_sum_bigger(m):\n    print(m)\nelse:\n    print(m-1)\n", "n, k = list(map(int, input().split()))\na = [int(i) for i in input().split()]\nb = [int(i) for i in input().split()]\nc = [b[i] // a[i] for i in range(n)]\nd = [b[i] % a[i] for i in range(n)]\nwhile k:\n        i = c.index(min(c))\n        m = min(k, a[i]-d[i])\n        d[i] += m\n        k -= m\n        c[i] += d[i]//a[i]\n        d[i] %= a[i]\nprint(min(c))\n"]