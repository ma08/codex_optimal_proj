["import sys\n\n\n# inf = open('input.txt', 'r')\n# reader = (map(int, line.split()) for line in inf)\nreader = (list(map(int, line.split())) for line in sys.stdin)\n\ndef minmaxPairs(g, costDict, n):\n    G = B = 0\n    s = 1\n    stack = [s]\n    traversal = []\n    visited = [False] * (n + 1)\n    subtreeSize = [1 for _ in range(n + 1)]\n    while stack:\n        v = stack.pop()\n        if not visited[v]:\n            visited[v] = True\n            for to in g[v]:\n                if not visited[to]:\n                    stack.append(v)\n                    stack.append(to)\n        else:\n            to = traversal[-1]\n            if (v, to) in costDict:\n                cost = costDict[(v, to)]\n            else:\n                cost = costDict[(to, v)]\n            toSize = subtreeSize[to]\n            subtreeSize[v] += toSize\n            minComp = min(toSize, n - toSize)\n            G += (minComp % 2) * cost\n            B += minComp * cost\n        traversal.append(v)\n    return G, B \n\nt, = next(reader)\nfor _ in range(t):\n    k, = next(reader)\n    n = 2 * k\n    g = [[] for i in range(n + 1)]\n    costDict = {}\n    for i in range(n - 1):\n        v, to, cost = next(reader)\n        costDict[(v, to)] = cost\n        g[v].append(to)\n        g[to].append(v)\n    G, B = minmaxPairs(g, costDict, n)\n    print(G, B)\n\n# inf.close()\n"]