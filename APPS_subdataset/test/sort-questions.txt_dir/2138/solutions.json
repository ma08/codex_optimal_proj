["# python3\n\n\ndef readline(): return list(map(int, input().split()))\n\n\ndef solve(d):\n    while d:\n        dn = d.pop()\n        if not d:\n            for i in range(1, dn + 1):\n                for j in range(i, dn + 1):\n                    yield i, j + 1\n            return\n        else:\n            d1 = d.pop(0)\n            for i in range(1, dn + 1):\n                for j in range(max(dn - d1 + 1, i), dn + 1):\n                    yield i, j + 1\n\n            d = [di - d1 for di in d]\n\n\ndef main():\n    n, = readline()\n    d = readline()\n\n    assert len(d) == n\n\n    edges = list(solve(d))\n    print(len(edges))\n    print(\"\\n\".join(map(\"{0[0]} {0[1]}\".format, edges)))\n\n\nmain()\n", "def readline(): return list(map(int, input().split()))\n\ndef SolveDegreeSet(DegreSet, n):\n    edges = []\n    verticesCount = 0\n    if(n == 0):\n        verticesCount = 1\n        return edges, verticesCount\n    if(n == 1):\n        verticesCount = DegreSet[0]+1\n        #print(verticesCount)\n        for i in range(1,verticesCount + 1):\n            for j in range(i + 1,verticesCount + 1):\n                edges.append([i,j])\n        #print(edges)\n        return edges , verticesCount\n    \n    newDegreeSet = []\n    for i in range(1,n - 1):\n        newDegreeSet.append(DegreSet[i ]- DegreSet[0])\n    #print(newDegreeSet)    \n    prevSolveDegreeSet = SolveDegreeSet(newDegreeSet, n - 2)\n\n    verticesCount = prevSolveDegreeSet[1]\n    edges = prevSolveDegreeSet[0]\n    #print(edges)\n    \n    #print(verticesCount)\n    \n    verticesCount += (DegreSet[n-1] - DegreSet[n-2])\n    #print(verticesCount)\n    for i in range(0, DegreSet[0]):\n        verticesCount += 1\n        for j in range(1, verticesCount):\n             edges.append([j, verticesCount])\n    #print (edges)\n    #print(verticesCount)\n    return edges, verticesCount\n\nn, = readline()\nd = readline()\n\npar = list(SolveDegreeSet(d, n))\nedges = par[0]\n#print( edges)\nprint(len(edges))\nprint(\"\\n\".join(map(\"{0[0]} {0[1]}\".format, edges)))\n", "def readline(): return list(map(int, input().split()))\n\ndef SolveDegreeSet(DegreSet, n):\n    edges = []\n    verticesCount = 0\n    if(n == 0):\n        verticesCount = 1\n        return edges, verticesCount\n    if(n == 1):\n        verticesCount = DegreSet[0]+1\n        #print(verticesCount)\n        for i in range(1,verticesCount + 1):\n            for j in range(i + 1,verticesCount + 1):\n                edges.append([i,j])\n        #print(edges)\n        return edges , verticesCount\n    \n    newDegreeSet = []\n    for i in range(1,n - 1):\n        newDegreeSet.append(DegreSet[i ]- DegreSet[0])\n    #print(newDegreeSet)    \n    prevSolveDegreeSet = SolveDegreeSet(newDegreeSet, n - 2)\n\n    verticesCount = prevSolveDegreeSet[1]\n    edges = prevSolveDegreeSet[0]\n    #print(edges)\n    \n    #print(verticesCount)\n    \n    verticesCount += (DegreSet[n-1] - DegreSet[n-2])\n    #print(verticesCount)\n    for i in range(0, DegreSet[0]):\n        verticesCount += 1\n        for j in range(1, verticesCount):\n             edges.append([j, verticesCount])\n    #print (edges)\n    #print(verticesCount)\n    return edges, verticesCount\n\nn, = readline()\nd = readline()\n\npar = list(SolveDegreeSet(d, n))\nedges = par[0]\n#print( edges)\nprint(len(edges))\nprint(\"\\n\".join(map(\"{0[0]} {0[1]}\".format, edges)))\n"]