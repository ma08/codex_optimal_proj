["from functools import reduce\ndef main():\n    from sys import stdin\n    from operator import xor\n    from functools import reduce\n    x, res = reduce(xor, (input()[i] == '1' for i in range(0, int(input()) * 2, 2))), []\n    input()\n    for s in stdin.read().splitlines():\n        if s == '3':\n            res.append(\"01\"[x])\n        else:\n            x ^= True\n    print(''.join(res))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "from sys import stdin\ninput = stdin.readline\nn = int(input())\narr = list(list(map(int, input().split())) for _ in range(n))\ncurr, res = 0, []\nfor i in range(n):\n    for j in range(n):\n        if i == j:\n            curr ^= arr[i][j]\nq = int(input())\nfor _ in range(q):\n    s = input()\n    if s[0] == '3':\n        res.append(str(curr))\n    else:\n        curr ^= 1\nprint(''.join(res))", "from sys import stdin\ninput = stdin.readline\nn = int(input())\nlis=list(list(map(int, input().split())) for _ in range(n))\nu=0\nfor i in range(n):\n    for j in range(n):\n        if i==j:\n            u^=lis[i][j]\nans =[]\nk = int(input())\nfor i in range(k):\n    s = input()\n    if s[0]=='3':\n        ans.append(str(u))\n    else:\n        u^=1\nprint(''.join(ans))            \n\n\n\n", "from functools import reduce\ndef main():\n    from sys import stdin, stdout\n    from functools import reduce\n    from operator import xor\n\n    n = int(int(input()))\n    mat = [list(map(int, input().split())) for _ in range(n)]\n    ans, q, a = reduce(xor, [mat[i][i] for i in range(n)]), int(input()), []\n    queries = [stdin.readline() for i in range(q)]\n\n    for query in queries:\n        if query[0] == '3':\n            a.append(str(ans))\n        else:\n            ans ^= 1\n    print(''.join(a))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "from sys import stdin\n\ntest = stdin.readlines()\nn = int(test[0])\nmatrix = [test[i+1].split() for i in range(n)]\n\ndot = 0\nfor i in range(n):\n    dot ^= matrix[i][i] == '1'\n\nout = []\nfor q in range(int(test[n + 1])):\n    query = test[n + q + 2].split()\n    if len(query) == 1:\n        out.append(dot)\n    else:\n        dot ^= 1\n\nprint(''.join(map(str, out)))\n", "from sys import stdin\n\ntest = stdin.readlines()\nn = int(test[0])\n\n\ndot = 0\nj = 0\nfor i in range(n):\n    if test[i+1][j] == '1':\n        dot ^= 1\n    j += 2\n\nout = []\nfor q in range(int(test[n + 1])):\n    query = test[n + q + 2].split()\n    if len(query) == 1:\n        out.append(dot)\n    else:\n        dot ^= 1\n\nprint(''.join(map(str, out)))\n", "from sys import stdin\n\nn = int(stdin.readline())\ndot = 0\nj = 0\nfor i in range(n):\n    line = stdin.readline()\n    if line[j] == '1':\n        dot ^= 1\n    j += 2\n\nout = []\nstdin.readline()\nfor query in stdin:\n    if len(query) < 3:\n        out.append('1' if dot else '0')\n    else:\n        dot ^= 1\n\nprint(''.join(out))\n", "from sys import stdin\n\nn = int(stdin.readline())\ndot = 0\nj = 0\nfor i in range(n):\n    line = stdin.readline()\n    if line[j] == '1':\n        dot ^= 1\n    j += 2\n\nout = []\nstdin.readline()\nfor query in stdin:\n    if len(query) < 3:\n        out.append('1' if dot else '0')\n    else:\n        dot ^= 1\n\nprint(''.join(out))\n", "from sys import stdin\n\nn = int(stdin.readline())\ndot = 0\nj = 0\nfor i in range(0, 2 * n, 2):\n    line = stdin.readline()\n    if line[i] == '1':\n        dot ^= 1\n\nout = []\nstdin.readline()\nfor query in stdin:\n    if len(query) < 3:\n        out.append('1' if dot else '0')\n    else:\n        dot ^= 1\n\nprint(''.join(out))\n", "from sys import stdin\ninput = stdin.readline\nn = int(input())\nlis=list(list(map(int, input().split())) for _ in range(n))\nval=0\nfor i in range(n):\n    tmp=0\n    for j in range(n):\n        tmp+=lis[i][j]*lis[j][i]\n    val+=tmp%2\nval = val%2        \nq = int(input())\nans=[]\nfor i in range(q):\n    ss = input()\n    if ss[0]=='3':\n        ans.append(str(val))\n    else:\n        val=val^1\nprint(''.join(ans))        \n\n\n\n", "# from operator import and_, xor\n# from functools import reduce\n# from itertools import chain\nfrom sys import stdin\ninput = stdin.readline\n\nn = int(input())\nl = list(list(map(int, input().split())) for _ in range(n))\nq = int(input())\noutput = []\nans = 0\n\n# We don't care about anything except for the trace of the matrix\n# Why? write the matrix with symbols not 0's and 1's\n\nfor i in range(n):\n    ans ^= l[i][i]\n\nfor i in range(q):\n    command = input()\n    if command[0] == '3':\n        output.append(ans)\n    else:\n        ans^=1\n# Why? first, put in mind that all we care about is the trace of the matrix\n# We will flip either the column or the row, we will be facing two possibilities\n# either to subtract from the original answer or do addition ... well thanks to GF(2)\n# both of the operations are just XORing \n\nprint(''.join([*map(str, output)]))"]