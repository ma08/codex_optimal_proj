["n = int(input())\ngraph = [set() for tr in range(n+2)]\ni = 1\nwhile i < n:\n\tx, y = list(map(int, input().split()))\n\tgraph[x].add(y)\n\tgraph[y].add(x)\n\ti += 1\na = iter(map(int, input().split()))\ntry:\n\tassert next(a) == 1\n\tq = [1]\n\tfor v in q:\n\t\tgv = graph[v]\n\t\tgv1 = tuple(gv)\n\t\tfor tr2 in gv1:\n\t\t\tu = next(a)\n\t\t\tassert u in gv\n\t\t\tgv.remove(u)\n\t\t\tgraph[u].remove(v)\n\t\t\tq.append(u)\n\tprint(\"Yes\")\nexcept AssertionError:\n\tprint(\"No\")\n", "from collections import deque\nn = int(input())\ngraph = [set() for i in range(n + 1)]\ngraph[0].add(1)\ngraph[1].add(0)\nfor i in range(n - 1):\n    x, y = map(int, input().split())\n    graph[x].add(y)\n    graph[y].add(x)\na = list(map(int, input().split()))\nq = deque()\nq.append(0)\ni = 0\npar = [0] * (n + 1)\nwhile len(q):\n    v = q.popleft()\n    graph[v].discard(par[v])\n    l = len(graph[v])\n    if graph[v] != set(a[i:i + l]):\n        print(\"No\")\n        break\n    for j in range(i, i + l):\n        q.append(a[j])\n        par[a[j]] = v\n    i += l\nelse:\n    print(\"Yes\")", "from collections import deque\n\ndef removeUsed(adj, used):\n    to_remove = []\n    for s in adj:\n        if used[s]: to_remove.append(s)\n    for s in to_remove:\n        adj.remove(s)\n\ndef solve(a, s): # a - adjacenct list [[],[]...], seq\n    if s[0] != 0: return False\n    q = deque()\n    q.append(0)\n    i, n, cur = 1, len(a), -1\n    used = [False]*n\n    used[0] = True\n    while i < n:\n        if cur == -1:\n            cur = q.popleft()\n            removeUsed(a[cur], used)\n        if not a[cur]:\n            cur = -1\n            continue\n        cur_s = s[i]\n        i += 1\n        if cur_s not in a[cur]:\n            return False # not connected\n        a[cur].remove(cur_s)\n        q.append(cur_s)\n        used[cur_s] = True\n    return True\n\nn = int(input())\na = [set() for i in range(n)]\nfor i in range(n-1):\n    u, v = list(map(int, input().split()))\n    a[u-1].add(v-1)\n    a[v-1].add(u-1)\ns = [(x-1) for x in map(int, input().split())]\nprint(\"Yes\" if solve(a, s) else \"No\")\n", "n=int(input())\ndict1={}\nfor i in range(n-1):\n    x,y=list(map(int,input().split()))\n    try:\n        dict1[y].append(x)\n    except:\n        KeyError\n        dict1[y]=[x]\n    try:\n        dict1[x].append(y)\n    except:\n        KeyError\n        dict1[x]=[y]    \narr=list(map(int,input().split()))\nif(arr[0]!=1):\n    print(\"No\")\nelse:\n    j=0\n    i=1\n    flag=0\n    while(i<n and j<n):\n        if(arr[j] in dict1[arr[i]]):\n            i+=1\n        else:\n            j+=1\n    if(i!=n and j==n):\n        print('No')\n    else:\n        print('Yes')\n\n", "n=int(input())\ndict1={}\nfor i in range(n-1):\n    x,y=list(map(int,input().split()))\n    try:\n        dict1[y].append(x)\n    except:\n        KeyError\n        dict1[y]=[x]\n    try:\n        dict1[x].append(y)\n    except:\n        KeyError\n        dict1[x]=[y]    \narr=list(map(int,input().split()))\nif(arr[0]!=1):\n    print(\"No\")\nelse:\n    j=0\n    i=1\n    flag=0\n    while(i<n and j<n):\n        if(arr[j] in dict1[arr[i]]):\n            i+=1\n        else:\n            j+=1\n    if(i!=n and j==n):\n        print('No')\n    else:\n        print('Yes')\n\n", "n = int(input())\n\nd = {}\n\nfor i in range(n-1):\n\ta,b = map(int,input().split())\n\n\ttry:\n\t\td[a].append(b);\n\texcept:\n\t\td[a] = [b]\n\ttry:\n\t\td[b].append(a);\n\texcept:\n\t\td[b] = [a]\n\narray = list(map(int,input().split()))\nflag=0;\n\nif array[0]==1:\n\n\ti = 1;\n\tj = 0;\n\n\twhile ( j < n and i < n ):\n\t\tif ( array[j] in d[array[i]] ):\n\t\t\ti+=1;\n\t\telse:\n\t\t\tj+=1;\n\tif j==n and i!=n:\n\t\tflag=1;\nelse:\n\tflag=1;\n\nif flag==1:\n\tprint(\"No\")\nelse:\n\tprint(\"Yes\")", "from sys import stdin\nfrom collections import deque\nn=int(stdin.readline())\ng=dict()\nfor i in range(n-1):\n    a,b=list(map(int,stdin.readline().strip().split()))\n    g.setdefault(a, set()).add(b)\n    g.setdefault(b, set()).add(a)\na=[int(x) for x in stdin.readline().strip().split()]\nans = True\nif n > 1 and a[0] == 1:\n    q=deque()\n    m=[0]*(n+1)\n    q.append(1)\n    m[1]=1\n    right=1\n    while len(q) > 0 and ans:\n        first = q.popleft()\n        cnt = 0\n        for v in g[first]:\n            if m[v] == 0:\n                cnt += 1\n        for i in range(right, right+cnt):\n            if m[a[i]] == 0 and a[i] in g[first]:\n                m[a[i]] = 1\n                q.append(a[i])\n            else:\n                ans = False\n                break\n        right += cnt\nelse:\n    ans = a[0] == 1\nif ans:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n", "from sys import stdin\nfrom collections import deque\nn=int(stdin.readline())\ng=dict()\nfor i in range(n-1):\n    a,b=list(map(int,stdin.readline().split()))\n    g.setdefault(a, set()).add(b)\n    g.setdefault(b, set()).add(a)\na=[int(x) for x in stdin.readline().split()]\nans = True\nif n > 1 and a[0] == 1:\n    q=deque()\n    m=[0]*(n+1)\n    q.append(1)\n    m[1]=1\n    right=1\n    while len(q) > 0 and ans:\n        first = q.popleft()\n        cnt = 0\n        for v in g[first]:\n            if m[v] == 0:\n                cnt += 1\n        for i in range(right, right+cnt):\n            if m[a[i]] == 0 and a[i] in g[first]:\n                m[a[i]] = 1\n                q.append(a[i])\n            else:\n                ans = False\n                break\n        right += cnt\nelse:\n    ans = a[0] == 1\nif ans:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n", "n=int(input())\ndict1={}\nfor i in range(n-1):\n    x,y=list(map(int,input().split()))\n    try:\n        dict1[y].append(x)\n    except:\n        KeyError\n        dict1[y]=[x]\n    try:\n        dict1[x].append(y)\n    except:\n        KeyError\n        dict1[x]=[y]    \narr=list(map(int,input().split()))\nif(arr[0]!=1):\n    print(\"No\")\nelse:\n    j=0\n    i=1\n    flag=0\n    while(i<n and j<n):\n        if(arr[j] in dict1[arr[i]]):\n            i+=1\n        else:\n            j+=1\n    if(j==n):\n        print('No')\n    else:\n        print('Yes')\n\n", "from collections import deque\n\nn = int(input())\ngraph = []\nfor i in range(n):\n    graph.append([])\n\nfor i in range(n-1):\n    (x, y) = [int(s) for s in input().split(\" \")]\n    graph[x-1].append(y-1)\n    graph[y-1].append(x-1)\n\nseq = [int(s) - 1 for s in input().split(\" \")]\nvisited = [False] * n\nlevels = [0] * n\npositions = [0] * n\n\nfor i, item in enumerate(seq):\n    positions[item] = i\n\n\n\nfor item in graph:\n    item.sort(key = (lambda x : positions[x]))\n\n\n# def func(i):\n#     if visited[i] == True:\n#         return\n#     visited[i] = True\n#     for item in graph[i]:\n#         if not visited[item]:\n#             levels[item] = levels[i] + 1\n#         func(item)\n#\n# # func(0)\n\n\nstack = deque()\n\nok_route = True\nroute_pos = 0\nstack.append(0)\noutput_seq = []\n\nwhile len(stack):\n    next_ = stack.popleft()\n    visited[next_] = True\n    output_seq.append(next_)\n    for item in graph[next_]:\n        if not visited[item]:\n            stack.append(item)\n\n# print(output_seq)\n\nif output_seq == seq:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n\n\n\n\n\n\n", "n = int(input())\nfrom collections import defaultdict\nl = defaultdict(list)\n\nfor _ in range(n-1):\n    x,y = map(int,input().split())\n    x-=1\n    y-=1\n    l[x].append(y)\n    l[y].append(x)\n\na = [int(i)-1 for i in input().split(' ')]\n\nvis = [0]*(n+10)\n\nif(a[0]!=0):\n    print('No')\n    return\nx = 1\nfor i in range(n):\n    s1 = set()\n    vis[a[i]]=1\n    for j in l[a[i]]:\n        if(not vis[j]):\n            s1.add(j)\n    s2 = set()\n    for j in range(len(s1)):\n        s2.add(a[x])\n        x+=1\n    if(s1!=s2):\n        print('No')\n        return\nprint('Yes')", "n = int(input())\n\nd = {}\n\nfor i in range(n-1):\n    a,b = list(map(int,input().split()))\n\n    try:\n        d[a].append(b);\n    except:\n        d[a] = [b]\n    try:\n        d[b].append(a);\n    except:\n        d[b] = [a]\n\narray = list(map(int,input().split()))\nflag=0;\n\nif array[0]==1:\n\n    i = 1;\n    j = 0;\n\n    while ( j < n and i < n ):\n        if ( array[j] in d[array[i]] ):\n            i+=1;\n        else:\n            j+=1;\n    if j==n and i!=n:\n        flag=1;\nelse:\n    flag=1;\n\nif flag==1:\n    print(\"No\")\nelse:\n    print(\"Yes\")\n", "n = int(input())\nfst, nxt, lst, des = [0 for i in range(2 * n + 1)], [0 for i in range(2 * n + 1)], [0 for i in range(2 * n + 1)], [0 for i in range(2 * n + 1)]\ncnt = 0\n\ndef add(u, v) :\n\tnonlocal cnt\n\tcnt += 1\n\tif fst[u] == 0 :\n\t\tfst[u] = cnt\n\telse :\n\t\tnxt[lst[u]] = cnt\n\tlst[u], des[cnt] = cnt, v\n\nfor i in range(1, n) : \n\tu, v = list(map(int, input().split()))\n#\tprint(u, v)\n\tadd(u, v)\n\tadd(v, u)\n\na = list(map(int, input().split()))\ndeep = [0 for i in range(n + 1)]\ndeep[1] = 1\nnow, res = 1, 1\nAns = 0\n\nfor i in range(0, n) :\n\tif deep[a[i]] == 0 : \n\t\tAns = 1\n\t\tbreak\n\telif deep[a[i]] < now :\n\t\tAns = 1\n\t\tbreak\n\telse : \n\t\tb = fst[a[i]]\n\t\tres += 1\n\t\twhile b > 0 :\n\t\t\tif deep[des[b]] == 0 : \n\t\t\t\tdeep[des[b]] = res\n\t\t\tb = nxt[b]\n\t\tnow = deep[a[i]]\n\nif Ans == 0 :\n\tprint(\"Yes\")\nelse :\n\tprint(\"No\")\n", "n = int(input())\n\nd = {}\n\nfor i in range(n-1):\n    a,b = map(int,input().split())\n\n    try:\n        d[a].append(b);\n    except:\n        d[a] = [b]\n    try:\n        d[b].append(a);\n    except:\n        d[b] = [a]\n\narray = list(map(int,input().split()))\nflag=0;\n\nif array[0]==1:\n\n    i = 1;\n    j = 0;\n\n    while ( j < n and i < n ):\n        if ( array[j] in d[array[i]] ):\n            i+=1;\n        else:\n            j+=1;\n    if j==n and i!=n:\n        flag=1;\nelse:\n    flag=1;\n\nif flag==1:\n    print(\"No\")\nelse:\n    print(\"Yes\")", "from collections import Counter,defaultdict,deque\n\nread = lambda : list(map(int,input().split()))\ngetinfo = lambda grid: print(list(map(print,grid)))\np = lambda x: print(x,end=\" \")\n\nmod = 10**9 + 7\ninf = float('inf')\n\ndef solve(a):\n    if a[0] != 1: return 'No'\n    index = 1\n    d1 = defaultdict(set)\n    for i in range(n):\n        for j in range(index, index+len(d[a[i]])):\n            d1[a[i]].add(a[j])\n            d[a[j]].discard(a[i])\n        if d1[a[i]] != d[a[i]]: return 'No'\n        index += len(d[a[i]])\n    return 'Yes'\n\nn = int(input())\nd = defaultdict(set)\nfor i in range(n-1):\n    a,b = read()\n    d[a].add(b)\n    d[b].add(a)\na = read()\nprint(solve(a))\n", "from collections import defaultdict\nn = int(input())\nd = defaultdict(set)\nfor i in range(n-1):\n    a,b = list(map(int,input().split()))\n    d[a].add(b)\n    d[b].add(a)\n\na = list(map(int,input().split()))\n\ndef solve(a):\n    if a[0] != 1: return 'No'\n    i,j = 1,0\n    while i<n and j<n:\n        if a[j] in d[a[i]]: i += 1\n        else: j += 1\n    if j == n and i != n: return 'No'\n    return 'Yes'\n\nprint(solve(a))\n", "MOD = 10**9 + 7\nI = lambda:list(map(int,input().split()))\nfrom collections import defaultdict as dd\nn , = I()\nd = dd(list)\nfor i in range(n-1):\n\tt = I()\n\td[t[0]].append(t[1])\n\td[t[1]].append(t[0])\nl = I()\nv = [0]*(n+1)\ns = 1\nwhat = 0\nv[1] = 1\nwhile what < s:\n        a = set()\n        i = l[what]\n        for j in d[i]:\n                if not v[j]:\n                        a.add(j)\n        b = set()\n        for j in range(s,s + len(a)):\n                b.add(l[j])\n        if a!=b:\n                print('No')\n                return\n        kkk = 0\n        for k in a:\n            kkk += 1\n            v[k] = 1\n        s += kkk\n        what += 1\nif s != n:\n    print('No')\n    return\nprint('Yes')\n", "MOD = 10**9 + 7\nI = lambda:list(map(int,input().split()))\nfrom collections import defaultdict as dd\nn , = I()\nd = dd(list)\nfor i in range(n-1):\n\tt = I()\n\td[t[0]].append(t[1])\n\td[t[1]].append(t[0])\nl = I()\nv = [0]*(n+1)\ns = 1\nwhat = 0\nv[1] = 1\nwhile what < s:\n        a = set()\n        i = l[what]\n        for j in d[i]:\n                if not v[j]:\n                        a.add(j)\n        b = set()\n        for j in range(s,s + len(a)):\n                b.add(l[j])\n        if a!=b:\n                print('No')\n                return\n        kkk = 0\n        for k in a:\n            kkk += 1\n            v[k] = 1\n        s += kkk\n        what += 1\nif s != n:\n    print('No')\n    return\nprint('Yes')\n", "from queue import Queue\nn = int(input())\ng = [set() for i in range(n+1)]\nfor i in range(n-1):\n    u, v = list(map(int, input().split()))\n    g[u].add(v)\n    g[v].add(u)\n\na = list(map(int, input().split()))\nif a[0] != 1:\n    print(\"No\")\n    return\nptr = 0\ni = 1\n\nwhile i < n:\n    par = a[ptr]\n    while len(g[par]) != 0:\n        if a[i] not in g[par]:\n            print(\"No\")\n            return\n        else:\n            g[par].remove(a[i])\n            g[a[i]].remove(par)\n        i += 1\n    ptr += 1\nprint(\"Yes\")    \n                \n", "from collections import deque\nn=int(input())\nvisited=[False for i in range(n+2)]\ndp=[-1 for i in range(n+2)]\nl=[[] for i in range(n+2)]\nfor i in range(n-1):\n    a,b=list(map(int,input().split()))\n    l[a].append(b)\n    l[b].append(a)\nb=deque(list(map(int,input().split())))\nb.popleft()\ns=deque([1])\nans=\"Yes\"\nvisited[1]=True\nwhile len(b)>0 and len(s)>0:\n    aux=0\n    for i in l[s[0]]:\n        if not visited[i]:\n            visited[i]=True\n            dp[i]=1\n            aux+=1\n    for i in range(aux):\n        x=b.popleft()\n        if dp[x]==1:\n            s.append(x)\n            dp[x]=-1\n        else:\n            ans=\"No\"\n            b=[]\n            break\n    s.popleft()\nprint(ans)\n            \n            \n    \n            \n", "import sys\nfrom collections import deque\nn=int(input())\nvisited=[False for i in range(n+2)]\ndp=[-1 for i in range(n+2)]\nl=[[] for i in range(n+2)]\nfor i in range(n-1):\n    a,b=map(int,input().split())\n    l[a].append(b)\n    l[b].append(a)\nb=deque(map(int,input().split()))\nb.popleft()\ns=deque([1])\nvisited[1]=True\nwhile len(b)>0 and len(s)>0:\n    aux=0\n    for i in l[s[0]]:\n        if not visited[i]:\n            visited[i]=True\n            dp[i]=1\n            aux+=1\n    for i in range(aux):\n        x=b.popleft()\n        if dp[x]==1:\n            s.append(x)\n            dp[x]=-1\n        else:\n            print(\"No\")\n            return\n    s.popleft()\nprint(\"Yes\")", "import sys\nfrom collections import deque\nn=int(input())\nvisited=[False for i in range(n+1)]\ndp=[0 for i in range(n+1)]\nl=[[] for i in range(n+1)]\nfor i in range(n-1):\n    a,b=list(map(int,input().split()))\n    l[a].append(b)\n    l[b].append(a)\nb=list(map(int,input().split()))\ns=[1]\nvisited[1]=True\nc=1\nc1=0\nwhile len(s)!=n :\n    aux=0\n    for i in l[s[c1]]:\n        if not visited[i]:\n            visited[i]=True\n            dp[i]=1\n            aux+=1\n    for i in range(c,c+aux):\n        if dp[b[i]]==1:\n            s.append(b[i])\n            dp[b[i]]=0\n        else:\n            print(\"No\")\n            return\n    c+=aux\n    c1+=1\nprint(\"Yes\")\n", "import sys\nfrom collections import deque\nn=int(input())\nvisited=[False for i in range(n+1)]\ndp=[0 for i in range(n+1)]\nl=[[] for i in range(n+1)]\nfor i in range(n-1):\n    a,b=list(map(int,input().split()))\n    l[a].append(b)\n    l[b].append(a)\nb=list(map(int,input().split()))\ns=[1]\nvisited[1]=True\nc=1\nc1=0\nwhile len(s)!=n :\n    aux=0\n    for i in l[s[c1]]:\n        if not visited[i]:\n            visited[i]=True\n            dp[i]=1\n            aux+=1\n    for i in range(c,c+aux):\n        if dp[b[i]]==1:\n            s.append(b[i])\n            dp[b[i]]=0\n        else:\n            print(\"No\")\n            return\n    c+=aux\n    c1+=1\nprint(\"Yes\")\n", "import sys\nfrom collections import deque\nn=int(input())\nvisited=[False for i in range(n+1)]\ndp=[0 for i in range(n+1)]\nl=[[] for i in range(n+1)]\nfor i in range(n-1):\n    a,b=list(map(int,input().split()))\n    l[a].append(b)\n    l[b].append(a)\nb=list(map(int,input().split()))\ns=[1]\nvisited[1]=True\nc=1\nc1=0\nt=True\nwhile len(s)!=n :\n    aux=0\n    for i in l[s[c1]]:\n        if not visited[i]:\n            visited[i]=True\n            dp[i]=1\n            aux+=1\n    for i in range(c,c+aux):\n        if dp[b[i]]==1:\n            s.append(b[i])\n            dp[b[i]]=0\n        else:\n            print(\"No\")\n            t=False\n            break\n    else:\n        c+=aux\n        c1+=1\n        continue\n    break\nif t:\n    print(\"Yes\")\n"]