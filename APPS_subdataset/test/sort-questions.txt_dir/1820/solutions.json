["for _ in range(int(input())):\n    am = int(input())\n    arr = list(map(int,input().split()))\n    if arr[0] + arr[1] > arr[-1]:\n        print(-1)\n    else:\n        print(1,2,am)", "for _ in range(int(input())):\n    n=int(input())\n    s=list(map(int,input().split()))\n    if s[0]+s[1]<=s[-1]:print(1,2,n)\n    else:print(-1)", "import sys\ninput = sys.stdin.readline\n\nT = int(input())\n\nfor t in range(T):\n    N = int(input())\n    A = [int(_) for _ in input().split()]\n    if A[0] + A[1] <= A[-1]:\n        print(1, 2, N)\n    else:\n        print(-1)\n", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if arr[-1] < arr[0] + arr[1]:\n        print(-1)\n    else:\n        print(1, 2, n)\n", "import sys\nimport math\ndef II():\n\treturn int(sys.stdin.readline())\n\ndef LI():\n\treturn list(map(int, sys.stdin.readline().split()))\n\ndef MI():\n\treturn map(int, sys.stdin.readline().split())\n\ndef SI():\n\treturn sys.stdin.readline().strip()\nt = II()\nfor q in range(t):\n\tn = II()\n\ta = sorted(LI())\n\tif a[0]+a[1]<=a[-1]:\n\t\tprint(1,2,n)\n\telse:\n\t\tprint(-1)", "import sys\ninput = sys.stdin.readline\nfor nt in range(int(input())):\n\tn = int(input())\n\ta = list(map(int,input().split()))\n\tif a[0]+a[1]<=a[-1]:\n\t\tprint (1,2,n)\n\telse:\n\t\tprint (-1)", "for _ in range(int(input())):\n    n=int(input())\n    a=list(map(int,input().split()))\n    if a[0]+a[1]<=a[-1]:\n        print(1,2,n)\n    else:\n        print(-1)\n", "import math\nt=int(input())\nfor w in range(t):\n    n=int(input())\n    l=sorted([int(i) for i in input().split()])\n    if(l[0]+l[1]>l[-1]):\n        print(-1)\n    else:\n        print(1,2,n)", "for _ in range(int(input())):\n    x = int(input())\n    #n, m = map(int, input().split())\n    A = list(map(int, input().split()))\n    if A[0] + A[1] > A[-1]:\n        print(-1)\n    else:\n        print(1, 2, x)", "import sys\ninput = sys.stdin.readline\nfor f in range(int(input())):\n    n=int(input())\n    a=list(map(int,input().split()))\n    if a[0]+a[1]>a[-1]:\n        print(-1)\n    else:\n        print(1,2,n)", "for test in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = a[0]\n    c = a[1]\n    d = a[-1]\n    if c + b > d:\n        print(-1)\n    else:\n        print(1, 2, n)", "import sys\n\ninput=sys.stdin.readline\n\nfor _ in range(int(input())):\n    n=int(input())\n    a=list(map(int,input().split()))\n    if a[0]+a[1]<=a[-1]:\n        print(1,2,n)\n    else:\n        print(-1)\n", "import sys \nimport math\nfrom collections import Counter,defaultdict\ninput = sys.stdin.readline\nLI=lambda:list(map(int,input().split()))\nMAP=lambda:list(map(int,input().split()))\nIN=lambda:int(input())\nS=lambda:input()\n\ndef case():\n    n=IN()\n    a=LI()\n    if a[0]+a[1]>a[-1]:\n        print(-1)\n    else:\n        print(1,2,n)\nfor _ in range(IN()):\n    case()\n\n", "import sys\n\nsys.setrecursionlimit(10 ** 5)\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep=\"\\n\")\ndef II(): return int(sys.stdin.readline())\ndef MI(): return map(int, sys.stdin.readline().split())\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\ndef SI(): return sys.stdin.readline()[:-1]\n\nfor _ in range(II()):\n    n=II()\n    aa=LI()\n    if aa[0]+aa[1]>aa[-1]:print(-1)\n    else:print(1,2,n)\n", "t=int(input())\nfor you in range(t):\n    n=int(input())\n    l=input().split()\n    li=[int(i) for i in l]\n    if(li[0]+li[1]<=li[-1]):\n        print(1,2,n)\n    else:\n        print(-1)\n", "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int,input().split()))\n    if a[0] + a[1] <= a[n - 1]:\n        print(1, 2, n)\n    else:\n        print(-1)", "import sys, math\nimport io, os\n#data = io.BytesIO(os.read(0,os.fstat(0).st_size)).readline\nfrom bisect import bisect_left as bl, bisect_right as br, insort\nfrom heapq import heapify, heappush, heappop\nfrom collections import defaultdict as dd, deque, Counter\n#from itertools import permutations,combinations\ndef data(): return sys.stdin.readline().strip()\ndef mdata(): return list(map(int, data().split()))\ndef outl(var) : sys.stdout.write('\\n'.join(map(str, var))+'\\n')\ndef out(var) : sys.stdout.write(str(var)+'\\n')\nfrom decimal import Decimal\nfrom fractions import Fraction\n#sys.setrecursionlimit(100000)\nINF = float('inf')\nmod = int(1e9)+7\n\nfor t in range(int(data())):\n    n=int(data())\n    a=mdata()\n    if a[0]+a[1]<=a[-1]:\n        print(1,2,n)\n    else:\n        out(-1)", "for _ in range(int(input())):\n    n = int(input())\n    u = list(map(int, input().split()))\n    if u[0] + u[1] <= u[-1]:\n        print(1, 2, n)\n    else:\n        print(-1)\n    \n", "3\nimport sys\ninput = lambda: sys.stdin.readline().strip()\nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    if a[0] + a[1] <= a[-1]:\n        print(1, 2, len(a))\n    else:\n        print(-1)\n", "t = int(input())\nwhile t:\n    t += -1\n    n = int(input())\n    l = list(map(int, input().split()))\n    if l[0] + l[1] <= l[n - 1]: print(1, 2, n)\n    else: print(-1)", "for _ in range (int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    if a[0]+a[1]<=a[-1]:\n        print(1,2,n)\n    else:\n        print(-1)\n", "import sys\nimport math\nfrom functools import reduce\nimport bisect\n\n\ndef getN():\n    return int(input())\n\n\ndef getNM():\n    return list(map(int, input().split()))\n\n\ndef getList():\n    return list(map(int, input().split()))\n\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\n\ndef index(a, x):\n    i = bisect.bisect_left(a, x)\n    if i != len(a) and a[i] == x:\n        return i\n    return False\n\n\n#############\n# MAIN CODE #\n#############\n\nfor _ in range(int(input())):\n    n = getN()\n    arr = getList()\n    if arr[0] + arr[1] <= arr[-1]:\n        print(1, 2, n)\n    else:\n        print(-1)\n"]