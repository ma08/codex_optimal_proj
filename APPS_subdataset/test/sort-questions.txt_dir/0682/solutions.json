["import math\n\nx1, y1, x2, y2 = map(int, input().split())\nif (x1 == x2) and (y1 == y2):\n    print(0, 0, 0)\nelse:    \n    # ladya\n    if (x1 == x2) or (y1 == y2):\n        l = 1\n    else:\n        l = 2\n    \n    #slon\n    if (abs(x1 - x2) == abs(y1 - y2)):\n        s = 1\n    elif ((x1 + y1) % 2 == (x2 + y2) % 2): \n        s = 2\n    else:\n        s = 0\n\n    #korol\n    k = max(abs(x1 - x2), abs(y1 - y2))\n    print(l, s, k)", "r1,c1,r2,c2=map(int,input().split())\n\n#Rook\n\nif(r2!=r1 and c1!=c2):\n    print(2,end=\" \")\nelse:\n    print(1,end=\" \")\n\n\n#Bishop\n\nMoveInOne=False\n\nfor inx in [-1,1]:\n    for iny in [-1,1]:\n        x=r1\n        y=c1\n        while(x>0 and y>0 and x<=8 and y<=8):\n            if(x==r2 and y==c2):\n                MoveInOne=True\n                break\n            x+=inx\n            y+=iny\nif((r1+c1)%2!=(r2+c2)%2):\n    print(0,end=\" \")\nelif(MoveInOne):\n    print(1,end=\" \")\nelse:\n    print(2,end=\" \")\n\nx=abs(r2-r1)\ny=abs(c2-c1)\n\nprint(max(x,y))\n\n\n    \n", "def rook(r1,c1,r2,c2):\n\tif r1==r2 or c1==c2:\n\t\treturn 1\n\telse:\n\t\treturn 2\n\ndef king(r1,c1,r2,c2):\n\tx = abs( c1-c2 )\n\ty = abs( r1-r2 )\n\treturn max( x,y )\n\n\ndef bishop(r1,c1,r2,c2):\n\tif not (r1+c1)%2==(r2+c2)%2:\n\t\treturn 0\n\t\n\tx = abs(r1-r2)\n\ty = abs(c1-c2)\n\tif x==y:\n\t\treturn 1\n\t\n\treturn 2\n\t\n\ndef __starting_point():\n\tr1,c1,r2,c2 = [int(x) for x in input().split()]\n\tr = rook(r1,c1,r2,c2)\n\tb = bishop(r1,c1,r2,c2)\n\tk = king(r1,c1,r2,c2)\n\tprint( str(r)+' '+str(b)+' '+str(k) )\n\t\n\n__starting_point()", "3\n\ndef readln(): return tuple(map(int, input().split()))\n\nr1, c1, r2, c2 = readln()\nans = [0, 0, 0]\nif r1 == r2 or c1 == c2:\n    ans[0] = 1\nelse:\n    ans[0] = 2\nif abs(r1 - r2) == abs(c1 - c2):\n    ans[1] = 1\nelif (abs(r1 - r2) % 2 == 0) == (abs(c1 - c2) % 2 == 0):\n    ans[1] = 2\nans[2] = max(abs(r1 - r2), abs(c1 - c2))\nprint(*ans)\n", "(r1,c1,r2,c2) = input().split()\nr1 = int(r1)\nc1 = int(c1)\nr2 = int(r2)\nc2 = int(c2)\ns = ''\nif r1 == r2 or c1 == c2:\n    s += '1'\nelse:\n    s += '2'\na = r1 + c1\nb = r2 + c2\nif (a + b)%2 == 1:\n    s += ' 0 '\nelif abs(r2-r1) == abs(c2-c1):\n    s += ' 1 '\nelse:\n    s += ' 2 '\na = abs(r1-r2)\nb = abs(c1-c2)\nc =max(a,b)\ns += str(c)\nprint (s)\n    \n", "def stessocolore(x1,y1,x2,y2):\n    if (x1+y1)%2 == (x2+y2)%2:\n        return True\n    else:\n        return False\nx1, y1, x2, y2 = map(int, input().split())\nif x1 == x2 or y1 == y2:\n    rook = 1\nelse:\n    rook = 2\nking = max([abs(x1-x2),abs(y1-y2)])\nif stessocolore(x1,y1,x2,y2):\n    if (x1-y1) == (x2-y2) or x1+y1 == x2+y2:\n        bish = 1\n    else:\n        bish = 2\nelse:\n    bish = 0\n\nprint(rook, bish, king)", "# -*- coding: utf-8 -*-\nfrom collections import deque\n\nr1,c1,r2,c2 = map(int, input().split())\nif r1 == r2 or c1 == c2:\n    n1 = 1\nelse:\n    n1 = 2\n   \nif (r1+c1)%2 != (r2+c2)%2:\n    n2 = 0\nelif r1+c1==r2+c2 or r1-c1==r2-c2:\n    n2 = 1\nelse:\n    n2 = 2\n   \nr_min, r_max, c_min, c_max = min(r1, r2), max(r1, r2), min(c1, c2), max(c1, c2)\nchess = [[0]*9 for i in range(9)]\nq = deque([(r1,c1)])\nn3 = 0\nwhile q:\n    q2 = deque()\n    while q:\n        (r, c) = q.popleft()\n        if (r, c) == (r2, c2):\n            break\n        chess[r][c] = 1\n        if r-1 >= r_min and c-1 >= c_min and not chess[r-1][c-1]:\n            q2.append((r-1, c-1))\n        if r-1 >= r_min and not chess[r-1][c]:\n            q2.append((r-1, c))\n        if r-1 >= r_min and c+1 <= c_max and not chess[r-1][c+1]:\n            q2.append((r-1, c+1))\n        if c-1 >= c_min and not chess[r][c-1]:\n            q2.append((r, c-1))\n        if c+1 <= c_max and not chess[r][c+1]:\n            q2.append((r, c+1))\n        if r+1 <= r_max and c-1 >= c_min and not chess[r+1][c-1]:\n            q2.append((r+1, c-1))\n        if r+1 <= r_max and not chess[r+1][c]:\n            q2.append((r+1, c))\n        if r+1 <= r_max and c+1 <= c_max and not chess[r+1][c+1]:\n            q2.append((r+1, c+1))\n    else:\n        q = q2\n        n3 += 1\n        continue\n    break\n    \nprint(n1, n2, n3)", "# -*- coding: utf-8 -*-\n\nr1,c1,r2,c2 = list(map(int, input().split()))\nif r1 == r2 or c1 == c2:\n    n1 = 1\nelse:\n    n1 = 2\n    \nif (r1+c1)%2 != (r2+c2)%2:\n    n2 = 0\nelif r1+c1==r2+c2 or r1-c1==r2-c2:\n    n2 = 1\nelse:\n    n2 = 2\n\nprint(n1, n2, max(abs(r1-r2), abs(c1-c2)))\n", "r1, c1, r2, c2 = map(int, input().split())\n\ndef rookMoves():\n  return 1 if r1 == r2 or c1 == c2 else 2\ndef bishopMoves():\n  if (r1 + c1) % 2 != (r2 + c2) % 2:\n    return 0\n  if r1 + c1 == r2 + c2 or r1 - c1 == r2 - c2:\n    return 1\n  return 2\ndef kingMoves():\n  return max(abs(r1 - r2), abs(c1 - c2))\n\nprint(rookMoves(), bishopMoves(), kingMoves())", "__author__ = 'widoc'\n\nr1, c1, r2, c2 = list(map(int, input().split()))\n\na1 = 1 if r1 == r2 or c1 == c2 else 2\na2 = 0\nif abs(r1-r2) == abs(c1-c2):\n    a2 = 1\nelif (abs(r1-r2) + abs(c1-c2)) % 2 == 0:\n    a2 = 2\na3 = max(abs(r1-r2),abs(c1-c2))\n\nprint(a1, a2, a3)\n\n", "from math import fabs\na=[int(i)for i in input().split()]\nif(a[0]==a[2])|(a[1]==a[3]):print(1,end=' ')\nelse:print(2,end=' ')\nb,c=fabs(a[2]-a[0]),fabs(a[3]-a[1])\nif b%2!=c%2:print(0,end=' ')\nelif b==c:print(1,end=' ')\nelse:print(2,end=' ')\nprint(int(max(fabs(a[2]-a[0]),fabs(a[3]-a[1]))))", "def main():\n    r1, c1, r2, c2 = list(map(int, input().split()))\n    _1, _2, _3 = 2, 2, 0\n   \n    if r1 == r2 or c1 == c2:\n        _1 = 1\n    \n    if (r1+c1) % 2 != (r2+c2) % 2:\n        _2 = 0\n    elif r1 + c1 == r2 + c2 or r1 - c1 == r2 - c2:\n        _2 = 1\n\n    _3 = max(abs(r1-r2), abs(c1-c2))\n    print(_1, _2, _3)\n\n\ndef __starting_point():\n    main()\n\n\n__starting_point()", "a,b,c,d=list(map(int,input().split()))\na = abs(a-c)\nb = abs(b-d)\n\nx = min(a, 1)+min(b, 1)\ny = max(a, b)\nz = 2\nif a==b:\n    z=1\nif a+b==0 or (a+b)%2:\n    z=0\n\nprint(x, z, y)\n", "import sys\nimport math\n\nr1, c1, r2, c2 = [int(x) for x in (sys.stdin.readline()).split()]\n\nres = []\nif(r1 == r2 and c1 == c2):\n    print(\"0 0 0\")\n    return\n\nif(r1 == r2 or c1 == c2):\n    res.append(\"1\")\nelse:\n    res.append(\"2\")\n\nf1 = ((r1 + c1) % 2 == 0)\nf2 = ((r2 + c2) % 2 == 0)\n\nif(f1 != f2):\n    res.append(\"0\")\nelif(math.fabs(r1 - r2) == math.fabs(c1 - c2)):\n    res.append(\"1\")\nelse:\n    res.append(\"2\")\n\nres.append(str(int(max(math.fabs(r1 - r2), math.fabs(c1 - c2)))))\n\nprint(\" \".join(res))", "import math\nx1,y1,x2,y2 = tuple(int(i) for i in input().split())\nV = [[0 for j in range(10)] for i in range(10)]\n\ndef black(x,y):\n\tif(x%2==1):\n\t\treturn y%2==1\n\telse:\n\t\treturn y%2==0\na = 2\nb = 0\nc = 0\n\nif(x1==x2):\n\ta-=1\nif(y1==y2):\n\ta-=1\n\nif(abs(x1-x2)==abs(y1-y2)):\n\tb=1\nelif black(x1,y1)==black(x2,y2):\n\tb=2\nelse:\n\tb=0\n\nc = max(abs(x1-x2),abs(y1-y2))\nprint(a,b,c)", "\ndef rook(r1,c1,r2,c2):\n    if r1==r2 or c1==c2:\n        return 1\n    else:\n        return 2\n\ndef bishop(r1,c1,r2,c2):\n    s1 = r1+c1\n    s2 = r2+c2\n    if (s1%2==0 and s2%2!=0) or (s1%2!=0 and s2%2==0):\n        return 0\n    elif abs(r1-r2)==abs(c1-c2):\n        return 1\n    else:\n        return 2\n\ndef king(r1,c1,r2,c2):\n    mine = abs(r1-r2)+abs(c1-c2)\n    #move horizonatal\n    for i in range(1,9):\n        if abs(i-r2)==abs(c1-c2):\n            mine = min(mine,abs(i-r1)+abs(c1-c2))\n    for i in range(1,9):\n        if abs(i-c2)==abs(r1-r2):\n            mine = min(mine,abs(i-c1)+abs(r2-r1))\n    return mine\n\ns = input().split()\nr1 = int(s[0])\nc1 = int(s[1])\nr2 = int(s[2])\nc2 = int(s[3])\nans = str(rook(r1,c1,r2,c2))+\" \"+str(bishop(r1,c1,r2,c2))+\" \"+str(king(r1,c1,r2,c2))\nprint(ans)\n", "\ndef foo():\n   inp = input()\n   r1, c1, r2, c2 = map(int, inp.split())\n   if (r1 == r2 or c1 == c2):\n      print(\"1\", end = \" \")\n   else:\n      print(\"2\", end = \" \")\n\n   if ((r1 + c1) % 2) != ((r2 + c2) % 2):\n      print(\"0\", end = \" \")\n   elif (r1 - c1 == r2 - c2 or r1 + c1 == r2 + c2):\n      print(\"1\", end = \" \")\n   else:\n      print(\"2\", end = \" \")\n\n   print(max(abs(r1 - r2), abs(c1 - c2)))\n\nfoo()", "import math\nr1, c1, r2, c2 = input().split()\nr1 = int(r1)\nc1 = int(c1)\nr2 = int(r2)\nc2 = int(c2)\nl = []\nif math.fabs(r1 - r2) == 0 or math.fabs(c1 - c2) == 0:\n    l.append(1)\nelse:\n    l.append(2)\nif math.fabs(r1 - r2) == math.fabs(c1 - c2):\n    l.append(1)\nelif (r1 + c1) % 2 == (r2 + c2) % 2:\n    l.append(2)\nelse:\n    l.append(0)\nl.append(int(max(math.fabs(r1 - r2), math.fabs(c1 - c2))))\n\nfor i in l:\n    print(i, end=\" \")", "def sign(num):\n\treturn -1 if num < 0 else 1\n\ndef rook(cord):\n\tif cord[0] == cord[2] and cord[1] == cord[3]:\n\t\treturn 0\n\tif cord[0] == cord[2] or cord[1] == cord[3]:\n\t\treturn 1\n\treturn 2 \n\ndef bishop(cord):\n\tif (cord[0] + cord[1]) % 2 != (cord[2] + cord[3]) % 2:\n\t\treturn 0\n\telif (cord[0] - cord[1] == cord[2] - cord[3]) or (cord[0] + cord[1] == cord[2] + cord[3]):\n\t\treturn 1\n\treturn 2\n\ndef king(cord):\n\treturn max(abs(cord[0] - cord[2]), abs(cord[1] - cord[3]))\n\ncord = list(map(int, input().split()))\nprint(rook(cord), bishop(cord), king(cord))\n", "read = lambda: list(map(int, input().split()))\nr1, c1, r2, c2 = read()\nL = 1 if r1 == r2 or c1 == c2 else 2\nK = max(abs(r1 - r2), abs(c1 - c2))\nif abs(r1 - r2) == abs(c1 - c2): S = 1\nelif (r1 + c1) % 2 == (r2 + c2) % 2: S = 2\nelse: S = 0\nprint(L, S, K)\n", "a = input().split()\n\nx1 = int(a[0])\ny1 = int(a[1])\nx2 = int(a[2])\ny2 = int(a[3])\n\nrook = 0\nbishop = 0\nking = 0\n\n#rook\nif (y1==y2) ^ (x1==x2):\n    rook=1\nelif y1==y2 and x1==x2:\n    rook=0\nelse: rook=2\n\n#bishop\nif (x1==x2 and y1==y2) or ((abs(x1-x2))%2 != (abs(y1-y2))%2):\n    bishop = 0\nelif abs(x1-x2) == abs(y1-y2):\n    bishop = 1\nelse: bishop = 2\n\n#king\nwhile x1!=x2 and y1!=y2:\n    if x1<x2:\n        x1+=1\n    elif x1>x2:\n        x1-=1\n    if y1<y2:\n        y1+=1\n    elif y1>y2:\n        y2+=1\n    king+=1\nwhile x1!=x2:\n    if x1<x2:\n        x1+=1\n    elif x1>x2:\n        x1-=1\n    king+=1\nwhile y1!=y2:\n    if y1<y2:\n        y1+=1\n    elif y1>y2:\n        y2+=1\n    king+=1\n\nprint(rook,bishop,king)\n"]