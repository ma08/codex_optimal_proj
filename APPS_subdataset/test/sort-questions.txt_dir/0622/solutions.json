["n, k = map(int, input().split())\n\nres = 1\nwhile (k % 2 == 0):\n    res += 1\n    k //= 2\nprint(res)", "def main():\n    n, k = list(map(int, input().split()))\n    while (n != 0):\n        if (k == (2**(n - 1))):\n            print(n)\n            return\n        else:\n            k = k % (2**(n - 1))\n        n -= 1\nmain()", "n, k = list(map(int, input().split()))\nres = 1\nwhile (k & 1) == 0:\n  k >>= 1\n  res += 1\nprint(res)\n", "n, k = map(int, input().split())\ni = 1\nwhile (k % 2 == 0):\n    k /= 2\n    i += 1\nprint(i)", "def f(n, k):\n    m = our[n]\n    if m // 2 + 1 == k:\n        return n\n    return f(n - 1, k % (m // 2 + 1))\n\n\nour = [0, 1]\nn, k = map(int, input().split())\nwhile len(our) <= n + 1:\n    our.append(our[-1] * 2 + 1)\nprint(f(n, k))", "n, k = list(map(int, input().split()))\nfinish = False\nlength = 1\nfor i in range(n-1):\n    length = length * 2 + 1    \nwhile n!=1:\n    gran = length // 2 + 1\n    if k == gran:\n        print(n)\n        finish = True\n        break\n    if k < gran:\n        length = length // 2\n        n -= 1\n    if k > gran:\n        k -= (length // 2 + 1)\n        length = length // 2\n        n -= 1  \nif not finish:\n    print(1)\n\n", "n,k = map(int,input().split())\n\ndef f(i,j):\n    l = (1<<(i-1))\n    if j==l:\n        return i\n    elif j<l:\n        return f(i-1, j)\n    else:\n        return f(i-1, l-(j-l))\n\nprint(f(n,k))", "def go(n, m):\n    t = 2**(n-1)\n    if m == t:\n        return n\n    else:\n        if m < t:\n            return go(n-1, m)\n        else:\n            return go(n-1, m-t)\nn, m = map(int, input().split())\nprint(go(n, m))", "def p(n, k):\n    if k == 2 ** (n - 1):\n        return(n)\n    if k > 2 ** (n - 1):\n        k -= 2 ** (n - 1)\n    return p(n - 1, k)\n\nn, k = map(int, input().split())\nprint(p(n, k))", "n, k = [int(x) for x in input().strip().split(\" \")]\nle = 2**n - 1\n\ndef binsearch(level, le, ind):\n\tif level == 1:\n\t\treturn 1\n\tif ind == le // 2 + 1:\n\t\treturn level\n\tif ind > le // 2 + 1:\n\t\tind -= le // 2 + 1\n\treturn binsearch(level-1, le//2, ind)\n\nprint(binsearch(n,le,k))", "n, k = list(map(int, input().split()))\nk -= 1\nx = 1\nwhile True:\n    if k % 2 ** x == 2 ** (x - 1) - 1:\n        print(x)\n        break\n    x += 1", "n, k = map(int, input().split())\n\ns = 0\nwhile not(k % 2):\n    s += 1\n    k //= 2\n    \nprint(s + 1)", "def rec(depth, pos):\n    if pos > 2 ** (depth - 1):\n        rec(depth - 1, pos - 2 ** (depth - 1))\n    elif pos == 2 ** (depth - 1):\n        print(depth)\n        return\n    else:\n        rec(depth - 1, pos)\n    return\n\nn, k = [int(i) for i in input().split()]\nrec(n, k)", "n, k = list(map(int, input().split()))\n\ndef nk(n, k):\n    if n == 1: return 1\n    t = 2**(n-1)\n    if k == t: return n\n    if k < t: return nk(n-1,k)\n    else: return nk(n-1,k-t)\n\nprint(nk(n, k))", "import sys\nn, k = list(map(int, input().split()))\nv = k\nk -= 1\nsum = 0\nfor i in range(1, n + 1):\n    if ((k - sum) % 2 == 0):\n        print(i)\n        break\n    sum += v // (1 << i)\n", "n, k = [int(s) for s in input().split()]\n\nlengths = [1]\n\nn, k = n-1, k-1\n\nfor i in range(n):\n    lengths.append(lengths[-1] * 2 + 1)\n\ndef search(n, k):\n    if k == 0:\n        return 1\n    l = lengths[n]\n    if k == l // 2:\n        return n + 1\n    if k < l // 2:\n        return search(n-1, k)\n    else:\n        return search(n-1, k - l//2 - 1)\n\nprint(search(n, k))\n", "n, k = map(int, input().split())\n\ndef dfs(q, d):\n    q = q % (2**(d-1))\n    if (q == 0):\n        print(d)\n    else:\n        dfs(q, d-1)\n\ndfs(k, n)", "n , k = map(int, input().split())\nres = 0\nwhile k % 2 == 0:\n    k /= 2\n    res += 1\nprint(res + 1)", "n, k = map(int, input().split())\nnow = n\nwhile True:\n    if k == 2 ** (now - 1):\n        print(now)\n        break\n    else:\n        now -= 1\n        k %= 2 ** now", "import string\nimport math\n\nline=input()\nn=int(line.split(\" \")[0])\nk=int(line.split(\" \")[1])\n\ndef search(l,r,k,dep):\n    mid=(l+r)/2\n    if k==mid or l==r:\n        return(dep)\n    if k<mid:\n        return search(l,mid-1,k,dep-1)\n    if k>mid:\n        return search(mid+1,r,k,dep-1)\n\nprint(search(1,pow(2,n)-1,k,n))\n", "def solve(n, k):\n    if n == 1:\n        return 1\n    if k == 2 ** (n - 1):\n        return n\n    return solve(n - 1, k % (2 ** (n - 1)))\n\nn, k = map(int, input().split())\nprint(solve(n, k))", "n, k = map(int, input().split())\na = 0\nwhile k % 2 == 0:\n    a += 1\n    k /= 2\nprint(a + 1)", "# coding=utf-8\n__author__ = 'Alexander'\n\n\ndef f(n,k):\n    t = 2 ** (n-1)\n\n    if k == t:\n        return n\n    elif k < t:\n        return f(n-1, k)\n    else:\n        return f(n-1, k-t)\n\nn, k = map(int,input().split())\n\nprint(f(n,k))", "n, k = map(int, input().split())\ncnt = 0\nwhile k % 2 == 0:\n    k = k // 2\n    cnt += 1\nprint(cnt + 1)", "import math\n\nn, k = list(map(int, input().split()))\narr = reversed([int(math.pow(2, i)) for i in range(50)])\n\nfor index, num in enumerate(arr):\n\tif k % num == 0:\n\t\tprint(50 - index)\n\t\tbreak"]