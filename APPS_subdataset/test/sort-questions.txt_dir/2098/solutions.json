["from copy import deepcopy\nimport itertools\nfrom bisect import bisect_left\nfrom bisect import bisect_right\nimport math\nfrom collections import deque\nfrom collections import Counter\n\n\ndef read():\n    return int(input())\n\n\ndef readmap():\n    return map(int, input().split())\n\n\ndef readlist():\n    return list(map(int, input().split()))\n\n\nn = read()\nV = []\nfor _ in range(n-1):\n    a, b = readmap()\n    V.append(a)\n    if b < n:\n        print(\"NO\")\n        quit()\n\nV.sort()\n\nfor i in range(n-1):\n    if V[i] <= i:\n        print(\"NO\")\n        quit()\n\nused = [False] * (n+1)\ntree = []\nfor i in range(n-1):\n    v = V[i]\n    if not used[v]:\n        tree.append(v)\n        used[v] = True\n    else:\n        for j in range(1, n+1):\n            if not used[j]:\n                tree.append(j)\n                used[j] = True\n                break\ntree.append(n)\n\nprint(\"YES\")\nfor i in range(n-1):\n    print(tree[i], tree[i+1])", "n = int(input())\nV = []\nfor _ in range(n-1):\n    a,b  = map(int, input().split())\n    V.append(a)\n    if b <n:\n        print('NO')\n        quit()\nV.sort()\nfor i in range(n-1):\n    if V[i]<=i:\n        print(\"NO\")\n        quit()\nused = [False]*(n+1)\ntree = []\nfor i in range(n-1):\n    v = V[i]\n    if not used[v]:\n        tree.append(v)\n        used[v]=True\n    else:\n        for j in range(1,n+1):\n            if not used[j]:\n                tree.append(j)\n                used[j] = True\n                break\ntree.append(n)\nprint(\"YES\")\nfor i in range(n-1):\n    print(tree[i],tree[i+1])                               "]