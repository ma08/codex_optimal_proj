["t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    lims = [tuple(int(v) for v in input().split()) for _ in range(n)]\n    ctime = 0\n    ans = []\n    for l, r in lims:\n        if l >= ctime:\n            ans.append(l)\n            ctime = l + 1\n        elif r < ctime:\n            ans.append(0)\n        else:\n            ans.append(ctime)\n            ctime += 1\n    print(' '.join(str(v) for v in ans))\n", "t = int(input())\nans1 = []\nfor i in range(t):\n    n=int(input())\n    st=[]\n    for i in range(n):\n        l,r = map(int,input().split())\n        st.append((l,r,i))\n    st = sorted(st, key=lambda x: (x[0], x[2]))\n    ans = []\n    f = -1\n    for s in st:\n        if s[1] < f:\n            ans.append(0)\n        else:\n            ans.append(max(f, s[0]))\n            f = ans[-1]+1\n    ans1.append(ans)\nfor ans2 in ans1:\n    print(' '.join([str(i) for i in ans2]))", "T = int(input())\nfor _ in range(T):\n    n = int(input())\n    studs = [list(map(int,input().split())) for _ in range(n)]\n    t = 0\n    out = [0]*n\n    cs = 0\n    while len(studs)>0:\n        t += 1\n        if studs[0][0]<=t and studs[0][1] >= t:\n            out[cs] = t\n            cs += 1\n            studs.pop(0)\n        elif studs[0][0] <= t:\n            cs += 1\n            studs.pop(0)\n            t -= 1\n    print(' '.join(map(str,out)))\n", "def main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        ss = []\n        for i in range(n):\n            l, r = [int(x) for x in input().split()]\n            ss.append((l, i, r))\n        \n        ttt = []\n        cc = 0\n        for t in ss:\n            \n            if t[0] >= cc:\n                ttt.append(t[0])\n                cc = t[0] + 1\n            elif cc > t[2]:\n                ttt.append(0)\n            else:\n                ttt.append(cc)\n                cc += 1\n        \n        print(' '.join(str(x) for x in ttt))\n            \n                \n        \n            \n\n    \ndef __starting_point():\n    main()\n\n__starting_point()", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    students = []\n    for i in range(n):\n        students.append(list(map(int, input().split())))    \n    time = 0\n    ans = []\n    for i in students:\n        l = i[0]\n        r = i[1]\n        if r < time:\n            ans.append(0)\n            continue\n        else:\n            ans.append(max(time, l))\n            time = max(time + 1, l + 1)\n    print(*ans)", "read = lambda: map(int, input().split())\nT = int(input())\nfor ____ in range(T):\n    n = int(input())\n    a = []\n    for _ in range(n):\n        a.append(list(read()))\n    t = 0\n    while a:\n        b = a[0][0]\n        if b >= t:\n            t = b\n            print('%d ' % t, end='')\n        else:\n            if t > a[0][1]:\n                print('0 ', end='')\n                del a[0]\n                continue\n            else:\n                print('%d ' % t, end='')\n        t += 1\n        del a[0]\n    print()\n", "t = int(input())\nfor _ in range(t):\n\tn = int(input())\n\td = []\n\tfor i in range(n):\n\t\td.append(list(map(int, input().split())) + [i])\n\td.sort(key = lambda x: x[1])\n\td.sort(key = lambda x: x[2])\n\td.sort(key = lambda x: x[0])\n\tres = [[d[0][0], d[0][2]]]\n\tc = d[0][0]\n\ti = 0\n\twhile i < len(d):\n\t\twhile i < len(d) and d[i][1] < c:\n\t\t\tres.append([0, d[i][2]])\n\t\t\ti += 1\n\t\tif i < len(d):\n\t\t\tc = max(c + 1, d[i][0] + 1)\n\t\t\tres.append([c - 1, d[i][2]])\n\t\ti += 1\n\tres.pop(0)\n\tres.sort(key = lambda x: x[1])\n\tz = [res[i][0] for i in range(len(res))]\n\tprint(*z)\n", "# cook your dish here\n# from math import * \nfor _ in range(int(input().strip())):\n    n=int(input())\n    t=1 \n    l=[]\n    for __ in range(n):\n        l.append(list(map(int,input().split())))\n    i=0\n    ans=[]\n    t=1\n    while t<=5002:\n        if l[i][0]>t:\n            t+=1\n            continue\n        if l[i][0]<=t and l[i][1]>=t:\n            ans.append(t)\n            t+=1\n            i+=1 \n        else:\n            ans.append(0)\n            i+=1\n        if i==n:\n            break\n    print(*ans)        \n        \n", "# Put them all in queue in order of l. At popping check: should they be in? (time++)Should they be already out? (0)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = [[int(i) for i in input().split()] + [i] for i in range(n)]\n    timearr = [0 for i in range(n)]\n    checked = 0\n    currtime = 1\n    arr.sort(key=lambda a:a[0])\n    while checked < n:\n        if arr[checked][0] > currtime:\n            currtime += 1\n        elif arr[checked][1] < currtime:\n            checked += 1\n        else:\n            timearr[arr[checked][2]] = currtime\n            currtime += 1\n            checked += 1\n    print(' '.join(str(i) for i in timearr))\n\n\n\n\n", "t = int(input())\nfor y in range(t):\n    n = int(input())\n    data = []\n    tim = 1\n    ans = []\n    for st in range(n):\n        l, r = [int(x) for x in input().split()]\n        if(tim <= l):\n            tim = l\n            ans.append(tim)\n            tim +=1\n            continue\n        if(tim <= r):\n            ans.append(tim)\n        else:\n            ans.append(0)\n            continue\n        tim+=1\n\n    print(*ans)\n    #    data.append([int(x) for x in input().split()])\n    \n\n", "#!/usr/bin/env python3\nfrom sys import stdin, stdout\n\ndef rint():\n    return list(map(int, stdin.readline().split()))\n#lines = stdin.readlines()\n\n\nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    lb, rb = 0, 0\n    ct = 0\n    ans = []\n    for __ in range(n):\n        lc, rc = rint()\n        if lc >= ct:\n            ans.append(lc)\n            ct = lc+1\n        elif ct <= rc:\n            ans.append(ct)\n            ct += 1\n        else:\n            ans.append(0)\n\n    print(*ans)\n", "from collections import deque\ndef solve(X):\n\n  waiting = deque()\n  res = [None]*len(X)\n  t = 0\n  X.append((10000,10000))\n  for i,(l,r) in enumerate(X):\n    while waiting and t < l:\n      j,b = waiting.popleft()\n      if t <= b:\n        res[j] = t\n        t += 1\n      else:\n        res[j] = 0 \n    waiting.append((i,r))\n    t = l\n\n  return res\n\nT = int(input())\nfor _ in range(T):\n  n = int(input())\n  X = [tuple(map(int,input().split())) for _ in range(n)]\n  res = solve(X)\n  print(' '.join(map(str,res)))", "def solve(students):\n    k = 1\n    for s in students:\n        if s[1] < k:\n            print(0, end=\" \")\n        else:\n            print(max(s[0], k), end=\" \")\n            if k < s[0]:\n                k = s[0] + 1\n            else:\n                k += 1\n    print()\n\n\ntests = int(input())\nwhile tests:\n    tests -= 1\n    n = int(input())\n    st = []\n    for _ in range(n):\n        st.append(list(map(int, input().split())))\n    solve(st)\n", "for repeat in range(int(input())):\n    studentsnum = int(input())\n    res = \"\"\n    laststudent = 0\n    for i in range(studentsnum):\n        inp = input().split(\" \", 1)\n        arrival = int(inp[0])\n        departure = int(inp[1])\n        if arrival > laststudent:\n            laststudent = arrival\n        if departure < laststudent:\n            res = res + str(0) + \" \"\n        else:\n            res = res + str(laststudent) + \" \"\n            laststudent = laststudent + 1\n    print(res)\n            \n", "# B\n\nt = int(input())\nans = []\n\nfor _ in range(t):\n    n = int(input())\n    L = []\n    R = []\n    for _ in range(n):\n        l, r = list(map(int, input().split()))\n        L.append(l)\n        R.append(r)\n    time = [0 for _ in range(n)]       # time[j] \u306f\u4eba j \u306e\u5f85\u3061\u6642\u9593\n    flag = [0 for _ in range(n)]       # \u5f85\u3061\u304b\u5426\u304b\u306e\u30d5\u30e9\u30b0\n    for i in range(1, max(R)+1):            # i \u306f\u6642\u9593\n        for j in range(n):\n            if L[j] == i:\n                flag[j] = 1\n        for j in range(n):\n            if flag[j] == 1:\n                flag[j] = 0\n                time[j] = i\n                break\n        for j in range(n):\n            if flag[j] == 1 and R[j] == i:\n                flag[j] = 0\n    ans.append(time)\n\nfor i in range(t):\n    answer = list(map(str, ans[i]))\n    print(\" \".join(answer))\n", "import queue\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    q = queue.Queue()\n    answer = []\n    current_sec = 1\n    for j in range(n):\n        s = input().split(\" \")\n        l = int(s[0])\n        r = int(s[1])\n\n        while l > current_sec:\n            if not q.empty():\n                time = q.get()\n                if time >= current_sec:\n                    answer.append(str(current_sec))\n                    current_sec += 1\n                else:\n                    answer.append(\"0\")\n            else:\n                current_sec = l\n\n\n        if l == current_sec:\n            q.put(r)\n\n    while not q.empty():\n        time = q.get()\n        if time >= current_sec:\n            answer.append(str(current_sec))\n            current_sec += 1\n        else:\n            answer.append(\"0\")\n\n\n    res = \" \".join(answer)\n    print(res)", "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    l = [[] for _ in range(5001)]\n    r = [[] for _ in range(5001)]\n    a = [-1 for _ in range(n)]\n    for i in range(n):\n        l0, r0 = input().split()\n        l[int(l0)].append(i)\n        r[int(r0)].append(i)\n\n    q = []\n    for e, (l, r) in enumerate(zip(l, r)):\n        for h in sorted(l):\n            q.insert(0, h)\n        if q:\n            ch = q.pop()\n            a[ch] = e\n        for h in r:\n            if h in q:\n                q.remove(h)\n                a[h] = 0\n\n    print(*a)\n", "t = int(input())\nbo = []\nfor i in range(t):\n    n = int(input())\n    mr = 0\n    b = [-2] * n\n    l = []\n    r = []\n    for j in range(n):\n        x, y = map(int, input().split())\n        if y > mr:\n            mr = y\n        l.append(x)\n        r.append(y)\n    j = 1\n    k = 0\n    h = 0\n    while j <= mr:\n        if k < n and l[k] == j:\n            b[k] = -1\n            k += 1\n            continue\n        for o in range(n):\n            if b[o] == -1:\n                b[o] = j\n                break\n        for o in range(n):\n            if r[o] == j and b[o] == -1:\n                b[o] = 0\n        j += 1\n    bo.append(b)\nfor i in range(t):\n    print(' '.join(map(str, bo[i])))", "# Imports\n\n\n##############################################\n# Input\n\nt = int(input())\n##############################################\n# Timer start\nfrom time import time\nstart_time = time()\n##############################################\n# Main code\n\n\nfor tt in range(t):\n    n = int(input())\n\n    stud = []\n    for nn in range(n):\n        s = tuple(map(lambda x:int(x), input().split()))\n        stud.append(s)\n\n    res = 0\n    for i in range(n):\n        (l, r) = stud[i]\n        if i == 0:\n            res = l + 1\n            print(l, end=\" \")\n            continue\n\n        newres = max(l, res)\n        if newres > r: # go out\n            res = newres\n            print(0, end=\" \")\n        else:\n            print(newres, end=\" \")\n            res = newres + 1\n\n    print()\n\n\n\n\n\n", "import heapq\n\ndef tea_list(students):\n    teatimes = [0] * len(students)\n    events = []\n    for i, (a, l) in enumerate(students):\n        events.append((a, 0, (a, i, l)))\n    heapq.heapify(events)\n    queue_len = 0\n    while events:\n        t, etype, e = heapq.heappop(events)\n        if etype == 0:\n            a, i, l = e\n            if a + queue_len <= l:\n                heapq.heappush(events, (a + queue_len, 1, i))\n                queue_len += 1\n        elif etype == 1:\n            queue_len -= 1\n            teatimes[e] = t\n    return teatimes\n\n        \n\ndef main():\n    T = int(input())\n    for _ in range(T):\n        N = int(input())\n        students = [tuple(int(x) for x in input().split()) for _ in range(N)]\n        print(*tea_list(students))\n\ndef __starting_point():\n    main()\n\n__starting_point()", "t = int(input())\nfor test_index in range(t):\n    n = int(input())\n    list_of_students = []\n    for i in range(n):\n        l, r = map(int, input().split())\n        list_of_students.append((i, l, r))\n    sorted_list = sorted(list_of_students, key = lambda x: (x[1], x[0]), reverse=True)\n#    print(sorted_list)\n    current_time = 1\n    answer = [0 for i in range(n)]\n    while (len(sorted_list) > 0):\n        current_customer = sorted_list.pop()\n        if current_time < current_customer[1]:\n            current_time = current_customer[1]\n#        print(current_time, current_customer)\n        if current_time > current_customer[2]:\n            continue\n        answer[current_customer[0]] = current_time\n        current_time += 1\n    for x in answer:\n        print(x, end=\" \")\n    print()\n", "from collections import deque\ndef solve(ar):\n    res = []\n    time = 0\n    for l, r in ar:\n        if r >= time:\n            if time == 0:\n                time = l + 1\n                res.append(l)\n            else:\n                if l >= time: time = l\n                res.append(time)\n                time += 1\n        else:\n            res.append(0)\n    return res\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = []\n    for i in range(n):\n        a.append(deque(int(x) for x in input().split()))\n    print(*solve(a))\n"]