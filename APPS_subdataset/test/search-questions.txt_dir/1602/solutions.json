["import sys\n\nn = int(sys.stdin.readline().strip())\na = list(map(int, sys.stdin.readline().strip().split()))\nb = a[:]\nC = [0] * n\nx = [0] * n\nfor i in range (0, 40):\n    for j in range (0, n):\n        x[j] = b[j] % 2\n        b[j] = b[j] // 2\n    if sum(x) == 1:\n        for j in range (0, n):\n            if x[j] == 1:\n                C[j] = C[j] + 2 ** i\nl = C.index(max(C))\nprint(\" \".join(list(map(str, [a[l]]+a[0:l]+a[l+1:]))))\n", "def main():\n    import sys\n    input = sys.stdin.readline\n\n    N = int(input())\n    A = list(map(int, input().split()))\n\n    for j in range(32, -1, -1):\n        flg = 0\n        for i, a in enumerate(A):\n            if a >> j & 1:\n                flg += 1\n                idx = i\n                if flg == 2:\n                    break\n        if flg == 1:\n            A[0], A[idx] = A[idx], A[0]\n            print(*A)\n            return\n    print(*A)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import sys\n\n# inf = open('input.txt', 'r')\n# reader = (line.rstrip() for line in inf)\nreader = (line.rstrip() for line in sys.stdin)\ninput = reader.__next__\n\nn = int(input())\na = list(map(int, input().split()))\ndigits = [[] for _ in range(32)]\nfor i, val in enumerate(a):\n    shift = 0\n    while val > 0:\n        if val & 1:\n            digits[shift].append(i)\n        val >>= 1\n        shift += 1\n\nfor i in reversed(list(range(32))):\n    if len(digits[i]) == 1:\n        idx = digits[i][0]\n        a[0], a[idx] = a[idx], a[0]\n        break\n\nprint(*a)\n\n# inf.close()\n", "n = int(input())\na = [int(i) for i in input().split()]\nonce = 0\ntwice = 2**64\nfor i in a:\n    twice |= (once & i)\n    once |= i\na = sorted([(i & ~twice,i) for i in a],reverse=True)\na = [j for i,j in a]\nprint(*a)\n", "\nn = int(input())\n\na = list(map(int,input().split()))\n\nlis = [0] * 31\n\nfor i in a:\n\n    for j in range(31):\n\n        if i & (2**j) > 0:\n            lis[j] += 1\n\n\nnmax = 0\nmaxind = 0\nfor ind,i in enumerate(a):\n\n    for j in range(31):\n\n        if lis[j] >= 2:\n\n            i |= 2**j\n            i -= 2**j\n\n    if nmax < i:\n        nmax = i\n        maxind = ind\n\nans = [a[maxind]]\n\nfor i in range(n):\n\n    if i != maxind:\n        ans.append(a[i])\n\nprint(\" \".join(map(str,ans)))\n", "n=int(input())\nl=list(map(int,input().split()))\nd={}\nfor i in l:\n    b=bin(i)[:1:-1]\n    for j in range(len(b)):\n        if int(b[j]):\n            d[j]=d.get(j,[])\n            d[j].append(i)\nfor i in range(31,-1,-1):\n    if len(d.get(i,[]))==1:\n        v=d[i].pop()\n        print(v,end=' ')\n        k=0\n        for j in l:\n            if j==v and k<1:k+=1\n            else:print(j,end=' ')\n        quit()\nprint(' '.join(map(str,l)))", "n = int(input())\na = list(map(int, input().split()))\n\nfor d in range(29, -1, -1):\n    bit = 1 << d\n    count, j = 0, 0\n    for i, x in enumerate(a):\n        if bit & x:\n            count += 1\n            if count == 2:\n                break\n            else:\n                j = i\n    if count == 1:\n        print(a[j], *(a[:j] + a[j+1:]))\n        break\nelse:\n    print(*a)\n", "n=int(input())\nl=list(map(int,input().split()))\ncnt=[0]*30\nfor i in range(n):\n\tfor j in range(30):\n\t\tif l[i]&(1<<j):\n\t\t\tcnt[j]+=1\noptions=[i for i in range(n)]\nfor i in range(29,-1,-1):\n\tnewoptions=[]\n\tif cnt[i]==1:\n\t\tfor idx in options:\n\t\t\tif l[idx]&(1<<i):\n\t\t\t\tnewoptions.append(idx)\n\tif len(newoptions)>0:\n\t\toptions=newoptions\nprint(l[options[0]],end=\" \")\nfor i in range(n):\n\tif i!=options[0]:\n\t\tprint(l[i],end=\" \")\n", "from collections import defaultdict\n\n\ndef solve(A, N):\n    assert len(A) == N\n    bitCover = defaultdict(int)\n    for x in A:\n        for i in range(32):\n            if (1 << i) & x:\n                bitCover[i] += 1\n    # Everything that is covered will be deleted in the final result\n    best = (0,)\n    for j, x in enumerate(A):\n        result = 0\n        for i in range(32):\n            if (1 << i) & x:\n                if bitCover[i] == 1:\n                    result += 1 << i\n        best = max(best, (result, j))\n\n    j = best[1]\n    A = [A[j]] + A[:j] + A[j + 1 :]\n    return ' '.join(map(str, A))\n\n\ndef __starting_point():\n    N, = list(map(int, input().split()))\n    A = list(map(int, input().split()))\n    ans = solve(A, N)\n    print(ans)\n\n__starting_point()", "from collections import defaultdict\nn = int(input())\nxs = list(map(int, input().split()))\ncount = defaultdict(int)\nfor x in xs:\n    for i, b in enumerate(reversed(bin(x)[2:])):\n        if b != '0':\n            count[i] += 1\nrm = 0\nfor k, v in list(count.items()):\n    if v > 1:\n        rm += 2 ** k\n\nm = -1, 0\nfor i, x in enumerate(xs):\n    if (x | rm) - rm > m[0]:\n        m = ((x | rm) - rm), i\n\ni = m[1]\nxs = [xs[i]] + xs[:i] + xs[i + 1:]\nprint(' '.join(map(str, xs)))\n", "\nn = int(input())\nA = list(map(int,input().split()))\n\nB = [[0] * 33 for i in range(n)]\nC = [0] * 33\nfor i in range(n):\n    t = A[i]\n    j = 0\n    while t > 0:\n        B[i][j] += t%2\n        C[j] += B[i][j]\n        t//=2\n        j += 1\n\nM2 = [1]\nfor i in range(40):\n    M2.append(M2[-1]*2)\n\nS = [0] * n\nfor i in range(n):\n    for j in range(33):\n        if B[i][j] == 1:\n            if C[j] == 1:\n                S[i] += M2[j]\n\nind = S.index(max(S))\nANS = [A[ind]]\nfor i in range(n):\n    if i != ind:\n        ANS.append(A[i])\nprint(\" \".join([str(i) for i in ANS]))", "import sys\nimport math\nfrom collections import defaultdict\nfrom collections import deque\nfrom itertools import combinations\nfrom itertools import permutations\ninput = lambda : sys.stdin.readline().rstrip()\nread = lambda : list(map(int, input().split()))\ngo = lambda : 1/0\ndef write(*args, sep=\"\\n\"):\n  for i in args:\n    sys.stdout.write(\"{}{}\".format(i, sep))\nINF = float('inf')\nMOD = int(1e9 + 7)\nYES = \"YES\"\nNO = \"NO\"\n\ndef f(x):\n  return bin(x)[2:][::-1]\n\nn = int(input())\ncnt = [0] * 100\narr = read()\n\nfor i in arr:\n  s = f(i)\n\n  for j in range(len(s)):\n    if s[j] == \"1\":\n      cnt[j] += 1\n\nans = [-INF, -INF]\nfor i in arr:\n  s = f(i)\n\n  for j in range(len(s)):\n    if s[j] == \"1\":\n      cnt[j] -= 1\n\n  x = []\n  for j in range(len(s)):\n    if cnt[j] == 0:\n      x.append(s[j])\n    else:\n      x.append(\"0\")\n  \n  ans = max(ans, [int(\"\".join(x)[::-1], 2), i])\n  \n\n  for j in range(len(s)):\n    if s[j] == \"1\":\n      cnt[j] += 1\n\narr.remove(ans[1])\n\nprint(ans[1], *arr)\n"]