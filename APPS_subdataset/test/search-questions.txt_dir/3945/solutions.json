["import heapq\nimport sys\nfrom collections import defaultdict, Counter\nfrom functools import reduce\n\n\nn, m = list(map(int, input().split()))\narr = []\nfor _ in range(n):\n    arr.append(list(map(int, input().split())))\n\nrows = []\nfor i in range(n):\n    row = set()\n    for j in range(m):\n        row.add(arr[i][j])\n    rows.append({x: i for i, x in enumerate(sorted(row))})\n\ncolumns = []\n\nfor j in range(m):\n    column = set()\n    for i in range(n):\n        column.add(arr[i][j])\n    columns.append({x: i for i, x in enumerate(sorted(column))})\n\n\ndef get_answer(i, j):\n    el = arr[i][j]\n    index1 = rows[i][el]\n    index2 = columns[j][el]\n    return max(index1, index2) + max(len(rows[i]) - index1,  len(columns[j]) - index2)\n\n\nfor i in range(n):\n    answer = []\n    for j in range(m):\n        answer.append(str(get_answer(i, j)))\n    print(' '.join(answer))\n", "import sys\ninput=sys.stdin.readline\nn, m = list(map(int, input().split()))\nSt = [list(map(int, input().split())) for _ in range(n)]\nppr = [sorted(list(set(s))) for s in St]\nPR = []\nfor i in range(n):\n    H = dict()\n    for j, v in enumerate(ppr[i], 1):\n        H[v] = j\n    PR.append([H[p] for p in St[i]] + [j])\n\nTSt = list(map(list, list(zip(*St))))\nppc = [sorted(list(set(s))) for s in TSt]\nPC = []\nfor i in range(m):\n    H = dict()\n    for j, v in enumerate(ppc[i], 1):\n        H[v] = j\n    PC.append([H[p] for p in TSt[i]] + [j])\n\nfor i in range(n):\n    pri = PR[i]\n    prm = PR[i][-1]\n    print(*[max(pri[j], PC[j][i]) + max(prm-pri[j], PC[j][-1]-PC[j][i]) for j in range(m)])\n\n", "def solution(heights, n, m):\n    rows = []\n    cols = []\n\n    for j in range(n):\n        lst = set()\n        for i in range(m):\n            lst.add(heights[j][i])\n        rows.append({x: i for i, x in enumerate(sorted(lst))})\n\n    for i in range(m):\n        lst = set()\n        for j in range(n):\n            lst.add(heights[j][i])\n        cols.append({x: i for i, x in enumerate(sorted(lst))})\n\n    for j in range(n):\n        answer = []\n        for i in range(m):\n            val = heights[j][i]\n            rank_row = rows[j][val]\n            rank_col = cols[i][val]\n            value = max(rank_row, rank_col) + max(len(rows[j]) - rank_row, len(cols[i]) - rank_col)\n            answer.append(str(value))\n        print(\" \".join(answer))\n\n\ndef get():\n    (n, m) = list(map(int, input().split()))\n    data = []\n    for j in range(n):\n        data.append(list(map(int, input().split())))\n\n    solution(data, n, m)\n\n\nget()\n", "n, m = (int(x) for x in input().split())\n\nfield = [[int(x) for x in input().split()] for _ in range(n)]\n\nr_c___rord = []\nr_c___cord = [[] for _ in range(n)]\n\nr___uniques_nr = []\nc___uniques_nr = []\n\nfor r in range(n):\n    row = field[r]\n    srted = sorted(list(set(row)))\n    r___uniques_nr.append(len(srted))\n    srted = {x: i for i, x in enumerate(srted)}\n    ords = [srted[x] for x in row]\n    r_c___rord.append(ords)\n\nfor c in range(m):\n    col = [field[i][c] for i in range(n)]\n    srted = sorted(list(set(col)))\n    c___uniques_nr.append(len(srted))\n    srted = {x: i for i, x in enumerate(srted)}\n    ords = [srted[x] for x in col]\n    for i in range(n):\n        r_c___cord[i].append(ords[i])\n\nfor r in range(n):\n    curr = []\n    for c in range(m):\n        less_nr = max(r_c___rord[r][c], r_c___cord[r][c])\n        greq_nr = max(r___uniques_nr[r] - r_c___rord[r][c], c___uniques_nr[c] - r_c___cord[r][c])\n        curr.append(less_nr + greq_nr)\n    print(*curr)\n\n\n\n\n\n\n", "n, m = list(map(int, input().split()))\ngor = []\nver = []\no = []\nfor i in range(n):\n    gor.append(list(map(int, input().split())))\n    o.append([])\nfor i in range(m):\n    ver.append([])\nfor i in range(m):\n    for g in gor:\n        ver[i].append(g[i])\nver = list([sorted(list(set(x))) for x in ver])\n\n\ndef f(vg, vr, o):\n    vr1 = vr.index(o)\n    vg1 = vg.index(o)\n    if vr1 > vg1:\n        return max([len(vr), len(vg) + vr1 - vg1])\n    return max([len(vg), len(vr) + vg1 - vr1])\n\n\nfor i, vg in enumerate(gor):\n    vg1 = sorted(list(set(vg)))\n    for j, vr in enumerate(vg):\n        o[i].append(f(vg1, ver[j], vr))\nfor i in o:\n    print(' '.join(list(map(str, i))))\n", "# # from collections import Counter\n#\n# n, m = list(map(int, input().split()))\n# streets = []\n# for i in range(n):\n#     streets.append(list(map(int, input().split())))\n#\n# mem_rows = {}\n# len_row = []\n# for i in range(n):\n#     mem_r = sorted(set(streets[i]))\n#     mem_rows[i] = {x: i for i, x in enumerate(mem_r)}\n#     len_row.append(len(mem_rows[i]))\n#\n# mem_cols = {}\n# len_col = []\n# for j in range(m):\n#     mem_d = sorted(set([k[j] for k in streets]))\n#     mem_cols[j] = {x: i for i, x in enumerate(mem_d)}\n#     len_col.append(len(mem_cols[j]))\n#\n# for i in range(n):\n#     for j in range(m):\n#         elem = streets[i][j]\n#         pos1, pos2 = mem_rows[i][elem], mem_cols[j][elem]\n#         streets_ans = max(pos1, pos2) + max((len_row[i] - pos1), (len_col[j] - pos2))\n#         print(streets_ans, end=' ')\n#     print('\\n', end='')\n\n\n# from collections import Counter\n\nn, m = list(map(int, input().split()))\nstreets = []\nfor i in range(n):\n    streets.append(list(map(int, input().split())))\n\nmem_rows = {}\nlen_row = []\nfor i in range(n):\n    mem_r = sorted(set(streets[i]))\n    srted = {x: i for i, x in enumerate(mem_r)}\n    ords = [srted[i] for i in streets[i]]\n    mem_rows[i] = ords\n    len_row.append(len(mem_r))\n\nmem_cols = {}\nlen_col = []\nfor j in range(m):\n    col = [k[j] for k in streets]\n    mem_d = sorted(set(col))\n    srted = {x: i for i, x in enumerate(mem_d)}\n    ords = [srted[i] for i in col]\n    mem_cols[j] = ords\n    len_col.append(len(mem_d))\n\n\nfor i in range(n):\n    prt = []\n    for j in range(m):\n        elem = streets[i][j]\n        pos1, pos2 = mem_rows[i][j], mem_cols[j][i]\n        streets_ans = max(pos1, pos2) + max((len_row[i] - pos1), (len_col[j] - pos2))\n        prt.append(streets_ans)\n    print(*prt)\n"]