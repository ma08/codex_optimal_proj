["import sys\ninput = sys.stdin.readline\nn, k = map(int, input().split())\na = [int(i) for i in input().split()]\ng = [[] for _ in range(n)]\nfor i in range(n - 1):\n\tu, v = map(int, input().split())\n\tg[u-1].append(v-1)\n\tg[v-1].append(u-1)\n\nstack = [0]\ndone = [False] * n\npar = [0] * n\norder = []\nwhile len(stack) > 0:\n\tx = stack.pop()\n\tdone[x] = True\n\torder.append(x)\n\tfor i in g[x]:\n\t\tif done[i] == False:\n\t\t\tpar[i] = x\n\t\t\tstack.append(i)\norder = order[::-1]\nsub = [0] * n\nfor i in order: \n\tsub[i] = 1\n\tfor j in g[i]:\n\t\tif par[j] == i:\n\t\t\tsub[i] += sub[j]\n\ndef good(guess):\n\tcnt = [0] * n\n\tfor i in order:\n\t\tif a[i] < guess:\n\t\t\tcontinue\n\t\tcnt[i] = 1\n\t\topt = 0\n\t\tfor j in g[i]:\n\t\t\tif par[j] == i:\n\t\t\t\tif cnt[j] == sub[j]:\n\t\t\t\t\tcnt[i] += cnt[j]\n\t\t\t\telse:\n\t\t\t\t\topt = max(opt, cnt[j])\n\t\tcnt[i] += opt\n\tif cnt[0] >= k:\n\t\treturn True\n\tup = [0] * n\n\tfor i in order[::-1]:\n\t\tif a[i] < guess:\n\t\t\tcontinue\n\t\topt, secondOpt = 0, 0\n\t\ttotal = 1\n\t\tfor j in g[i]:\n\t\t\tval, size = 0, 0\n\t\t\tif par[j] == i:\n\t\t\t\tval = cnt[j]\n\t\t\t\tsize = sub[j]\n\t\t\telse:\n\t\t\t\tval = up[i]\n\t\t\t\tsize = n - sub[i]\n\t\t\tif val == size:\n\t\t\t\ttotal += val\n\t\t\telse:\n\t\t\t\tif opt < val:\n\t\t\t\t\topt, secondOpt = val, opt\n\t\t\t\telif secondOpt < val:\n\t\t\t\t\tsecondOpt = val\n\n\t\tfor j in g[i]:\n\t\t\tif par[j] == i:\n\t\t\t\tup[j] = total\n\t\t\t\tadd = opt\n\t\t\t\tif sub[j] == cnt[j]:\n\t\t\t\t\tup[j] -= cnt[j]\n\t\t\t\telif cnt[j] == opt:\n\t\t\t\t\tadd = secondOpt\n\t\t\t\tup[j] += add\n\tfor i in range(n):\n\t\tif a[i] < guess:\n\t\t\tcontinue\n\t\ttotal, opt = 1, 0\n\t\tfor j in g[i]:\n\t\t\tval, size = 0, 0\n\t\t\tif par[j] == i:\n\t\t\t\tval = cnt[j]\n\t\t\t\tsize = sub[j]\n\t\t\telse:\n\t\t\t\tval = up[i]\t\n\t\t\t\tsize = n - sub[i]\n\t\t\tif val == size:\n\t\t\t\ttotal += val\n\t\t\telse:\n\t\t\t\topt = max(opt, val)\n\t\tif total + opt >= k:\n\t\t\treturn True\t\t\t\n\treturn False\n\nl, r = 0, max(a)\nwhile l < r:\n\tmid = (l + r + 1) // 2\n\tif good(mid):\n\t\tl = mid\n\telse:\n\t\tr = mid - 1\nprint(l)", "import sys\ninput = sys.stdin.readline\nn, k = list(map(int, input().split()))\na = [int(i) for i in input().split()]\ng = [[] for _ in range(n)]\nfor i in range(n - 1):\n\tu, v = list(map(int, input().split()))\n\tg[u-1].append(v-1)\n\tg[v-1].append(u-1)\n\nstack = [0]\ndone = [False] * n\npar = [0] * n\norder = []\nwhile len(stack) > 0:\n\tx = stack.pop()\n\tdone[x] = True\n\torder.append(x)\n\tfor i in g[x]:\n\t\tif done[i] == False:\n\t\t\tpar[i] = x\n\t\t\tstack.append(i)\norder = order[::-1]\nsub = [0] * n\nfor i in order: \n\tsub[i] = 1\n\tfor j in g[i]:\n\t\tif par[j] == i:\n\t\t\tsub[i] += sub[j]\n\ndef good(guess):\n\tcnt = [0] * n\n\tfor i in order:\n\t\tif a[i] < guess:\n\t\t\tcontinue\n\t\tcnt[i] = 1\n\t\topt = 0\n\t\tfor j in g[i]:\n\t\t\tif par[j] == i:\n\t\t\t\tif cnt[j] == sub[j]:\n\t\t\t\t\tcnt[i] += cnt[j]\n\t\t\t\telse:\n\t\t\t\t\topt = max(opt, cnt[j])\n\t\tcnt[i] += opt\n\tif cnt[0] >= k:\n\t\treturn True\n\tup = [0] * n\n\tfor i in order[::-1]:\n\t\tif a[i] < guess:\n\t\t\tcontinue\n\t\topt, secondOpt = 0, 0\n\t\ttotal = 1\n\t\tfor j in g[i]:\n\t\t\tval, size = 0, 0\n\t\t\tif par[j] == i:\n\t\t\t\tval = cnt[j]\n\t\t\t\tsize = sub[j]\n\t\t\telse:\n\t\t\t\tval = up[i]\n\t\t\t\tsize = n - sub[i]\n\t\t\tif val == size:\n\t\t\t\ttotal += val\n\t\t\telse:\n\t\t\t\tif opt < val:\n\t\t\t\t\topt, secondOpt = val, opt\n\t\t\t\telif secondOpt < val:\n\t\t\t\t\tsecondOpt = val\n\n\t\tfor j in g[i]:\n\t\t\tif par[j] == i:\n\t\t\t\tup[j] = total\n\t\t\t\tadd = opt\n\t\t\t\tif sub[j] == cnt[j]:\n\t\t\t\t\tup[j] -= cnt[j]\n\t\t\t\telif cnt[j] == opt:\n\t\t\t\t\tadd = secondOpt\n\t\t\t\tup[j] += add\n\tfor i in range(n):\n\t\tif a[i] < guess:\n\t\t\tcontinue\n\t\ttotal, opt = 1, 0\n\t\tfor j in g[i]:\n\t\t\tval, size = 0, 0\n\t\t\tif par[j] == i:\n\t\t\t\tval = cnt[j]\n\t\t\t\tsize = sub[j]\n\t\t\telse:\n\t\t\t\tval = up[i]\t\n\t\t\t\tsize = n - sub[i]\n\t\t\tif val == size:\n\t\t\t\ttotal += val\n\t\t\telse:\n\t\t\t\topt = max(opt, val)\n\t\tif total + opt >= k:\n\t\t\treturn True\t\t\t\n\treturn False\n\nl, r = 0, max(a)\nwhile l < r:\n\tmid = (l + r + 1) // 2\n\tif good(mid):\n\t\tl = mid\n\telse:\n\t\tr = mid - 1\nprint(l)\n"]