["n, m = map(int, input().split())\nmi = 100000000000000\nts = \"\"\ndef num_d(a, b):\n  t = 0\n  for x in range(len(a)):\n    if a[x] != b[x]:\n      t += 1\n  return t\ns, t = input(), input()\nfor x in range(m-n+1):\n  d = num_d(s, t[x:x+n])\n  if d < mi:\n    mi = d\n    ts = t[x:x+n]\nprint(mi)\nfor x in range(n):\n  if s[x] != ts[x]:\n    print(x+1, end=\" \")\n", "n, m = list(map(int, input().split()))\ns = input()\nt = input()\n\nans = [i for i in range(1, n + 1)]\nfor i in range(m - n + 1):\n    pos = []\n    for j in range(n):\n        if s[j] != t[i + j]:\n            pos.append(j + 1)\n    if len(pos) < len(ans):\n        ans = pos\n\nprint(len(ans))\nprint(' '.join(map(str, ans)))\n", "n, m = map(int, input().split())\ns = input()\nt = input()\nansC = 10 ** 9\nans = []\ni = 0\nwhile i < m - n + 1:\n    nowc = 0\n    now = []\n    for j in range(n):\n        if s[j] == t[i + j]:\n            continue\n        nowc += 1\n        now.append(j + 1)\n    if nowc < ansC:\n        ansC = nowc\n        ans = now[:]\n    i += 1\nprint(ansC)\nprint(*ans)", "import sys\n\ndef main():\n    n,m = list(map(int,sys.stdin.readline().split()))\n    \n    s = sys.stdin.readline().rstrip()\n    t = sys.stdin.readline().rstrip()\n\n    r = 10000\n    res = []\n    for i in range(m-n+1):\n        p = []\n        c = 0\n        for j in range(n):\n            if s[j]!= t[i+j]:\n                c+=1\n                p.append(j+1)\n        if c < r:\n            r = c\n            res = p\n    print(r)\n    if r!=0:\n        print(\" \".join(map(str,res)))\n\n    \nmain()\n", "def f(s,t):\n\ta=[0,[]]\n\tfor i in range(len(s)):\n\t\tif s[i]!=t[i]:\n\t\t\ta[0]+=1\n\t\t\ta[1].append(i+1)\n\treturn a\nn,m=list(map(int,input().split()))\ns=input()\nt=input()\nans=2000\na=[]\nfor i in range(m-n+1):\n\tif f(s,t[i:i+n])[0]<ans:\n\t\tans,a=f(s,t[i:i+n])\nprint(ans)\nfor i in a:\n\tprint(i,end=' ')", "n,m = list(map(int, input().split()))\ns = input()\nt = input()\n\n\ntot = 1000000000\npos = []\n\nfor k in range(m-n+1):\n    ctot = 0\n    cpos = []\n\n    for e in range(n):\n        if s[e] != t[e+k]:\n            cpos.append(e+1)\n            ctot+=1\n\n    if ctot < tot:\n        pos = cpos\n        tot = ctot\n\nprint(tot)\nprint(*pos)\n", "a, b = map(int, input().split())\ns = input()\nt = input()\nsl = len(s)\ntl = len(t)\nmask = []\nbest = 0\nbesti = 0\nfor i in range(tl - sl + 1):\n    eq = 0\n    for j in range(sl):\n        if t[i + j] == s[j]:\n            eq += 1\n    if eq > best:\n        best = eq\n        besti = i\nfor j in range(sl):\n    if t[besti + j] != s[j]:\n        mask.append(j + 1)\nprint(sl - best)\nfor i in mask:\n    print(i, end=' ')\n", "n, m = map(int, input().split())\ns = input()\nt = input()\nres = 10 ** 9\nans = []\nfor i in range(len(t) - len(s) + 1):\n    curr = []\n    for j in range(i, i + len(s)):\n        if s[j - i] != t[j]:\n            curr.append(j - i + 1)\n    if len(curr) < res:\n        res = len(curr)\n        ans = curr[:]\nprint(res)\nprint(' '.join(map(str, ans)))", "n, m = input().split()\nn, m = int(n), int(m)\n\ns = input()\nt = input()\n\nmin_c = 10**4\nmin_pos = []\nfor i in range(m - n + 1):\n    c = 0\n    pos = []\n    for j in range(n):\n        if s[j] != t[i + j]:\n            c += 1\n            pos.append(j + 1)\n    if c < min_c:\n        min_c = c\n        min_pos = pos[:]\n\nprint(min_c)\nfor i in range(len(min_pos) - 1):\n    print(min_pos[i], end=\" \")\nif(len(min_pos) > 0):\n    print(min_pos[-1])\n", "def fit(s1,s2,i):\n\tcount=0\n\tfor j in range(len(s1)):\n\t\tif(s2[j+i]!=s1[j]):\n\t\t\tif(s1[j]=='?' or s2[j+i]=='?'):\n\t\t\t\tcontinue\n\t\t\tcount+=1\n\treturn count\n\ndef calc(s1,s2,mmin):\n\tl=[]\n\tfor i in range(len(s1)):\n\t\tif(s1[i]!=s2[i+mmin]):\n\t\t\tif(s1[i]=='?' or s2[i+mmin]=='?'):\n\t\t\t\tcontinue\n\t\t\tl.append(i+1)\n\n\treturn l\n\n\ninp=input().split()\ns1=input()\ns2=input()\nm=9999999\nmmin=0\nfor i in range(len(s2)-len(s1)+1):\n\tval=fit(s1,s2,i)\n\tif(val<m):\n\t\tm=val\n\t\tmmin=i\nprint(m)\nl=calc(s1,s2,mmin)\nfor val in l:\n\tprint(val,end=\" \")\n\nprint()", "x,y=list(map(int,input().split()))\ns=input()\nt=input()\nl=[i for i in range(1,x+1)]\nans=x\nfor i in range(1+y-x):\n\ttemp=0\n\tk=[]\n\tfor j in range(x):\n\t\tif s[j:j+1]!=t[i+j:i+j+1]:\n\t\t\ttemp+=1\n\t\t\tk.append(j+1)\n\tif temp<ans:\n\t\tans=temp\n\t\tl=k\nprint (ans)\nprint(*l)\n", "string = input()\nnumbers = string.split(\" \")\na = int(numbers[0])\nb = int(numbers[1])\ns = input()\nt = input()\nvalues = []\nlists = []\nfor x in range(b - a + 1):\n    substring = t[x:(x + a)]\n    n = 0\n    positions = []\n    for y in range(a):\n        p = substring[y]\n        q = s[y]\n        if p != q:\n            positions.append(str(y + 1))\n            n += 1\n    values.append(n)\n    lists.append(positions)\nminimum = min(values)\nprint(minimum)\nprint(\" \".join(lists[values.index(minimum)]))", "n, m = [int(val) for val in input().split()]\ns = input()\nt = input()\nans = 100000000\nansL = []\nfor i in range(m - n + 1):\n\tval = 0\n\tvalL = []\n\tfor j in range(n):\n\t\tif s[j] != t[j + i]:\n\t\t\tval += 1\n\t\t\tvalL.append(j + 1)\n\tif val < ans:\n\t\tans = val\n\t\tansL = valL\nprint(ans)\nfor ind in ansL:\n\tprint(ind, end=' ')", "n,m=list(map(int,input().split()))\nS=input()\nS1=input()\nt=[]\nfor i in range(m-n+1) :\n    k=0\n    t1=[]\n    V=''\n    for j in range(i,i+n) :\n        if S1[j]!=S[j-i] :\n            t1.append(j-i+1)\n    t1=[len(t1)]+t1\n    t.append(t1)\nt=sorted(t)\nprint(t[0][0])\nprint(*t[0][1:])\n            \n        \n        \n", "I = lambda: list(map(int, input().split()))\nn, m = I()\ns, t = input(), input()\nres = 0\nres_details = []\nfor i in range(m-n+1):\n    #print(t[i:i+n])\n    eq = 0\n    detail = []\n    for j in range(i,i+n):\n        if not (ord(s[j-i]) - ord(t[j])):\n            eq += 1\n        else:\n            detail.append(j-i+1)\n    if eq >= res:\n        res = eq\n        res_details = list(detail)\nprint(n-res)\nprint(*res_details)\n", "from textwrap import wrap\n\ninput()\ns = input()\nt = input()\n\nr = int(1e9)\np = list()\n\nfor i in range(len(t) - len(s) + 1):\n    f = [x != y for x, y in zip(t[i: i + len(s)], s)]\n    g = f.count(True)\n\n    if g < r:\n        r = g\n        p = [str(i + 1) for i, e in enumerate(f) if e]\n\nprint(r)\nprint(' '.join(p))", "line = input().split()\nn = int( line[0])\nm = int(line[1])\ns = input()\nt = input()\nmin = n + 1\nA = []\nfor i in range(m-n+1):\n    ii = i\n    L = []\n    k = 0 \n    for j in range(len( s)):\n        if ( t[ii] != s[j] ):\n            L.append(j+1)\n            k = k + 1\n        ii = ii + 1\n    if ( k < min ):\n        min = k\n        A = L\nprint(min)\nfor i in range(len(A)):\n    print(A[i], end = \" \")\nprint()\n", "def distance(a, b):\n    return sum(1 for i in range(min(len(a), len(b))) if a[i] != b[i])\n\n\ndef solve(inp, s, t):\n    n, m = list(map(int, inp.split(\" \", 1)))\n    best_shift = None\n    best_distance = float(\"inf\")\n    for shift in range(m - n + 1):\n        dist = distance(s, t[shift:shift + n])\n        if dist < best_distance:\n            best_shift = shift\n            best_distance = dist\n    positions = [i + 1 for i in range(n) if s[i] != t[best_shift + i]]\n    return best_distance, positions\n\n\ndef __starting_point():\n    inp = input()\n    s = input()\n    t = input()\n    k, positions = solve(inp, s, t)\n    print(k)\n    print(\" \".join(map(str, positions)))\n\n__starting_point()", "def check(r, o, p):\n    change = 0\n    for j in range(0, a):\n        if o[j] != p[j + r] and o[j] != '?':\n            change += 1\n    return change\na, b = input().split()\na, b = [int(a), int(b)]\ns = input()\nt = input()\n_min = b\nans = 0\nfor i in range(0, b - a +1):\n    if check(i, s, t) < _min:\n        _min = check(i, s, t)\n        ans = i\nprint(_min)\nfor k in range(0, a):\n    if s[k] != t[k + ans]:\n        print(k+1, ' ', end='')\n", "# IAWT\nn, m = list(map(int, input().split()))\ns = input()\nt = input()\n\ndef needs(i):\n    x = 0\n    for u in range(n):\n        if t[i+u] != s[u]:\n            x += 1\n    return x\n\n\nneed = n\nind = 0\nfor i in range(m - n + 1):\n    x = needs(i)\n    if x < need:\n        need = x\n        ind = i\n\nout = str(need) + '\\n'\nfor i in range(n):\n    if t[ind+i] != s[i]:\n        out += str(i+1) + ' '\n\nprint(out[:-1])\n", "import sys\nread=lambda:sys.stdin.readline().rstrip()\nreadi=lambda:int(sys.stdin.readline())\nwriteln=lambda x:sys.stdout.write(str(x)+\"\\n\")\nwrite=lambda x:sys.stdout.write(x)\nn,m = list(map(int, read().split()))\ns,t = read(), read()\n\nmcnt, midx = -1, -1\nfor i in range(m-n+1):\n    cnt = 0\n    for j in range(n):\n        if s[j] == t[j+i]:\n            cnt += 1\n    if cnt > mcnt:\n        mcnt = cnt\n        midx = i\n    \n\nk = 0\npos = []\nfor i in range(n):\n    if s[i] != t[midx+i]:\n        k += 1\n        pos.append(str(i+1))\n\nwriteln(k)\nif k:\n    writeln(' '.join(pos))\n", "n,m=list(map(int,input().split()))\ns=str(input())\nt=str(input())\na=n\nb=0\nfor i in range(0,m-n+1):\n    d=0\n    for j in range(0,n):\n        if t[i+j]!=s[j]:\n            d=d+1\n    if d<a:\n        a=d\n        b=i\nprint(a)\nfor j in range(0,n):\n    if t[b+j]!=s[j]:\n        print(j+1)\n", "a,b=map(int,input().split())\ns=str(input())\nt=str(input())\nm=0\nind=0\nfor i in range(b-a+1):\n    a1=list(t[i:i+a])\n    a2=list(s)\n    #print(a1,a2)\n    c=0\n    for j in range(a):\n        #print(i,j)\n        if a1[j]==a2[j]:\n            c+=1\n    #print(c)\n    if c>m:\n        m=c\n        ind=i\nl1=list(t[ind:ind+a])\na3=list(s)\nprint(a-m)\nfor i in range(a):\n    if a2[i]!=l1[i]:\n        print(1+i,end=' ')\n            ", "#!/bin/python3\nimport sys\nimport time\nimport heapq\nimport collections\nfrom io import StringIO\n\ntest_cases = [\n    (\"\"\"\n3 5\nabc\nxaybz\n\"\"\", \"\"\"\n2\n2 3 \n\"\"\"),\n    (\"\"\"\n4 10\nabcd\nebceabazcd\n\"\"\", \"\"\"\n1\n2 \n\"\"\"),\n]\n\n\ndef solve():\n    return \"TEST\"\n\n\ndef debug(*args, **kwargs):\n    print(*args, **kwargs, file=sys.stderr)\n\n\ndef main():\n    n, m = map(int, input().split())\n    s = input()\n    t = input()\n    min_diff = None\n    for i in range(m - n + 1):\n        diff = [k + 1 for k, c in enumerate(s) if c != t[k + i]]\n        if min_diff is None or len(diff) < len(min_diff):\n            min_diff = diff\n    print(len(min_diff))\n    print(' '.join(str(i) for i in min_diff))\n\n\ndef test(s, check):\n    s = s.strip()\n    check = check.strip()\n    sys.stdin = StringIO(s)\n    sys.stdout = out = StringIO()\n    start_time = time.time()\n    try:\n        main()\n    finally:\n        exec_time = time.time() - start_time\n        sys.stdin = sys.__stdin__\n        sys.stdout = sys.__stdout__\n    out.seek(0)\n    result = out.read().strip()\n    status = \"SUCCESS\" if result == check else \"FAILURE\"\n    message = \"status: {}, exec_time: {:.3f}\".format(status, exec_time)\n    debug(message)\n\n\ndef test_all():\n    for s, check in test_cases:\n        test(s, check)\n\n\ndef __starting_point():\n    if len(sys.argv) > 1 and sys.argv[1] == '-t':\n        test_all()\n    else:\n        main()\n\n__starting_point()"]