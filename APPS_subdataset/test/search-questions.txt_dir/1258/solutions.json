["from bisect import *\nfrom collections import *\nfrom itertools import *\nimport functools\nimport sys\nimport math\nfrom decimal import *\nfrom copy import *\nfrom heapq import *\nfrom fractions import *\ngetcontext().prec = 30\nMAX = sys.maxsize\nMAXN = 1000010\nMOD = 10**9+7\nspf = [i for i in range(MAXN)]\ndef sieve():\n    for i in range(2,MAXN,2):\n        spf[i] = 2\n    for i in range(3,int(MAXN**0.5)+1):\n        if spf[i]==i:\n            for j in range(i*i,MAXN,i):\n                if spf[j]==j:\n                    spf[j]=i\ndef fib(n,m):\n    if n == 0:\n        return [0, 1]\n    else:\n        a, b = fib(n // 2)\n        c = ((a%m) * ((b%m) * 2 - (a%m)))%m\n        d = ((a%m) * (a%m))%m + ((b)%m * (b)%m)%m\n        if n % 2 == 0:\n            return [c, d]\n        else:\n            return [d, c + d]\n\ndef charIN(x= ' '):\n    return(sys.stdin.readline().strip().split(x))\n\ndef arrIN(x = ' '):\n    return list(map(int,sys.stdin.readline().strip().split(x)))\n\ndef ncr(n,r):\n    num=den=1\n    for i in range(r):\n        num = (num*(n-i))%MOD\n        den = (den*(i+1))%MOD\n\n    return (num*(pow(den,MOD-2,MOD)))%MOD\n\ndef flush():\n    return sys.stdout.flush()\n\n'''*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*'''\nn = int(input())\na = [arrIN() for _ in range(n-2)]\nd = [0]*(n+1)\npos = defaultdict(list)\nfor i in range(n-2):\n    for j in a[i]:\n        d[j]+=1\n        pos[j].append(i)\nans = []\nflag = [1]*(n-2)\nfor i in range(1,n+1):\n    if d[i]==1:\n        x  = a[pos[i][0]]\n        flag[pos[i][0]] = 0\n        break\nt = [0,0,0]\nfor i in x:\n    if d[i]==1:\n        t[0] = i\n    elif d[i]==2: \n        t[1] = i\n    else:\n        t[2] = i\nans = t\nl = 3\nwhile l!=n:\n    for i in pos[ans[-2]]:\n        if flag[i]:\n            if ans[-1] in a[i]:\n                x = a[i]\n                flag[i] = 0\n                break\n\n    t = [i for i in x]\n    t.remove(ans[-2])\n    t.remove(ans[-1])\n    ans.append(t[0])\n    l+=1\nprint(*ans)", "from collections import defaultdict\n\nn = int(input())\n\nnei = defaultdict(list)\n\nq = []\nfor i in range(n-2):\n\ta, b, c = map(lambda x: int(x)-1, input().split())\n\tq.append((a, b, c))\n\tnei[tuple(sorted((a, b)))].append(c)\n\tnei[tuple(sorted((a, c)))].append(b)\n\tnei[tuple(sorted((b, c)))].append(a)\n\ncounts = [0] * n\nfor a,b,c in q:\n\tcounts[a] += 1\n\tcounts[b] += 1\n\tcounts[c] += 1\n\nstart = next(filter(lambda i: counts[i]==1, range(n)))\nfor abc in q:\n\tif start in abc:\n\t\tbreak\n\na, b, c = abc\n\nif b==start:\n\ta, b = b, a\nelif c==start:\n\ta, c = c, a\n\nif counts[b] != 2:\n\tb, c = c, b\n\np = [a, b, c]\n\nwhile len(p) < n:\n\tcandidates = nei[tuple(sorted((p[-2], p[-1])))]\n\tne = candidates[0]\n\tif candidates[0] == p[-3]:\n\t\tne = candidates[1]\n\tp.append(ne)\n\nprint(*[x+1 for x in p])", "n = int(input())\nmas = []\ncou = []\nfor i in range(n + 1):\n\tmas.append([])\n\tcou.append(0)\nfor i in range(n - 2):\n\ta, b, c = list(map(int, input().split()))\n\tmas[a].append([a, b, c])\n\tmas[b].append([a, b, c])\n\tmas[c].append([a, b, c])\n\tcou[a] += 1\n\tcou[b] += 1\n\tcou[c] += 1\nfor i in range(1, n + 1):\n\tif cou[i] == 1:\n\t\tx = i\n\t\tbreak\ny = -1\nfor i in range(1, n + 1):\n\tif cou[i] == 2:\n\t\tif y == -1:\n\t\t\ty = i\n\t\telse:\n\t\t\tz = i\nif not(y in mas[x][0]):\n\ty = z\nfor i in mas[x][0]:\n\tif i != x and i != y:\n\t\tz = i\n\t\tbreak\nans = [x, y, z]\nfor k in range(3, n):\n\tx = ans[k - 3]\n\ty = ans[k - 2]\n\tz = ans[k - 1]\n\tfor i in mas[y]:\n\t\tif y in i and z in i and not(x in i):\n\t\t\tfor j in range(len(i)):\n\t\t\t\tif i[j] != y and i[j] != z:\n\t\t\t\t\th = i[j]\n\t\t\t\t\tbreak\n\tans.append(h)\nprint(*ans)\n\n\n\n\n\n\n\n\n\n\n", "from collections import defaultdict\n\nn = int(input())\n\nA = []\n\nfor i in range(n - 2):\n\tA.append(list(map(int, input().split())))\n\ncount = {i + 1: 0 for i in range(n)}\nthird = {}\n\nfor a, b, c in A:\n\tif (a, b) not in third:\n\t\tthird[(a, b)] = []\n\tthird[(a, b)].append(c)\n\t\t\n\tif (b, a) not in third:\n\t\tthird[(b, a)] = []\n\tthird[(b, a)].append(c)\n\t\t\n\tif (a, c) not in third:\n\t\tthird[(a, c)] = []\n\tthird[(a, c)].append(b)\n\t\t\n\tif (c, a) not in third:\n\t\tthird[(c, a)] = []\n\tthird[(c, a)].append(b)\n\t\t\n\tif (b, c) not in third:\n\t\tthird[(b, c)] = []\n\tthird[(b, c)].append(a)\n\t\t\n\tif (c, b) not in third:\n\t\tthird[(c, b)] = []\n\tthird[(c, b)].append(a)\n\t\t\n\n\tcount[a] += 1\n\tcount[b] += 1\n\tcount[c] += 1\n\nfirst = 0\n\nfor i in range(n):\n\tif count[i + 1] == 1:\n\t\tfirst = i + 1\n\t\tbreak\n\nsecond = 0\nfor i in range(n):\n\tif count[i + 1] == 2:\n\t\tsecond = i + 1\n\n\t\tif (first, second) in third:\n\t\t\tbreak\n\t\telse:\n\t\t\tsecond = 0\n\nans = [first, second]\naset = set()\naset.add(first)\naset.add(second)\n\nfor i in range(n - 2):\n\tfor val in third[(first, second)]:\n\t\tif val not in aset:\n\t\t\tans.append(val)\n\t\t\taset.add(val)\n\n\t\t\tfirst, second = second, val\n\n\t\t\tbreak\n\nprint(*ans)", "n=int(input())\nd={}\nused=set()\nfor itr in range(n-2):\n    p,q,r=map(int,input().split())\n    if p in d: d[p].append([p,q,r])\n    else: d[p]=[[p,q,r]]\n    if q in d: d[q].append([p,q,r])\n    else: d[q]=[[p,q,r]]\n    if r in d: d[r].append([p,q,r])\n    else: d[r]=[[p,q,r]]\nans=[]\nfor itr in d:\n    if len(d[itr])==1: \n        k=itr\n        break\nans.append(k)\nused.add(frozenset(d[k][0]))\nfor itr in d[k][0]:\n    if itr==k: continue\n    ans.insert(len(d[itr])-1,itr)\nfor itr in range(1,n-2):\n    for tup in d[ans[itr]]:\n        if frozenset(tup) in used: continue\n        for i in tup:\n            if i==ans[itr] or i==ans[itr+1]: continue\n            ans.append(i)\n        used.add(frozenset(tup))\nprint(*ans)", "import sys\nfrom collections import defaultdict\nn = int(input())\ncount = [0]*(n+1)\nd = defaultdict(list)\ndi = 10**6\n\nfor q1, q2, q3 in (list(map(int, l.split())) for l in sys.stdin):\n    count[q1] += 1\n    count[q2] += 1\n    count[q3] += 1\n    d[q1*di + q2 if q1 < q2 else q2*di + q1].append(q3)\n    d[q1*di + q3 if q1 < q3 else q3*di + q1].append(q2)\n    d[q2*di + q3 if q2 < q3 else q3*di + q2].append(q1)\n\n\ni1, i2 = [], []\nfor i in range(1, n+1):\n    if count[i] == 1:\n        i1.append(i)\n    elif count[i] == 2:\n        i2.append(i)\n\nkey = []\nans = [0]*n\nif (i1[0]*di + i2[0] if i1[0] < i2[0] else i2[0]*di + i1[0]) in d:\n    key = [i1[0], i2[0]]\nelse:\n    key = [i1[0], i2[1]]\n\nans[0], ans[1] = key[0], key[1]\nused = {key[0], key[1]}\n\nfor i in range(2, n):\n    next_key = key[0]*di + key[1] if key[0] < key[1] else key[1]*di + key[0]\n    next_l = d[next_key]\n    next_n = next_l[0] if next_l[0] not in used else next_l[1]\n    #print(key, next_key, next_n)\n    ans[i] = next_n\n    key[0], key[1] = key[1], next_n\n    used.add(next_n)\n\nprint(*ans)\n", "import sys\ninput = sys.stdin.readline\n\nn = int(input())\nadj_list = [[] for _ in range(n)]\n\nfor _ in range(n-2):\n    q1, q2, q3 = map(int, input().split())\n    adj_list[q1-1].append(q2-1)\n    adj_list[q1-1].append(q3-1)\n    adj_list[q2-1].append(q3-1)\n    adj_list[q2-1].append(q1-1)\n    adj_list[q3-1].append(q1-1)\n    adj_list[q3-1].append(q2-1)\n\nfor i in range(n):\n    adj_list[i] = list(set(adj_list[i]))\n    \nfor i in range(n):\n    if len(adj_list[i])==2:\n        start = i\n        break\n\nans = [start]\nn1 = adj_list[start][0]\nn2 = adj_list[start][1]\n\nif len(adj_list[n1])==3:\n    ans.append(n1)\nelse:\n    ans.append(n2)\n\nfor i in range(2, n):\n    n1 = ans[i-2]\n    n2 = ans[i-1]\n    s1 = set(adj_list[n1])\n    s2 = set(adj_list[n2])\n    s3 = s1&s2\n    #print(i, n1, n2)\n    if i>=3:\n        s3.remove(ans[i-3])\n    \n    #print(n1, adj_list[n1], n2, adj_list[n2], s3)\n    ans.append(list(s3)[0])\n    #print(ans)\nans2 = [ai+1 for ai in ans]\n\nprint(*ans2)", "\nfrom collections import defaultdict,deque\nimport sys,heapq,bisect,math,itertools,string,queue,copy,time\nsys.setrecursionlimit(10**8)\nINF = float('inf')\nmod = 10**9+7\neps = 10**-7\ndef inp(): return int(sys.stdin.readline())\ndef inpl(k=0): return [int(x)+k for x in sys.stdin.readline().split()]\ndef inpl_str(): return list(sys.stdin.readline().split())\n\nN = inp()\n\naa = [inpl(-1) for _ in range(N-2)]\ncnts = [set() for _ in range(N)]\nfor i,(a1,a2,a3) in enumerate(aa):\n    cnts[a1].add(i)\n    cnts[a3].add(i)\n    cnts[a2].add(i)\n\nfirst = True\nc2 = []\nfor c,s in enumerate(cnts):\n    if len(s) == 1:\n        if first:\n            ai = list(s)[0]\n            pp = [c]\n            first = False\n        else:\n            last_ai = list(s)[0]\n            last_p = c\n    elif len(s) == 2:\n        c2.append(c)\n\n\ncnts[last_p].add(-1)\ncnts[last_p].add(-2)\n\nfor c in c2:\n    if last_ai in cnts[c]:\n        cnts[c].add(-1)\n        last_2p = c\n\n\n# print(cnts)\n\nfor _ in range(N-3):\n    for ci in aa[ai]:\n        cnts[ci].remove(ai)\n        if len(cnts[ci]) == 1:\n            next_ai = list(cnts[ci])[0]\n            pp.append(ci)\n    ai = next_ai\n    # print(cnts,next_ai)\n\npp += [last_2p, last_p]\n\nprint(' '.join([str(p+1) for p in pp]))\n", "def common(l1,l2):\n\tfor i in range(3):\n\t\tfor j in range(3):\n\t\t\tif l1[i]==l2[j]:\n\t\t\t\treturn l1[i]\n\treturn 0\n\ndef comp(l1,a,b):\n\tfor i in l1:\n\t\tif i!=a and i!=b:\n\t\t\treturn i\n\nn=int(input())\nl=[]\nd={}\ncommons = {}\nfor i in range(n-2):\n\tl.append(list(map(int,input().split())))\nfor i in range(n-2):\n\tfor j in l[i]:\n\t\tif j in d:\n\t\t\td[j].append(i)\n\t\telse:\n\t\t\td[j]=[i]\nstart = -1\nend = -1\nfor i in d:\n\tif len(d[i])==1:\n\t\tif start==-1:\n\t\t\tstart = i\n\t\t\tstartg = d[i][0]\n\t\telse:\n\t\t\tend = i\n\t\t\tendg = d[i][0]\n\t\t\tbreak\n#print (d)\nfor i in l[startg]:\n\tif len(d[i])==2:\n\t\tsecond = i\n\t\tbreak\nfor i in l[endg]:\n\tif len(d[i])==2:\n\t\tseclast = i\n\t\tbreak\ni=1\nans = [-1]*n\nans[0]=start\nans[1]=second\nans[n-1]=end\nans[n-2]=seclast\nif ans[i-1] in l[d[ans[i]][0]]:\n\tans[i+1]=comp(l[d[ans[i]][0]],ans[i-1],ans[i])\nelif ans[i-1] in l[d[ans[i]][1]]:\n\tans[i+1]=comp(l[d[ans[i]][1]],ans[i-1],ans[i])\nelse:\n\tans[i+1]=comp(l[d[ans[i]][2]],ans[i-1],ans[i])\ni+=1\n#print (ans)\nwhile i<n-3:\n\t#print (i,ans[i],d[ans[i]])\n\tif ans[i-1] in l[d[ans[i]][0]] and ans[i-2] not in l[d[ans[i]][0]]:\n\t\tans[i+1]=comp(l[d[ans[i]][0]],ans[i-1],ans[i])\n\telif ans[i-1] in l[d[ans[i]][1]] and ans[i-2] not in l[d[ans[i]][1]]:\n\t\tans[i+1]=comp(l[d[ans[i]][1]],ans[i-1],ans[i])\n\telse:\n\t\tans[i+1]=comp(l[d[ans[i]][2]],ans[i-1],ans[i])\n\ti+=1\nprint(*ans)\n", "import sys\ninput=sys.stdin.readline\nfrom collections import defaultdict as dd\nn=int(input())\nl=[]\ncc=[0]*(n+1)\nd=dd(list)\nres=[]\none=[]\ntwo=[]\nfor i in range(n-2):\n    a,b,c=map(int,input().split())\n    l.append((a,b,c))\n    cc[a]+=1\n    cc[b]+=1\n    cc[c]+=1\n    d[a].append((a,b,c))\n    d[b].append((a,b,c))\n    d[c].append((a,b,c))\nfor i in range(len(cc)):\n    if(cc[i]==1):\n        one.append(i)\n    if(cc[i]==2):\n        two.append(i)\nf=d[one[0]]\n#print(one)\nprev=[one[0]]\nif(cc[f[0][0]]==2):\n    prev.append(f[0][0])\nif(cc[f[0][1]]==2):\n    prev.append(f[0][1])\nif(cc[f[0][2]]==2):\n    prev.append(f[0][2])\nif(cc[f[0][0]]==3):\n    prev.append(f[0][0])\nif(cc[f[0][1]]==3):\n    prev.append(f[0][1])\nif(cc[f[0][2]]==3):\n    prev.append(f[0][2])\nres.append(prev)\ncur=[]\nk=n-3\n#print(cc)\nwhile k:\n    for j in d[prev[1]]:\n        if(prev[2] in j and prev[0] not in j):\n            f=j\n            break\n    prev=[prev[1],prev[2]]\n    for v in j:\n        if(v!=prev[0] and v!=prev[1]):\n            prev.append(v)\n    res.append(prev)\n    k-=1\n#print(res)\nprint(res[0][0],res[0][1],res[0][2],end=\" \")\nfor i in range(1,len(res)):\n    print(res[i][2],end=\" \")\n", "from collections import defaultdict as dd\nn=int(input())\nl=[]\nd=dd(list)\nd2=dd(list)\nfor _ in range(n-2):\n    a,b,c=list(map(int,input().split()))\n    l+=[[a,b,c]]\n    \nfor i in range(n-2):\n    d[l[i][0]]+=[i]\n    d[l[i][1]]+=[i]\n    d[l[i][2]]+=[i]\nfor i in range(n-2):\n    d2[(l[i][0],l[i][1])]+=[l[i][2]]\n    d2[(l[i][1],l[i][2])]+=[l[i][0]]\n    d2[(l[i][2],l[i][1])]+=[l[i][0]]\n    d2[(l[i][1],l[i][0])]+=[l[i][2]]\n    d2[(l[i][0],l[i][2])]+=[l[i][1]]\n    d2[(l[i][2],l[i][0])]+=[l[i][1]]\nfor i in d:\n    if(len(d[i])==1):\n        k=i\n        break\nans=[k]\nbef=k\n#print(d,k)\nfor i in d:\n    if (len(d[i])==2):\n        for j in d[i]:\n            if j==d[k][0]:\n               \n                p=i\n                break\n\nans+=[p]\nind=d[k][0]\n#print(ans)\n'''\nfor i in d[tuple(ans)]:\n    if i not in ans:\n        ans+=[i]\n        nex+=[i]\n        break\n'''\nnex=[ans[0],ans[1]]\n#print(ans)\nbef=99999999999999\nfor i in range(n-2):\n    for j in d2[tuple(nex)]:\n        if j !=bef:\n            ans+=[j]\n    bef=nex.pop(0)\n    nex+=[ans[-1]]\nprint(*ans)\n    \n    \n    \n", "n = int(input())\nar = []\nfor i in range(n-2):\n    ar.append(list(map(int,input().split())))\n#print(ar)\n\nbr = [False]*n\nvr = [0]*n\nrel = dict()\nans = []\n\nfor i in range(n):\n    rel[i+1] = set()\n\nfor i in range(n-2):\n    a = ar[i][0]\n    b = ar[i][1]\n    c = ar[i][2]\n\n    rel[a].add(b)\n    rel[a].add(c)\n    rel[b].add(a)\n    rel[b].add(c)\n    rel[c].add(a)\n    rel[c].add(b)\n\n#print(rel)\n\nfor i in range(n):\n    if len(rel[i+1])==2:\n        start = i+1\n        break\n\n#print(start)\n\nbr[start-1] = True\nans.append(start)\nfor i in rel[start]:\n    if len(rel[i])==3:\n        ans.append(i)\n        br[i-1] = True\n    else:\n        x = i\nans.append(x)\nbr[x-1] = True\n#print(ans,br,x)\n\ni = 1\nwhile(i<n-2):\n    for j in rel[ans[i]]:\n        if br[j-1]==False:\n            ans.append(j)\n            br[j-1] = True\n            break\n    #print(br,ans,i)\n    i+=1\n\nfor i in range(n):\n    print(ans[i],end =\" \")\nprint()\n", "n=int(input())\nh={}\nfor i in range(n-2):\n    x,y,z=map(int,input().split())\n    if x not in h:\n        h[x]=[]\n    if y not in h:\n        h[y]=[]\n    if z not in h:\n        h[z]=[]\n    h[x].append(y)\n    h[x].append(z)\n    h[x]=set(h[x])\n    h[x]=list(h[x])\n    h[y].append(x)\n    h[y].append(z)\n    h[y]=set(h[y])\n    h[y]=list(h[y])\n    h[z].append(x)\n    h[z].append(y)\n    h[z]=set(h[z])\n    h[z]=list(h[z])\n\nsingle=0\nfor i in h:\n    if len(h[i])==2:\n        single=i\n        break\nans=[]\nvis={}\nvis[single]=True\nans.append(single)\nfirst=single\n\nif len(h[ h[single][0] ])==3:\n    ans.append(h[single][0])\n    vis[h[single][0]]=True\n    second=h[single][0]\nelse:\n    ans.append(h[single][1])\n    vis[h[single][1]]=True\n    second=h[single][1]\nfor i in range(n-2):\n    a=h[first]\n    b=h[second]\n    a=set(a)\n    b=set(b)\n    a=a.intersection(b)\n    a=list(a)\n    for x in a:\n        if x not in vis:\n            ans.append(x)\n            vis[x]=True\n            first=second\n            second=x\n            break\nprint(\" \".join(map(str,ans)))", "n = int(input())\nn1 = n - 2\nd = {}\nd1 = {}\nvisit = {}\nl1 = []\nfor i in range(1, n + 1):\n\td[i] = []\n\td1[i] = 0\n\tvisit[i] = False\nwhile n1:\n\tn1 -= 1\n\ta, b, c = list(map(int, input().split()))\n\td[a].append(b)\n\td[a].append(c)\n\td1[a] += 1\n\td[b].append(a)\n\td[b].append(c)\n\td1[b] += 1\n\td[c].append(b)\n\td[c].append(a)\n\td1[c] += 1\nd1 = dict(sorted(list(d1.items()), key = lambda x : x[1]))\nfor i in d1:\n\t#print(i)\n\tif not visit[i]:\n\t\tvisit[i] = True\n\t\tl1.append(i)\n\tx = sorted(d[i], key = lambda x : d1[x])\n\tfor j in x:\n\t\tif not visit[j]:\n\t\t\tvisit[j] = True\n\t\t\tl1.append(j)\n\t\t\tx += d[j]\n\t#print(l1)\nprint(*l1)\n", "n=int(input())\narr=[]\nd={}\nfor i in range(n-2):\n    a,b,c=map(int,input().split())\n    arr.append([a,b,c])\n    d[a]=d.get(a,[]) + [i]\n    d[b]=d.get(b,[]) + [i]\n    d[c]=d.get(c,[]) + [i]\n# print(d)    \nfor i in d:\n    if len(d[i])==1:\n        ind=d[i][0]\n        \nvis=[0]*(n-2)\nvisno=[0]*(n+1)\nq=[arr[ind]]\nvis[ind]=1\n# print(d)\n# print(arr)\nif len(d[q[0][0]])==1:\n    print(q[0][0],end=\" \")\n    visno[q[0][0]]=1\n                \n    \nelif len(d[q[0][1]])==1:\n    print(q[0][1],end=\" \")\n    visno[q[0][1]]=1\n    \nelse:\n    print(q[0][2],end=\" \")\n    visno[q[0][2]]=1\n    \n# print(q)\n\nif len(d[q[0][0]])==2:\n    print(q[0][0],end=\" \")\n    visno[q[0][0]]=1\n    prev=q[0][0]\n    if len(d[q[0][0]])==2:\n        for i in (d[q[0][0]]):\n            if vis[i]==0:\n                q.append(arr[i])\n                vis[i]=1\n                \n    \nelif len(d[q[0][1]])==2:\n    print(q[0][1],end=\" \")\n    visno[q[0][1]]=1\n    prev=q[0][1]\n    if len(d[q[0][1]])==2:\n        for i in (d[q[0][1]]):\n            if vis[i]==0:\n                q.append(arr[i])\n                vis[i]=1\n    \nelse:\n    print(q[0][2],end=\" \")\n    visno[q[0][2]]=1\n    prev=q[0][2]\n    if len(d[q[0][2]])==2:\n        for i in (d[q[0][2]]):\n            if vis[i]==0:\n                q.append(arr[i])\n                vis[i]=1\n# q.pop(0)\n# print(q)\nfor i in range(n-4):\n    p=q.pop(0)\n    for j in p:\n        if visno[j]==0:\n            visno[j]=1\n            for k in d[j]:\n                if vis[k]==0:\n                    vis[k]=1\n                    q.append(arr[k])\n                    print(j,end=\" \")\n                    break\n            break\nq.pop(0)\n# print(q)        \nfor j in q[0]:\n    if len(d[j])==2:\n        print(j,end=\" \")\n        \nfor j in q[0]:\n    if len(d[j])==1:\n        print(j,end=\" \")\n        \n# for i in range()        \n", "def solve(a,b,groups,nums,visited):\n    group1 = set(nums[a])\n    group2 = set(nums[b])\n    common = group1&group2\n    for i in common:\n        if i not in visited:\n            group = i\n\n    #print(group)\n    visited.add(group)\n    for i in groups[group]:\n        if i != a and i != b:\n            return i\n    \n\ndef main():\n    n = int(input())\n    nums = {}\n    ans = []\n    groups = []\n    for i in range(n-2):\n        arr = list(map(int,input().split()))\n        for j in arr:\n            if j not in nums.keys():\n                nums[j] = [i]\n            else:\n                nums[j].append(i)\n\n        groups.append(arr)\n\n    first = -1\n    for i in nums.keys():\n        if len(nums[i]) == 1:\n            first = i\n            break\n\n    visited = set()\n    ans.append(first)\n    group = nums[first][0]\n    for i in groups[group]:\n        if len(nums[i]) == 2:\n            second = i\n            break\n        \n    ans.append(second)\n    for i in groups[group]:\n        if i not in ans:\n            ans.append(i)\n            break\n\n    visited.add(group)\n    a = ans[-2]\n    b = ans[-1]\n    for i in range(n-3):\n        ans.append(solve(a,b,groups,nums,visited))\n        a = ans[-2]\n        b = ans[-1]\n\n    for i in ans:\n        print(i,end = ' ')\n    \n\nmain()\n", "#!/usr/bin/env python3\nimport sys\ninput = sys.stdin.readline\n\nn = int(input())\ntriple = []\nindexes = [[] for _ in range(n)]\ncnt = [0] * n\nabc = []\nfor i in range(n-2):\n    a, b, c = [int(item)-1 for item in input().split()]\n    abc.append((a, b, c))\n    indexes[a].append(i)\n    indexes[b].append(i)\n    indexes[c].append(i)\n    cnt[a] += 1\n    cnt[b] += 1\n    cnt[c] += 1\ntmp = cnt[:]\n\nans = []\nnode = cnt.index(1)\nvisited = [0] * (n - 2)\nnxt = indexes[node][0]\nwhile True:\n    for item in indexes[node]:\n        if visited[item]:\n            continue\n        nxt = item\n        visited[nxt] = 1\n    a, b, c = abc[nxt]\n    if cnt[a] == 1 and cnt[b] == 1 and cnt[c] == 1:\n        break\n    ans.append(node+1)\n    cnt[a] -= 1\n    cnt[b] -= 1\n    cnt[c] -= 1\n    if cnt[a] == 1:\n        node = a\n    elif cnt[b] == 1:\n        node = b\n    elif cnt[c] == 1:\n        node = c\n\nfor item in abc[nxt]:\n    if tmp[item] == 3:\n        ans.append(item + 1)\nfor item in abc[nxt]:\n    if tmp[item] == 2:\n        ans.append(item + 1)\nfor item in abc[nxt]:\n    if tmp[item] == 1:\n        ans.append(item + 1)\n\nprint(\" \".join([str(item) for item in ans]))", "a = int(input())\nA = []\nfor i in range(a):\n    A.append(set())\nfor i in range(a - 2):\n    x, y, z = list(map(int, input().split()))\n    x -= 1\n    y -= 1\n    z -= 1\n    A[x].add(y)\n    A[x].add(z)\n    A[y].add(x)\n    A[y].add(z)\n    A[z].add(x)\n    A[z].add(y)\nfor i in range(len(A)):\n    if len(A[i]) == 2:\n        k = i\nm2 = k\nB = [k + 1]\nZ = list(A[k])\nif len(A[Z[0]]) == 3:\n    B.append(Z[0] + 1)\n    m1 = Z[0]\nelse:\n    B.append(Z[1] + 1)\n    m1 = Z[1]\nfor i in range(a - 2):\n    w = list(A[m1] & A[m2])\n    if len(B) > 2:\n        if w[0] + 1 != B[-3]:\n            B.append(w[0] + 1)\n            m2 = int(m1)\n            m1 = w[0]\n\n        else:\n            B.append(w[1] + 1)\n            m2 = int(m1)\n            m1 = w[1]\n    else:\n        B.append(w[0] + 1)\n        m2 = int(m1)\n        m1 = w[0]\n\n\nprint(*B)\n\n", "from collections import defaultdict\n\nn = int(input())\n# q = []\n# d = defaultdict(int)\n# for i in range(n-2):\n#     a = list(map(int,input().split()))\n#     d[a[0]] += 1\n#     d[a[1]] += 1\n#     d[a[2]] += 1\n#     q.append(a)\n#\n# a = list(d.items())\n# a.sort(key=lambda x: x[1])\n#\n\ngraph = [[] for i in range(n+1)]\n\nfor _ in range(n-2):\n    a = list(map(int, input().split()))\n    graph[a[0]] += [a[1], a[2]]\n    graph[a[1]] += [a[0], a[2]]\n    graph[a[2]] += [a[1], a[0]]\n\nfor i in range(1, n+1):\n    graph[i] = list(set(graph[i]))\n\nvisited = [False for i in range(n+1)]\n\nans = []\n\nfor i in range(1,n+1):\n    if len(graph[i]) == 2:\n        ans.append(i)\n        visited[i] = True\n        break\n# print(ans)\nfor j in graph[i]:\n    if len(graph[j]) == 3:\n        ans.append(j)\n        visited[j] = True\n        break\n# print(ans)\nfor i in range(n-2):\n    for j in graph[ans[i]]:\n        if not visited[j]:\n            ans.append(j)\n            visited[j] = True\n            # print(ans)\n\nfor i in ans:\n    print(i, end = ' ')", "n = int(input())\nq = []\nqh = {}\nqc = {}\nfor i in range(n):\n    qh[i] = []\n    qc[i] = 0\nfor i in range(n-2):\n    q1, q2, q3 = list(map(int, input().split()))\n    q.append([q1-1, q2-1, q3-1])\n    for d in [q1, q2, q3]:\n        qh[d-1].append(i)\n        qc[d-1] += 1\npp = []\nfor i in range(n):\n    if qc[i] == 1:\n        pp.append(i)\np1, p2 = pp\np3 = -1\np4 = -1\nfor i in q[qh[p2][0]]:\n    if qc[i] == 3:\n        p3 = i\n    if qc[i] == 2:\n        p4 = i\np5, p6 = -1, -1\nfor i in q[qh[p1][0]]:\n    if qc[i] == 3:\n        p5 = i\n    if qc[i] == 2:\n        p6 = i\n    qc[i] -= 1\np = [p1, p6, p5]\nd = qh[p6][0]\nif d == qh[p1][0]:\n    d = qh[p6][1]\nfor i in q[d]:\n    qc[i] -= 1\nfor i in range(n-6):\n    fg = p[-1]\n    d = -1\n    for j in qh[fg]:\n        if j not in qh[p[-2]]:\n            d = j\n    for j in q[d]:\n        if qc[j] == 2:\n            p.append(j)\n        qc[j] -= 1\nif n != 5:\n    p.append(p3)\np.append(p4)\np.append(p2)\nprint(' '.join([str(x+1) for x in p]))\n\n\n", "\nrinp = [4,6,2,1,7,3,5]\n\n\n'''\n7\n4 6 2\n6 2 1\n2 1 7\n1 7 3\n7 3 5\n'''\n\n\nn = int(input())\n\nans = list()\n\nBIN = list((i, list()) for i in range(n))\n\ni = 2\nwhile i < n:\n  inp = list(int(x)-1 for x in input().split())\n  for ch in inp:\n    BIN[ch][1].append(inp)\n\n  i += 1\n\nSB = sorted(BIN, key=lambda x:len(x[1]))\n#[print(x) for x in (BIN)]\n#print()\n#[print(x) for x in (SB)]\n\nnow = SB[0][0]\nlast = None\nwhile True:\n  ans.append(now)\n  nowl = BIN[now][1]\n  #print(f\"{now}={last}={nowl}=========={ans}\")\n  lnowl = len(nowl)\n  if lnowl == 3:#mid\n    for item in nowl:\n      try:item.remove(now)\n      except:pass\n      try:item.remove(last)\n      except:pass\n      if len(item) == 1:\n        next = item[0]\n        break\n  elif lnowl == 2:\n    for item in nowl:\n      try:item.remove(now)\n      except:pass\n      try:item.remove(last)\n      except:pass\n      if len(item) == 1:\n        next = item[0]\n        break\n  else:#first last\n    tl = nowl[0]\n    tl.remove(now)\n    if not tl:\n      break\n    for next in tl:\n      ttl = BIN[next][1]\n      if len(ttl) == 2:\n        break\n  now, last = next, now\n\n\nprint(\" \".join(str(x + 1) for x in ans))\n", "#!/usr/bin/env python3\nimport sys\n\n#lines = stdin.readlines()\ndef rint():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef input():\n    return sys.stdin.readline().rstrip('\\n')\n\ndef oint():\n    return int(input())\n\n\nn = oint()\na = []\nm = dict()\nfor i in range(n-2):\n    q = list(rint())\n    a.append(q)\n    for j in range(3):\n        if q[j] in m:\n            m[q[j]] = m[q[j]] + [i]\n\n        else:\n            m[q[j]] = [i]\nstart = []\nsecond = []\nfor j in range(1, n+1):\n    if len(m[j]) == 1:\n        start.append(j)\n    if len(m[j]) == 2:\n        second.append(j)\ns = start[0]\nif m[s][0] in m[second[0]]:\n    sec = second[0]\nelse:\n    sec = second[1]\nans = [s, sec]\nfor i in range(2, n):\n    qi = set(m[ans[i-2]]).intersection(set(m[ans[i-1]]))\n    if len(qi) == 1:\n        next = set(a[qi.pop()]).difference(set([ans[i-2], ans[i-1]])).pop()\n    else:\n        next1 = set(a[qi.pop()]).difference(set([ans[i-2], ans[i-1]])).pop()\n        next2 = set(a[qi.pop()]).difference(set([ans[i-2], ans[i-1]])).pop()\n        if next1 == ans[-3]:\n            next = next2\n        else:\n            next = next1\n    ans.append(next)\n\n\n\nprint(*ans)\n\n", "\nn = int(input().strip())\n\ng = {}\nrg = {}\ncnt = {}\n\n\nfor i in range(1, n + 1):\n    cnt[str(i)] = 0\n    rg[str(i)] = []\n\nfor _ in range(n - 2):\n    arr = [x for x in input().split()]\n    arr.sort()\n    a, b, c = arr\n    for e in arr:\n        cnt[e] += 1\n    \n    for p, tr in [((a, b), c), ((a, c), b), ((b, c), a)]:\n        if p not in g:\n            g[p] = []\n        rg[tr].append(p)\n        g[p].append(tr)\n    \n\ncur = None\nfor k in cnt:\n    if cnt[k] == 1:\n        cur = k\n\nwas = set()\nwas.add(cur)\nres = [cur, ]\n\nca, cb = rg[cur][0]\n\nif cnt[ca] == 2:\n    cur = ca\nelse:\n    cur = cb\n\nwas.add(cur)\nres.append(cur)\n\nwhile len(res) != n:\n    cur = [res[-1], res[-2]]\n    cur.sort()\n    cur = tuple(cur)\n    for to in g[cur]:\n        if to in was:\n            continue\n        res.append(to)\n        was.add(to)\n\nprint(' '.join(res))\n"]