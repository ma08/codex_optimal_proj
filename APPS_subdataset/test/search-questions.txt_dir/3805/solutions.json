["l = []\n\nfor c in input():\n    if len(l) > 0 and l[-1] == c:\n        l.pop()\n    else:\n        l.append(c)\n\nprint('Yes' if len(l) == 0 else 'No')\n", "s=input()\n\nif(len(s)%2==1):\n    print(\"No\")\n\nelse:\n    x=len(s)-1\n    start=1\n    while(len(s)!=x):\n        x=len(s)\n        n=x\n        for i in range(max(start,1),x):\n            l=i-1\n            r=i\n            if(s[l]==s[r]):\n                while(l>=0 and r<n and s[l]==s[r]):\n                    r+=1\n                    l-=1\n                l+=1\n                r-=1\n                s=s[:l]+s[r+1:]\n                start=l\n                break\n\n    if(len(s)==0):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    \n        \n", "s = input()\nans = [0] * len(s)\nn = 0\nfor x in s:\n  if n and ans[n-1] == x:\n    n -= 1\n  else:\n    ans[n] = x\n    n += 1\nprint('No' if n else 'Yes')\n\n", "s=input()\nx=1\nif(len(s)%2==1):\n    print(\"No\")\n\nelse:\n    x=len(s)-1\n    start=1\n    while(len(s)!=x):\n        x=len(s)\n        n=x\n        for i in range(max(start,1),x):\n            l=i-1\n            r=i\n            if(s[l]==s[r]):\n                while(l>=0 and r<n and s[l]==s[r]):\n                    r+=1\n                    l-=1\n                l+=1\n                r-=1\n                s=s[:l]+s[r+1:]\n                start=l\n                break\n\n    if(len(s)==0):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    \n        \n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nstack = ['#']\nfor c in input():\n    if stack[-1] == c:\n        stack.pop()\n    else:\n        stack.append(c)\n\nstack.pop()\nprint(\"No\" if len(stack) else \"Yes\")\n", "s = input()\nstk = []\nfor ch in s:\n  if len(stk) > 0 and stk[-1] == ch:\n    stk.pop()\n  else:\n    stk.append(ch)\nif len(stk) == 0:\n  print(\"Yes\")\nelse:\n  print(\"No\")\n", "from collections import deque\na = input().rstrip()                                                                         \nq = deque()\nfor i in a:   \n  if len(q) > 0 and i == q[-1]:\n    q.pop()  \n  else:\n    q.append(i)\nprint('Yes' if len(q) == 0 else 'No')\n", "a = []\nfor ch in input():\n    if a and a[-1] == ch:\n        a.pop()\n    else:\n        a.append(ch)\nprint('Yes' if not a else 'No')\n", "import sys\nimport collections\ndef solve():\n    vals = list(input())\n    q = collections.deque()\n    for cur in vals:\n        if len(q) > 0 and q[0] == cur:\n            q.popleft()\n        else:\n            q.appendleft(cur)\n    if len(q) == 0: return \"Yes\"\n    return \"No\"\n\n    \ndef read(mode=2):\n    inputs = input().strip()\n    if mode == 0: return inputs  # String\n    if mode == 1: return inputs.split()  # List of strings\n    if mode == 2: return list(map(int, inputs.split()))  # List of integers\ndef write(s=\"\\n\"):\n    if s is None: s = \"\"\n    if isinstance(s, list): s = \" \".join(map(str, s))\n    if isinstance(s, tuple): s = \" \".join(map(str, s))\n    s = str(s)\n    print(s, end=\"\")\ndef run():\n    # if sys.hexversion == 50594544 : sys.stdin = open(\"test.txt\")\n    res = solve()\n    write(res)\nrun()", "import sys\nimport collections\ndef solve():\n    vals = list(input())\n    q = collections.deque()\n    for cur in vals:\n        if len(q) > 0 and q[0] == cur:\n            q.popleft()\n        else:\n            q.appendleft(cur)\n    if len(q) == 0: return \"Yes\"\n    return \"No\"\n\n    \ndef read(mode=2):\n    inputs = input().strip()\n    if mode == 0: return inputs  # String\n    if mode == 1: return inputs.split()  # List of strings\n    if mode == 2: return list(map(int, inputs.split()))  # List of integers\ndef write(s=\"\\n\"):\n    if s is None: s = \"\"\n    if isinstance(s, list): s = \" \".join(map(str, s))\n    if isinstance(s, tuple): s = \" \".join(map(str, s))\n    s = str(s)\n    print(s, end=\"\")\ndef run():\n    # if sys.hexversion == 50594544 : sys.stdin = open(\"test.txt\")\n    res = solve()\n    write(res)\nrun()", "import sys\nimport math\n \nst = input()\nmystack = [st[0]]\n\nfor i in range(1, len(st)):\n    if(mystack != []):\n        v = mystack.pop()\n        if(v != st[i]):\n            mystack.append(v)\n            mystack.append(st[i])\n    else:\n        mystack.append(st[i])\n\nif(mystack == []):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "def main():\n    stack = []\n    for c in input():\n        if stack and c == stack[-1]:\n            del stack[-1]\n        else:\n            stack.append(c)\n    print((\"Yes\", \"No\")[bool(stack)])\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "s=[]\nfor c in input():\n     if len(s) and s[-1]==c:\n          s.pop()\n     else:\n          s.append(c)\nif len(s):\n     print('No')\nelse:\n     print('Yes')", "l=input()\nl=list(l)\n\np=[]\n\nfor i in l:\n\tif len(p)==0:\n\t\tp.append(i)\n\telif p[-1]==i:\n\t\tp.pop()\n\telse:\n\t\tp.append(i)\n\t#print(p)\nif len(p)==0:\n\tprint('Yes')\nelse:\n\tprint('No')", "stack=[]\nfor i in input().strip():\n    if len(stack)==0:\n        stack.append(i)\n    elif stack[-1]==i:\n        stack.pop()\n    else:\n        stack.append(i)\nif len(stack)==0:\n    print('Yes')\nelse:\n    print('No')\n", "s = input().strip()\nst = ['!']\nfor si in s:\n    if st[-1]==si:\n        st.pop()\n    else:\n        st.append(si)\nprint('Yes' if len(st)==1 else 'No')", "from sys import stdin\n\nlines, line_index = stdin.readlines(), -1\n\n\ndef get_line():\n  nonlocal lines, line_index\n\n  line_index += 1\n  return lines[line_index]\n\ndef main():\n  string = get_line().strip()\n\n  stack = []\n\n  for c in string:\n    if not stack:\n      stack.append(c)\n    elif stack[-1] == c:\n      stack.pop()\n    else:\n      stack.append(c)\n\n  if not stack:\n    print('Yes')\n  else:\n    print('No')\n\nmain()", "sequence = input().strip()\n\nif len(sequence) % 2 != 0:\n    print('No')\nelse:\n    stack = []\n    for s in sequence:\n        if stack and s == stack[-1]:\n            stack.pop()\n        else:\n            stack.append(s)\n\n    if stack:\n        print('No')\n    else:\n        print('Yes')", "def Untangled(exp):\n    stack = []\n    for i in exp:\n        if( (not stack) or (stack[-1] != i) ):\n            stack.append(i)\n        else:\n            stack.pop()\n    return \"No\" if stack else \"Yes\"\n\nexp = input().strip()\nprint(Untangled(exp))", "ans = []\nfor c in input():\n  if len(ans) and ans[-1] == c:\n    ans.pop()\n  else:\n    ans += [c]\nprint('No' if len(ans) else 'Yes')\n", "wires = input()\nc = 0\nd = 0\nfor i in range(len(wires)):\n    if (wires[i] == '+'):\n        c+=2*(i%2) - 1\n    if (wires[i] == '-'):\n        d+=2*(i%2) - 1\nif c==0 and d==0:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n# 1532030829894\n", "X=input()\nL=[]\nfor i in X:\n    if L==[]:\n        L.append(str(i))\n    else:\n        if i==L[len(L)-1]:\n            L.pop()\n        else:\n            L.append(i)\nif L==[]:\n    print('Yes')\nelse:\n    print('No')\n\n# 1532039711851\n", "s = input()\n\nif len(s)%2:print('No');return\n\nif s[::2].count('+')-s[1::2].count('+')==0:print('Yes');return\n\nprint('No')\n\n\n\n\n\n# Made By Mostafa_Khaled\n"]