["n = int(input())\na = list(map(int, input().split()))\nans = []\n\nfor k in range(1, n + 1):\n    x = [0] * k\n\n    x[0] = a[0]\n    for i in range(1, k):\n        x[i] = a[i] - a[i - 1]\n\n    ok = True\n    for i in range(k, n):\n        if x[i % k] != a[i] - a[i - 1]:\n            ok = False\n            break\n    if ok:\n        ans.append(k)\n\nprint(len(ans))\nprint(*ans)\n", "n = int(input())\na = input().split()\nb = [0]*n\nb[0] = int(a[0])\nfor i in range(1,n):\n    b[i] = int(a[i])-int(a[i-1])\nworks = 0\nout = \"\"\nfor j in range(1,n+1):\n    bo = True\n    for k in range(n):\n        if b[k] != b[k%j]:\n            bo = False\n            break\n    if bo:\n        works += 1\n        out += str(j) + \" \"\nprint(works)\nprint(out[:-1])\n", "n = int(input())\n\na = list(map(int, input().split()))\n\ndiffs = [a[0]]\n\nfor i in range(1,n):\n    diffs.append(a[i] - a[i-1])\n\noutput = []\nfor l in range(1,n+1):\n    flag = True\n\n    for i in range(l, n):\n        if diffs[i] != diffs[i-l]:\n            flag = False\n            break\n\n    if flag:\n        output.append(l)\n\nprint(len(output))\n\nfor i in output:\n    print(i, end=\" \")\n", "def ii():\n    return int(input())\ndef mi():\n    return list(map(int, input().split()))\ndef li():\n    return list(mi())\n\nn = ii()\na = [0] + li()\nd = [a[i] - a[i - 1] for i in range(1, n + 1)]\n\nans = []\nfor i in range(1, n + 1):\n    ok = all(d[j] == d[j % i] for j in range(n))\n    if ok: ans.append(i)\nprint(len(ans))\nprint(*ans)\n", "n = int(input())\nxs = [int(x) for x in input().split()]\n\narr_k = [xs[0]]\n\nfor i in range(1, len(xs)):\n\tarr_k.append(xs[i] - xs[i - 1])\n\nsoln = []\n# print(arr_k)\nfor k in range(1, len(arr_k) + 1):\n\tmul = len(arr_k) // k + 1\n\t# print(k,arr_k[:k], mul)\n\ttmp = (arr_k[:k] * mul)[:len(arr_k)]\n\t# print(k, tmp)\n\tif tmp == arr_k:\n\t\tsoln.append(k)\nprint(len(soln))\nprint(\" \".join(map(str, soln)))", "n = int(input())\na = [int(k) for k in input().split()]\nansw = []\nfor k in range(1, n + 1):\n    prev = 0\n    arr = [0 for i in range(k)]\n    good = True\n    for i in range(n):\n        if i < k:\n            arr[i] = a[i] - prev\n        else:\n            if arr[i % k] != a[i] - prev:\n                good = False\n                break\n        prev = a[i]\n    if good:\n        answ.append(k)\nprint(len(answ))\nprint(*answ)\n", "n = int(input())\narr = [0] + [int(i) for i in input().split(\" \")]\ndiff = [arr[i] - arr[i-1] for i in range(1, len(arr))]\nposs = []\nfor xlen in range(1, len(diff)+1):\n    rep = diff[0:xlen]\n    for startpos in range(xlen, len(diff), xlen):\n        currarr = diff[startpos:min(startpos+xlen, len(diff))]\n        for obj in range(len(currarr)):\n            if rep[obj] != currarr[obj]:\n                break\n        else:\n            continue\n        break\n    else:\n        poss.append(xlen)\nprint(len(poss))\nprint(' '.join([str(i) for i in poss]))\n", "def main():\n    n = int(input())\n    a = [0] + list([int(x) for x in input().split(\" \")])\n    d = [a[i+1] - a[i] for i in range(len(a)-1)]\n    ans = 1\n    alist = []\n    for i in range(1, n):\n        flag = True\n        for j in range(n):\n            if j >= i and d[j] != d[j-i]:\n                flag = False\n                break\n        if flag:\n            alist.append(i)\n            ans += 1\n    alist.append(n)\n    print(ans)\n    print(\" \".join([str(x) for x in alist]))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "# -*- coding: utf-8 -*-\n\nimport math\nimport collections\nimport bisect\nimport heapq\nimport time\nimport random\nimport itertools\nimport sys\n\n\"\"\"\ncreated by shhuan at 2018/10/20 22:37\n\n\"\"\"\n\n\"\"\"\n# Definition for a Node.\n\"\"\"\n\n\n\nN = int(input())\nA = [0] + [int(x) for x in input().split()]\n\ndef check(k):\n    X = [0] * k\n    vis = [False] * k\n    for i in range(1, N+1):\n        ai = A[i]\n        x = ai - A[i-1]\n\n        ix = (i-1) % k\n        if not vis[ix]:\n            vis[ix] = True\n            X[ix] = x\n        else:\n            if X[ix] != x:\n                return False\n    return True\n\n\n\nans = []\nfor i in range(1, N+1):\n    if check(i):\n        ans.append(i)\n\nprint(len(ans))\nprint(' '.join(map(str, ans)))", "#      \nimport collections, atexit, math, sys, bisect \n\nsys.setrecursionlimit(1000000)\ndef getIntList():\n    return list(map(int, input().split()))    \n\ntry :\n    #raise ModuleNotFoundError\n    import numpy\n    def dprint(*args, **kwargs):\n        #print(*args, **kwargs, file=sys.stderr)\n        # in python 3.4 **kwargs is invalid???\n        print(*args,  file=sys.stderr)\n    dprint('debug mode')\nexcept Exception:\n    def dprint(*args, **kwargs):\n        pass\n\n\n\ninId = 0\noutId = 0\nif inId>0:\n    dprint('use input', inId)\n    sys.stdin = open('input'+ str(inId) + '.txt', 'r') #\u6807\u51c6\u8f93\u51fa\u91cd\u5b9a\u5411\u81f3\u6587\u4ef6\nif outId>0:\n    dprint('use output', outId)\n    sys.stdout = open('stdout'+ str(outId) + '.txt', 'w') #\u6807\u51c6\u8f93\u51fa\u91cd\u5b9a\u5411\u81f3\u6587\u4ef6\n    atexit.register(lambda :sys.stdout.close())     #idle \u4e2d\u4e0d\u4f1a\u6267\u884c atexit\n    \nN, = getIntList()\n#print(N)\nza = [0,] + getIntList()\nzb = []\nfor i in range(N):\n    zb.append(za[i+1] - za[i])\n\ndprint(zb)\n\nres = [N]\nfor i in range(1,N):\n    ok = True\n    for j in range(i,N):\n        if zb[j] != zb[j%i]:\n            ok = False\n            break\n    if ok:\n        res.append(i)\n\nres.sort()\nprint(len(res))\nfor x in res:\n    print(x,end = ' ')\n", "n = int(input())\na = [0] + [int(i) for i in input().split()]\nd = [a[i] - a[i-1] for i in range(1, n+1)]\nans = []\nfor i in range(1, n+1):\n    if (d[:i] * (n//i + 20))[:n] == d:\n        ans.append(i)\nprint(len(ans))\nprint(' '.join([str(i) for i in ans]))\n", "n=int(input())\narr=list(map(int,input().split()))\narr=[0]+arr\nansarr=[]\nfor i in range(1,n+1):\n    valarr=[]\n    for j in range(1,i+1):\n        val=arr[j]-arr[j-1]\n        valarr.append(val)\n        flag=0\n    #print(valarr)\n    for j in range(i+1,n+1):\n        if(arr[j]!=valarr[(j-1)%i]+arr[j-1]):\n            flag=1\n            break\n\n    if(flag==0):\n        ansarr.append(i)\nprint(len(ansarr))\nprint(*ansarr)\n\n\n", "n = int( input() )\na = list( map( int, input().split() ) )\n\nfor i in range( n - 1, 0, -1 ):\n    a[ i ] -= a[ i - 1 ]\n\nlens = []\nfor l in range( 1, n + 1 ):\n    f = True\n    for i in range( n ):\n        if a[ i ] != a[ i % l ]:\n            f = False\n    if f:\n        lens.append( l )\n\nprint( len( lens ) )\nfor i in lens:\n    print( i, end= \" \")\n", "n = int(input())\nA = input().split()\nA = [0] + [int(ai) for ai in A]\n\nvalid_k = []\n\nfor k in range(1, n + 1):\n    X = []\n    isvalid = True\n    for i in range(1, n + 1):\n        if i <= k:\n            X.append(A[i] - A[i - 1])\n        else:\n            #print(A[i] - A[i - 1])\n            #print(X[(i - 1) % k])\n            if X[(i - 1) % k] != A[i] - A[i - 1]:\n                isvalid = False\n                break\n    #print(X)\n    #print(isvalid)\n    if isvalid:\n        valid_k.append(k)\n\nprint(len(valid_k))\nprint(\" \".join([str(k) for k in valid_k]))\n", "n = int(input())\na = list(map(int, input().split()))\na.insert(0,0)\nl = []\nfor i in range(n):\n\tl.append(a[i + 1] - a[i])\nr = []\nfor i in range(1,n+1):\n\tm = l[:i]\n\tj = 0\n\tk = i\n\tf = True\n\twhile k<n:\n\t\tif m[j] == l[k]:\n\t\t\tj = (j+1)%i\n\t\t\tk += 1\n\t\telse:\n\t\t\tf = False\n\t\t\tbreak\n\tif f == True:\n\t\tr.append(i)\nprint(len(r))\nprint(' '.join(map(str,r)))", "import sys\nimport math\n\ndef period(x):\n    n = len(x)\n    res = []\n    for i in range(1, len(x)):\n        if all(i==j for i,j in zip(x, x[i:])):\n            res.append(i)\n    return res + [n]\n\ndef main():\n    [n] = map(int, next(sys.stdin).split())\n    a = list(map(int, next(sys.stdin).split()))\n    \n    a = [0] + a\n    x = [j - i for i,j in zip(a, a[1:])]\n    \n    periods = period(x)\n    \n    print(len(periods))\n    print(' '.join(map(str,periods)))\n\ndef __starting_point():\n    main()\n__starting_point()", "\nimport sys\n#sys.stdin=open(\"data.txt\")\ninput=sys.stdin.readline\nmii=lambda:list(map(int,input().split()))\n\nn=int(input())\na=[0]+list(mii())\n\ndiff=[a[i+1]-a[i] for i in range(n)]\n\nans=[]\nfor i in range(1,n+1):\n    good=1\n    for j in range(n-i):\n        if diff[j]!=diff[j+i]:\n            good=0\n    if good:\n        ans.append(i)\n\nprint(len(ans))\nprint(\" \".join(map(str,ans)))\n", "\n\ndef is_cycle(seq, k):\n    ii = 0\n    for i in range(len(seq)):\n        if ii == k: ii = 0\n        if seq[i] != seq[ii]: return False\n        ii += 1\n    return True\n\n\nn = int(input())\n\nA = [0] + [int(x) for x in input().split()]\n\nAA = []\nfor i in range(1, len(A)):\n    AA.append(A[i] - A[i-1])\n\n# print(\"A: \", A)\n# print(\"AA: \", AA)\ncyqs = []\nfor cyq in range(1, len(A)):\n    if is_cycle(AA, cyq):\n        cyqs.append(cyq)\nprint(len(cyqs))\nprint(*cyqs)\n    \n            \n        \n", "gcd = lambda a, b: gcd(b, a % b) if b else a\n\n\ndef main():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    brr = []\n    for i in range(len(arr) - 1, 0, -1):\n        arr[i] -= arr[i - 1]\n    for i in range(1, len(arr) + 1):\n        f = 1\n        for j in range(0, i):\n            for k in range(j + i, len(arr), i):\n                if arr[j] != arr[k]:\n                    f = 0\n                    break\n        if f:\n            brr.append(i)\n    print(len(brr))\n    print(*brr)\n\n\n\n\n\nmain()", "n = int(input())\na = [0]+[int(i) for i in input().split()]\n\n\nb = [0] * n \nans = []\n\nfor i in range(1,len(a)):\n\tb[i-1]=a[i]-a[i-1]\n\n\nfor i in range(1,n):\n\tif b[:i]==b[-i:]:\n\t\tans.append(n-i)\n\nprint(len(ans)+1)\nprint(*sorted(ans),n)", "n=int(input())\na=[0]\na+=list(map(int,input().split()))\nx=[]\nfor i in range(1,n+1):\n    x.append(a[i]-a[i-1])\nans=[]\nb=a[1:]\nfor i in range(1,n+1):\n    r=n%i\n    c=x[:i]\n    f=0\n    if x[:r]!=x[n-r:]:\n        continue\n    for j in range(i,n-r,i):\n        if x[j:j+i]!=c:\n            f=1\n    if f==0:\n        ans.append(i)\nprint(len(ans))\nprint(*ans)\n", "n=int(input())\na=[0]+list(map(int,input().split()))\ndist=[]\nfor i in range(1,n+1):\n\tdist.append(a[i]-a[i-1])\nk_s=[]\nfor k in range(1,n+1):\n\tcan=True\n\tfor i in range(n):\n\t\tif dist[i]==dist[i%k]:\n\t\t\tpass\n\t\telse:\n\t\t\tcan=False\n\t\t\tbreak\n\tif can:\n\t\tk_s.append(k)\nprint(len(k_s))\nfor t in k_s:\n\tprint(t,end=\" \")", "def tr(s,k):\n    a=0\n    s1=[]\n    for i in range(1,len(s)):\n        s1.append(s[i]-s[i-1])\n    t=True\n    for j in range(1,len(s)):\n        if s[j]!=s[j-1]+s1[(j-1)%k]:\n            t=False\n            break\n    return t\nfrom sys import stdin\nn=int(stdin.readline().strip())\n#n,m=map(int,stdin.readline().strip().split())\ns=[0]+list(map(int,stdin.readline().strip().split()))\nans=[]\nfor i in range(1,n+1):\n    if tr(s,i):\n        ans.append(i)\nprint(len(ans))\nprint(*ans)\n", "#!/usr/bin/env python3\n# encoding: utf-8\n\n\n\n#----------\n# Constants\n#----------\n\n\n\n#----------\n# Functions\n#----------\n\ndef check(d, length):\n    n = len(d)\n    t = d[:length]\n    for i, item in enumerate(d):\n        if t[i % length] != item:\n            return False\n    return True\n\n# The function that solves the task\ndef calc(a):\n    k = []\n    d = []\n    last = 0\n    for item in a:\n        d.append(item - last)\n        last = item\n    for i in range(len(a)):\n        if check(d, i+1):\n            k.append(i+1)\n\n    return k\n\n\n# Reads a string from stdin, splits it by space chars, converts each\n# substring to int, adds it to a list and returns the list as a result.\ndef get_ints():\n    return [ int(n) for n in input().split() ]\n\n\n# Reads a string from stdin, splits it by space chars, converts each substring\n# to floating point number, adds it to a list and returns the list as a result.\ndef get_floats():\n    return [ float(n) for n in input().split() ]\n\n\ndef seq2str(seq):\n    return ' '.join(str(item) for item in seq)\n\n\n\n#----------\n# Execution start point\n#----------\n\ndef __starting_point():\n    a = get_ints()\n    assert len(a) == 1\n    n = a[0]\n    a = get_ints()\n    assert len(a) == n\n\n    k = calc(a)\n    print(len(k))\n    print(seq2str(k))\n    \n\n__starting_point()"]