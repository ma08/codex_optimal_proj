["\n\ndef hamming_distance(s, t):\n    \"\"\"\n    >>> hamming_distance(\"pergament\", \"permanent\")\n    2\n    >>> hamming_distance(\"wookie\", \"cookie\")\n    2\n    >>> hamming_distance(\"petr\", \"egor\")\n    2\n    >>> hamming_distance(\"double\", \"bundle\")\n    2\n    \"\"\"\n    distance = 0\n    for i in range(len(s)):\n        if s[i] != t[i]:\n            distance += 1\n    return distance\n\n\ndef minimum_distance(s, t):\n    \"\"\"\n    >>> minimum_distance(\"pergament\", \"permanent\")\n    1\n    >>> minimum_distance(\"wookie\", \"cookie\")\n    1\n    >>> minimum_distance(\"petr\", \"egor\")\n    2\n    >>> minimum_distance(\"double\", \"bundle\")\n    2\n    \"\"\"\n    distance = 0\n    i, j = -1, -1\n    for k in range(len(s)):\n        if s[k] != t[k]:\n            distance += 1\n            if i == -1:\n                i = k\n            else:\n                j = k\n    return distance, i + 1, j + 1\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    s = input()\n    t = input()\n    print(minimum_distance(s, t)[0])\n    print(*minimum_distance(s, t)[1:])", "\n\n#Solution:\n\nn=int(input())\ns=input()\nt=input()\n\nx=y=-1\nd=0\n\nfor i in range(n):\n    if s[i]!=t[i]:\n        d+=1\n        if x==-1:\n            x=i\n        else:\n            y=i\n\nif x==-1:\n    print(0)\nelse:\n    if d==2 and s[x]==t[y] and s[y]==t[x]:\n        print(1)\n        print(x+1,y+1)\n    else:\n        print(d)\n        print(x+1,y+1)"]