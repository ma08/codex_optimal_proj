"""
You are given an integer array $a_1, a_2, \ldots, a_n$.

The array $b$ is called to be a subsequence of $a$ if it is possible to remove some elements from $a$ to get $b$.

Array $b_1, b_2, \ldots, b_k$ is called to be good if it is not empty and for every $i$ ($1 \le i \le k$) $b_i$ is divisible by $i$.

Find the number of good subsequences in $a$ modulo $10^9 + 7$. 

Two subsequences are considered different if index sets of numbers included in them are different. That is, the values ​of the elements ​do not matter in the comparison of subsequences. In particular, the array $a$ has exactly $2^n - 1$ different subsequences (excluding an empty subsequence).


-----Input-----

The first line contains an integer $n$ ($1 \le n \le 100\,000$) — the length of the array $a$.

The next line contains integers $a_1, a_2, \ldots, a_n$ ($1 \le a_i \le 10^6$).


-----Output-----

Print exactly one integer — the number of good subsequences taken modulo $10^9 + 7$.


-----Examples-----
Input
2
1 2

Output
3
Input
5
2 2 1 22 14

Output
13


-----Note-----

In the first example, all three non-empty possible subsequences are good: $\{1\}$, $\{1, 2\}$, $\{2\}$

In the second example, the possible good subsequences are: $\{2\}$, $\{2, 2\}$, $\{2, 22\}$, $\{2, 14\}$, $\{2\}$, $\{2, 22\}$, $\{2, 14\}$, $\{1\}$, $\{1, 22\}$, $\{1, 14\}$, $\{22\}$, $\{22, 14\}$, $\{14\}$.

Note, that some subsequences are listed more than once, since they occur in the original array multiple times.
"""
--------------------------
{
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nn = int(input())\na = list(map(int, input().split()))\nmod = 10 ** 9 + 7\n\n# Number of good subsequences ending with an element a[i]\n# (not necessarily the last element in the original array)\ndp = [0] * n\n\nfor i in range(n):\n    dp[i] = 1\n    for j in range(i):\n        if a[i] % (i - j) == 0:\n            dp[i] += dp[j]\n            dp[i] %= mod\n\n# Sum of the above numbers\nprint(sum(dp) % mod)"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nfrom math import factorial\n\ndef get_combinations(n, k):\n    # Combinatorial function: n choose k\n    return factorial(n) // (factorial(k) * factorial(n - k))\n\ndef get_divisible_subsequences(numbers, n):\n    # Get number of subsequences of integers in numbers that are divisible by their length\n    divisible_subsequences = 0\n    for length in range(1, n + 1):\n        # For each subsequence length\n        divisible_subsequences_of_length = 0\n        for number in numbers:\n            # For each number in numbers\n            if number % length == 0:\n                # If number is divisible by length, then it can be used as the first number in a subsequence of length length\n                divisible_subsequences_of_length += 1\n        divisible_subsequences += get_combinations(divisible_subsequences_of_length, length)\n    return divisible_subsequences\n\nn = int(input())\nnumbers = list(map(int, input().split()))\nprint(get_divisible_subsequences(numbers, n))"
    }
  ],
  "created": 1648671084,
  "id": "cmpl-4rYx2efHPdrKjnkSXeqrbGoOuuCh5",
  "model": "code-davinci:002",
  "object": "text_completion"
}
0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nn = int(input())\na = list(map(int, input().split()))\nmod = 10 ** 9 + 7\n\n# Number of good subsequences ending with an element a[i]\n# (not necessarily the last element in the original array)\ndp = [0] * n\n\nfor i in range(n):\n    dp[i] = 1\n    for j in range(i):\n        if a[i] % (i - j) == 0:\n            dp[i] += dp[j]\n            dp[i] %= mod\n\n# Sum of the above numbers\nprint(sum(dp) % mod)"
}
REASON stop
1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nfrom math import factorial\n\ndef get_combinations(n, k):\n    # Combinatorial function: n choose k\n    return factorial(n) // (factorial(k) * factorial(n - k))\n\ndef get_divisible_subsequences(numbers, n):\n    # Get number of subsequences of integers in numbers that are divisible by their length\n    divisible_subsequences = 0\n    for length in range(1, n + 1):\n        # For each subsequence length\n        divisible_subsequences_of_length = 0\n        for number in numbers:\n            # For each number in numbers\n            if number % length == 0:\n                # If number is divisible by length, then it can be used as the first number in a subsequence of length length\n                divisible_subsequences_of_length += 1\n        divisible_subsequences += get_combinations(divisible_subsequences_of_length, length)\n    return divisible_subsequences\n\nn = int(input())\nnumbers = list(map(int, input().split()))\nprint(get_divisible_subsequences(numbers, n))"
}
REASON stop
