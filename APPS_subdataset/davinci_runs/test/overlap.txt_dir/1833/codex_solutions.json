["\n\nn = int(input())\na = list(map(int, input().split()))\nmod = 10 ** 9 + 7\n\n# Number of good subsequences ending with an element a[i]\n# (not necessarily the last element in the original array)\ndp = [0] * n\n\nfor i in range(n):\n    dp[i] = 1\n    for j in range(i):\n        if a[i] % (i - j) == 0:\n            dp[i] += dp[j]\n            dp[i] %= mod\n\n# Sum of the above numbers\nprint(sum(dp) % mod)", "\n\nfrom math import factorial\n\ndef get_combinations(n, k):\n    # Combinatorial function: n choose k\n    return factorial(n) // (factorial(k) * factorial(n - k))\n\ndef get_divisible_subsequences(numbers, n):\n    # Get number of subsequences of integers in numbers that are divisible by their length\n    divisible_subsequences = 0\n    for length in range(1, n + 1):\n        # For each subsequence length\n        divisible_subsequences_of_length = 0\n        for number in numbers:\n            # For each number in numbers\n            if number % length == 0:\n                # If number is divisible by length, then it can be used as the first number in a subsequence of length length\n                divisible_subsequences_of_length += 1\n        divisible_subsequences += get_combinations(divisible_subsequences_of_length, length)\n    return divisible_subsequences\n\nn = int(input())\nnumbers = list(map(int, input().split()))\nprint(get_divisible_subsequences(numbers, n))"]