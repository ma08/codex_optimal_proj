"""
Vlad likes to eat in cafes very much. During his life, he has visited cafes n times. Unfortunately, Vlad started to feel that his last visits are not any different from each other. To fix that Vlad had a small research.

First of all, Vlad assigned individual indices to all cafes. Then, he wrote down indices of cafes he visited in a row, in order of visiting them. Now, Vlad wants to find such a cafe that his last visit to that cafe was before his last visits to every other cafe. In other words, he wants to find such a cafe that he hasn't been there for as long as possible. Help Vlad to find that cafe.


-----Input-----

In first line there is one integer n (1 ≤ n ≤ 2·10^5) — number of cafes indices written by Vlad.

In second line, n numbers a_1, a_2, ..., a_{n} (0 ≤ a_{i} ≤ 2·10^5) are written — indices of cafes in order of being visited by Vlad. Vlad could visit some cafes more than once. Note that in numeration, some indices could be omitted.


-----Output-----

Print one integer — index of the cafe that Vlad hasn't visited for as long as possible.


-----Examples-----
Input
5
1 3 2 1 2

Output
3

Input
6
2 1 2 2 4 1

Output
2



-----Note-----

In first test, there are three cafes, and the last visits to cafes with indices 1 and 2 were after the last visit to cafe with index 3; so this cafe is the answer. 

In second test case, there are also three cafes, but with indices 1, 2 and 4. Cafes with indices 1 and 4 were visited after the last visit of cafe with index 2, so the answer is 2. Note that Vlad could omit some numbers while numerating the cafes.
"""
--------------------------
{
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\n# Read in the input\nn = int(input())\ncafes = [int(x) for x in input().split()]\n\n# Create a dictionary with the last time each cafe was visited\ncafe_last_visit = {}\nfor cafe in cafes:\n    cafe_last_visit[cafe] = cafe_last_visit.get(cafe, 0) + 1\n\n# Find the cafe that was last visited the longest ago\nlast_visit = max(cafe_last_visit.values())\nfor cafe in cafe_last_visit:\n    if cafe_last_visit[cafe] == last_visit:\n        print(cafe)\n        break"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# n = 5\n# a = [1, 3, 2, 1, 2]\nn = 6\na = [2, 1, 2, 2, 4, 1]\n\nm = max(a)\nc = [0] * (m+1)\n\nfor i in a:\n    c[i] += 1\n\nprint(c.index(max(c)))"
    }
  ],
  "created": 1648671080,
  "id": "cmpl-4rYwyYlmXJWuAwQLKljiNulFTwwaA",
  "model": "code-davinci:002",
  "object": "text_completion"
}
0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\n# Read in the input\nn = int(input())\ncafes = [int(x) for x in input().split()]\n\n# Create a dictionary with the last time each cafe was visited\ncafe_last_visit = {}\nfor cafe in cafes:\n    cafe_last_visit[cafe] = cafe_last_visit.get(cafe, 0) + 1\n\n# Find the cafe that was last visited the longest ago\nlast_visit = max(cafe_last_visit.values())\nfor cafe in cafe_last_visit:\n    if cafe_last_visit[cafe] == last_visit:\n        print(cafe)\n        break"
}
REASON stop
1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\n# n = int(input())\n# a = list(map(int, input().split()))\n\n# n = 5\n# a = [1, 3, 2, 1, 2]\nn = 6\na = [2, 1, 2, 2, 4, 1]\n\nm = max(a)\nc = [0] * (m+1)\n\nfor i in a:\n    c[i] += 1\n\nprint(c.index(max(c)))"
}
REASON stop
