["\n\ndef main():\n    n = int(raw_input())\n    names = []\n    for _ in range(n):\n        names.append(raw_input())\n    names = sorted(names)\n    chars = []\n    for i in range(len(names[0])):\n        chars.append(names[0][i])\n        for j in range(1, len(names)):\n            if len(names[j]) > i and names[j][i] != chars[-1]:\n                chars.append(names[j][i])\n    chars = list(set(chars))\n    if len(chars) == 26:\n        print \"abcdefghijklmnopqrstuvwxyz\"\n    else:\n        chars = sorted(chars)\n        for i in range(len(chars)):\n            if chr(ord(chars[i]) + 1) not in chars:\n                chars.insert(i+1, chr(ord(chars[i]) + 1))\n                break\n        for i in range(len(chars)):\n            if chr(ord(chars[i]) - 1) not in chars:\n                chars.insert(i, chr(ord(chars[i]) - 1))\n                break\n        print \"\".join(chars)\n\nif __name__ == \"__main__\":\n    main()", "\n\nfrom itertools import permutations\n\ndef main():\n    n = int(input())\n    names = []\n    for i in range(n):\n        name = input()\n        names.append(name)\n    names = sorted(names)\n\n    # print(names)\n\n    alphabet = []\n    for i in range(n):\n        name = names[i]\n        for j in range(len(name)):\n            letter = name[j]\n            if letter not in alphabet:\n                alphabet.append(letter)\n    \n    # print(alphabet)\n\n    # print(len(alphabet))\n\n    perm = permutations(alphabet)\n\n    for item in perm:\n        for i in range(len(item)):\n            alphabet[i] = item[i]\n        # print(alphabet)\n\n        # print(names)\n\n        new_names = []\n        for name in names:\n            new_name = ''\n            for letter in name:\n                new_name += alphabet[ord(letter) - ord('a')]\n            new_names.append(new_name)\n        new_names = sorted(new_names)\n\n        # print(new_names)\n        # print(new_names == names)\n        if new_names == names:\n            print(''.join(alphabet))\n            return\n    \n    print(\"Impossible\")\n\nif __name__ == '__main__':\n    main()"]