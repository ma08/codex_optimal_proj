["\n\nimport sys\nimport heapq\n\ndef main():\n    n, m = [int(x) for x in raw_input().split()]\n    graph = {}\n    for i in range(1, n+1):\n        graph[i] = []\n    for i in range(m):\n        a, b = [int(x) for x in raw_input().split()]\n        graph[a].append(b)\n        graph[b].append(a)\n    topics = [int(x) for x in raw_input().split()]\n    queue = []\n    for i in range(n):\n        heapq.heappush(queue, (topics[i], i+1))\n    visited = set()\n    order = []\n    while queue:\n        topic, node = heapq.heappop(queue)\n        if node in visited:\n            continue\n        visited.add(node)\n        order.append(node)\n        for neighbor in graph[node]:\n            if neighbor in visited:\n                continue\n            heapq.heappush(queue, (topics[neighbor-1], neighbor))\n    if len(order) != n:\n        return -1\n    return ' '.join(map(str, order))\n\nif __name__ == '__main__':\n    print main()", "\n\n# SOLUTION\n\nn, m = map(int, input().split())\n\nadj = [[] for _ in range(n)]\n\nfor _ in range(m):\n    a, b = map(int, input().split())\n    adj[a - 1].append(b - 1)\n    adj[b - 1].append(a - 1)\n\nt = list(map(int, input().split()))\n\nvis = [False] * n\nans = [-1] * n\n\nfor i in range(n):\n    if vis[i]:\n        continue\n\n    vis[i] = True\n    ans[i] = t[i] - 1\n    q = [i]\n\n    while q:\n        v = q.pop()\n        for u in adj[v]:\n            if vis[u]:\n                continue\n\n            vis[u] = True\n            ans[u] = t[u] - 1\n            q.append(u)\n\n\nif -1 in ans:\n    print(-1)\nelse:\n    print(*[i + 1 for i in ans])"]