"""
You are given an integer sequence $a_1, a_2, \dots, a_n$.

Find the number of pairs of indices $(l, r)$ ($1 \le l \le r \le n$) such that the value of median of $a_l, a_{l+1}, \dots, a_r$ is exactly the given number $m$.

The median of a sequence is the value of an element which is in the middle of the sequence after sorting it in non-decreasing order. If the length of the sequence is even, the left of two middle elements is used.

For example, if $a=[4, 2, 7, 5]$ then its median is $4$ since after sorting the sequence, it will look like $[2, 4, 5, 7]$ and the left of two middle elements is equal to $4$. The median of $[7, 1, 2, 9, 6]$ equals $6$ since after sorting, the value $6$ will be in the middle of the sequence.

Write a program to find the number of pairs of indices $(l, r)$ ($1 \le l \le r \le n$) such that the value of median of $a_l, a_{l+1}, \dots, a_r$ is exactly the given number $m$.


-----Input-----

The first line contains integers $n$ and $m$ ($1 \le n,m \le 2\cdot10^5$) â€” the length of the given sequence and the required value of the median.

The second line contains an integer sequence $a_1, a_2, \dots, a_n$ ($1 \le a_i \le 2\cdot10^5$).


-----Output-----

Print the required number.


-----Examples-----
Input
5 4
1 4 5 60 4

Output
8

Input
3 1
1 1 1

Output
6

Input
15 2
1 2 3 1 2 3 1 2 3 1 2 3 1 2 3

Output
97



-----Note-----

In the first example, the suitable pairs of indices are: $(1, 3)$, $(1, 4)$, $(1, 5)$, $(2, 2)$, $(2, 3)$, $(2, 5)$, $(4, 5)$ and $(5, 5)$.
"""
--------------------------
{
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n, m = [int(x) for x in sys.stdin.readline().split()]\n    a = [int(x) for x in sys.stdin.readline().split()]\n    idx = [0] * (2*10**5 + 1)\n    s = 0\n    for i in range(1, n+1):\n        a[i-1] += 1\n        s += idx[a[i-1]]\n        idx[a[i-1]] += 1\n    print(s)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\n\ndef solve(n, m, arr):\n    \"\"\"\n    :param n: Number of elements in the array\n    :param m: Value of the median\n    :param arr: Array of values\n    :return: Number of indices that have the median equal to m\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if arr[i:j+1] == [m]*(j-i+1):\n                count += 1\n\n    return count\n\n\nif __name__ == \"__main__\":\n    n, m = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    print(solve(n, m, arr))"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\n# -----Solution-----\n\nn, m = map(int, input().split())\na = list(map(int, input().split()))\nresult = 0\n\nfor i in range(n):\n    start = i\n    end = n - 1\n    while start <= end:\n        mid = (start + end) // 2\n\n        if a[mid] == m:\n            temp_mid = mid\n            while temp_mid > 0 and a[temp_mid - 1] == m:\n                temp_mid -= 1\n            temp_start = start\n            while temp_start < mid and a[temp_start] < m:\n                temp_start += 1\n            result += (mid - temp_mid + 1) * (temp_mid - temp_start + 1)\n            break\n        elif a[mid] < m:\n            start = mid + 1\n        else:\n            end = mid - 1\n\nprint(result)"
    }
  ],
  "created": 1648693594,
  "id": "cmpl-4reo64vy6Ri2l7tmrSCWX1SZWq4lp",
  "model": "code-davinci:002",
  "object": "text_completion"
}
0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n, m = [int(x) for x in sys.stdin.readline().split()]\n    a = [int(x) for x in sys.stdin.readline().split()]\n    idx = [0] * (2*10**5 + 1)\n    s = 0\n    for i in range(1, n+1):\n        a[i-1] += 1\n        s += idx[a[i-1]]\n        idx[a[i-1]] += 1\n    print(s)\n\nif __name__ == \"__main__\":\n    main()"
}
REASON stop
1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\n\ndef solve(n, m, arr):\n    \"\"\"\n    :param n: Number of elements in the array\n    :param m: Value of the median\n    :param arr: Array of values\n    :return: Number of indices that have the median equal to m\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if arr[i:j+1] == [m]*(j-i+1):\n                count += 1\n\n    return count\n\n\nif __name__ == \"__main__\":\n    n, m = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    print(solve(n, m, arr))"
}
REASON stop
2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\n# -----Solution-----\n\nn, m = map(int, input().split())\na = list(map(int, input().split()))\nresult = 0\n\nfor i in range(n):\n    start = i\n    end = n - 1\n    while start <= end:\n        mid = (start + end) // 2\n\n        if a[mid] == m:\n            temp_mid = mid\n            while temp_mid > 0 and a[temp_mid - 1] == m:\n                temp_mid -= 1\n            temp_start = start\n            while temp_start < mid and a[temp_start] < m:\n                temp_start += 1\n            result += (mid - temp_mid + 1) * (temp_mid - temp_start + 1)\n            break\n        elif a[mid] < m:\n            start = mid + 1\n        else:\n            end = mid - 1\n\nprint(result)"
}
REASON stop
