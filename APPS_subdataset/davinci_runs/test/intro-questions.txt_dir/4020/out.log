"""
Polycarp is going to participate in the contest. It starts at $h_1:m_1$ and ends at $h_2:m_2$. It is guaranteed that the contest lasts an even number of minutes (i.e. $m_1 \% 2 = m_2 \% 2$, where $x \% y$ is $x$ modulo $y$). It is also guaranteed that the entire contest is held during a single day. And finally it is guaranteed that the contest lasts at least two minutes.

Polycarp wants to know the time of the midpoint of the contest. For example, if the contest lasts from $10:00$ to $11:00$ then the answer is $10:30$, if the contest lasts from $11:10$ to $11:12$ then the answer is $11:11$.


-----Input-----

The first line of the input contains two integers $h_1$ and $m_1$ in the format hh:mm.

The second line of the input contains two integers $h_2$ and $m_2$ in the same format (hh:mm).

It is guaranteed that $0 \le h_1, h_2 \le 23$ and $0 \le m_1, m_2 \le 59$.

It is guaranteed that the contest lasts an even number of minutes (i.e. $m_1 \% 2 = m_2 \% 2$, where $x \% y$ is $x$ modulo $y$). It is also guaranteed that the entire contest is held during a single day. And finally it is guaranteed that the contest lasts at least two minutes.


-----Output-----

Print two integers $h_3$ and $m_3$ ($0 \le h_3 \le 23, 0 \le m_3 \le 59$) corresponding to the midpoint of the contest in the format hh:mm. Print each number as exactly two digits (prepend a number with leading zero if needed), separate them with ':'.


-----Examples-----
Input
10:00
11:00

Output
10:30

Input
11:10
11:12

Output
11:11

Input
01:02
03:02

Output
02:02
"""
--------------------------
{
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nh1, m1 = map(int, input().split(':'))\nh2, m2 = map(int, input().split(':'))\n\nm_difference = (m2 - m1) / 2\n\nh_difference = (h2 - h1) / 2\nif m_difference >= 30:\n    h_difference += 0.5\n\nif m_difference >= 30:\n    m_difference -= 30\n\nm3 = m1 + m_difference\nh3 = h1 + h_difference\n\nif m3 >= 60:\n    m3 -= 60\n    h3 += 1\n\nprint(str(int(h3)).zfill(2) + ':' + str(int(m3)).zfill(2))"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nimport sys\n\nh1, m1 = map(int, input().split(':'))\nh2, m2 = map(int, input().split(':'))\n\nif m2 < m1:\n    m2 += 60\n    h2 -= 1\nif h2 < h1:\n    h2 += 24\n\ntot_min = (h2 - h1) * 60 + m2 - m1\nmid_min = tot_min // 2\nh3 = h1 + mid_min // 60\nm3 = m1 + mid_min % 60\nif m3 >= 60:\n    m3 -= 60\n    h3 += 1\nif h3 >= 24:\n    h3 -= 24\n\nprint('{:02d}:{:02d}'.format(h3, m3))"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nimport fileinput\n\ndef get_midpoint(start, end):\n    # Get the total number of minutes\n    total_min = (end[0] - start[0]) * 60 + (end[1] - start[1])\n    # Add half of the number of minutes to the start time\n    midpoint = [start[0], start[1] + (total_min / 2)]\n    # If the time rolled over to the next hour, adjust the hours\n    if midpoint[1] >= 60:\n        midpoint[1] -= 60\n        midpoint[0] += 1\n        if midpoint[0] == 24:\n            midpoint[0] = 0\n    # If the minutes are less than 10, prepend a zero\n    if midpoint[1] < 10:\n        midpoint[1] = '0' + str(midpoint[1])\n    else:\n        midpoint[1] = str(midpoint[1])\n    # If the hours are less than 10, prepend a zero\n    if midpoint[0] < 10:\n        midpoint[0] = '0' + str(midpoint[0])\n    else:\n        midpoint[0] = str(midpoint[0])\n    # Return the midpoint\n    return ':'.join(midpoint)\n\ndef main():\n    # Read in the input\n    start_time = fileinput.input()[0].split(':')\n    end_time = fileinput.input()[0].split(':')\n    start_time = [int(start_time[0]), int(start_time[1])]\n    end_time = [int(end_time[0]), int(end_time[1])]\n    # Call the function\n    print get_midpoint(start_time, end_time)\n\nif __name__ == '__main__':\n    main()"
    }
  ],
  "created": 1648692324,
  "id": "cmpl-4reTcrJVEFR9WmksKj9aQh3Tg0nG7",
  "model": "code-davinci:002",
  "object": "text_completion"
}
0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nh1, m1 = map(int, input().split(':'))\nh2, m2 = map(int, input().split(':'))\n\nm_difference = (m2 - m1) / 2\n\nh_difference = (h2 - h1) / 2\nif m_difference >= 30:\n    h_difference += 0.5\n\nif m_difference >= 30:\n    m_difference -= 30\n\nm3 = m1 + m_difference\nh3 = h1 + h_difference\n\nif m3 >= 60:\n    m3 -= 60\n    h3 += 1\n\nprint(str(int(h3)).zfill(2) + ':' + str(int(m3)).zfill(2))"
}
REASON stop
1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nimport sys\n\nh1, m1 = map(int, input().split(':'))\nh2, m2 = map(int, input().split(':'))\n\nif m2 < m1:\n    m2 += 60\n    h2 -= 1\nif h2 < h1:\n    h2 += 24\n\ntot_min = (h2 - h1) * 60 + m2 - m1\nmid_min = tot_min // 2\nh3 = h1 + mid_min // 60\nm3 = m1 + mid_min % 60\nif m3 >= 60:\n    m3 -= 60\n    h3 += 1\nif h3 >= 24:\n    h3 -= 24\n\nprint('{:02d}:{:02d}'.format(h3, m3))"
}
REASON stop
2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nimport fileinput\n\ndef get_midpoint(start, end):\n    # Get the total number of minutes\n    total_min = (end[0] - start[0]) * 60 + (end[1] - start[1])\n    # Add half of the number of minutes to the start time\n    midpoint = [start[0], start[1] + (total_min / 2)]\n    # If the time rolled over to the next hour, adjust the hours\n    if midpoint[1] >= 60:\n        midpoint[1] -= 60\n        midpoint[0] += 1\n        if midpoint[0] == 24:\n            midpoint[0] = 0\n    # If the minutes are less than 10, prepend a zero\n    if midpoint[1] < 10:\n        midpoint[1] = '0' + str(midpoint[1])\n    else:\n        midpoint[1] = str(midpoint[1])\n    # If the hours are less than 10, prepend a zero\n    if midpoint[0] < 10:\n        midpoint[0] = '0' + str(midpoint[0])\n    else:\n        midpoint[0] = str(midpoint[0])\n    # Return the midpoint\n    return ':'.join(midpoint)\n\ndef main():\n    # Read in the input\n    start_time = fileinput.input()[0].split(':')\n    end_time = fileinput.input()[0].split(':')\n    start_time = [int(start_time[0]), int(start_time[1])]\n    end_time = [int(end_time[0]), int(end_time[1])]\n    # Call the function\n    print get_midpoint(start_time, end_time)\n\nif __name__ == '__main__':\n    main()"
}
REASON stop
