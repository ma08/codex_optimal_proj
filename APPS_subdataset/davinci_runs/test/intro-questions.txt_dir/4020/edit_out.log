2022-03-30 21:01:26.417319 num operations 2
2022-03-30 21:01:26.417346 size on input set 1
2022-03-30 21:01:32.277062 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    # get the input from the user\n    h1, m1 = sys.stdin.readline().strip().split(':')\n    h2, m2 = sys.stdin.readline().strip().split(':')\n    h1 = int(h1)\n    m1 = int(m1)\n    h2 = int(h2)\n    m2 = int(m2)\n    # calculate the midpoint\n    h = (h1 + h2) // 2\n    m = (m1 + m2) // 2\n    # check if we need to add an hour to the midpoint time\n    if m > 59:\n        h += 1\n        m -= 60\n    # check if we need to add a day to the midpoint\n    if h > 23:\n        h -= 24\n    # print the result\n    print(\"{:02d}:{:02d}\".format(h, m))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    # get the input \n    h1, m1 = sys.stdin.readline().strip().split(':')\n    h2, m2 = sys.stdin.readline().strip().split(':')\n    h1 = int(h1)\n    m1 = int(m1)\n    h2 = int(h2)\n    m2 = int(m2)\n    # calculate midpoint\n    h = (h1 + h2) // 2\n    m = (m1 + m2) // 2\n    # check if we need to add an hour to the midpoint\n    if m > 59:\n        h += 1\n        m -= 60\n    # check if we need to add a day to the midpoint\n    if h > 23:\n        h -= 24\n    # print the result\n    print(\"{:02d}:{:02d}\".format(h, m))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1648688486,
  "object": "edit"
}
2022-03-30 21:01:32.277246 fix spelling mistakes 2 ['\nimport sys\n\ndef main():\n    # get the input from the user\n    h1, m1 = sys.stdin.readline().strip().split(\':\')\n    h2, m2 = sys.stdin.readline().strip().split(\':\')\n    h1 = int(h1)\n    m1 = int(m1)\n    h2 = int(h2)\n    m2 = int(m2)\n    # calculate the midpoint\n    h = (h1 + h2) // 2\n    m = (m1 + m2) // 2\n    # check if we need to add an hour to the midpoint time\n    if m > 59:\n        h += 1\n        m -= 60\n    # check if we need to add a day to the midpoint\n    if h > 23:\n        h -= 24\n    # print the result\n    print("{:02d}:{:02d}".format(h, m))\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    # get the input \n    h1, m1 = sys.stdin.readline().strip().split(\':\')\n    h2, m2 = sys.stdin.readline().strip().split(\':\')\n    h1 = int(h1)\n    m1 = int(m1)\n    h2 = int(h2)\n    m2 = int(m2)\n    # calculate midpoint\n    h = (h1 + h2) // 2\n    m = (m1 + m2) // 2\n    # check if we need to add an hour to the midpoint\n    if m > 59:\n        h += 1\n        m -= 60\n    # check if we need to add a day to the midpoint\n    if h > 23:\n        h -= 24\n    # print the result\n    print("{:02d}:{:02d}".format(h, m))\n\nif __name__ == "__main__":\n    main()\n']
2022-03-30 21:01:32.277270 size on output set 2
2022-03-30 21:01:32.277275 size on input set 2
2022-03-30 21:01:40.859490 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    # get the input from the user\n    h1, m1 = sys.stdin.readline().strip().split(\":\")\n    h2, m2 = sys.stdin.readline().strip().split(\":\")\n    h1 = int(h1)\n    m1 = int(m1)\n    h2 = int(h2)\n    m2 = int(m2)\n    # calculate the midpoint\n    h = (h1 + h2) // 2\n    m = (m1 + m2) // 2\n    # check if we need to add an hour to the midpoint time\n    if m > 59:\n        h += 1\n        m -= 60\n    # check if we need to add a day to the midpoint\n    if h > 23:\n        h -= 24\n    # print the result\n    print(\"{:02d}:{:02d}\".format(h, m))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    # get the input from the user\n    h1, m1 = sys.stdin.readline().strip().split(':') # get the first time\n    h2, m2 = sys.stdin.readline().strip().split(':') # get the second time\n    h1 = int(h1)\n    m1 = int(m1)\n    h2 = int(h2)\n    m2 = int(m2)\n    # calculate the midpoint\n    h = (h1 + h2) // 2 # get the midpoint of the hours\n    m = (m1 + m2) // 2 # get the midpoint of the minutes\n    # check if we need to add an hour to the midpoint time\n    if m > 59: # check if we need to add an hour to the midpoint time\n        h += 1 # add an hour to the midpoint\n        m -= 60 # subtract an hour from the midpoint\n    # check if we need to add a day to the midpoint\n    if h > 23: # check if we need to add a day to the midpoint\n        h -= 24 # subtract a day from the midpoint\n    # print the result\n    print(\"{:02d}:{:02d}\".format(h, m))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1648688492,
  "object": "edit"
}
2022-03-30 21:01:40.859657 fix syntax errors 2 ['\nimport sys\n\ndef main():\n    # get the input from the user\n    h1, m1 = sys.stdin.readline().strip().split(":")\n    h2, m2 = sys.stdin.readline().strip().split(":")\n    h1 = int(h1)\n    m1 = int(m1)\n    h2 = int(h2)\n    m2 = int(m2)\n    # calculate the midpoint\n    h = (h1 + h2) // 2\n    m = (m1 + m2) // 2\n    # check if we need to add an hour to the midpoint time\n    if m > 59:\n        h += 1\n        m -= 60\n    # check if we need to add a day to the midpoint\n    if h > 23:\n        h -= 24\n    # print the result\n    print("{:02d}:{:02d}".format(h, m))\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    # get the input from the user\n    h1, m1 = sys.stdin.readline().strip().split(\':\') # get the first time\n    h2, m2 = sys.stdin.readline().strip().split(\':\') # get the second time\n    h1 = int(h1)\n    m1 = int(m1)\n    h2 = int(h2)\n    m2 = int(m2)\n    # calculate the midpoint\n    h = (h1 + h2) // 2 # get the midpoint of the hours\n    m = (m1 + m2) // 2 # get the midpoint of the minutes\n    # check if we need to add an hour to the midpoint time\n    if m > 59: # check if we need to add an hour to the midpoint time\n        h += 1 # add an hour to the midpoint\n        m -= 60 # subtract an hour from the midpoint\n    # check if we need to add a day to the midpoint\n    if h > 23: # check if we need to add a day to the midpoint\n        h -= 24 # subtract a day from the midpoint\n    # print the result\n    print("{:02d}:{:02d}".format(h, m))\n\nif __name__ == "__main__":\n    main()\n']
2022-03-30 21:01:44.456651 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    # get the input \n    h1, m1 = sys.stdin.readline().strip().split(':')\n    h2, m2 = sys.stdin.readline().strip().split(':')\n    h1 = int(h1)\n    m1 = int(m1)\n    h2 = int(h2)\n    m2 = int(m2)\n    # calculate midpoint\n    h = (h1 + h2) / 2\n    m = (m1 + m2) / 2\n    # check if we need to add an hour to the midpoint\n    if m > 59:\n        h += 1\n        m -= 60\n    # check if we need to add a day to the midpoint\n    if h > 23:\n        h -= 24\n    # print the result\n    print(\"{:02d}:{:02d}\".format(h, m))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "import sys\n\ndef main():\n    # get the input\n    h1, m1 = sys.stdin.readline().strip().split(':')\n    h2, m2 = sys.stdin.readline().strip().split(':')\n    h1 = int(h1)\n    m1 = int(m1)\n    h2 = int(h2)\n    m2 = int(m2)\n    # calculate midpoint\n    h = (h1 + h2) // 2\n    m = (m1 + m2) // 2\n    # check if we need to add an hour to the midpoint\n    if m > 59:\n        h += 1\n        m -= 60\n    # check if we need to add a day to the midpoint\n    if h > 23:\n        h -= 24\n    # print the result\n    print(\"{:02d}:{:02d}\".format(h, m))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1648688501,
  "object": "edit"
}
2022-03-30 21:01:44.456859 fix syntax errors 2 ['\nimport sys\n\ndef main():\n    # get the input \n    h1, m1 = sys.stdin.readline().strip().split(\':\')\n    h2, m2 = sys.stdin.readline().strip().split(\':\')\n    h1 = int(h1)\n    m1 = int(m1)\n    h2 = int(h2)\n    m2 = int(m2)\n    # calculate midpoint\n    h = (h1 + h2) / 2\n    m = (m1 + m2) / 2\n    # check if we need to add an hour to the midpoint\n    if m > 59:\n        h += 1\n        m -= 60\n    # check if we need to add a day to the midpoint\n    if h > 23:\n        h -= 24\n    # print the result\n    print("{:02d}:{:02d}".format(h, m))\n\nif __name__ == "__main__":\n    main()\n', 'import sys\n\ndef main():\n    # get the input\n    h1, m1 = sys.stdin.readline().strip().split(\':\')\n    h2, m2 = sys.stdin.readline().strip().split(\':\')\n    h1 = int(h1)\n    m1 = int(m1)\n    h2 = int(h2)\n    m2 = int(m2)\n    # calculate midpoint\n    h = (h1 + h2) // 2\n    m = (m1 + m2) // 2\n    # check if we need to add an hour to the midpoint\n    if m > 59:\n        h += 1\n        m -= 60\n    # check if we need to add a day to the midpoint\n    if h > 23:\n        h -= 24\n    # print the result\n    print("{:02d}:{:02d}".format(h, m))\n\nif __name__ == "__main__":\n    main()\n']
2022-03-30 21:01:44.457016 size on output set 4
2022-03-30 21:01:44.457041 num operations 2
2022-03-30 21:01:44.457049 size on input set 1
2022-03-30 21:01:52.673687 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nh1, m1 = map(int, input().split(':')) # \u0432\u0432\u043e\u0434\u0438\u043c \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430\nh2, m2 = map(int, input().split(':')) # \u0432\u0432\u043e\u0434\u0438\u043c \u0432\u0440\u0435\u043c\u044f \u043a\u043e\u043d\u0446\u0430\n\nif m1 % 2 == 0: # \u0435\u0441\u043b\u0438 \u043c\u0438\u043d\u0443\u0442\u044b \u043d\u0430\u0447\u0430\u043b\u0430 \u0447\u0435\u0442\u043d\u044b\u0435\n    m_mid = m1 + ((m2 - m1) // 2)\nelse: # \u0435\u0441\u043b\u0438 \u043c\u0438\u043d\u0443\u0442\u044b \u043d\u0430\u0447\u0430\u043b\u0430 \u043d\u0435\u0447\u0435\u0442\u043d\u044b\u0435\n    m_mid = m1 + ((m2 - m1) // 2) + 1\n\nh_mid = h1 + ((m_mid - m1) // 60) # \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0447\u0430\u0441\u044b\n\nprint(f'{h_mid:02d}:{m_mid:02d}')\n"
    },
    {
      "index": 1,
      "text": "h1, m1 = map(int, input().split(':'))\nh2, m2 = map(int, input().split(':'))\n\nif m1 % 2 == 0:\n    m_mid = m1 + ((m2 - m1) // 2)\nelse:\n    m_mid = m1 + ((m2 - m1) // 2) + 1\n\nh_mid = h1 + ((m_mid - m1) // 60)\n\nprint(f'{h_mid:02d}:{m_mid:02d}')\n"
    }
  ],
  "created": 1648688504,
  "object": "edit"
}
2022-03-30 21:01:52.673823 fix spelling mistakes 2 ["\nh1, m1 = map(int, input().split(':')) # вводим время начала\nh2, m2 = map(int, input().split(':')) # вводим время конца\n\nif m1 % 2 == 0: # если минуты начала четные\n    m_mid = m1 + ((m2 - m1) // 2)\nelse: # если минуты начала нечетные\n    m_mid = m1 + ((m2 - m1) // 2) + 1\n\nh_mid = h1 + ((m_mid - m1) // 60) # получаем часы\n\nprint(f'{h_mid:02d}:{m_mid:02d}')\n", "h1, m1 = map(int, input().split(':'))\nh2, m2 = map(int, input().split(':'))\n\nif m1 % 2 == 0:\n    m_mid = m1 + ((m2 - m1) // 2)\nelse:\n    m_mid = m1 + ((m2 - m1) // 2) + 1\n\nh_mid = h1 + ((m_mid - m1) // 60)\n\nprint(f'{h_mid:02d}:{m_mid:02d}')\n"]
2022-03-30 21:01:52.673877 size on output set 2
2022-03-30 21:01:52.673881 size on input set 2
2022-03-30 21:02:03.576334 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "h1, m1 = map(int, input().split(':')\nh2, m2 = map(int, input().split(':')\n\nif m1 % 2 == 0:\n    m_mid = m1 + ((m2 - m1) // 2\nelse:\n    m_mid = m1 + ((m2 - m1) // 2) + 1 \n\nh_mid = h1 + ((m_mid - m1) // 60\n\nprint(f'{h_mid:02d}:{m_mid:02d}'\n"
    },
    {
      "index": 1,
      "text": "h1, m1 = map(int, input().split(':'))  # h1:m1\nh2, m2 = map(int, input().split(':'))  # h2:m2\n\nif m1 % 2 == 0:\n    m_mid = m1 + ((m2 - m1) // 2)  # \u043c\u0438\u043d\u0443\u0442\u044b \u043f\u043e\u0441\u0435\u0440\u0435\u0434\u0438\u043d\u0435\nelse:\n    m_mid = m1 + ((m2 - m1) // 2) + 1  # \u043c\u0438\u043d\u0443\u0442\u044b \u043f\u043e\u0441\u0435\u0440\u0435\u0434\u0438\u043d\u0435\n\nh_mid = h1 + ((m_mid - m1) // 60)\n\nprint(f'{h_mid:02d}:{m_mid:02d}')\n"
    }
  ],
  "created": 1648688512,
  "object": "edit"
}
2022-03-30 21:02:03.576592 fix syntax errors 2 ["h1, m1 = map(int, input().split(':')\nh2, m2 = map(int, input().split(':')\n\nif m1 % 2 == 0:\n    m_mid = m1 + ((m2 - m1) // 2\nelse:\n    m_mid = m1 + ((m2 - m1) // 2) + 1 \n\nh_mid = h1 + ((m_mid - m1) // 60\n\nprint(f'{h_mid:02d}:{m_mid:02d}'\n", "h1, m1 = map(int, input().split(':'))  # h1:m1\nh2, m2 = map(int, input().split(':'))  # h2:m2\n\nif m1 % 2 == 0:\n    m_mid = m1 + ((m2 - m1) // 2)  # минуты посередине\nelse:\n    m_mid = m1 + ((m2 - m1) // 2) + 1  # минуты посередине\n\nh_mid = h1 + ((m_mid - m1) // 60)\n\nprint(f'{h_mid:02d}:{m_mid:02d}')\n"]
2022-03-30 21:02:13.425608 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nh1, m1 = map(int, input().split(':'))  # \u0432\u0432\u043e\u0434\u0438\u043c \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430\nh2, m2 = map(int, input().split(':'))  # \u0432\u0432\u043e\u0434\u0438\u043c \u0432\u0440\u0435\u043c\u044f \u043a\u043e\u043d\u0446\u0430\n\nif m1 % 2 == 0:  # \u0435\u0441\u043b\u0438 \u043c\u0438\u043d\u0443\u0442\u044b \u043d\u0430\u0447\u0430\u043b\u0430 \u0447\u0435\u0442\u043d\u044b\u0435\n    m_mid = m1 + ((m2 - m1) // 2)\nelse:  # \u0435\u0441\u043b\u0438 \u043c\u0438\u043d\u0443\u0442\u044b \u043d\u0430\u0447\u0430\u043b\u0430 \u043d\u0435\u0447\u0435\u0442\u043d\u044b\u0435\n    m_mid = m1 + ((m2 - m1) // 2) + 1\n\nh_mid = h1 + ((m_mid - m1) // 60)  # \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0447\u0430\u0441\u044b\n\nprint(f'{h_mid:02d}:{m_mid:02d}')\n"
    },
    {
      "index": 1,
      "text": "\nh1, m1 = map(int, input().split(':'))  # \u0432\u0432\u043e\u0434\u0438\u043c \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430\nh2, m2 = map(int, input().split(':'))  # \u0432\u0432\u043e\u0434\u0438\u043c \u0432\u0440\u0435\u043c\u044f \u043a\u043e\u043d\u0446\u0430\n\nif m1 % 2 == 0:  # \u0435\u0441\u043b\u0438 \u043c\u0438\u043d\u0443\u0442\u044b \u043d\u0430\u0447\u0430\u043b\u0430 \u0447\u0435\u0442\u043d\u044b\u0435\n    m_mid = m1 + ((m2 - m1) // 2)\nelse:  # \u0435\u0441\u043b\u0438 \u043c\u0438\u043d\u0443\u0442\u044b \u043d\u0430\u0447\u0430\u043b\u0430 \u043d\u0435\u0447\u0435\u0442\u043d\u044b\u0435\n    m_mid = m1 + ((m2 - m1) // 2) + 1\n\nh_mid = h1 + ((m_mid - m1) // 60)  # \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0447\u0430\u0441\u044b\n\nprint(f'{h_mid:02d}:{m_mid:02d}')\n"
    }
  ],
  "created": 1648688523,
  "object": "edit"
}
2022-03-30 21:02:13.425925 fix syntax errors 2 ["\nh1, m1 = map(int, input().split(':'))  # вводим время начала\nh2, m2 = map(int, input().split(':'))  # вводим время конца\n\nif m1 % 2 == 0:  # если минуты начала четные\n    m_mid = m1 + ((m2 - m1) // 2)\nelse:  # если минуты начала нечетные\n    m_mid = m1 + ((m2 - m1) // 2) + 1\n\nh_mid = h1 + ((m_mid - m1) // 60)  # получаем часы\n\nprint(f'{h_mid:02d}:{m_mid:02d}')\n", "\nh1, m1 = map(int, input().split(':'))  # вводим время начала\nh2, m2 = map(int, input().split(':'))  # вводим время конца\n\nif m1 % 2 == 0:  # если минуты начала четные\n    m_mid = m1 + ((m2 - m1) // 2)\nelse:  # если минуты начала нечетные\n    m_mid = m1 + ((m2 - m1) // 2) + 1\n\nh_mid = h1 + ((m_mid - m1) // 60)  # получаем часы\n\nprint(f'{h_mid:02d}:{m_mid:02d}')\n"]
2022-03-30 21:02:13.425975 size on output set 3
