"""
You are given an array $a$ consisting of $n$ integers $a_1, a_2, \dots, a_n$.

Your problem is to find such pair of indices $i, j$ ($1 \le i < j \le n$) that $lcm(a_i, a_j)$ is minimum possible.

$lcm(x, y)$ is the least common multiple of $x$ and $y$ (minimum positive number such that both $x$ and $y$ are divisors of this number).


-----Input-----

The first line of the input contains one integer $n$ ($2 \le n \le 10^6$) â€” the number of elements in $a$.

The second line of the input contains $n$ integers $a_1, a_2, \dots, a_n$ ($1 \le a_i \le 10^7$), where $a_i$ is the $i$-th element of $a$.


-----Output-----

Print two integers $i$ and $j$ ($1 \le i < j \le n$) such that the value of $lcm(a_i, a_j)$ is minimum among all valid pairs $i, j$. If there are multiple answers, you can print any.


-----Examples-----
Input
5
2 4 8 3 6

Output
1 2

Input
5
5 2 11 3 7

Output
2 4

Input
6
2 5 10 1 10 2

Output
1 4
"""
--------------------------
{
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\nif n == 2:\n    print(\"1 2\")\nelse:\n    # Find the index of the smallest number in the list\n    smallest_ind = a.index(min(a))\n    # Find the second smallest number in the list\n    second_smallest_num = sorted(a)[1]\n    # Find the index of the second smallest number in the list\n    second_smallest_ind = a.index(second_smallest_num)\n    # If the second smallest number is at index 0, then the index of the smallest number is 1\n    if second_smallest_ind == 0:\n        print(\"1\", second_smallest_ind + 1)\n    # If the second smallest number is at the index of the smallest number, print the next index\n    elif second_smallest_ind == smallest_ind:\n        print(second_smallest_ind + 1, second_smallest_ind + 2)\n    # Otherwise, print the indexes of the smallest number and the second smallest number\n    else:\n        print(smallest_ind + 1, second_smallest_ind + 1)"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\n\ndef main():\n    _ = input()\n    A = list(map(int, input().split()))\n    # find minimum and second minimum\n    min1 = A[0]\n    min2 = A[1]\n    if min2 < min1:\n        min1, min2 = min2, min1\n    for i in range(2, len(A)):\n        if A[i] < min2:\n            if A[i] < min1:\n                min2 = min1\n                min1 = A[i]\n            else:\n                min2 = A[i]\n    print(min1, min2)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nfrom sys import stdin, stdout\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\ndef lcm(a, b):\n    return (a * b) // gcd(a, b)\n\ndef solve(a, n):\n    min_lcm = float('inf')\n    ans = [0, 0]\n    for i in range(n):\n        for j in range(i + 1, n):\n            if lcm(a[i], a[j]) < min_lcm:\n                min_lcm = lcm(a[i], a[j])\n                ans[0] = i + 1\n                ans[1] = j + 1\n    return ans[0], ans[1]\n\nif __name__ == '__main__':\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    stdout.write(\"{} {}\\n\".format(*solve(a, n)))"
    }
  ],
  "created": 1648693471,
  "id": "cmpl-4rem7xkQeMWWGytHPjhneHkdJJBjB",
  "model": "code-davinci:002",
  "object": "text_completion"
}
0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\nif n == 2:\n    print(\"1 2\")\nelse:\n    # Find the index of the smallest number in the list\n    smallest_ind = a.index(min(a))\n    # Find the second smallest number in the list\n    second_smallest_num = sorted(a)[1]\n    # Find the index of the second smallest number in the list\n    second_smallest_ind = a.index(second_smallest_num)\n    # If the second smallest number is at index 0, then the index of the smallest number is 1\n    if second_smallest_ind == 0:\n        print(\"1\", second_smallest_ind + 1)\n    # If the second smallest number is at the index of the smallest number, print the next index\n    elif second_smallest_ind == smallest_ind:\n        print(second_smallest_ind + 1, second_smallest_ind + 2)\n    # Otherwise, print the indexes of the smallest number and the second smallest number\n    else:\n        print(smallest_ind + 1, second_smallest_ind + 1)"
}
REASON stop
1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\n\ndef main():\n    _ = input()\n    A = list(map(int, input().split()))\n    # find minimum and second minimum\n    min1 = A[0]\n    min2 = A[1]\n    if min2 < min1:\n        min1, min2 = min2, min1\n    for i in range(2, len(A)):\n        if A[i] < min2:\n            if A[i] < min1:\n                min2 = min1\n                min1 = A[i]\n            else:\n                min2 = A[i]\n    print(min1, min2)\n\n\nif __name__ == \"__main__\":\n    main()"
}
REASON stop
2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nfrom sys import stdin, stdout\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\ndef lcm(a, b):\n    return (a * b) // gcd(a, b)\n\ndef solve(a, n):\n    min_lcm = float('inf')\n    ans = [0, 0]\n    for i in range(n):\n        for j in range(i + 1, n):\n            if lcm(a[i], a[j]) < min_lcm:\n                min_lcm = lcm(a[i], a[j])\n                ans[0] = i + 1\n                ans[1] = j + 1\n    return ans[0], ans[1]\n\nif __name__ == '__main__':\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    stdout.write(\"{} {}\\n\".format(*solve(a, n)))"
}
REASON stop
