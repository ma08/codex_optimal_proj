"""
You are given three integers $a \le b \le c$.

In one move, you can add $+1$ or $-1$ to any of these integers (i.e. increase or decrease any number by one). You can perform such operation any (possibly, zero) number of times, you can even perform this operation several times with one number. Note that you cannot make non-positive numbers using such operations.

You have to perform the minimum number of such operations in order to obtain three integers $A \le B \le C$ such that $B$ is divisible by $A$ and $C$ is divisible by $B$.

You have to answer $t$ independent test cases. 


-----Input-----

The first line of the input contains one integer $t$ ($1 \le t \le 100$) — the number of test cases.

The next $t$ lines describe test cases. Each test case is given on a separate line as three space-separated integers $a, b$ and $c$ ($1 \le a \le b \le c \le 10^4$).


-----Output-----

For each test case, print the answer. In the first line print $res$ — the minimum number of operations you have to perform to obtain three integers $A \le B \le C$ such that $B$ is divisible by $A$ and $C$ is divisible by $B$. On the second line print any suitable triple $A, B$ and $C$.


-----Example-----
Input
8
1 2 3
123 321 456
5 10 15
15 18 21
100 100 101
1 22 29
3 19 38
6 30 46

Output
1
1 1 3
102
114 228 456
4
4 8 16
6
18 18 18
1
100 100 100
7
1 22 22
2
1 19 38
8
6 24 48
"""
--------------------------
{
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\ndef get_num_of_operations(a, b, c):\n    res = 0\n    a_divisor = a\n    b_divisor = b\n    c_divisor = c\n    while True:\n        if a_divisor == 0 and b_divisor == 0 and c_divisor == 0:\n            return res\n        elif a_divisor == 0 and b_divisor == 0 and c_divisor > 0:\n            res += c_divisor\n            c_divisor = 0\n        elif a_divisor == 0 and b_divisor > 0 and c_divisor == 0:\n            res += b_divisor\n            b_divisor = 0\n        elif a_divisor == 0 and b_divisor > 0 and c_divisor > 0:\n            if b_divisor > c_divisor:\n                res += b_divisor - c_divisor\n                b_divisor = c_divisor\n            elif b_divisor < c_divisor:\n                res += c_divisor - b_divisor\n                c_divisor = b_divisor\n            else:\n                pass\n        elif a_divisor > 0 and b_divisor == 0 and c_divisor == 0:\n            res += a_divisor\n            a_divisor = 0\n        elif a_divisor > 0 and b_divisor == 0 and c_divisor > 0:\n            if a_divisor > c_divisor:\n                res += a_divisor - c_divisor\n                a_divisor = c_divisor\n            elif a_divisor < c_divisor:\n                res += c_divisor - a_divisor\n                c_divisor = a_divisor\n            else:\n                pass\n        elif a_divisor > 0 and b_divisor > 0 and c_divisor == 0:\n            if a_divisor > b_divisor:\n                res += a_divisor - b_divisor\n                a_divisor = b_divisor\n            elif a_divisor < b_divisor:\n                res += b_divisor - a_divisor\n                b_divisor = a_divisor\n            else:\n                pass\n        elif a_divisor > 0 and b_divisor > 0 and c_divisor > 0:\n            if a_divisor > b_divisor:\n                if a_divisor > c_divisor:\n                    res += a_divisor - c_divisor\n                    a_divisor = c_divisor\n                elif a_divisor < c_divisor:\n                    res += c_divisor - a_divisor\n                    c_divisor = a_divisor\n                else:\n                    pass\n            elif a_divisor < b_divisor:\n                if b_divisor > c_divisor:\n                    res += b_divisor - c_divisor\n                    b_divisor = c_divisor\n                elif b_divisor < c_divisor:\n                    res += c_divisor - b_divisor\n                    c_divisor = b_divisor\n                else:\n                    pass\n            else:\n                pass\n\ndef get_triple(a, b, c):\n    a_divisor = a\n    b_divisor = b\n    c_divisor = c\n    while True:\n        if a_divisor == 0 and b_divisor == 0 and c_divisor == 0:\n            return a, b, c\n        elif a_divisor == 0 and b_divisor == 0 and c_divisor > 0:\n            c -= c_divisor\n            c_divisor = 0\n        elif a_divisor == 0 and b_divisor > 0 and c_divisor == 0:\n            b -= b_divisor\n            b_divisor = 0\n        elif a_divisor == 0 and b_divisor > 0 and c_divisor > 0:\n            if b_divisor > c_divisor:\n                b -= b_divisor - c_divisor\n                b_divisor = c_divisor\n            elif b_divisor < c_divisor:\n                c -= c_divisor - b_divisor\n                c_divisor = b_divisor\n            else:\n                pass\n        elif a_divisor > 0 and b_divisor == 0 and c_divisor == 0:\n            a -= a_divisor\n            a_divisor = 0\n        elif a_divisor > 0 and b_divisor == 0 and c_divisor > 0:\n            if a_divisor > c_divisor:\n                a -= a_divisor - c_divisor\n                a_divisor = c_divisor\n            elif a_divisor < c_divisor:\n                c -= c_divisor - a_divisor\n                c_divisor = a_divisor\n            else:\n                pass\n        elif a_divisor > 0 and b_divisor > 0 and c_divisor == 0:\n            if a_divisor > b_divisor:\n                a -= a_divisor - b_divisor\n                a_divisor = b_divisor\n            elif a_divisor < b_divisor:\n                b -= b_divisor - a_divisor\n                b_divisor = a_divisor\n            else:\n                pass\n        elif a_divisor > 0 and b_divisor > 0 and c_divisor > 0:\n            if a_divisor > b_divisor:\n                if a_divisor > c_divisor:\n                    a -= a_divisor - c_divisor\n                    a_divisor = c_divisor\n                elif a_divisor < c_divisor:\n                    c -= c_divisor - a_divisor\n                    c_divisor = a_divisor\n                else:\n                    pass\n            elif a_divisor < b_divisor:\n                if b_divisor > c_divisor:\n                    b -= b_divisor - c_divisor\n                    b_divisor = c_divisor\n                elif b_divisor < c_divisor:\n                    c -= c_divisor - b_divisor\n                    c_divisor = b_divisor\n                else:\n                    pass\n            else:\n                pass\n\nif __name__ == \"__main__\":\n    t = int(input())\n    for i in range(0, t):\n        a, b, c = input().split()\n        a = int(a)\n        b = int(b)\n        c = int(c)\n        res = get_num_of_operations(a, b, c)\n        a, b, c = get_triple(a, b, c)\n        print(res)\n        print(a, b, c)"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\ndef find_min_operations(a, b, c):\n\tn1 = a\n\tn2 = b\n\tn3 = c\n\tn1_operations = 0\n\tn2_operations = 0\n\tn3_operations = 0\n\tif n1*2 == n2 and n2*2 == n3:\n\t\treturn [0, n1, n2, n3]\n\telif n1*2 == n2:\n\t\tn1_operations = n2 - n1\n\t\tn2_operations = n3 - n2\n\telif n2*2 == n3:\n\t\tn2_operations = n2 - n1\n\t\tn3_operations = n3 - n2\n\telse:\n\t\tn1_operations = n2 - n1\n\t\tn3_operations = n3 - n2\n\tif n1_operations % 2 == 0 and n3_operations % 2 == 0:\n\t\tn2_operations = n2_operations + n1_operations//2\n\t\tn1_operations = n1_operations//2\n\t\tn3_operations = n3_operations//2\n\telif n1_operations % 2 == 0:\n\t\tn2_operations = n2_operations + n1_operations//2\n\t\tn1_operations = n1_operations//2\n\t\tn3_operations = n3_operations//2\n\telif n3_operations % 2 == 0:\n\t\tn2_operations = n2_operations + n3_operations//2\n\t\tn1_operations = n1_operations//2\n\t\tn3_operations = n3_operations//2\n\telse:\n\t\tn2_operations = n2_operations + n1_operations//2\n\t\tn1_operations = n1_operations//2\n\t\tn3_operations = n3_operations//2\n\tn1 = n1 + n1_operations\n\tn2 = n2 + n2_operations\n\tn3 = n3 + n3_operations\n\t#print(n1, n2, n3)\n\treturn [n1_operations + n2_operations + n3_operations, n1, n2, n3]\n\nt = int(input())\nfor i in range(t):\n\ta, b, c = list(map(int, input().split()))\n\t#print(a, b, c)\n\tres, n1, n2, n3 = find_min_operations(a, b, c)\n\tprint(res)\n\tprint(n1, n2, n3)"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\n# Solution 1\n\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    count = 0\n    while True:\n        if b % a == 0 and c % b == 0:\n            print(count)\n            print(a, b, c)\n            break\n        if a > b:\n            b += 1\n            count += 1\n        elif b > c:\n            c += 1\n            count += 1\n        elif a == b:\n            a += 1\n            count += 1\n\n# Solution 2\n\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    count = 0\n    if b % a == 0 and c % b == 0:\n        print(count)\n        print(a, b, c)\n        continue\n    if a > b:\n        b += 1\n        count += 1\n    elif b > c:\n        c += 1\n        count += 1\n    elif a == b:\n        a += 1\n        count += 1\n    print(count)\n    print(a, b, c)"
    }
  ],
  "created": 1648692076,
  "id": "cmpl-4rePcojVEFqJ9Hvg3ReF6STC5Wfpf",
  "model": "code-davinci:002",
  "object": "text_completion"
}
0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\ndef get_num_of_operations(a, b, c):\n    res = 0\n    a_divisor = a\n    b_divisor = b\n    c_divisor = c\n    while True:\n        if a_divisor == 0 and b_divisor == 0 and c_divisor == 0:\n            return res\n        elif a_divisor == 0 and b_divisor == 0 and c_divisor > 0:\n            res += c_divisor\n            c_divisor = 0\n        elif a_divisor == 0 and b_divisor > 0 and c_divisor == 0:\n            res += b_divisor\n            b_divisor = 0\n        elif a_divisor == 0 and b_divisor > 0 and c_divisor > 0:\n            if b_divisor > c_divisor:\n                res += b_divisor - c_divisor\n                b_divisor = c_divisor\n            elif b_divisor < c_divisor:\n                res += c_divisor - b_divisor\n                c_divisor = b_divisor\n            else:\n                pass\n        elif a_divisor > 0 and b_divisor == 0 and c_divisor == 0:\n            res += a_divisor\n            a_divisor = 0\n        elif a_divisor > 0 and b_divisor == 0 and c_divisor > 0:\n            if a_divisor > c_divisor:\n                res += a_divisor - c_divisor\n                a_divisor = c_divisor\n            elif a_divisor < c_divisor:\n                res += c_divisor - a_divisor\n                c_divisor = a_divisor\n            else:\n                pass\n        elif a_divisor > 0 and b_divisor > 0 and c_divisor == 0:\n            if a_divisor > b_divisor:\n                res += a_divisor - b_divisor\n                a_divisor = b_divisor\n            elif a_divisor < b_divisor:\n                res += b_divisor - a_divisor\n                b_divisor = a_divisor\n            else:\n                pass\n        elif a_divisor > 0 and b_divisor > 0 and c_divisor > 0:\n            if a_divisor > b_divisor:\n                if a_divisor > c_divisor:\n                    res += a_divisor - c_divisor\n                    a_divisor = c_divisor\n                elif a_divisor < c_divisor:\n                    res += c_divisor - a_divisor\n                    c_divisor = a_divisor\n                else:\n                    pass\n            elif a_divisor < b_divisor:\n                if b_divisor > c_divisor:\n                    res += b_divisor - c_divisor\n                    b_divisor = c_divisor\n                elif b_divisor < c_divisor:\n                    res += c_divisor - b_divisor\n                    c_divisor = b_divisor\n                else:\n                    pass\n            else:\n                pass\n\ndef get_triple(a, b, c):\n    a_divisor = a\n    b_divisor = b\n    c_divisor = c\n    while True:\n        if a_divisor == 0 and b_divisor == 0 and c_divisor == 0:\n            return a, b, c\n        elif a_divisor == 0 and b_divisor == 0 and c_divisor > 0:\n            c -= c_divisor\n            c_divisor = 0\n        elif a_divisor == 0 and b_divisor > 0 and c_divisor == 0:\n            b -= b_divisor\n            b_divisor = 0\n        elif a_divisor == 0 and b_divisor > 0 and c_divisor > 0:\n            if b_divisor > c_divisor:\n                b -= b_divisor - c_divisor\n                b_divisor = c_divisor\n            elif b_divisor < c_divisor:\n                c -= c_divisor - b_divisor\n                c_divisor = b_divisor\n            else:\n                pass\n        elif a_divisor > 0 and b_divisor == 0 and c_divisor == 0:\n            a -= a_divisor\n            a_divisor = 0\n        elif a_divisor > 0 and b_divisor == 0 and c_divisor > 0:\n            if a_divisor > c_divisor:\n                a -= a_divisor - c_divisor\n                a_divisor = c_divisor\n            elif a_divisor < c_divisor:\n                c -= c_divisor - a_divisor\n                c_divisor = a_divisor\n            else:\n                pass\n        elif a_divisor > 0 and b_divisor > 0 and c_divisor == 0:\n            if a_divisor > b_divisor:\n                a -= a_divisor - b_divisor\n                a_divisor = b_divisor\n            elif a_divisor < b_divisor:\n                b -= b_divisor - a_divisor\n                b_divisor = a_divisor\n            else:\n                pass\n        elif a_divisor > 0 and b_divisor > 0 and c_divisor > 0:\n            if a_divisor > b_divisor:\n                if a_divisor > c_divisor:\n                    a -= a_divisor - c_divisor\n                    a_divisor = c_divisor\n                elif a_divisor < c_divisor:\n                    c -= c_divisor - a_divisor\n                    c_divisor = a_divisor\n                else:\n                    pass\n            elif a_divisor < b_divisor:\n                if b_divisor > c_divisor:\n                    b -= b_divisor - c_divisor\n                    b_divisor = c_divisor\n                elif b_divisor < c_divisor:\n                    c -= c_divisor - b_divisor\n                    c_divisor = b_divisor\n                else:\n                    pass\n            else:\n                pass\n\nif __name__ == \"__main__\":\n    t = int(input())\n    for i in range(0, t):\n        a, b, c = input().split()\n        a = int(a)\n        b = int(b)\n        c = int(c)\n        res = get_num_of_operations(a, b, c)\n        a, b, c = get_triple(a, b, c)\n        print(res)\n        print(a, b, c)"
}
REASON stop
1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\ndef find_min_operations(a, b, c):\n\tn1 = a\n\tn2 = b\n\tn3 = c\n\tn1_operations = 0\n\tn2_operations = 0\n\tn3_operations = 0\n\tif n1*2 == n2 and n2*2 == n3:\n\t\treturn [0, n1, n2, n3]\n\telif n1*2 == n2:\n\t\tn1_operations = n2 - n1\n\t\tn2_operations = n3 - n2\n\telif n2*2 == n3:\n\t\tn2_operations = n2 - n1\n\t\tn3_operations = n3 - n2\n\telse:\n\t\tn1_operations = n2 - n1\n\t\tn3_operations = n3 - n2\n\tif n1_operations % 2 == 0 and n3_operations % 2 == 0:\n\t\tn2_operations = n2_operations + n1_operations//2\n\t\tn1_operations = n1_operations//2\n\t\tn3_operations = n3_operations//2\n\telif n1_operations % 2 == 0:\n\t\tn2_operations = n2_operations + n1_operations//2\n\t\tn1_operations = n1_operations//2\n\t\tn3_operations = n3_operations//2\n\telif n3_operations % 2 == 0:\n\t\tn2_operations = n2_operations + n3_operations//2\n\t\tn1_operations = n1_operations//2\n\t\tn3_operations = n3_operations//2\n\telse:\n\t\tn2_operations = n2_operations + n1_operations//2\n\t\tn1_operations = n1_operations//2\n\t\tn3_operations = n3_operations//2\n\tn1 = n1 + n1_operations\n\tn2 = n2 + n2_operations\n\tn3 = n3 + n3_operations\n\t#print(n1, n2, n3)\n\treturn [n1_operations + n2_operations + n3_operations, n1, n2, n3]\n\nt = int(input())\nfor i in range(t):\n\ta, b, c = list(map(int, input().split()))\n\t#print(a, b, c)\n\tres, n1, n2, n3 = find_min_operations(a, b, c)\n\tprint(res)\n\tprint(n1, n2, n3)"
}
REASON stop
2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\n# Solution 1\n\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    count = 0\n    while True:\n        if b % a == 0 and c % b == 0:\n            print(count)\n            print(a, b, c)\n            break\n        if a > b:\n            b += 1\n            count += 1\n        elif b > c:\n            c += 1\n            count += 1\n        elif a == b:\n            a += 1\n            count += 1\n\n# Solution 2\n\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    count = 0\n    if b % a == 0 and c % b == 0:\n        print(count)\n        print(a, b, c)\n        continue\n    if a > b:\n        b += 1\n        count += 1\n    elif b > c:\n        c += 1\n        count += 1\n    elif a == b:\n        a += 1\n        count += 1\n    print(count)\n    print(a, b, c)"
}
REASON stop
