"""
There is a staircase with N steps. Takahashi is now standing at the foot of the stairs, that is, on the 0-th step.
He can climb up one or two steps at a time.
However, the treads of the a_1-th, a_2-th, a_3-th, \ldots, a_M-th steps are broken, so it is dangerous to set foot on those steps.
How many are there to climb up to the top step, that is, the N-th step, without setting foot on the broken steps?
Find the count modulo 1\ 000\ 000\ 007.

-----Constraints-----
 - 1 \leq N \leq 10^5
 - 0 \leq M \leq N-1
 - 1 \leq a_1 < a_2 <  ...  < a_M \leq N-1

-----Input-----
Input is given from Standard Input in the following format:
N M
a_1
a_2
 .
 .
 .
a_M

-----Output-----
Print the number of ways to climb up the stairs under the condition, modulo 1\ 000\ 000\ 007.

-----Sample Input-----
6 1
3

-----Sample Output-----
4

There are four ways to climb up the stairs, as follows:
 - 0 \to 1 \to 2 \to 4 \to 5 \to 6
 - 0 \to 1 \to 2 \to 4 \to 6
 - 0 \to 2 \to 4 \to 5 \to 6
 - 0 \to 2 \to 4 \to 6
"""
--------------------------
{
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nimport sys\nsys.setrecursionlimit(100000)\n\nn, m = map(int, input().split())\na = [int(input()) for _ in range(m)]\n\ndef solve(n, a):\n    dp = [0] * (n+1)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, n+1):\n        dp[i] = dp[i-1] + dp[i-2]\n        if i in a:\n            dp[i] = 0\n    return dp[n] % 1000000007\n\nprint(solve(n, a))\n\n# \u7d2f\u7a4d\u548c\u3068\u304b\u306b\u3059\u308c\u3070\u3082\u3063\u3068\u901f\u304f\u306a\u308b\u304b\u3082"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nN, M = map(int, input().split())\nA = [int(input()) for _ in range(M)]\n\nmod = 10 ** 9 + 7\n\ndp = [0] * (N + 1)\ndp[0] = 1\ndp[1] = 1\n\nfor i in range(2, N + 1):\n    if i in A:\n        continue\n    dp[i] = dp[i - 1] + dp[i - 2]\n    dp[i] %= mod\n\nprint(dp[N])"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, [input() for _ in range(m)]))\n    a.insert(0, 0)\n    a.append(n+1)\n    a.sort()\n\n    dp = [0]*(n+1)\n    dp[0] = 1\n    \n    for i in range(1, n+1):\n        if i not in a:\n            dp[i] = (dp[i-1] + dp[i-2]) % 1_000_000_007\n    \n    print(dp[-1])\n\nif __name__ == \"__main__\":\n    main()"
    }
  ],
  "created": 1648693495,
  "id": "cmpl-4remVbEZVvToWTSHfVx6DOKAF0N1A",
  "model": "code-davinci:002",
  "object": "text_completion"
}
0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nimport sys\nsys.setrecursionlimit(100000)\n\nn, m = map(int, input().split())\na = [int(input()) for _ in range(m)]\n\ndef solve(n, a):\n    dp = [0] * (n+1)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, n+1):\n        dp[i] = dp[i-1] + dp[i-2]\n        if i in a:\n            dp[i] = 0\n    return dp[n] % 1000000007\n\nprint(solve(n, a))\n\n# \u7d2f\u7a4d\u548c\u3068\u304b\u306b\u3059\u308c\u3070\u3082\u3063\u3068\u901f\u304f\u306a\u308b\u304b\u3082"
}
REASON stop
1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nN, M = map(int, input().split())\nA = [int(input()) for _ in range(M)]\n\nmod = 10 ** 9 + 7\n\ndp = [0] * (N + 1)\ndp[0] = 1\ndp[1] = 1\n\nfor i in range(2, N + 1):\n    if i in A:\n        continue\n    dp[i] = dp[i - 1] + dp[i - 2]\n    dp[i] %= mod\n\nprint(dp[N])"
}
REASON stop
2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, [input() for _ in range(m)]))\n    a.insert(0, 0)\n    a.append(n+1)\n    a.sort()\n\n    dp = [0]*(n+1)\n    dp[0] = 1\n    \n    for i in range(1, n+1):\n        if i not in a:\n            dp[i] = (dp[i-1] + dp[i-2]) % 1_000_000_007\n    \n    print(dp[-1])\n\nif __name__ == \"__main__\":\n    main()"
}
REASON stop
