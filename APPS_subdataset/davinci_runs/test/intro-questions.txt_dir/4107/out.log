"""
You work as a system administrator in a dormitory, which has $n$ rooms one after another along a straight hallway. Rooms are numbered from $1$ to $n$.

You have to connect all $n$ rooms to the Internet.

You can connect each room to the Internet directly, the cost of such connection for the $i$-th room is $i$ coins. 

Some rooms also have a spot for a router. The cost of placing a router in the $i$-th room is also $i$ coins. You cannot place a router in a room which does not have a spot for it. When you place a router in the room $i$, you connect all rooms with the numbers from $max(1,~i - k)$ to $min(n,~i + k)$ inclusive to the Internet, where $k$ is the range of router. The value of $k$ is the same for all routers. 

Calculate the minimum total cost of connecting all $n$ rooms to the Internet. You can assume that the number of rooms which have a spot for a router is not greater than the number of routers you have.


-----Input-----

The first line of the input contains two integers $n$ and $k$ ($1 \le n, k \le 2 \cdot 10^5$) — the number of rooms and the range of each router.

The second line of the input contains one string $s$ of length $n$, consisting only of zeros and ones. If the $i$-th character of the string equals to '1' then there is a spot for a router in the $i$-th room. If the $i$-th character of the string equals to '0' then you cannot place a router in the $i$-th room.


-----Output-----

Print one integer — the minimum total cost of connecting all $n$ rooms to the Internet.


-----Examples-----
Input
5 2
00100

Output
3

Input
6 1
000000

Output
21

Input
4 1
0011

Output
4

Input
12 6
000010000100

Output
15



-----Note-----

In the first example it is enough to place the router in the room $3$, then all rooms will be connected to the Internet. The total cost of connection is $3$.

In the second example you can place routers nowhere, so you need to connect all rooms directly. Thus, the total cost of connection of all rooms is $1 + 2 + 3 + 4 + 5 + 6 = 21$.

In the third example you need to connect the room $1$ directly and place the router in the room $3$. Thus, the total cost of connection of all rooms is $1 + 3 = 4$.

In the fourth example you need to place routers in rooms $5$ and $10$. Then all rooms will be connected to the Internet. The total cost of connection is $5 + 10 = 15$.
"""
--------------------------
{
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nn, k = map(int, input().split())\ns = input()\n\n# if the room has a router, place one\n# if the room does not have a router, connect directly\n# if the room has a router and it is too close to the previous router, connect directly\n# if the room has a router and it is too far from the previous router, connect directly and place a router\n# if the room does not have a router and it is too close to the previous router, connect directly\n# if the room does not have a router and it is too far from the previous router, connect directly\n\n# we start with the room 1\n# let's say the previous router was placed in room i\n# let's say we want to connect room j\n# if j-i > 2*k+1, we place a router in room i+k+1 and connect i+k+1\n# if j-i <= 2*k+1, we connect j\n# if j-i <= k, we connect j\n# if j-i > k, we connect j\n# if j-i <= 2*k, we connect j\n# if j-i > 2*k, we place a router in j-k and connect j-k\n# if j-i <= 3*k, we connect j\n# if j-i > 3*k, we connect j\n\n# if the room has a router, place one\n# if the room does not have a router, connect directly\n\n# we start with the room 1\n# let's say the previous router was placed in room i\n# let's say we want to connect room j\n# if j-i > 2*k+1, we place a router in room i+k+1 and connect i+k+1\n# if j-i <= 2*k+1, we connect j\n\nans = 0\ni = 1\nfor j in range(1, n+1):\n    if j-i > 2*k+1:\n        ans += i+k+1\n        i = i+k+1\n    if s[j-1] == \"1\":\n        ans += j\n        i = j\n\nprint(ans)"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nimport sys\n\nn,k = map(int, sys.stdin.readline().split())\n\ns = sys.stdin.readline().strip()\n\ns = list(s)\n\ns = [int(i) for i in s]\n\ncount = 0\n\nfor i in range(n):\n    if s[i] == 1:\n        s[max(0,i-k):min(n,i+k+1)] = [0] * len(s[max(0,i-k):min(n,i+k+1)])\n\nfor i in range(n):\n    count += i * s[i]\n\nprint(count)"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\ndef main():\n    n, k = map(int, input().split())\n    s = input()\n\n    def cost(l, r):\n        return sum(l+1, r+1)\n\n    def f(l, r):\n        if l == r:\n            return 1\n        if s[l] == '1' and s[r] == '1':\n            return min(f(l+1, r), f(l, r-1), cost(l+k, r-k+1))\n        if s[l] == '1':\n            return min(f(l+1, r), cost(l+k, r))\n        if s[r] == '1':\n            return min(f(l, r-1), cost(l, r-k+1))\n        return cost(l, r)\n\n    print(f(0, n-1))\n\nif __name__ == '__main__':\n    main()"
    }
  ],
  "created": 1648694347,
  "id": "cmpl-4rf0FnINBrNSuydgm8Q0ZSgf1npmA",
  "model": "code-davinci:002",
  "object": "text_completion"
}
0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nn, k = map(int, input().split())\ns = input()\n\n# if the room has a router, place one\n# if the room does not have a router, connect directly\n# if the room has a router and it is too close to the previous router, connect directly\n# if the room has a router and it is too far from the previous router, connect directly and place a router\n# if the room does not have a router and it is too close to the previous router, connect directly\n# if the room does not have a router and it is too far from the previous router, connect directly\n\n# we start with the room 1\n# let's say the previous router was placed in room i\n# let's say we want to connect room j\n# if j-i > 2*k+1, we place a router in room i+k+1 and connect i+k+1\n# if j-i <= 2*k+1, we connect j\n# if j-i <= k, we connect j\n# if j-i > k, we connect j\n# if j-i <= 2*k, we connect j\n# if j-i > 2*k, we place a router in j-k and connect j-k\n# if j-i <= 3*k, we connect j\n# if j-i > 3*k, we connect j\n\n# if the room has a router, place one\n# if the room does not have a router, connect directly\n\n# we start with the room 1\n# let's say the previous router was placed in room i\n# let's say we want to connect room j\n# if j-i > 2*k+1, we place a router in room i+k+1 and connect i+k+1\n# if j-i <= 2*k+1, we connect j\n\nans = 0\ni = 1\nfor j in range(1, n+1):\n    if j-i > 2*k+1:\n        ans += i+k+1\n        i = i+k+1\n    if s[j-1] == \"1\":\n        ans += j\n        i = j\n\nprint(ans)"
}
REASON stop
1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nimport sys\n\nn,k = map(int, sys.stdin.readline().split())\n\ns = sys.stdin.readline().strip()\n\ns = list(s)\n\ns = [int(i) for i in s]\n\ncount = 0\n\nfor i in range(n):\n    if s[i] == 1:\n        s[max(0,i-k):min(n,i+k+1)] = [0] * len(s[max(0,i-k):min(n,i+k+1)])\n\nfor i in range(n):\n    count += i * s[i]\n\nprint(count)"
}
REASON stop
2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\ndef main():\n    n, k = map(int, input().split())\n    s = input()\n\n    def cost(l, r):\n        return sum(l+1, r+1)\n\n    def f(l, r):\n        if l == r:\n            return 1\n        if s[l] == '1' and s[r] == '1':\n            return min(f(l+1, r), f(l, r-1), cost(l+k, r-k+1))\n        if s[l] == '1':\n            return min(f(l+1, r), cost(l+k, r))\n        if s[r] == '1':\n            return min(f(l, r-1), cost(l, r-k+1))\n        return cost(l, r)\n\n    print(f(0, n-1))\n\nif __name__ == '__main__':\n    main()"
}
REASON stop
