2022-03-30 21:11:40.134686 num operations 2
2022-03-30 21:11:40.134727 size on input set 1
2022-03-30 21:11:43.432086 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    s = sys.stdin.readline().strip()\n    t = sys.stdin.readline().strip()\n\n    n = len(s)\n    m = len(t)\n\n    dp = [[0 for j in range(m + 1)] for i in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if s[i - 1] == t[j - 1]:\n                dp[i][j] = max(dp[i - 1][j - 1] + 1, dp[i - 1][j])\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    print(n - dp[n][m])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\ndef main():\n    s = sys.stdin.readline().strip()\n    t = sys.stdin.readline().strip()\n    n = len(s)\n    m = len(t)\n    dp = [[0 for j in range(m + 1)] for i in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if s[i - 1] == t[j - 1]:\n                dp[i][j] = max(dp[i - 1][j - 1] + 1, dp[i - 1][j])\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    print(n - dp[n][m])\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1648689100,
  "object": "edit"
}
2022-03-30 21:11:43.432587 fix spelling mistakes 2 ["\nimport sys\n\ndef main():\n    s = sys.stdin.readline().strip()\n    t = sys.stdin.readline().strip()\n\n    n = len(s)\n    m = len(t)\n\n    dp = [[0 for j in range(m + 1)] for i in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if s[i - 1] == t[j - 1]:\n                dp[i][j] = max(dp[i - 1][j - 1] + 1, dp[i - 1][j])\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    print(n - dp[n][m])\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\ndef main():\n    s = sys.stdin.readline().strip()\n    t = sys.stdin.readline().strip()\n    n = len(s)\n    m = len(t)\n    dp = [[0 for j in range(m + 1)] for i in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if s[i - 1] == t[j - 1]:\n                dp[i][j] = max(dp[i - 1][j - 1] + 1, dp[i - 1][j])\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    print(n - dp[n][m])\nif __name__ == '__main__':\n    main()\n"]
2022-03-30 21:11:43.432661 size on output set 2
2022-03-30 21:11:43.432668 size on input set 2
2022-03-30 21:11:46.129634 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\ndef main():\n    s = sys.stdin.readline().strip()\n    t = sys.stdin.readline().strip()\n    n = len(s)\n    m = len(t)\n    dp = [[0 for j in range(m + 1)] for i in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if s[i - 1] == t[j - 1]:\n                dp[i][j] = max(dp[i - 1][j - 1] + 1, dp[i - 1][j])\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    print(n - dp[n][m])\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "import sys\ndef main():\n    s = sys.stdin.readline().strip()\n    t = sys.stdin.readline().strip()\n    n = len(s)\n    m = len(t)\n    dp = [[0 for j in range(m + 1)] for i in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if s[i - 1] == t[j - 1]:\n                dp[i][j] = max(dp[i - 1][j - 1] + 1, dp[i - 1][j])\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    print(n - dp[n][m])\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1648689103,
  "object": "edit"
}
2022-03-30 21:11:46.130109 fix syntax errors 2 ["import sys\ndef main():\n    s = sys.stdin.readline().strip()\n    t = sys.stdin.readline().strip()\n    n = len(s)\n    m = len(t)\n    dp = [[0 for j in range(m + 1)] for i in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if s[i - 1] == t[j - 1]:\n                dp[i][j] = max(dp[i - 1][j - 1] + 1, dp[i - 1][j])\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    print(n - dp[n][m])\nif __name__ == '__main__':\n    main()\n", "import sys\ndef main():\n    s = sys.stdin.readline().strip()\n    t = sys.stdin.readline().strip()\n    n = len(s)\n    m = len(t)\n    dp = [[0 for j in range(m + 1)] for i in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if s[i - 1] == t[j - 1]:\n                dp[i][j] = max(dp[i - 1][j - 1] + 1, dp[i - 1][j])\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    print(n - dp[n][m])\nif __name__ == '__main__':\n    main()\n"]
2022-03-30 21:11:58.309611 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\ndef main():\n    s = sys.stdin.readline().strip().split()\n    t = sys.stdin.readline().strip().split()\n\n    n = len(s[0])\n    m = len(t[0])\n\n    dp = [[0 for j in range(m + 1)] for i in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if s[0][i - 1] == t[0][j - 1]:\n                dp[i][j] = max(dp[i - 1][j - 1] + 1, dp[i - 1][j])\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    print(n - dp[n][m])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "import sys\n\ndef main():\n    s = sys.stdin.readline().strip() # read a line with a single integer\n    t = sys.stdin.readline().strip() # read a list of integers, 2 in this case\n\n    n = len(s) # lenght of s\n    m = len(t) # length of t\n\n    dp = [[0 for j in range(m + 1)] for i in range(n + 1)] # dp array\n\n    for i in range(1, n + 1): # iterate over s\n        for j in range(1, m + 1): # iterate over t\n            if s[i - 1] == t[j - 1]: # if the characters match\n                dp[i][j] = max(dp[i - 1][j - 1] + 1, dp[i - 1][j]) # max of diagonal + 1 or previous\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) # max of previous or previous\n\n    print(n - dp[n][m]) # print the number of characters to delete\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1648689106,
  "object": "edit"
}
2022-03-30 21:11:58.309804 fix syntax errors 2 ["import sys\n\ndef main():\n    s = sys.stdin.readline().strip().split()\n    t = sys.stdin.readline().strip().split()\n\n    n = len(s[0])\n    m = len(t[0])\n\n    dp = [[0 for j in range(m + 1)] for i in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if s[0][i - 1] == t[0][j - 1]:\n                dp[i][j] = max(dp[i - 1][j - 1] + 1, dp[i - 1][j])\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    print(n - dp[n][m])\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    s = sys.stdin.readline().strip() # read a line with a single integer\n    t = sys.stdin.readline().strip() # read a list of integers, 2 in this case\n\n    n = len(s) # lenght of s\n    m = len(t) # length of t\n\n    dp = [[0 for j in range(m + 1)] for i in range(n + 1)] # dp array\n\n    for i in range(1, n + 1): # iterate over s\n        for j in range(1, m + 1): # iterate over t\n            if s[i - 1] == t[j - 1]: # if the characters match\n                dp[i][j] = max(dp[i - 1][j - 1] + 1, dp[i - 1][j]) # max of diagonal + 1 or previous\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) # max of previous or previous\n\n    print(n - dp[n][m]) # print the number of characters to delete\n\nif __name__ == '__main__':\n    main()\n"]
2022-03-30 21:11:58.309856 size on output set 4
2022-03-30 21:11:58.309867 num operations 2
2022-03-30 21:11:58.309875 size on input set 1
2022-03-30 21:12:01.925569 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef getMaxSubsequence(s, t):\n    i = 0\n    j = 0\n    count = 0\n    while i < len(s) and j < len(t):\n        if s[i] == t[j]:\n            j += 1\n        else:\n            count += 1\n        i += 1\n    return count + len(t) - j\n\nif __name__ == \"__main__\":\n    print(getMaxSubsequence(input(), input()))\n"
    },
    {
      "index": 1,
      "text": "\n\ndef get_max_substring(s, t):\n    i = 0\n    j = 0\n    count = 0\n    while i < len(s) and j < len(t):\n        if s[i] == t[j]:\n            j += 1\n        else:\n            count += 1\n        i += 1\n    return count + len(t) - j\n\nif __name__ == \"__main__\":\n    print(get_max_substring(input(), input()))\n"
    }
  ],
  "created": 1648689118,
  "object": "edit"
}
2022-03-30 21:12:01.925912 fix spelling mistakes 2 ['\n\ndef getMaxSubsequence(s, t):\n    i = 0\n    j = 0\n    count = 0\n    while i < len(s) and j < len(t):\n        if s[i] == t[j]:\n            j += 1\n        else:\n            count += 1\n        i += 1\n    return count + len(t) - j\n\nif __name__ == "__main__":\n    print(getMaxSubsequence(input(), input()))\n', '\n\ndef get_max_substring(s, t):\n    i = 0\n    j = 0\n    count = 0\n    while i < len(s) and j < len(t):\n        if s[i] == t[j]:\n            j += 1\n        else:\n            count += 1\n        i += 1\n    return count + len(t) - j\n\nif __name__ == "__main__":\n    print(get_max_substring(input(), input()))\n']
2022-03-30 21:12:01.925946 size on output set 2
2022-03-30 21:12:01.925951 size on input set 2
2022-03-30 21:12:07.713724 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef get_max_substring(s, t):\n    i = 0\n    j = 0\n    count = 0\n    while i < len(s) and j < len(t):\n        if s[i] == t[j]:\n            j += 1\n        else:\n            count += 1\n        i += 1\n    return count + len(t) - j\n\nif __name__ == \"__main__\":\n    print(get_max_substring(input(), input()))\n"
    },
    {
      "index": 1,
      "text": "\n\ndef get_max_substring(s, t):\n    count = len(t)\n    for i in range(len(s) - len(t) + 1):\n        if s[i:i + len(t)] == t:\n            count = 0\n            break\n        else:\n            count = min(count, len(t) - len(set(s[i:i + len(t)]) & set(t)))\n    return count\n\nif __name__ == \"__main__\":\n    print(get_max_substring(input(), input()))\n"
    }
  ],
  "created": 1648689122,
  "object": "edit"
}
2022-03-30 21:12:07.714046 fix syntax errors 2 ['\ndef get_max_substring(s, t):\n    i = 0\n    j = 0\n    count = 0\n    while i < len(s) and j < len(t):\n        if s[i] == t[j]:\n            j += 1\n        else:\n            count += 1\n        i += 1\n    return count + len(t) - j\n\nif __name__ == "__main__":\n    print(get_max_substring(input(), input()))\n', '\n\ndef get_max_substring(s, t):\n    count = len(t)\n    for i in range(len(s) - len(t) + 1):\n        if s[i:i + len(t)] == t:\n            count = 0\n            break\n        else:\n            count = min(count, len(t) - len(set(s[i:i + len(t)]) & set(t)))\n    return count\n\nif __name__ == "__main__":\n    print(get_max_substring(input(), input()))\n']
2022-03-30 21:12:10.581119 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef getMaxSubsequence(s, t):\n    i = 0\n    j = 0\n    count = 0\n    while i < len(s) and j < len(t):\n        if s[i] == t[j]:\n            j += 1\n        else:\n            count += 1\n        i += 1\n    return count + len(t) - j\n\nif __name__ == \"__main__\":\n    print(getMaxSubsequence(input(), input())) \n"
    },
    {
      "index": 1,
      "text": "\n\ndef getMaxSubsequence(s, t):\n    i = 0\n    j = 0\n    count = 0\n    while i < len(s) and j < len(t):\n        if s[i] == t[j]:\n            j += 1\n        else:\n            count += 1\n        i += 1\n    return count + len(t) - j \n\nif __name__ == \"__main__\":\n    print(getMaxSubsequence(input(), input()))\n"
    }
  ],
  "created": 1648689127,
  "object": "edit"
}
2022-03-30 21:12:10.581402 fix syntax errors 2 ['\n\ndef getMaxSubsequence(s, t):\n    i = 0\n    j = 0\n    count = 0\n    while i < len(s) and j < len(t):\n        if s[i] == t[j]:\n            j += 1\n        else:\n            count += 1\n        i += 1\n    return count + len(t) - j\n\nif __name__ == "__main__":\n    print(getMaxSubsequence(input(), input())) \n', '\n\ndef getMaxSubsequence(s, t):\n    i = 0\n    j = 0\n    count = 0\n    while i < len(s) and j < len(t):\n        if s[i] == t[j]:\n            j += 1\n        else:\n            count += 1\n        i += 1\n    return count + len(t) - j \n\nif __name__ == "__main__":\n    print(getMaxSubsequence(input(), input()))\n']
2022-03-30 21:12:10.581431 size on output set 4
