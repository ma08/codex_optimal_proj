["\n\ndef main(input_file):\n    n = int(input_file.readline())\n    words = input_file.readline().split()\n\n    # Create a dictionary of words to their count\n    word_counts = dict()\n    for word in words:\n        if word not in word_counts:\n            word_counts[word] = 0\n        word_counts[word] += 1\n\n    # Create a list of tuples of (word, count)\n    word_count_tuples = list()\n    for word in word_counts:\n        word_count_tuples.append((word, word_counts[word]))\n\n    # Sort the list by decreasing count\n    word_count_tuples.sort(key=lambda x: x[1], reverse=True)\n\n    # If the first word is not the most common word, or\n    # if the first two words have the same count, then\n    # we don't need to do any abbreviation\n    if word_count_tuples[0][1] > word_count_tuples[1][1] or \\\n       word_count_tuples[0][1] == word_count_tuples[1][1]:\n        return len(words) * 2 - 1\n\n    # Otherwise, we need to do an abbreviation\n    abbreviation_word = word_count_tuples[0][0]\n    abbreviation_count = word_count_tuples[0][1]\n    abbreviation_length = len(abbreviation_word) - 1\n\n    # The minimum length is the length of the longest word\n    # minus the length of the most common word, plus the\n    # number of occurrences of the most common word\n    minimum_length = abbreviation_count * abbreviation_length\n    for word in words:\n        minimum_length += len(word) - abbreviation_length\n\n    return minimum_length\n\n\nif __name__ == '__main__':\n    f = open('test_cases.txt', 'r')\n    print(main(f))", "\n\nn = int(input())\nwords = input().split()\n\n#print(n, words)\n\ndef get_abbreviation(words):\n    abbreviation = \"\"\n    for word in words:\n        abbreviation += word[0]\n    return abbreviation.upper()\n\ndef get_abbreviation_length(words):\n    return len(get_abbreviation(words))\n\ndef get_length_after_abbreviation(words):\n    length = 0\n    for word in words:\n        length += len(word)\n    return length - get_abbreviation_length(words)\n\ndef get_length_after_abbreviation_with_space(words):\n    return len(words) - 1 + get_length_after_abbreviation(words)\n\ndef get_max_possible_abbreviation_length(words):\n    abbreviation = \"\"\n    for word in words:\n        if word[0].isupper():\n            abbreviation += word[0]\n        else:\n            break\n    return len(abbreviation)\n\ndef get_max_possible_abbreviation_length_with_space(words):\n    return len(words) - 1 + get_max_possible_abbreviation_length(words)\n\ndef get_min_length_after_one_abbreviation(n, words):\n    if n <= 1:\n        return n\n    else:\n        if get_max_possible_abbreviation_length_with_space(words) < get_length_after_abbreviation_with_space(words):\n            return get_max_possible_abbreviation_length_with_space(words)\n        else:\n            return get_length_after_abbreviation_with_space(words)\n\nprint(get_min_length_after_one_abbreviation(n, words))"]