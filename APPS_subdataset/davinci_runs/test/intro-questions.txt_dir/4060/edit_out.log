2022-03-30 21:21:57.497346 num operations 2
2022-03-30 21:21:57.497378 size on input set 1
2022-03-30 21:22:01.971245 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\ndef solve():\n    n = int(input())\n    s = input()\n    l = 0\n    r = 0\n    for i in range(n):\n        if s[i] == '(':\n            l += 1\n        else:\n            if l > 0:\n                l -= 1\n            else:\n                r += 1\n    print(l + r)\n\nsolve()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef solve():\n    n = int(input())\n    s = input()\n    left = 0\n    right = 0\n    for i in range(n):\n        if s[i] == '(':\n            left += 1\n        else:\n            if left > 0:\n                left -= 1\n            else:\n                right += 1\n    print(left + right)\n\nsolve()\n"
    }
  ],
  "created": 1648689717,
  "object": "edit"
}
2022-03-30 21:22:01.971372 fix spelling mistakes 2 ["\ndef solve():\n    n = int(input())\n    s = input()\n    l = 0\n    r = 0\n    for i in range(n):\n        if s[i] == '(':\n            l += 1\n        else:\n            if l > 0:\n                l -= 1\n            else:\n                r += 1\n    print(l + r)\n\nsolve()\n", "\n\ndef solve():\n    n = int(input())\n    s = input()\n    left = 0\n    right = 0\n    for i in range(n):\n        if s[i] == '(':\n            left += 1\n        else:\n            if left > 0:\n                left -= 1\n            else:\n                right += 1\n    print(left + right)\n\nsolve()\n"]
2022-03-30 21:22:01.971399 size on output set 2
2022-03-30 21:22:01.971403 size on input set 2
2022-03-30 21:22:04.793617 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef solve():\n    n = int(input())\n    s = input()\n    left = 0\n    right = 0\n    for i in range(n):\n        if s[i] == '(':\n            left += 1\n        else:\n            if left > 0:\n                left -= 1\n            else:\n                right += 1\n    print(left + right) \n\nsolve()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef solve():\n    n = int(input())\n    s = input()\n    left = 0\n    right = 0\n    for i in range(n):\n        if s[i] == '(':\n            left += 1\n        else:\n            if left > 0:\n                left -= 1\n            else:\n                right += 1\n    print(2 * (left + right))\n\nsolve()\n"
    }
  ],
  "created": 1648689722,
  "object": "edit"
}
2022-03-30 21:22:04.793956 fix syntax errors 2 ["\ndef solve():\n    n = int(input())\n    s = input()\n    left = 0\n    right = 0\n    for i in range(n):\n        if s[i] == '(':\n            left += 1\n        else:\n            if left > 0:\n                left -= 1\n            else:\n                right += 1\n    print(left + right) \n\nsolve()\n", "\n\ndef solve():\n    n = int(input())\n    s = input()\n    left = 0\n    right = 0\n    for i in range(n):\n        if s[i] == '(':\n            left += 1\n        else:\n            if left > 0:\n                left -= 1\n            else:\n                right += 1\n    print(2 * (left + right))\n\nsolve()\n"]
2022-03-30 21:22:07.525568 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef solve():\n    n = int(input())\n    s = input()\n    l = 0\n    r = 0\n    for i in range(n):\n        if s[i] == '(':\n            l += 1\n        else:\n            if l > 0:\n                l -= 1\n            else:\n                r += 1\n    print(l + r) \n\nsolve()\n"
    },
    {
      "index": 1,
      "text": "\ndef solve():\n    n = int(input())\n    s = input()\n    l = 0\n    r = 0\n    for i in range(n):\n        if s[i] == '(':\n            l += 1\n        else:\n            if l > 0:\n                l -= 1\n            else:\n                r += 1\n    print(2 * (l + r))\n\nsolve()\n"
    }
  ],
  "created": 1648689725,
  "object": "edit"
}
2022-03-30 21:22:07.526123 fix syntax errors 2 ["\ndef solve():\n    n = int(input())\n    s = input()\n    l = 0\n    r = 0\n    for i in range(n):\n        if s[i] == '(':\n            l += 1\n        else:\n            if l > 0:\n                l -= 1\n            else:\n                r += 1\n    print(l + r) \n\nsolve()\n", "\ndef solve():\n    n = int(input())\n    s = input()\n    l = 0\n    r = 0\n    for i in range(n):\n        if s[i] == '(':\n            l += 1\n        else:\n            if l > 0:\n                l -= 1\n            else:\n                r += 1\n    print(2 * (l + r))\n\nsolve()\n"]
2022-03-30 21:22:07.526170 size on output set 4
2022-03-30 21:22:07.526185 num operations 2
2022-03-30 21:22:07.526191 size on input set 1
2022-03-30 21:22:13.254323 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Use a stack to keep track of the number of open brackets\n# If you have an open bracket, you can always close it to make the sequence regular\n# If you have a closed bracket, you can make the sequence regular if the bracket before it is an open bracket (it is already regular)\n# If you have an open bracket, you can make the sequence regular if the bracket after it is a closed bracket (it is already regular)\n# If you have a closed bracket, you can make the sequence regular if the bracket after it is an open bracket (it is already regular)\n\nimport sys\n\nn = int(sys.stdin.readline())\ns = sys.stdin.readline()\n\nopen_brackets = 0\nregular = 0\n\nfor i in range(n):\n    if s[i] == '(':\n        open_brackets += 1\n    else:\n        if open_brackets > 0:\n            open_brackets -= 1\n            regular += 1\n        if i+1 < n and s[i+1] == '(':\n            regular += 1\n\nprint(regular)\n"
    },
    {
      "index": 1,
      "text": "\n\n# Use a stack to keep track of the number of open brackets\n# If you have an open bracket, you can always close it to make the sequence regular.\n# If you have a closed bracket, you can make the sequence regular if the bracket before it is an open bracket.\n# If you have an open bracket, you can make the sequence regular if the bracket after it is a closed bracket.\n# If you have a closed bracket, you can make the sequence regular if the bracket after it is an open bracket.\n\nimport sys\n\nn = int(sys.stdin.readline())\ns = sys.stdin.readline()\n\nopen_brackets = 0\nregular = 0\n\nfor i in range(n):\n    if s[i] == '(':\n        open_brackets += 1\n    else:\n        if open_brackets > 0:\n            open_brackets -= 1\n            regular += 1\n        if i+1 < n and s[i+1] == '(':\n            regular += 1\n\nprint(regular)\n"
    }
  ],
  "created": 1648689727,
  "object": "edit"
}
2022-03-30 21:22:13.254557 fix spelling mistakes 2 ["\n\n# Use a stack to keep track of the number of open brackets\n# If you have an open bracket, you can always close it to make the sequence regular\n# If you have a closed bracket, you can make the sequence regular if the bracket before it is an open bracket (it is already regular)\n# If you have an open bracket, you can make the sequence regular if the bracket after it is a closed bracket (it is already regular)\n# If you have a closed bracket, you can make the sequence regular if the bracket after it is an open bracket (it is already regular)\n\nimport sys\n\nn = int(sys.stdin.readline())\ns = sys.stdin.readline()\n\nopen_brackets = 0\nregular = 0\n\nfor i in range(n):\n    if s[i] == '(':\n        open_brackets += 1\n    else:\n        if open_brackets > 0:\n            open_brackets -= 1\n            regular += 1\n        if i+1 < n and s[i+1] == '(':\n            regular += 1\n\nprint(regular)\n", "\n\n# Use a stack to keep track of the number of open brackets\n# If you have an open bracket, you can always close it to make the sequence regular.\n# If you have a closed bracket, you can make the sequence regular if the bracket before it is an open bracket.\n# If you have an open bracket, you can make the sequence regular if the bracket after it is a closed bracket.\n# If you have a closed bracket, you can make the sequence regular if the bracket after it is an open bracket.\n\nimport sys\n\nn = int(sys.stdin.readline())\ns = sys.stdin.readline()\n\nopen_brackets = 0\nregular = 0\n\nfor i in range(n):\n    if s[i] == '(':\n        open_brackets += 1\n    else:\n        if open_brackets > 0:\n            open_brackets -= 1\n            regular += 1\n        if i+1 < n and s[i+1] == '(':\n            regular += 1\n\nprint(regular)\n"]
2022-03-30 21:22:13.254727 size on output set 2
2022-03-30 21:22:13.254734 size on input set 2
2022-03-30 21:22:21.942369 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Use a stack to keep track of the number of open brackets.\n# If you have an open bracket, you can always close it to make the sequence regular. (1)\n# If you have a closed bracket, you can make the sequence regular if the bracket before it is an open bracket. (2)\n# If you have an open bracket, you can make the sequence regular if the bracket after it is a closed bracket. (3)\n# If you have a closed bracket, you can make the sequence regular if the bracket after it is an open bracket. (4)\n\nimport sys\n\nn = int(sys.stdin.readline())\ns = sys.stdin.readline()\n\nopen_brackets = 0\nregular = 0\n# (1)\n\nfor i in range(n):\n    if s[i] == '(':\n        open_brackets += 1\n    else:\n        # (2)\n        if open_brackets > 0:\n            open_brackets -= 1\n            regular += 1\n        # (3)\n        if i+1 < n and s[i+1] == '(':\n            regular += 1\n        # (4)\n        if i+1 < n and s[i+1] == ')':\n            regular += 1\n\nprint(regular)\n"
    },
    {
      "index": 1,
      "text": "\n\n# https://codeforces.com/problemset/problem/1097/B\n\n# Use a stack to keep track of the number of open brackets\n# If you have an open bracket, you can always close it to make the sequence regular.\n# If you have a closed bracket, you can make the sequence regular if the bracket before it is an open bracket.\n# If you have an open bracket, you can make the sequence regular if the bracket after it is a closed bracket.\n# If you have a closed bracket, you can make the sequence regular if the bracket after it is an open bracket.\n\nimport sys\n\nn = int(sys.stdin.readline())\ns = sys.stdin.readline()\n\nopen_brackets = 0\nregular = 0\n\nfor i in range(n):\n    if s[i] == '(':\n        open_brackets += 1\n    else:\n        if open_brackets > 0:\n            open_brackets -= 1\n            regular += 1\n        if i+1 < n and s[i+1] == '(':\n            regular += 1\n\nprint(regular)\n"
    }
  ],
  "created": 1648689733,
  "object": "edit"
}
2022-03-30 21:22:21.942495 fix syntax errors 2 ["\n\n# Use a stack to keep track of the number of open brackets.\n# If you have an open bracket, you can always close it to make the sequence regular. (1)\n# If you have a closed bracket, you can make the sequence regular if the bracket before it is an open bracket. (2)\n# If you have an open bracket, you can make the sequence regular if the bracket after it is a closed bracket. (3)\n# If you have a closed bracket, you can make the sequence regular if the bracket after it is an open bracket. (4)\n\nimport sys\n\nn = int(sys.stdin.readline())\ns = sys.stdin.readline()\n\nopen_brackets = 0\nregular = 0\n# (1)\n\nfor i in range(n):\n    if s[i] == '(':\n        open_brackets += 1\n    else:\n        # (2)\n        if open_brackets > 0:\n            open_brackets -= 1\n            regular += 1\n        # (3)\n        if i+1 < n and s[i+1] == '(':\n            regular += 1\n        # (4)\n        if i+1 < n and s[i+1] == ')':\n            regular += 1\n\nprint(regular)\n", "\n\n# https://codeforces.com/problemset/problem/1097/B\n\n# Use a stack to keep track of the number of open brackets\n# If you have an open bracket, you can always close it to make the sequence regular.\n# If you have a closed bracket, you can make the sequence regular if the bracket before it is an open bracket.\n# If you have an open bracket, you can make the sequence regular if the bracket after it is a closed bracket.\n# If you have a closed bracket, you can make the sequence regular if the bracket after it is an open bracket.\n\nimport sys\n\nn = int(sys.stdin.readline())\ns = sys.stdin.readline()\n\nopen_brackets = 0\nregular = 0\n\nfor i in range(n):\n    if s[i] == '(':\n        open_brackets += 1\n    else:\n        if open_brackets > 0:\n            open_brackets -= 1\n            regular += 1\n        if i+1 < n and s[i+1] == '(':\n            regular += 1\n\nprint(regular)\n"]
2022-03-30 21:22:25.672875 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# Use a stack to keep track of the number of open brackets\n# If you have an open bracket, you can always close it to make the sequence regular\n# If you have a closed bracket, you can make the sequence regular if the bracket before it is an open bracket (it is already regular)\n# If you have an open bracket, you can make the sequence regular if the bracket after it is a closed bracket (it is already regular)\n# If you have a closed bracket, you can make the sequence regular if the bracket after it is an open bracket (it is already regular)\nimport sys\nn = int(sys.stdin.readline())\ns = sys.stdin.readline()\nopen_brackets = 0\nregular = 0\nfor i in range(n):\n    if s[i] == '(':\n        open_brackets += 1\n    else:\n        if open_brackets > 0:\n            open_brackets -= 1\n            regular += 1\n        if i+1 < n and s[i+1] == '(':\n            regular += 1\nprint(regular)\n"
    },
    {
      "index": 1,
      "text": "\n# Use a stack to keep track of the number of open brackets\n# If you have an open bracket, you can always close it to make the sequence regular\n# If you have a closed bracket, you can make the sequence regular if the bracket before it is an open bracket (it is already regular)\n# If you have an open bracket, you can make the sequence regular if the bracket after it is a closed bracket (it is already regular)\n# If you have a closed bracket, you can make the sequence regular if the bracket after it is an open bracket (it is already regular)\nimport sys\nn = int(sys.stdin.readline())\ns = sys.stdin.readline()\nopen_brackets = 0\nregular = 0\nfor i in range(n):\n    if s[i] == '(':\n        open_brackets += 1\n    else:\n        if open_brackets > 0:\n            open_brackets -= 1\n            regular += 1\n        if i+1 < n and s[i+1] == '(':\n            regular += 1\nprint(regular)\n"
    }
  ],
  "created": 1648689742,
  "object": "edit"
}
2022-03-30 21:22:25.673147 fix syntax errors 2 ["\n# Use a stack to keep track of the number of open brackets\n# If you have an open bracket, you can always close it to make the sequence regular\n# If you have a closed bracket, you can make the sequence regular if the bracket before it is an open bracket (it is already regular)\n# If you have an open bracket, you can make the sequence regular if the bracket after it is a closed bracket (it is already regular)\n# If you have a closed bracket, you can make the sequence regular if the bracket after it is an open bracket (it is already regular)\nimport sys\nn = int(sys.stdin.readline())\ns = sys.stdin.readline()\nopen_brackets = 0\nregular = 0\nfor i in range(n):\n    if s[i] == '(':\n        open_brackets += 1\n    else:\n        if open_brackets > 0:\n            open_brackets -= 1\n            regular += 1\n        if i+1 < n and s[i+1] == '(':\n            regular += 1\nprint(regular)\n", "\n# Use a stack to keep track of the number of open brackets\n# If you have an open bracket, you can always close it to make the sequence regular\n# If you have a closed bracket, you can make the sequence regular if the bracket before it is an open bracket (it is already regular)\n# If you have an open bracket, you can make the sequence regular if the bracket after it is a closed bracket (it is already regular)\n# If you have a closed bracket, you can make the sequence regular if the bracket after it is an open bracket (it is already regular)\nimport sys\nn = int(sys.stdin.readline())\ns = sys.stdin.readline()\nopen_brackets = 0\nregular = 0\nfor i in range(n):\n    if s[i] == '(':\n        open_brackets += 1\n    else:\n        if open_brackets > 0:\n            open_brackets -= 1\n            regular += 1\n        if i+1 < n and s[i+1] == '(':\n            regular += 1\nprint(regular)\n"]
2022-03-30 21:22:25.673279 size on output set 3
