"""
You are given an array $a$ consisting of $n$ integers.

You can remove at most one element from this array. Thus, the final length of the array is $n-1$ or $n$.

Your task is to calculate the maximum possible length of the strictly increasing contiguous subarray of the remaining array.

Recall that the contiguous subarray $a$ with indices from $l$ to $r$ is $a[l \dots r] = a_l, a_{l + 1}, \dots, a_r$. The subarray $a[l \dots r]$ is called strictly increasing if $a_l < a_{l+1} < \dots < a_r$.


-----Input-----

The first line of the input contains one integer $n$ ($2 \le n \le 2 \cdot 10^5$) — the number of elements in $a$.

The second line of the input contains $n$ integers $a_1, a_2, \dots, a_n$ ($1 \le a_i \le 10^9$), where $a_i$ is the $i$-th element of $a$.


-----Output-----

Print one integer — the maximum possible length of the strictly increasing contiguous subarray of the array $a$ after removing at most one element.


-----Examples-----
Input
5
1 2 5 3 4

Output
4

Input
2
1 2

Output
2

Input
7
6 5 4 3 2 4 3

Output
2



-----Note-----

In the first example, you can delete $a_3=5$. Then the resulting array will be equal to $[1, 2, 3, 4]$ and the length of its largest increasing subarray will be equal to $4$.
"""
--------------------------
{
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\n# n = 5\n# a = [1, 2, 5, 3, 4]\n\n# n = 2\n# a = [1, 2]\n\n# n = 7\n# a = [6, 5, 4, 3, 2, 4, 3]\n\n# n = 5\n# a = [1, 2, 3, 4, 5]\n\n# n = 5\n# a = [1, 2, 1, 2, 1]\n\n# n = 8\n# a = [1, 2, 3, 4, 5, 6, 7, 8]\n\n# n = 8\n# a = [8, 7, 6, 5, 4, 3, 2, 1]\n\n# n = 8\n# a = [1, 2, 3, 4, 5, 6, 7, 8]\n\n# n = 7\n# a = [1, 2, 3, 4, 5, 6, 7]\n\n# n = 7\n# a = [7, 6, 5, 4, 3, 2, 1]\n\n# n = 7\n# a = [1, 1, 1, 1, 1, 1, 1]\n\n\ndef max_increasing_subarray(a):\n    \"\"\"\n    :param a: list\n    :return: int\n    \"\"\"\n    n = len(a)\n    if n == 1:\n        return 1\n    else:\n        max_len = 1\n        for i in range(1, n):\n            if a[i] > a[i - 1]:\n                max_len += 1\n            else:\n                break\n        return max_len\n\n\ndef max_length_of_increasing_subarray(a):\n    \"\"\"\n    :param a: list\n    :return: int\n    \"\"\"\n    n = len(a)\n    ans = max_increasing_subarray(a)\n    for i in range(1, n - 1):\n        if a[i] > a[i - 1] and a[i] > a[i + 1]:\n            ans = max(ans, max_increasing_subarray(a[:i] + a[i + 1:]))\n    ans = max(ans, max_increasing_subarray(a[1:]))\n    return ans\n\n\nprint(max_length_of_increasing_subarray(a))"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\nif n == 2:\n    print(2)\n    exit()\n\nmax_length = 2\nlength = 2\nfor i in range(1, n - 1):\n    if a[i - 1] < a[i] < a[i + 1]:\n        length += 1\n    else:\n        length = 2\n    if length > max_length:\n        max_length = length\n\nprint(max_length)"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\nif n == 2:\n    print(2)\nelse:\n    count = 1\n    for i in range(1, n):\n        if a[i] > a[i-1]:\n            count += 1\n        else:\n            break\n    for j in range(n-2, 0, -1):\n        if a[j] < a[j+1]:\n            count += 1\n        else:\n            break\n    print(count)"
    }
  ],
  "created": 1648693769,
  "id": "cmpl-4reqvgPvahImN2pu546bOJHK9bSR4",
  "model": "code-davinci:002",
  "object": "text_completion"
}
0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\n# n = 5\n# a = [1, 2, 5, 3, 4]\n\n# n = 2\n# a = [1, 2]\n\n# n = 7\n# a = [6, 5, 4, 3, 2, 4, 3]\n\n# n = 5\n# a = [1, 2, 3, 4, 5]\n\n# n = 5\n# a = [1, 2, 1, 2, 1]\n\n# n = 8\n# a = [1, 2, 3, 4, 5, 6, 7, 8]\n\n# n = 8\n# a = [8, 7, 6, 5, 4, 3, 2, 1]\n\n# n = 8\n# a = [1, 2, 3, 4, 5, 6, 7, 8]\n\n# n = 7\n# a = [1, 2, 3, 4, 5, 6, 7]\n\n# n = 7\n# a = [7, 6, 5, 4, 3, 2, 1]\n\n# n = 7\n# a = [1, 1, 1, 1, 1, 1, 1]\n\n\ndef max_increasing_subarray(a):\n    \"\"\"\n    :param a: list\n    :return: int\n    \"\"\"\n    n = len(a)\n    if n == 1:\n        return 1\n    else:\n        max_len = 1\n        for i in range(1, n):\n            if a[i] > a[i - 1]:\n                max_len += 1\n            else:\n                break\n        return max_len\n\n\ndef max_length_of_increasing_subarray(a):\n    \"\"\"\n    :param a: list\n    :return: int\n    \"\"\"\n    n = len(a)\n    ans = max_increasing_subarray(a)\n    for i in range(1, n - 1):\n        if a[i] > a[i - 1] and a[i] > a[i + 1]:\n            ans = max(ans, max_increasing_subarray(a[:i] + a[i + 1:]))\n    ans = max(ans, max_increasing_subarray(a[1:]))\n    return ans\n\n\nprint(max_length_of_increasing_subarray(a))"
}
REASON stop
1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\nif n == 2:\n    print(2)\n    exit()\n\nmax_length = 2\nlength = 2\nfor i in range(1, n - 1):\n    if a[i - 1] < a[i] < a[i + 1]:\n        length += 1\n    else:\n        length = 2\n    if length > max_length:\n        max_length = length\n\nprint(max_length)"
}
REASON stop
2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\nif n == 2:\n    print(2)\nelse:\n    count = 1\n    for i in range(1, n):\n        if a[i] > a[i-1]:\n            count += 1\n        else:\n            break\n    for j in range(n-2, 0, -1):\n        if a[j] < a[j+1]:\n            count += 1\n        else:\n            break\n    print(count)"
}
REASON stop
