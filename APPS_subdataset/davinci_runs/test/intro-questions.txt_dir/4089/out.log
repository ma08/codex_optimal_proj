"""
1000000000000001 dogs suddenly appeared under the roof of Roger's house, all of which he decided to keep. The dogs had been numbered 1 through 1000000000000001, but he gave them new names, as follows:
 - the dogs numbered 1,2,\cdots,26 were respectively given the names a, b, ..., z;
 - the dogs numbered 27,28,29,\cdots,701,702  were respectively given the names aa, ab, ac, ..., zy, zz;
 - the dogs numbered 703,704,705,\cdots,18277,18278  were respectively given the names aaa, aab, aac, ..., zzy, zzz;
 - the dogs numbered 18279,18280,18281,\cdots,475253,475254  were respectively given the names aaaa, aaab, aaac, ..., zzzy, zzzz;
 - the dogs numbered 475255,475256,\cdots  were respectively given the names aaaaa, aaaab, ...;
 - and so on.
To sum it up, the dogs numbered 1, 2, \cdots were respectively given the following names:
a, b, ..., z, aa, ab, ..., az, ba, bb, ..., bz, ..., za, zb, ..., zz, aaa, aab, ..., aaz, aba, abb, ..., abz, ..., zzz, aaaa, ...
Now, Roger asks you:
"What is the name for the dog numbered N?"

-----Constraints-----
 - N is an integer.
 -  1 \leq N \leq 1000000000000001

-----Input-----
Input is given from Standard Input in the following format:
N

-----Output-----
Print the answer to Roger's question as a string consisting of lowercase English letters.

-----Sample Input-----
2

-----Sample Output-----
b

"""
--------------------------
{
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nimport string\n\nN = int(input())\n\ndef solve(N):\n  if N <= 26:\n    return string.ascii_lowercase[N - 1]\n  else:\n    word_len = 1\n    while True:\n      if N - 26**word_len <= 0:\n        break\n      N -= 26**word_len\n      word_len += 1\n    N -= 1\n    alphabet = string.ascii_lowercase\n    answer = ''\n    for _ in range(word_len):\n      answer = alphabet[N % 26] + answer\n      N = N // 26\n    return answer\n\nprint(solve(N))"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\n# n = int(input())\nn = 1000000000000000\n# n = 18279\n# n = 4\n# n = 26\n\nif n <= 26:\n    print(chr(n + 96))\nelse:\n    digits = 1\n    c = 0\n    while n > c:\n        c = 26 * (26 ** (digits - 1)) * digits\n        digits += 1\n\n    digits -= 1\n    c = 26 * (26 ** (digits - 1)) * digits\n\n    n = n - c\n\n    l = []\n    for i in range(digits):\n        l.append(1)\n\n    for i in range(n):\n        l[digits - 1] += 1\n        for j in range(digits - 1, 0, -1):\n            if l[j] > 26:\n                l[j] = 1\n                l[j - 1] += 1\n\n    ans = ''\n    for i in range(digits):\n        ans += chr(l[i] + 96)\n\n    print(ans)"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\n# === Solution ===\n\ndef convert(num):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    base = len(alphabet)\n    if num <= 0:\n        return ''\n    elif num <= base:\n        return alphabet[num-1]\n    else:\n        return convert(num//base) + alphabet[(num%base)-1]\n\nnum = int(input())\nprint(convert(num))"
    }
  ],
  "created": 1648693875,
  "id": "cmpl-4resd3DxLY9m9x7jTXjjGJlsogXMn",
  "model": "code-davinci:002",
  "object": "text_completion"
}
0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nimport string\n\nN = int(input())\n\ndef solve(N):\n  if N <= 26:\n    return string.ascii_lowercase[N - 1]\n  else:\n    word_len = 1\n    while True:\n      if N - 26**word_len <= 0:\n        break\n      N -= 26**word_len\n      word_len += 1\n    N -= 1\n    alphabet = string.ascii_lowercase\n    answer = ''\n    for _ in range(word_len):\n      answer = alphabet[N % 26] + answer\n      N = N // 26\n    return answer\n\nprint(solve(N))"
}
REASON stop
1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\n# n = int(input())\nn = 1000000000000000\n# n = 18279\n# n = 4\n# n = 26\n\nif n <= 26:\n    print(chr(n + 96))\nelse:\n    digits = 1\n    c = 0\n    while n > c:\n        c = 26 * (26 ** (digits - 1)) * digits\n        digits += 1\n\n    digits -= 1\n    c = 26 * (26 ** (digits - 1)) * digits\n\n    n = n - c\n\n    l = []\n    for i in range(digits):\n        l.append(1)\n\n    for i in range(n):\n        l[digits - 1] += 1\n        for j in range(digits - 1, 0, -1):\n            if l[j] > 26:\n                l[j] = 1\n                l[j - 1] += 1\n\n    ans = ''\n    for i in range(digits):\n        ans += chr(l[i] + 96)\n\n    print(ans)"
}
REASON stop
2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\n# === Solution ===\n\ndef convert(num):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    base = len(alphabet)\n    if num <= 0:\n        return ''\n    elif num <= base:\n        return alphabet[num-1]\n    else:\n        return convert(num//base) + alphabet[(num%base)-1]\n\nnum = int(input())\nprint(convert(num))"
}
REASON stop
