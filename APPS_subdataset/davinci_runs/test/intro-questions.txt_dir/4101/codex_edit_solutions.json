["\ndef main():\n    n, m = [int(x) for x in input().split()]  # read n and m\n    matrix = []\n    for i in range(n):  # read matrix\n        matrix.append([int(x) for x in input().split()])\n\n    rows = [0] * n  # rows and columns\n    columns = [0] * m  # rows and columns\n    for i in range(n):  # count rows and columns\n        for j in range(m):\n            if matrix[i][j] == 1:\n                rows[i] += 1\n                columns[j] += 1\n\n    for i in range(n):\n        for j in range(m):\n            if (rows[i] + columns[j]) % 2 != matrix[i][j]:\n                print(\"NO\")\n                return\n    print(\"YES\")\n    print(\" \".join([\"1\" if x % 2 == 1 else \"0\" for x in rows]))\n    print(\" \".join([\"1\" if x % 2 == 1 else \"0\" for x in columns]))\n\nif __name__ == \"__main__\":\n    main()\n", "n, m = map(int, input().split())\nmatrix = []\nfor i in range(n):\n    matrix.append(list(map(int, input().split())))\n\ndef inverse(arr):\n    return [1 - x for x in arr]\n\ndef is_sorted(arr):\n    for i in range(1, len(arr)):\n        if arr[i - 1] > arr[i]:\n            return False\n    return True\n\ndef is_sorted_matrix(matrix):\n    arr = []\n    for i in range(n):\n        for j in range(m):\n            arr.append(matrix[i][j])\n    return is_sorted(arr)\n\ndef is_sorted_matrix_inv(matrix):\n    for i in range(n):\n        if not is_sorted(matrix[i]):\n            return False\n    for j in range(m):\n        arr = []\n        for i in range(n):\n            arr.append(matrix[i][j])\n        if not is_sorted(arr):\n            return False\n    return True\n\nr = [0] * n\nc = [0] * m\nfor i in range(n):\n    if not is_sorted(matrix[i]):\n        r[i] = 1\n        matrix[i] = inverse(matrix[i])\nfor j in range(m):\n    arr = []\n    for i in range(n):\n        arr.append(matrix[i][j])\n    if not is_sorted(arr):\n        c[j] = 1\n        for i in range(n):\n            matrix[i][j] = 1 - matrix[i][j]\n\nif is_sorted_matrix_inv(matrix):\n    print(\"YES\")\n    print(\"\".join(map(str, r)))\n    print(\"\".join(map(str, c)))\nelse:\n    print(\"NO\")\n", "n, m = map(int, input().split())\nmatrix = []\nfor i in range(n):\n    matrix.append(list(map(int, input().split())))\n\ndef inverse(arr):\n    return [1 - x for x in arr]\n\ndef is_sorted(arr):\n    for i in range(1, len(arr)):\n        if arr[i - 1] > arr[i]:\n            return False\n    return True\n\ndef is_sorted_matrix(matrix):\n    arr = []\n    for i in range(n):\n        for j in range(m):\n            arr.append(matrix[i][j])\n    return is_sorted(arr)\n\ndef is_sorted_matrix_inv(matrix):\n    for i in range(n):\n        if not is_sorted(matrix[i]):\n            return False\n    for j in range(m):\n        arr = []\n        for i in range(n):\n            arr.append(matrix[i][j])\n        if not is_sorted(arr):\n            return False\n    return True\n\nr = [0] * n\nc = [0] * m\nfor i in range(n):\n    if not is_sorted(matrix[i]):\n        r[i] = 1\n        matrix[i] = inverse(matrix[i])\nfor j in range(m):\n    arr = []\n    for i in range(n):\n        arr.append(matrix[i][j])\n    if not is_sorted(arr):\n        c[j] = 1\n        for i in range(n):\n            matrix[i][j] = 1 - matrix[i][j]\n\nif is_sorted_matrix_inv(matrix):\n    print(\"YES\")\n    print(\"\".join(map(str, r)), \"\\n\", \"\".join(map(str, c)))\nelse:\n    print(\"NO\")\n", "\n\ndef main():\n    n, m = [int(x) for x in input().split()] # n - rows, m - columns\n    matrix = []\n    for i in range(n): # read matrix\n        matrix.append([int(x) for x in input().split()]) # matrix[i][j] - element in i-th row and j-th column\n\n    rows = [0] * n # rows[i] - number of 1s in i-th row\n    columns = [0] * m # columns[j] - number of 1s in j-th column\n    for i in range(n): # count number of 1s in each row and column\n        for j in range(m): # matrix[i][j] - element in i-th row and j-th column\n            if matrix[i][j] == 1: # if element is 1\n                rows[i] += 1 # increase number of 1s in i-th row\n                columns[j] += 1 # increase number of 1s in j-th column\n\n    for i in range(n): # check if it is possible to change matrix\n        for j in range(m): # matrix[i][j] - element in i-th row and j-th column\n            if (rows[i] + columns[j]) % 2 != matrix[i][j]: # if it is impossible to change element in i-th row and j-th column\n                print(\"NO\") # print \"NO\"\n                return # finish program\n    print(\"YES\") # print \"YES\"\n    print(\" \".join([\"1\" if x % 2 == 1 else \"0\" for x in rows])) # print new rows\n    print(\" \".join([\"1\" if x % 2 == 1 else \"0\" for x in columns])) # print new columns\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python3\n\nn, m = map(int, input().split())\nmatrix = []\nfor i in range(n):\n    matrix.append(list(map(int, input().split())))\n\ndef inverse(arr):\n    return [1 - x for x in arr]\n\ndef is_sorted(arr):\n    for i in range(1, len(arr)):\n        if arr[i - 1] > arr[i]:\n            return False\n    return True\n\ndef is_sorted_matrix(matrix):\n    arr = []\n    for i in range(n):\n        for j in range(m):\n            arr.append(matrix[i][j])\n    return is_sorted(arr)\n\ndef is_sorted_matrix_inv(matrix):\n    for i in range(n):\n        if not is_sorted(matrix[i]):\n            return False\n    for j in range(m):\n        arr = []\n        for i in range(n):\n            arr.append(matrix[i][j])\n        if not is_sorted(arr):\n            return False\n    return True\n\nr = [0] * n\nc = [0] * m\nfor i in range(n):\n    if not is_sorted(matrix[i]):\n        r[i] = 1\n        matrix[i] = inverse(matrix[i])\nfor j in range(m):\n    arr = []\n    for i in range(n):\n        arr.append(matrix[i][j])\n    if not is_sorted(arr):\n        c[j] = 1\n        for i in range(n):\n            matrix[i][j] = 1 - matrix[i][j]\n\nif is_sorted_matrix_inv(matrix, n, m):\n    print(\"YES\")\n    print(\"\".join(map(str, r)))\n    print(\"\".join(map(str, c)))\nelse:\n    print(\"NO\")\n"]