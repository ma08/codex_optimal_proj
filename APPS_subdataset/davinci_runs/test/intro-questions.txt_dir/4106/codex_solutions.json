["\n\ndef process(n, k, x, a_list):\n    if x < n - k + 1:\n        return -1\n    else:\n        return sum(a_list)\n\ndef main():\n    n, k, x = [int(x) for x in input().strip().split()]\n    a_list = [int(x) for x in input().strip().split()]\n    result = process(n, k, x, a_list)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()", "\n\nn, k, x = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [0] * (n + 1)\nfor i in range(n):\n    dp[i + 1] = dp[i] + a[i]\n\nbest = 0\nfor i in range(k):\n    best = max(best, dp[n - i])\n\nfor i in range(k, n - x + 1):\n    best = max(best, dp[i + x] - dp[i])\n\nprint(best)", "\n\nimport unittest\nimport sys\nimport random\n\nclass HashMap:\n    def __init__(self):\n        self.hash_map = {}\n        self.size = 0\n\n    def get(self, key):\n        return self.hash_map[key]\n\n    def put(self, key, value):\n        self.size += 1\n        self.hash_map[key] = value\n\n    def get_size(self):\n        return self.size\n\n    def is_empty(self):\n        return self.size == 0\n\n    def contains_key(self, key):\n        return key in self.hash_map\n\n    def contains_value(self, value):\n        return value in self.hash_map.values()\n\n    def remove(self, key):\n        del self.hash_map[key]\n\n    def clear(self):\n        self.hash_map = {}\n        self.size = 0\n\n    def key_set(self):\n        return self.hash_map.keys()\n\n    def value_set(self):\n        return self.hash_map.values()\n\n\ndef calc_prefix_sum(array):\n    prefix_sum = [0]\n    size = len(array)\n\n    for i in range(size):\n        prefix_sum.append(prefix_sum[i] + array[i])\n\n    return prefix_sum\n\n\ndef find_max_sum_of_beauty(n, k, x, array):\n    prefix_sum = calc_prefix_sum(array)\n\n    hash_map = HashMap()\n    hash_map.put(0, 0)\n    hash_map.put(1, prefix_sum[k])\n\n    for i in range(x, n + 1):\n        for j in range(max(1, i - k), min(i, x) + 1):\n            hash_map.put(i, max(hash_map.get(i), hash_map.get(i - j) + prefix_sum[i] - prefix_sum[i - j]))\n\n    if hash_map.contains_key(n):\n        return hash_map.get(n)\n    else:\n        return -1\n\n\nclass Test(unittest.TestCase):\n    def test_find_max_sum_of_beauty(self):\n        self.assertEqual(find_max_sum_of_beauty(5, 2, 3, [5, 1, 3, 10, 1]), 18)\n        self.assertEqual(find_max_sum_of_beauty(6, 1, 5, [10, 30, 30, 70, 10, 10]), -1)\n        self.assertEqual(find_max_sum_of_beauty(4, 3, 1, [1, 100, 1, 1]), 100)\n\n\ndef main():\n    n, k, x = map(int, input().split(' '))\n    array = list(map(int, input().split(' ')))\n    print(find_max_sum_of_beauty(n, k, x, array))\n\n\nif __name__ == '__main__':\n    main()"]