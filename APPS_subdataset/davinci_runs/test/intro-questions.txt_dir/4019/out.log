"""
You are given an undirected unweighted connected graph consisting of $n$ vertices and $m$ edges. It is guaranteed that there are no self-loops or multiple edges in the given graph.

Your task is to find any spanning tree of this graph such that the degree of the first vertex (vertex with label $1$ on it) is equal to $D$ (or say that there are no such spanning trees). Recall that the degree of a vertex is the number of edges incident to it.


-----Input-----

The first line contains three integers $n$, $m$ and $D$ ($2 \le n \le 2 \cdot 10^5$, $n - 1 \le m \le min(2 \cdot 10^5, \frac{n(n-1)}{2}), 1 \le D < n$) â€” the number of vertices, the number of edges and required degree of the first vertex, respectively.

The following $m$ lines denote edges: edge $i$ is represented by a pair of integers $v_i$, $u_i$ ($1 \le v_i, u_i \le n$, $u_i \ne v_i$), which are the indices of vertices connected by the edge. There are no loops or multiple edges in the given graph, i. e. for each pair ($v_i, u_i$) there are no other pairs ($v_i, u_i$) or ($u_i, v_i$) in the list of edges, and for each pair $(v_i, u_i)$ the condition $v_i \ne u_i$ is satisfied.


-----Output-----

If there is no spanning tree satisfying the condition from the problem statement, print "NO" in the first line.

Otherwise print "YES" in the first line and then print $n-1$ lines describing the edges of a spanning tree such that the degree of the first vertex (vertex with label $1$ on it) is equal to $D$. Make sure that the edges of the printed spanning tree form some subset of the input edges (order doesn't matter and edge $(v, u)$ is considered the same as the edge $(u, v)$).

If there are multiple possible answers, print any of them.


-----Examples-----
Input
4 5 1
1 2
1 3
1 4
2 3
3 4

Output
YES
2 1
2 3
3 4

Input
4 5 3
1 2
1 3
1 4
2 3
3 4

Output
YES
1 2
1 3
4 1

Input
4 4 3
1 2
1 4
2 3
3 4

Output
NO



-----Note-----

The picture corresponding to the first and second examples: [Image]

The picture corresponding to the third example: [Image]
"""
--------------------------
{
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "\nimport sys\nimport os\nimport math\nfrom collections import defaultdict\nfrom collections import deque\nimport queue\nimport heapq\nimport itertools\nfrom copy import deepcopy\nimport random\n\nsys.setrecursionlimit(10**9)\n# input = sys.stdin.readline\n# INF = sys.maxsize\nINF = 10**18\nMOD = 10**9 + 7\ninf = 10**9 + 7\ngcd = lambda x, y: math.gcd(x, y)\nlcm = lambda x, y: (x * y) // gcd(x, y)\ndivisors = lambda n: [i for i in range(1, int(math.sqrt(n))+1) if n % i == 0]\n# divisors = lambda n: list(set(reduce(list.__add__, ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0))))\nmodinv = lambda a, m: pow(a, m - 2, m)\n# modinv = lambda a, m: [x for x in range(1, m) if (x * a) % m == 1]\n# modinv = lambda a, m: [x for x in range(1, m) if gcd(a, m) == 1 and (a * x) % m == 1]\nmodinv = lambda a, m: [x for x in range(1, m) if (a * x) % m == 1]\n# modinv = lambda a, m: [x for x in range(1, m) if (a * x) % m == 1][0]\n# modinv = lambda a, m: pow(a, m - 2, m)\n# modinv = lambda a, m: pow(a, m - 2, m)\ndef mod_pow(a, n, mod):\n    res = 1\n    while n > 0:\n        if n & 1:\n            res = res * a % mod\n        a = a * a % mod\n        n >>= 1\n    return res\ndef mod_pow2(x, n, mod):\n    if n == 0:\n        return 1\n    elif n % 2 == 0:\n        return mod_pow(x * x % mod, n // 2, mod)\n    else:\n        return x * mod_pow(x, n - 1, mod) % mod\ndef mod_pow3(x, n, mod):\n    if n == 0:\n        return 1\n    tmp = mod_pow3(x, n // 2, mod)\n    if n % 2 == 0:\n        return tmp * tmp % mod\n    else:\n        return x * tmp % mod\ndef mod_pow4(x, n, mod):\n    if n == 0:\n        return 1\n    elif n % 2 == 0:\n        return mod_pow(x * x % mod, n // 2, mod)\n    else:\n        return x * mod_pow(x * x % mod, n // 2, mod) % mod\ndef mod_pow5(x, n, mod):\n    if n == 0:\n        return 1\n    elif n % 2 == 0:\n        return mod_pow5(x * x % mod, n // 2, mod) % mod\n    else:\n        return (x * mod_pow5(x * x % mod, n // 2, mod)) % mod\ndef mod_pow6(x, n, mod):\n    res = 1\n    while n > 0:\n        if n & 1:\n            res = (res * x) % mod\n        x = (x * x) % mod\n        n >>= 1\n    return res\ndef mod_pow7(x, n, mod):\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow8(x, n, mod):\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow9(x, n, mod):\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow10(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow11(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow12(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow13(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow14(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow15(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow16(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow17(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow18(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow19(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow20(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow21(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow22(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow23(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow24(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow25(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow26(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow27(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow28(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow29(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow30(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow31(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow32(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow33(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow34(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow35(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow36(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow37(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow38(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow39(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow40(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow41(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow42(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow43(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow44(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow45(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow46(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow47(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow48(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow49(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow50(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow51(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow52(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow53(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n       "
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nimport sys\nimport math\nfrom collections import defaultdict\nfrom heapq import heapify, heappush, heappop\n\ndef main():\n    n, m, D = map(int, sys.stdin.readline().split())\n    graph = defaultdict(list)\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        graph[u].append(v)\n        graph[v].append(u)\n    \n    if D > n - 1:\n        print(\"YES\")\n        for i in range(1, n):\n            print(1, i)\n        return\n    \n    if n - 1 == m:\n        print(\"NO\")\n        return\n        \n    visited = [True] + [False] * (n - 1)\n    parent = [0] * n\n    Q = [(0, 1)]\n    heapify(Q)\n    \n    while Q:\n        d, u = heappop(Q)\n        visited[u] = True\n        \n        for v in graph[u]:\n            if not visited[v]:\n                heappush(Q, (d + 1, v))\n                parent[v] = u\n    \n    if D == 1:\n        print(\"YES\")\n        for i in range(2, n):\n            print(1, i)\n        return\n    \n    if D == n - 1:\n        print(\"YES\")\n        for i in range(2, n):\n            print(i, parent[i])\n        return\n    \n    print(\"YES\")\n    for i in range(2, D + 1):\n        print(1, i)\n    for i in range(D + 1, n):\n        print(i, parent[i])\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\n\ndef main():\n    pass\n\n\nif __name__ == \"__main__\":\n    main()"
    }
  ],
  "created": 1648692216,
  "id": "cmpl-4reRsgZkPyki1NXDp5PhBLiRwPXK0",
  "model": "code-davinci:002",
  "object": "text_completion"
}
0 {
  "finish_reason": "length",
  "index": 0,
  "logprobs": null,
  "text": "\nimport sys\nimport os\nimport math\nfrom collections import defaultdict\nfrom collections import deque\nimport queue\nimport heapq\nimport itertools\nfrom copy import deepcopy\nimport random\n\nsys.setrecursionlimit(10**9)\n# input = sys.stdin.readline\n# INF = sys.maxsize\nINF = 10**18\nMOD = 10**9 + 7\ninf = 10**9 + 7\ngcd = lambda x, y: math.gcd(x, y)\nlcm = lambda x, y: (x * y) // gcd(x, y)\ndivisors = lambda n: [i for i in range(1, int(math.sqrt(n))+1) if n % i == 0]\n# divisors = lambda n: list(set(reduce(list.__add__, ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0))))\nmodinv = lambda a, m: pow(a, m - 2, m)\n# modinv = lambda a, m: [x for x in range(1, m) if (x * a) % m == 1]\n# modinv = lambda a, m: [x for x in range(1, m) if gcd(a, m) == 1 and (a * x) % m == 1]\nmodinv = lambda a, m: [x for x in range(1, m) if (a * x) % m == 1]\n# modinv = lambda a, m: [x for x in range(1, m) if (a * x) % m == 1][0]\n# modinv = lambda a, m: pow(a, m - 2, m)\n# modinv = lambda a, m: pow(a, m - 2, m)\ndef mod_pow(a, n, mod):\n    res = 1\n    while n > 0:\n        if n & 1:\n            res = res * a % mod\n        a = a * a % mod\n        n >>= 1\n    return res\ndef mod_pow2(x, n, mod):\n    if n == 0:\n        return 1\n    elif n % 2 == 0:\n        return mod_pow(x * x % mod, n // 2, mod)\n    else:\n        return x * mod_pow(x, n - 1, mod) % mod\ndef mod_pow3(x, n, mod):\n    if n == 0:\n        return 1\n    tmp = mod_pow3(x, n // 2, mod)\n    if n % 2 == 0:\n        return tmp * tmp % mod\n    else:\n        return x * tmp % mod\ndef mod_pow4(x, n, mod):\n    if n == 0:\n        return 1\n    elif n % 2 == 0:\n        return mod_pow(x * x % mod, n // 2, mod)\n    else:\n        return x * mod_pow(x * x % mod, n // 2, mod) % mod\ndef mod_pow5(x, n, mod):\n    if n == 0:\n        return 1\n    elif n % 2 == 0:\n        return mod_pow5(x * x % mod, n // 2, mod) % mod\n    else:\n        return (x * mod_pow5(x * x % mod, n // 2, mod)) % mod\ndef mod_pow6(x, n, mod):\n    res = 1\n    while n > 0:\n        if n & 1:\n            res = (res * x) % mod\n        x = (x * x) % mod\n        n >>= 1\n    return res\ndef mod_pow7(x, n, mod):\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow8(x, n, mod):\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow9(x, n, mod):\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow10(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow11(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow12(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow13(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow14(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow15(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow16(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow17(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow18(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow19(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow20(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow21(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow22(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow23(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow24(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow25(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow26(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow27(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow28(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow29(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow30(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow31(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow32(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow33(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow34(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow35(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow36(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow37(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow38(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow39(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow40(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow41(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow42(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow43(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow44(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow45(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow46(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow47(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow48(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow49(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow50(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow51(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow52(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        n >>= 1\n    return ans\ndef mod_pow53(x, n, mod):\n    if n == 0:\n        return 1\n    ans = 1\n    while n:\n       "
}
REASON length
1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nimport sys\nimport math\nfrom collections import defaultdict\nfrom heapq import heapify, heappush, heappop\n\ndef main():\n    n, m, D = map(int, sys.stdin.readline().split())\n    graph = defaultdict(list)\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        graph[u].append(v)\n        graph[v].append(u)\n    \n    if D > n - 1:\n        print(\"YES\")\n        for i in range(1, n):\n            print(1, i)\n        return\n    \n    if n - 1 == m:\n        print(\"NO\")\n        return\n        \n    visited = [True] + [False] * (n - 1)\n    parent = [0] * n\n    Q = [(0, 1)]\n    heapify(Q)\n    \n    while Q:\n        d, u = heappop(Q)\n        visited[u] = True\n        \n        for v in graph[u]:\n            if not visited[v]:\n                heappush(Q, (d + 1, v))\n                parent[v] = u\n    \n    if D == 1:\n        print(\"YES\")\n        for i in range(2, n):\n            print(1, i)\n        return\n    \n    if D == n - 1:\n        print(\"YES\")\n        for i in range(2, n):\n            print(i, parent[i])\n        return\n    \n    print(\"YES\")\n    for i in range(2, D + 1):\n        print(1, i)\n    for i in range(D + 1, n):\n        print(i, parent[i])\n\nif __name__ == \"__main__\":\n    main()"
}
REASON stop
2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\n\ndef main():\n    pass\n\n\nif __name__ == \"__main__\":\n    main()"
}
REASON stop
