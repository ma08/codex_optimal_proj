["\n\ndef check_rows_for_symmetry(rows):\n    # check if rows are symmetric\n    for i, row in enumerate(rows):\n        for j, value in enumerate(row):\n            if rows[j][i] != value:\n                return False\n    return True\n\ndef check_for_symmetry(tile_grid):\n    # check the rows for symmetry\n    if check_rows_for_symmetry(tile_grid):\n        # check the columns for symmetry\n        col_grid = [[row[i] for row in tile_grid] for i in range(len(tile_grid))]\n        if check_rows_for_symmetry(col_grid):\n            return True\n    return False\n\ndef get_tile_grid(tiles, m):\n    # make grid\n    tile_grid = []\n    for i in range(m):\n        row = []\n        for j in range(m):\n            row.append(tiles[i%2][j%2])\n        tile_grid.append(row)\n    return tile_grid\n\ndef solve(n, m, tiles_list):\n    # check all combinations\n    for tiles in tiles_list:\n        tile_grid = get_tile_grid(tiles, m)\n        if check_for_symmetry(tile_grid):\n            return True\n    return False\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    tiles_list = []\n    for i in range(n):\n        tile = []\n        for j in range(2):\n            tile.append(list(map(int, input().split())))\n        tiles_list.append(tile)\n    if solve(n, m, tiles_list):\n        print(\"YES\")\n    else:\n        print(\"NO\")", "\n\nt = int(input())\nfor i in range(t):\n    n, m = map(int, input().split())\n    l = []\n    for j in range(n):\n        a = input().split()\n        b = input().split()\n        l.append(a + b)\n    l.sort()\n    x = 0\n    flag = False\n    while x < n:\n        if l[x][0] == l[x][2] and l[x][1] == l[x][3]:\n            flag = True\n            break\n        x += 1\n    if flag:\n        print(\"YES\")\n    else:\n        print(\"NO\")", "\n\nimport sys\nfrom collections import defaultdict\n\ndef build_tiles():\n    tiles = defaultdict(list)\n    n = int(input())\n    m = int(input())\n    for i in range(n):\n        a, b = [int(x) for x in input().split()]\n        c, d = [int(x) for x in input().split()]\n        tiles[(a,b)].append((c,d))\n        tiles[(c,d)].append((a,b))\n    return tiles\n\ndef build_matrix(tiles, m):\n    matrix = [[-1 for _ in range(m)] for _ in range(m)]\n    i, j = 0, 0\n    while i < m:\n        if matrix[i][j] != -1:\n            i += 1\n            j = 0\n            continue\n        a, b = tiles[(i,j)]\n        if matrix[a][b] != -1:\n            return None\n        matrix[i][j] = matrix[j][i] = 0\n        matrix[a][b] = matrix[b][a] = 0\n        j += 1\n    return matrix\n\ndef solve():\n    tiles = build_tiles()\n    m = build_matrix(tiles, m)\n    if m:\n        return \"YES\"\n    else:\n        return \"NO\"\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        print(solve())\n\nif __name__ == \"__main__\":\n    sys.exit(main())"]