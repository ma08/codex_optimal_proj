["\n\ndef main():\n    n, h, l, r = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    # Time starts at 0, so we can subtract 1 from the time for each sleep\n    for i in range(n):\n        a[i] -= 1\n\n    # Initialize the first time to be bad\n    good = [0]\n    for i in range(n):\n        time = a[i] % h\n        if l <= time <= r:\n            good.append(good[-1] + 1)\n        else:\n            good.append(good[-1])\n\n    # Initialize the first time to be good\n    bad = [0]\n    for i in range(n):\n        time = a[i] % h\n        if l <= time <= r:\n            bad.append(bad[-1])\n        else:\n            bad.append(bad[-1] + 1)\n\n    # We want to maximize the number of good times, so we check which is better\n    print(max(good[n], bad[n]))\n\nif __name__ == \"__main__\":\n    main()", "\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[0, 0] for _ in range(n)]\ndp[0][0] = dp[0][1] = 1\nfor i in range(1, n):\n    dp[i][0] = max(dp[i - 1][0], dp[i - 1][1])\n    if l <= (a[i] - 1) % h < r:\n        dp[i][0] += 1\n    dp[i][1] = max(dp[i - 1][0], dp[i - 1][1])\n    if l <= a[i] % h < r:\n        dp[i][1] += 1\n\nprint(max(dp[-1]))", "\n\ndef main():\n    n,h,l,r = map(int,input().split())\n    a = list(map(int,input().split()))\n    # \u8ba1\u7b97n\u4e2a\u65f6\u95f4\u6bb5\u5185\uff0c\u7ecf\u8fc7h\u5c0f\u65f6\u540e\uff0c\u6bcf\u4e2a\u5c0f\u65f6\u662f\u5426\u5728[l,r]\u5185\n    b = [0 for _ in range(n)]\n    for i in range(n):\n        b[i] = [(a[i] + j) % h for j in range(h)]\n    #print(b)\n    # \u5982\u679c\u7b2ci\u4e2a\u65f6\u95f4\u6bb5\u5185\uff0c\u7ecf\u8fc7h\u5c0f\u65f6\u540e\uff0c\u5b58\u5728a >= l and a <=r\uff0c\u5219\u8be5\u65f6\u95f4\u6bb5\u662f\u597d\u7684\n    c = [0 for _ in range(n)]\n    for i in range(n):\n        for j in range(h):\n            if b[i][j] >= l and b[i][j] <= r:\n                c[i] = 1\n                break\n    #print(c)\n    # \u5982\u679c\u7b2ci\u4e2a\u65f6\u95f4\u6bb5\u662f\u597d\u7684\uff0c\u5219\u53ef\u4ee5\u9009\u62e9\u5728\u7b2ci-1\u4e2a\u65f6\u95f4\u6bb5\uff0c\u7761i-1\u5929\uff0c\u6216\u8005i\u5929\n    d = [0 for _ in range(n)]\n    d[0] = c[0]\n    d[1] = max(c[0],c[1])\n    for i in range(2,n):\n        d[i] = max(d[i-1],d[i-2]+c[i])\n    print(d[n-1])\n\nif __name__ == \"__main__\":\n    main()"]