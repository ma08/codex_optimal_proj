["\n\ndef main():\n    N,M,X=map(int,input().split())\n    A=[]\n    C=[]\n    for i in range(N):\n        a=list(map(int,input().split()))\n        A.append(a[0:M])\n        C.append(a[M])\n    #dp[i][j] i\u756a\u76ee\u307e\u3067\u306e\u672c\u3092\u8aad\u3093\u3060\u3068\u304d\u3001j\u756a\u76ee\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u7406\u89e3\u5ea6\u3092X\u4ee5\u4e0a\u306b\u3067\u304d\u308b\u306e\u306a\u3089\u3070\u3001\u304b\u304b\u308b\u6700\u4f4e\u91d1\u984d\n    #dp[i][j]=min(dp[i-1][j],dp[i][j])\n    #dp[i][j]=dp[i-1][j-A[i][j]]+C[i]\n    dp=[[float('inf') for j in range(M)] for i in range(N+1)]\n    dp[0][0]=0\n    for i in range(1,N+1):\n        for j in range(M):\n            if dp[i-1][j]<=X:\n                dp[i][j]=min(dp[i-1][j],dp[i][j])\n                if j-A[i-1][j]>=0:\n                    dp[i][j]=min(dp[i-1][j-A[i-1][j]]+C[i-1],dp[i][j])\n    if dp[N][M-1]==float('inf'):\n        print(-1)\n    else:\n        print(dp[N][M-1])\n\nif __name__ == '__main__':\n    main()", "\n\ndef main():\n    n,m,x=map(int,input().split())\n    c=[0]*n\n    a=[]\n    for i in range(n):\n        c[i],*a=map(int,input().split())\n        a=[0]*m\n    ans=10**9\n    for i in range(1,1<<n):\n        cost=0\n        algo=[0]*m\n        for j in range(n):\n            if i>>j&1:\n                cost+=c[j]\n                for k in range(m):\n                    algo[k]+=a[j][k]\n        if min(algo)>=x:\n            ans=min(ans,cost)\n    if ans==10**9:\n        print(-1)\n    else:\n        print(ans)\n\nif __name__=='__main__':\n    main()", "\nimport sys\nimport heapq\n\ndef main():\n    N,M,X = map(int,input().split())\n    CA = [list(map(int,input().split())) for _ in range(N)]\n    ans = float('inf')\n    for bit in range(1<<N):\n        cost = 0\n        skill = [0]*M\n        for i in range(N):\n            if bit & (1<<i):\n                cost += CA[i][0]\n                for j in range(M):\n                    skill[j] += CA[i][j+1]\n        if min(skill) >= X:\n            ans = min(ans,cost)\n    if ans == float('inf'):\n        ans = -1\n    print(ans)\nif __name__ == '__main__':\n    main()"]