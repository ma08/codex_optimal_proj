["\nn, k = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\na.sort()\n\nif k == 1:\n    print(n)\nelif k == n:\n    print(1)\nelse:\n    b = []\n    for i in range(n-1):\n        b.append(a[i+1] - a[i])\n    b.sort()\n    s = sum(b[:-k+1]) + n - 1\n    print(s)\n", "n, k = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\na.sort()\n\nif k == 1:\n    print(n)\nelif k == n:\n    print(1)\nelse:\n    b = []\n    for i in range(n-1):\n        b.append(a[i+1] - a[i])\n    b.sort()\n    s = sum(b[:n-k+1]) + n\n    print(s)\n", "\n\nfrom collections import defaultdict\nfrom heapq import heappush, heappop, heapify\nfrom typing import List, Tuple, Dict, Set\n\nfrom sys import stdin, stdout\n\ndef read_ints():\n    return list(map(int, stdin.readline().split()))\n\n\ndef read_int():\n\n    return int(stdin.readline())\n\ndef read_lines(n: int):\n    return [stdin.readline().strip() for _ in range(n)]\n\n\ndef write_line(s: str):\n    stdout.write(s)\n    stdout.write(\"\\n\")\n\n\ndef write_lines(lines: List[str]):\n    stdout.write(\"\\n\".join(lines))\n    stdout.write(\"\\n\")\n\n\ndef solve(n: int, k: int, skills: List[int]):\n    # return number of students that can be included in k teams \n    # such that the difference between the skills of any 2 students\n    # in a team is no more than 5\n    d = defaultdict(lambda: 0)\n    for skill in skills:\n        d[skill] += 1\n    heap = []\n    for skill, count in d.items():\n        heappush(heap, (count, skill))\n    ans = 0\n    while heap:\n        count, skill = heappop(heap)\n        if count <= k:\n            ans += count\n            k -= count\n            if k == 0:\n                return ans\n        else:\n            ans += k\n            return ans\n        if k == 0:\n            return ans\n        for i in range(skill-5, skill+1):\n            if i in d:\n                heappush(heap, (d[i], i))\n    return ans\n\n\ndef main():\n    n, k = read_ints()\n    skills = read_ints()\n    ans = solve(n, k, skills)\n    write_line(str(ans))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nfrom collections import defaultdict\nfrom heapq import heappush, heappop, heapify\nfrom typing import List, Tuple, Dict\nfrom sys import stdin, stdout\n\ndef read_ints():\n    return list(map(int, stdin.readline().split()))\n\ndef read_int():\n    return int(stdin.readline())\n\ndef read_lines(n: int):\n    return [stdin.readline().strip() for _ in range(n)]\n\ndef write_line(s: str):\n    stdout.write(s + \"\\n\")\n\ndef write_lines(lines: List[str]):\n    stdout.write(\"\\n\".join(lines) + \"\\n\")\n\ndef solve(n: int, k: int, skills: List[int]):\n    # return number of students that can be included in k teams,\n    # such that the difference between the skills of any 2 students\n    # in a team is no more than 5\n    d = defaultdict(lambda: 0)\n    for skill in skills:\n        d[skill] += 1\n    heap = []\n    for skill, count in d.items():\n        heappush(heap, (count, skill))\n    ans = 0\n    while heap:\n        count, skill = heappop(heap)\n        if count <= k:\n            ans += count\n            k -= count\n            if k == 0:\n                return ans\n        else:\n            ans += k\n            return ans\n        if k == 0:\n            return ans\n        for i in range(skill-5, skill+1):\n            if i in d:\n                heappush(heap, (d[i], i))\n    return ans\n\ndef main():\n    n, k = read_ints()\n    skills = read_ints()\n    ans = solve(n, k, skills)\n    write_line(str(ans))\n\nif __name__ == \"__main__\":\n    main()\n", "n, k = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\na.sort()\n\nif k == 1:\n    print(n)\nelif k == n:\n    print(1)\nelse:\n    b = []\n    for i in range(n-1):\n        b.append(a[i+1] - a[i])\n    b.sort()\n    s = sum(b[:-k+1]) + n\n    print(s)\n", "\n\nfrom collections import defaultdict\nfrom heapq import heappush, heappop, heapify\nfrom typing import List, Tuple, Dict\nfrom sys import stdin, stdout\n\ndef read_ints():\n    return list(map(int, stdin.readline().split()))\n\ndef read_int():\n    return int(stdin.readline())\n\ndef read_lines(n: int):\n    return [stdin.readline().strip() for _ in range(n)]\n\ndef write_line(s: str):\n    stdout.write(s + \"\\n\")\n\ndef write_lines(lines: List[str]):\n    stdout.write(\"\\n\".join(lines) + \"\\n\")\n\ndef solve(n: int, k: int, skills: List[int]):\n    # return number of students that can be included in k teams \n    # such that the difference between the skills of any 2 students\n    # in a team is no more than 5\n    d = defaultdict(lambda: 0)\n    for skill in skills:\n        d[skill] += 1\n    heap = []\n    for skill, count in d.items():\n        heappush(heap, (count, skill))\n    ans = 0\n    while heap:\n        count, skill = heappop(heap)\n        if count <= k:\n            ans += count\n            k -= count\n            if k == 0:\n                return ans\n        else:\n            ans += k\n            return ans\n        if k == 0:\n            return ans\n        for i in range(skill-5, skill+1):\n            if i in d:\n                heappush(heap, (d[i], i))\n    return ans\n\ndef main():\n    n, k = read_ints()\n    skills = read_ints()\n    ans = solve(n, k, skills)\n    write_line(str(ans))\n\nif __name__ == \"__main__\":\n    main()\n"]