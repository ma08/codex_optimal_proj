["\n\nn = int(input())\na = list(map(int, input().split()))\n\n# a = [1, 2, 4, 3, 2]\n# a = [1, 3, 5, 6, 5, 4, 2]\n# a = [2, 2, 2]\n# a = [1, 2, 4, 3]\n\ndp = [[0 for _ in range(n)] for _ in range(n)]\n\nfor i in range(n):\n    dp[i][i] = 1\n\nfor i in range(n - 1):\n    if a[i] < a[i + 1]:\n        dp[i][i + 1] = 2\n\nfor i in range(n - 2, -1, -1):\n    for j in range(i + 2, n):\n        if a[j] > a[i]:\n            dp[i][j] = max(dp[i][j], dp[i + 1][j] + 1)\n        if a[i] < a[j]:\n            dp[i][j] = max(dp[i][j], dp[i][j - 1] + 1)\n\n# print(dp)\n\n# find max\nmax_len = 0\nfor i in range(n):\n    for j in range(n):\n        max_len = max(max_len, dp[i][j])\n\n# print(max_len)\n\n# find path\n\n# start from the left\n\n# if max_len == dp[i][j] -> go right\n# if max_len == dp[i][j] -> go left\n\ni, j = 0, 0\npath = []\n\ndef find_path(i, j):\n    global max_len\n    if max_len == 0:\n        return\n    if max_len == dp[i][j]:\n        path.append('R')\n        max_len -= 1\n        find_path(i, j + 1)\n    elif max_len == dp[i][j] - 1:\n        path.append('L')\n        max_len -= 1\n        find_path(i + 1, j)\n    else:\n        if max_len == dp[i + 1][j]:\n            path.append('L')\n            max_len -= 1\n            find_path(i + 1, j)\n\n        if max_len == dp[i][j - 1]:\n            path.append('R')\n            max_len -= 1\n            find_path(i, j - 1)\n\n\nfind_path(i, j)\n\nprint(max_len)\nprint(''.join(path))"]