"""
One very experienced problem writer decided to prepare a problem for April Fools Day contest. The task was very simple - given an arithmetic expression, return the result of evaluating this expression. However, looks like there is a bug in the reference solution...


-----Input-----

The only line of input data contains the arithmetic expression. The expression will contain between 2 and 10 operands, separated with arithmetic signs plus and/or minus. Each operand will be an integer between 0 and 255, inclusive.


-----Output-----

Reproduce the output of the reference solution, including the bug.


-----Examples-----
Input
8-7+6-5+4-3+2-1-0

Output
4

Input
2+2

Output
-46

Input
112-37

Output
375
"""
--------------------------
{
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nexp = input()\n\n# Convert to list of numbers and list of operators\nnums = []\nop = []\n\nn = ''\nfor c in exp:\n    if c.isdigit():\n        n += c\n    else:\n        nums.append(int(n))\n        op.append(c)\n        n = ''\nnums.append(int(n))\n\n# Evaluate expression using order of operations\ntotal = nums[0]\nfor i in range(len(op)):\n    if op[i] == '+':\n        total += nums[i+1]\n    elif op[i] == '-':\n        total -= nums[i+1]\n\nprint(total)"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    num = sys.stdin.readline().strip()\n    num = num.split('-')\n    num = map(int, num)\n    total = 0\n    for n in range(len(num)):\n        total += num[n]\n    print(total)\n\nmain()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nexpression = input()\n\na = int(expression.split('-')[0])\nb = int(expression.split('-')[1])\nc = int(expression.split('-')[2])\n\nprint(a - b + c)"
    }
  ],
  "created": 1648694303,
  "id": "cmpl-4rezXByqKakaZIkXNOvbyw9I9o40B",
  "model": "code-davinci:002",
  "object": "text_completion"
}
0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nexp = input()\n\n# Convert to list of numbers and list of operators\nnums = []\nop = []\n\nn = ''\nfor c in exp:\n    if c.isdigit():\n        n += c\n    else:\n        nums.append(int(n))\n        op.append(c)\n        n = ''\nnums.append(int(n))\n\n# Evaluate expression using order of operations\ntotal = nums[0]\nfor i in range(len(op)):\n    if op[i] == '+':\n        total += nums[i+1]\n    elif op[i] == '-':\n        total -= nums[i+1]\n\nprint(total)"
}
REASON stop
1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    num = sys.stdin.readline().strip()\n    num = num.split('-')\n    num = map(int, num)\n    total = 0\n    for n in range(len(num)):\n        total += num[n]\n    print(total)\n\nmain()"
}
REASON stop
2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nexpression = input()\n\na = int(expression.split('-')[0])\nb = int(expression.split('-')[1])\nc = int(expression.split('-')[2])\n\nprint(a - b + c)"
}
REASON stop
