"""
We have N switches with "on" and "off" state, and M bulbs. The switches are numbered 1 to N, and the bulbs are numbered 1 to M.
Bulb i is connected to k_i switches: Switch s_{i1}, s_{i2}, ..., and s_{ik_i}. It is lighted when the number of switches that are "on" among these switches is congruent to p_i modulo 2.
How many combinations of "on" and "off" states of the switches light all the bulbs?

-----Constraints-----
 - 1 \leq N, M \leq 10
 - 1 \leq k_i \leq N
 - 1 \leq s_{ij} \leq N
 - s_{ia} \neq s_{ib} (a \neq b)
 - p_i is 0 or 1.
 - All values in input are integers.

-----Input-----
Input is given from Standard Input in the following format:
N M
k_1 s_{11} s_{12} ... s_{1k_1}
:
k_M s_{M1} s_{M2} ... s_{Mk_M}
p_1 p_2 ... p_M

-----Output-----
Print the number of combinations of "on" and "off" states of the switches that light all the bulbs.

-----Sample Input-----
2 2
2 1 2
1 2
0 1

-----Sample Output-----
1

 - Bulb 1 is lighted when there is an even number of switches that are "on" among the following: Switch 1 and 2.
 - Bulb 2 is lighted when there is an odd number of switches that are "on" among the following: Switch 2.
There are four possible combinations of states of (Switch 1, Switch 2): (on, on), (on, off), (off, on) and (off, off). Among them, only (on, on) lights all the bulbs, so we should print 1.
"""
--------------------------
{
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\n# My answer\n\nN, M = map(int, input().split())\n\nswitches = []\nfor i in range(M):\n    switches.append(list(map(int, input().split())))\n\np = list(map(int, input().split()))\n\nres = 0\nfor i in range(2**N):\n    on = [False]*N\n    for j in range(N):\n        if (i >> j) & 1:\n            on[j] = True\n\n    flag = True\n    for j in range(M):\n        k = switches[j][0]\n        count = 0\n        for l in range(k):\n            if on[switches[j][l+1]]:\n                count += 1\n        if count%2 != p[j]:\n            flag = False\n            break;\n    if flag:\n        res += 1\n\nprint(res)"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nN, M = map(int, input().split())\n\nbulbs = [list(map(int, input().split())) for i in range(M)]\nstates = list(map(int, input().split()))\n\npossible = 0\nfor i in range(2**N):\n    cnt = 0\n    for j in range(M):\n        on = sum([(i >> (bulbs[j][k] - 1)) % 2 for k in range(1, bulbs[j][0] + 1)]) % 2\n        if on == states[j]:\n            cnt += 1\n    if cnt == M:\n        possible += 1\nprint(possible)"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\n#SOLUTION\n\nn, m = map(int, input().split())\n\na = []\nb = []\nfor i in range(m):\n    tmp = list(map(int, input().split()))\n    a.append(tmp[1:])\n    b.append(tmp[0])\n\np = list(map(int, input().split()))\n\nresult = 0\nfor bits in range(2 ** n):\n    ok = True\n    for i in range(m):\n        cnt = 0\n        for j in range(b[i]):\n            if bits & (1 << (a[i][j] - 1)):\n                cnt += 1\n        if cnt % 2 != p[i]:\n            ok = False\n    if ok:\n        result += 1\n\nprint(result)"
    }
  ],
  "created": 1648693572,
  "id": "cmpl-4renknFCjwSPku2IkpmQswWyCjLbG",
  "model": "code-davinci:002",
  "object": "text_completion"
}
0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\n# My answer\n\nN, M = map(int, input().split())\n\nswitches = []\nfor i in range(M):\n    switches.append(list(map(int, input().split())))\n\np = list(map(int, input().split()))\n\nres = 0\nfor i in range(2**N):\n    on = [False]*N\n    for j in range(N):\n        if (i >> j) & 1:\n            on[j] = True\n\n    flag = True\n    for j in range(M):\n        k = switches[j][0]\n        count = 0\n        for l in range(k):\n            if on[switches[j][l+1]]:\n                count += 1\n        if count%2 != p[j]:\n            flag = False\n            break;\n    if flag:\n        res += 1\n\nprint(res)"
}
REASON stop
1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nN, M = map(int, input().split())\n\nbulbs = [list(map(int, input().split())) for i in range(M)]\nstates = list(map(int, input().split()))\n\npossible = 0\nfor i in range(2**N):\n    cnt = 0\n    for j in range(M):\n        on = sum([(i >> (bulbs[j][k] - 1)) % 2 for k in range(1, bulbs[j][0] + 1)]) % 2\n        if on == states[j]:\n            cnt += 1\n    if cnt == M:\n        possible += 1\nprint(possible)"
}
REASON stop
2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\n#SOLUTION\n\nn, m = map(int, input().split())\n\na = []\nb = []\nfor i in range(m):\n    tmp = list(map(int, input().split()))\n    a.append(tmp[1:])\n    b.append(tmp[0])\n\np = list(map(int, input().split()))\n\nresult = 0\nfor bits in range(2 ** n):\n    ok = True\n    for i in range(m):\n        cnt = 0\n        for j in range(b[i]):\n            if bits & (1 << (a[i][j] - 1)):\n                cnt += 1\n        if cnt % 2 != p[i]:\n            ok = False\n    if ok:\n        result += 1\n\nprint(result)"
}
REASON stop
