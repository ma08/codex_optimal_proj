"""
You are given a string $t$ consisting of $n$ lowercase Latin letters and an integer number $k$.

Let's define a substring of some string $s$ with indices from $l$ to $r$ as $s[l \dots r]$.

Your task is to construct such string $s$ of minimum possible length that there are exactly $k$ positions $i$ such that $s[i \dots i + n - 1] = t$. In other words, your task is to construct such string $s$ of minimum possible length that there are exactly $k$ substrings of $s$ equal to $t$.

It is guaranteed that the answer is always unique.


-----Input-----

The first line of the input contains two integers $n$ and $k$ ($1 \le n, k \le 50$) â€” the length of the string $t$ and the number of substrings.

The second line of the input contains the string $t$ consisting of exactly $n$ lowercase Latin letters.


-----Output-----

Print such string $s$ of minimum possible length that there are exactly $k$ substrings of $s$ equal to $t$.

It is guaranteed that the answer is always unique.


-----Examples-----
Input
3 4
aba

Output
ababababa

Input
3 2
cat

Output
catcat
"""
--------------------------
{
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nfrom collections import Counter\n\ndef main():\n    n, k = map(int, input().split())\n    t = input()\n\n    c = Counter(t)\n    c = sorted(c.items(), key=lambda x: x[0])\n\n    h = []\n    for i in range(0, len(c), 2):\n        h.append(c[i])\n        h.append(c[i + 1])\n\n    s = []\n    for i in h:\n        s.append(i[0] * (n // 2))\n\n    for i in h[::-1]:\n        s.append(i[0] * (n // 2))\n\n    s = \"\".join(s)\n\n    if k == 1:\n        print(t)\n    elif k == 2:\n        print(s)\n    else:\n        print(s * (k - 2) + s[:n])\n\nmain()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\ndef main():\n    n, k = [int(x) for x in input().split()]\n    t = input()\n\n    s = ''\n    for i in range(k):\n        s += t\n\n    print(s)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\n\ndef main():\n    n, k = map(int, input().split())\n    t = input()\n    # t = 'aba'\n    # n = 3\n    # k = 4\n\n    # t = 'cat'\n    # n = 3\n    # k = 2\n\n    for i in range(1, n + 1):\n        if k % i == 0 and k // i <= n:\n            print(t[:i] * (k // i))\n            return\n\n\nmain()"
    }
  ],
  "created": 1648692182,
  "id": "cmpl-4reRKZWJY00amK0rfRQXr0KR4XUT5",
  "model": "code-davinci:002",
  "object": "text_completion"
}
0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nfrom collections import Counter\n\ndef main():\n    n, k = map(int, input().split())\n    t = input()\n\n    c = Counter(t)\n    c = sorted(c.items(), key=lambda x: x[0])\n\n    h = []\n    for i in range(0, len(c), 2):\n        h.append(c[i])\n        h.append(c[i + 1])\n\n    s = []\n    for i in h:\n        s.append(i[0] * (n // 2))\n\n    for i in h[::-1]:\n        s.append(i[0] * (n // 2))\n\n    s = \"\".join(s)\n\n    if k == 1:\n        print(t)\n    elif k == 2:\n        print(s)\n    else:\n        print(s * (k - 2) + s[:n])\n\nmain()"
}
REASON stop
1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\ndef main():\n    n, k = [int(x) for x in input().split()]\n    t = input()\n\n    s = ''\n    for i in range(k):\n        s += t\n\n    print(s)\n\n\nif __name__ == '__main__':\n    main()"
}
REASON stop
2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\n\ndef main():\n    n, k = map(int, input().split())\n    t = input()\n    # t = 'aba'\n    # n = 3\n    # k = 4\n\n    # t = 'cat'\n    # n = 3\n    # k = 2\n\n    for i in range(1, n + 1):\n        if k % i == 0 and k // i <= n:\n            print(t[:i] * (k // i))\n            return\n\n\nmain()"
}
REASON stop
