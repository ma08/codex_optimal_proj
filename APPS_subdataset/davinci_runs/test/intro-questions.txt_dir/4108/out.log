"""
You are given strings S and T consisting of lowercase English letters.
You can perform the following operation on S any number of times:
Operation: Choose two distinct lowercase English letters c_1 and c_2, then replace every occurrence of c_1 with c_2, and every occurrence of c_2 with c_1.
Determine if S and T can be made equal by performing the operation zero or more times.

-----Constraints-----
 - 1 \leq |S| \leq 2 \times 10^5
 - |S| = |T|
 - S and T consists of lowercase English letters.

-----Input-----
Input is given from Standard Input in the following format:
S
T

-----Output-----
If S and T can be made equal, print Yes; otherwise, print No.

-----Sample Input-----
azzel
apple

-----Sample Output-----
Yes

azzel can be changed to apple, as follows:
 - Choose e as c_1 and l as c_2. azzel becomes azzle.
 - Choose z as c_1 and p as c_2. azzle becomes apple.
"""
--------------------------
{
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nS = input()\nT = input()\n\nS_list = list(S)\nT_list = list(T)\n\nS_list.sort()\nT_list.sort()\n\nif S_list == T_list:\n    print('Yes')\nelse:\n    print('No')"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\n# My answer\ndef equalize_strings(s, t):\n    if s == t:\n        return 'Yes'\n    else:\n        for i in range(len(s)):\n            for j in range(i+1, len(s)):\n                if s[i] != s[j]:\n                    s = s.replace(s[i], 'a')\n                    s = s.replace(s[j], s[i])\n                    s = s.replace('a', s[j])\n                    if s == t:\n                        return 'Yes'\n        return 'No'\n\n# A better answer\ndef equalize_strings(s, t):\n    if (sorted(s) == sorted(t)):\n        return 'Yes'\n    else:\n        return 'No'\n\n# Test\ns = input()\nt = input()\n\nprint(equalize_strings(s, t))"
    }
  ],
  "created": 1648684527,
  "id": "cmpl-4rcRrRQGBJK6U7iewflYQd6NuMbfP",
  "model": "code-davinci:002",
  "object": "text_completion"
}
0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nS = input()\nT = input()\n\nS_list = list(S)\nT_list = list(T)\n\nS_list.sort()\nT_list.sort()\n\nif S_list == T_list:\n    print('Yes')\nelse:\n    print('No')"
}
REASON stop
1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\n# My answer\ndef equalize_strings(s, t):\n    if s == t:\n        return 'Yes'\n    else:\n        for i in range(len(s)):\n            for j in range(i+1, len(s)):\n                if s[i] != s[j]:\n                    s = s.replace(s[i], 'a')\n                    s = s.replace(s[j], s[i])\n                    s = s.replace('a', s[j])\n                    if s == t:\n                        return 'Yes'\n        return 'No'\n\n# A better answer\ndef equalize_strings(s, t):\n    if (sorted(s) == sorted(t)):\n        return 'Yes'\n    else:\n        return 'No'\n\n# Test\ns = input()\nt = input()\n\nprint(equalize_strings(s, t))"
}
REASON stop
