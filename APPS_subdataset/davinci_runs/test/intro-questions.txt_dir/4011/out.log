"""
You are given a long decimal number $a$ consisting of $n$ digits from $1$ to $9$. You also have a function $f$ that maps every digit from $1$ to $9$ to some (possibly the same) digit from $1$ to $9$.

You can perform the following operation no more than once: choose a non-empty contiguous subsegment of digits in $a$, and replace each digit $x$ from this segment with $f(x)$. For example, if $a = 1337$, $f(1) = 1$, $f(3) = 5$, $f(7) = 3$, and you choose the segment consisting of three rightmost digits, you get $1553$ as the result.

What is the maximum possible number you can obtain applying this operation no more than once?


-----Input-----

The first line contains one integer $n$ ($1 \le n \le 2 \cdot 10^5$) â€” the number of digits in $a$.

The second line contains a string of $n$ characters, denoting the number $a$. Each character is a decimal digit from $1$ to $9$.

The third line contains exactly $9$ integers $f(1)$, $f(2)$, ..., $f(9)$ ($1 \le f(i) \le 9$).


-----Output-----

Print the maximum number you can get after applying the operation described in the statement no more than once.


-----Examples-----
Input
4
1337
1 2 5 4 6 6 3 1 9

Output
1557

Input
5
11111
9 8 7 6 5 4 3 2 1

Output
99999

Input
2
33
1 1 1 1 1 1 1 1 1

Output
33
"""
--------------------------
{
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\ndef main():\n    n = int(input())\n    a = input()\n    f = list(map(int, input().split()))\n\n    res = 0\n    for i in range(n):\n        res = res * 10 + f[int(a[i]) - 1]\n\n    print(res)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\ndef main():\n    n = int(input())\n    a = list(input())\n    f = list(map(int, input().split()))\n    f_inv = {f[i-1]: i for i in range(1, 10)}\n    a = [f_inv[int(i)] for i in a]\n\n    left = 0\n    right = 0\n    max_left = 0\n    max_right = 0\n    max_sum = 0\n    curr_sum = 0\n    while right < n:\n        if curr_sum <= 0:\n            left = right\n            curr_sum = 0\n        curr_sum += a[right]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            max_left = left\n            max_right = right\n        right += 1\n    a = a[:max_left] + list(reversed(a[max_left:max_right+1])) + a[max_right+1:]\n    a = [str(i) for i in a]\n    print(''.join(a))\n\n\nmain()"
    }
  ],
  "created": 1648682960,
  "id": "cmpl-4rc2aA1BqQEmXuv4zYybQfTaLx3Eo",
  "model": "code-davinci:002",
  "object": "text_completion"
}
0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\ndef main():\n    n = int(input())\n    a = input()\n    f = list(map(int, input().split()))\n\n    res = 0\n    for i in range(n):\n        res = res * 10 + f[int(a[i]) - 1]\n\n    print(res)\n\nif __name__ == \"__main__\":\n    main()"
}
REASON stop
1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\ndef main():\n    n = int(input())\n    a = list(input())\n    f = list(map(int, input().split()))\n    f_inv = {f[i-1]: i for i in range(1, 10)}\n    a = [f_inv[int(i)] for i in a]\n\n    left = 0\n    right = 0\n    max_left = 0\n    max_right = 0\n    max_sum = 0\n    curr_sum = 0\n    while right < n:\n        if curr_sum <= 0:\n            left = right\n            curr_sum = 0\n        curr_sum += a[right]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            max_left = left\n            max_right = right\n        right += 1\n    a = a[:max_left] + list(reversed(a[max_left:max_right+1])) + a[max_right+1:]\n    a = [str(i) for i in a]\n    print(''.join(a))\n\n\nmain()"
}
REASON stop
