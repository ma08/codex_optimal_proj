"""
You are given two strings $s$ and $t$. Both strings have length $n$ and consist of lowercase Latin letters. The characters in the strings are numbered from $1$ to $n$.

You can successively perform the following move any number of times (possibly, zero):  swap any two adjacent (neighboring) characters of $s$ (i.e. for any $i = \{1, 2, \dots, n - 1\}$ you can swap $s_i$ and $s_{i + 1})$. 

You can't apply a move to the string $t$. The moves are applied to the string $s$ one after another.

Your task is to obtain the string $t$ from the string $s$. Find any way to do it with at most $10^4$ such moves.

You do not have to minimize the number of moves, just find any sequence of moves of length $10^4$ or less to transform $s$ into $t$.


-----Input-----

The first line of the input contains one integer $n$ ($1 \le n \le 50$) — the length of strings $s$ and $t$.

The second line of the input contains the string $s$ consisting of $n$ lowercase Latin letters.

The third line of the input contains the string $t$ consisting of $n$ lowercase Latin letters.


-----Output-----

If it is impossible to obtain the string $t$ using moves, print "-1".

Otherwise in the first line print one integer $k$ — the number of moves to transform $s$ to $t$. Note that $k$ must be an integer number between $0$ and $10^4$ inclusive.

In the second line print $k$ integers $c_j$ ($1 \le c_j < n$), where $c_j$ means that on the $j$-th move you swap characters $s_{c_j}$ and $s_{c_j + 1}$.

If you do not need to apply any moves, print a single integer $0$ in the first line and either leave the second line empty or do not print it at all.


-----Examples-----
Input
6
abcdef
abdfec

Output
4
3 5 4 5 

Input
4
abcd
accd

Output
-1



-----Note-----

In the first example the string $s$ changes as follows: "abcdef" $\rightarrow$ "abdcef" $\rightarrow$ "abdcfe" $\rightarrow$ "abdfce" $\rightarrow$ "abdfec".

In the second example there is no way to transform the string $s$ into the string $t$ through any allowed moves.
"""
--------------------------
{
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\ndef main():\n    n = int(input())\n    s = input()\n    t = input()\n    moves = []\n    for i in range(n):\n        if s[i] != t[i]:\n            for j in range(i + 1, n):\n                if s[j] == t[i]:\n                    s = s[:i] + s[j] + s[i + 1:j] + s[i] + s[j + 1:]\n                    moves.append(i)\n                    break\n            else:\n                print(-1)\n                return\n    print(len(moves))\n    print(*moves)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\ndef main():\n    \"\"\"\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input().strip())\n\n    s = input()\n\n    t = input()\n    \"\"\"\n    n = 6\n    s = \"abcdef\"\n    t = \"abdfec\"\n    #s = \"abcd\"\n    #t = \"accd\"\n\n    result = swapLexOrder(s, t, n)\n\n    print(result)\n    #fptr.write('\\n'.join(map(str, result)))\n    #fptr.write('\\n')\n\n    #fptr.close()\n\ndef swapLexOrder(s, t, n):\n    if s == t:\n        return 0\n    if n == 1:\n        if s != t:\n            return -1\n    if n == 2:\n        if s[0] != t[0]:\n            return -1\n        if s[1] == t[1]:\n            return 0\n        else:\n            return 1\n    if s[0] != t[0]:\n        return -1\n    if s[-1] != t[-1]:\n        return -1\n\n    ans = 0\n    for i in range(1, n-1):\n        if s[i] != t[i]:\n            ans += 1\n\n    for i in range(1, n-1):\n        if s[i] != t[i]:\n            if s[i+1] == t[i]:\n                s = s[:i] + t[i] + s[i+1:]\n                ans -= 1\n            elif s[i-1] == t[i]:\n                s = s[:i-1] + t[i] + s[i] + s[i-1]\n            else:\n                return -1\n\n    return ans\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\n#-----Solution-----\n\ns = input()\nstr1 = input()\nstr2 = input()\n\ndef swap(str, i, j):\n  str = list(str)\n  temp = str[i]\n  str[i] = str[j]\n  str[j] = temp\n  return ''.join(str)\n\ndef swapchar(str1, str2):\n  cnt = 0\n  flag = True\n  while flag:\n    flag = False\n    for i in range(len(str1)):\n      if str1[i] != str2[i]:\n        for j in range(i+1, len(str1)):\n          if str1[j] == str2[i]:\n            str1 = swap(str1, i, j)\n            cnt += 1\n            flag = True\n            break\n        if flag:\n          break\n  if str1 != str2:\n    return -1\n  return cnt\n\nn = swapchar(str1, str2)\nprint(n)\nif n == -1:\n  print(-1)\nelse:\n  for i in range(n):\n    print(i+1, end=' ')"
    }
  ],
  "created": 1648693016,
  "id": "cmpl-4reemNI8qumr1g45y2vgM5whGnqYV",
  "model": "code-davinci:002",
  "object": "text_completion"
}
0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\ndef main():\n    n = int(input())\n    s = input()\n    t = input()\n    moves = []\n    for i in range(n):\n        if s[i] != t[i]:\n            for j in range(i + 1, n):\n                if s[j] == t[i]:\n                    s = s[:i] + s[j] + s[i + 1:j] + s[i] + s[j + 1:]\n                    moves.append(i)\n                    break\n            else:\n                print(-1)\n                return\n    print(len(moves))\n    print(*moves)\n\nif __name__ == \"__main__\":\n    main()"
}
REASON stop
1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\ndef main():\n    \"\"\"\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input().strip())\n\n    s = input()\n\n    t = input()\n    \"\"\"\n    n = 6\n    s = \"abcdef\"\n    t = \"abdfec\"\n    #s = \"abcd\"\n    #t = \"accd\"\n\n    result = swapLexOrder(s, t, n)\n\n    print(result)\n    #fptr.write('\\n'.join(map(str, result)))\n    #fptr.write('\\n')\n\n    #fptr.close()\n\ndef swapLexOrder(s, t, n):\n    if s == t:\n        return 0\n    if n == 1:\n        if s != t:\n            return -1\n    if n == 2:\n        if s[0] != t[0]:\n            return -1\n        if s[1] == t[1]:\n            return 0\n        else:\n            return 1\n    if s[0] != t[0]:\n        return -1\n    if s[-1] != t[-1]:\n        return -1\n\n    ans = 0\n    for i in range(1, n-1):\n        if s[i] != t[i]:\n            ans += 1\n\n    for i in range(1, n-1):\n        if s[i] != t[i]:\n            if s[i+1] == t[i]:\n                s = s[:i] + t[i] + s[i+1:]\n                ans -= 1\n            elif s[i-1] == t[i]:\n                s = s[:i-1] + t[i] + s[i] + s[i-1]\n            else:\n                return -1\n\n    return ans\n\nif __name__ == '__main__':\n    main()"
}
REASON stop
2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\n#-----Solution-----\n\ns = input()\nstr1 = input()\nstr2 = input()\n\ndef swap(str, i, j):\n  str = list(str)\n  temp = str[i]\n  str[i] = str[j]\n  str[j] = temp\n  return ''.join(str)\n\ndef swapchar(str1, str2):\n  cnt = 0\n  flag = True\n  while flag:\n    flag = False\n    for i in range(len(str1)):\n      if str1[i] != str2[i]:\n        for j in range(i+1, len(str1)):\n          if str1[j] == str2[i]:\n            str1 = swap(str1, i, j)\n            cnt += 1\n            flag = True\n            break\n        if flag:\n          break\n  if str1 != str2:\n    return -1\n  return cnt\n\nn = swapchar(str1, str2)\nprint(n)\nif n == -1:\n  print(-1)\nelse:\n  for i in range(n):\n    print(i+1, end=' ')"
}
REASON stop
