"""
You are given two strings $s$ and $t$ both of length $2$ and both consisting only of characters 'a', 'b' and 'c'.

Possible examples of strings $s$ and $t$: "ab", "ca", "bb".

You have to find a string $res$ consisting of $3n$ characters, $n$ characters should be 'a', $n$ characters should be 'b' and $n$ characters should be 'c' and $s$ and $t$ should not occur in $res$ as substrings.

A substring of a string is a contiguous subsequence of that string. So, the strings "ab", "ac" and "cc" are substrings of the string "abacc", but the strings "bc", "aa" and "cb" are not substrings of the string "abacc".

If there are multiple answers, you can print any of them.


-----Input-----

The first line of the input contains one integer $n$ ($1 \le n \le 10^5$) â€” the number of characters 'a', 'b' and 'c' in the resulting string.

The second line of the input contains one string $s$ of length $2$ consisting of characters 'a', 'b' and 'c'.

The third line of the input contains one string $t$ of length $2$ consisting of characters 'a', 'b' and 'c'.


-----Output-----

If it is impossible to find the suitable string, print "NO" on the first line. 

Otherwise print "YES" on the first line and string $res$ on the second line. $res$ should consist of $3n$ characters, $n$ characters should be 'a', $n$ characters should be 'b' and $n$ characters should be 'c' and $s$ and $t$ should not occur in $res$ as substrings.

If there are multiple answers, you can print any of them.


-----Examples-----
Input
2
ab
bc

Output
YES
acbbac

Input
3
aa
bc

Output
YES
cacbacbab

Input
1
cb
ac

Output
YES
abc
"""
--------------------------
{
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\n# def find_res(n, s, t):\n#     if n == 1:\n#         if s == 'ac' and t == 'ac':\n#             return 'abc'\n#         elif s == 'cb' and t == 'cb':\n#             return 'abc'\n#         elif s == 'ab' and t == 'ab':\n#             return 'abc'\n#         elif s == 'bc' and t == 'bc':\n#             return 'abc'\n#         elif s == 'ac' and t == 'cb':\n#             return 'bac'\n#         elif s == 'ac' and t == 'ab':\n#             return 'cab'\n#         elif s == 'ac' and t == 'bc':\n#             return 'abc'\n#         elif s == 'cb' and t == 'ac':\n#             return 'abc'\n#         elif s == 'cb' and t == 'ab':\n#             return 'bac'\n#         elif s == 'cb' and t == 'bc':\n#             return 'cab'\n#         elif s == 'ab' and t == 'ac':\n#             return 'abc'\n#         elif s == 'ab' and t == 'cb':\n#             return 'abc'\n#         elif s == 'ab' and t == 'bc':\n#             return 'bac'\n#         elif s == 'bc' and t == 'ac':\n#             return 'cab'\n#         elif s == 'bc' and t == 'cb':\n#             return 'abc'\n#         elif s == 'bc' and t == 'ab':\n#             return 'abc'\n#         else:\n#             return 'NO'\n#     else:\n#         if s == 'ac' and t == 'ac':\n#             return 'abc' * n\n#         elif s == 'cb' and t == 'cb':\n#             return 'abc' * n\n#         elif s == 'ab' and t == 'ab':\n#             return 'abc' * n\n#         elif s == 'bc' and t == 'bc':\n#             return 'abc' * n\n#         elif s == 'ac' and t == 'cb':\n#             return 'bac' * n\n#         elif s == 'ac' and t == 'ab':\n#             return 'cab' * n\n#         elif s == 'ac' and t == 'bc':\n#             return 'abc' * n\n#         elif s == 'cb' and t == 'ac':\n#             return 'abc' * n\n#         elif s == 'cb' and t == 'ab':\n#             return 'bac' * n\n#         elif s == 'cb' and t == 'bc':\n#             return 'cab' * n\n#         elif s == 'ab' and t == 'ac':\n#             return 'abc' * n\n#         elif s == 'ab' and t == 'cb':\n#             return 'abc' * n\n#         elif s == 'ab' and t == 'bc':\n#             return 'bac' * n\n#         elif s == 'bc' and t == 'ac':\n#             return 'cab' * n\n#         elif s == 'bc' and t == 'cb':\n#             return 'abc' * n\n#         elif s == 'bc' and t == 'ab':\n#             return 'abc' * n\n#         else:\n#             return 'NO'\n\ndef find_res(n, s, t):\n    if s == 'ac' and t == 'ac':\n        return 'abc' * n\n    elif s == 'cb' and t == 'cb':\n        return 'abc' * n\n    elif s == 'ab' and t == 'ab':\n        return 'abc' * n\n    elif s == 'bc' and t == 'bc':\n        return 'abc' * n\n    elif s == 'ac' and t == 'cb':\n        return 'bac' * n\n    elif s == 'ac' and t == 'ab':\n        return 'cab' * n\n    elif s == 'ac' and t == 'bc':\n        return 'abc' * n\n    elif s == 'cb' and t == 'ac':\n        return 'abc' * n\n    elif s == 'cb' and t == 'ab':\n        return 'bac' * n\n    elif s == 'cb' and t == 'bc':\n        return 'cab' * n\n    elif s == 'ab' and t == 'ac':\n        return 'abc' * n\n    elif s == 'ab' and t == 'cb':\n        return 'abc' * n\n    elif s == 'ab' and t == 'bc':\n        return 'bac' * n\n    elif s == 'bc' and t == 'ac':\n        return 'cab' * n\n    elif s == 'bc' and t == 'cb':\n        return 'abc' * n\n    elif s == 'bc' and t == 'ab':\n        return 'abc' * n\n    else:\n        return 'NO'\n\nif __name__ == \"__main__\":\n    n = int(input())\n    s = input()\n    t = input()\n    res = find_res(n, s, t)\n    print(res)"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\ndef solve(n, s, t):\n    if s[0] == s[1] and t[0] == t[1]:\n        return 'NO'\n    if s[0] == s[1]:\n        for c in ['a', 'b', 'c']:\n            if c not in [s[0], t[0], t[1]]:\n                return s[0] * n + c * n + t[0] * n\n    elif t[0] == t[1]:\n        for c in ['a', 'b', 'c']:\n            if c not in [t[0], s[0], s[1]]:\n                return s[0] * n + c * n + t[0] * n\n    else:\n        for c in ['a', 'b', 'c']:\n            if c not in [s[0], s[1], t[0], t[1]]:\n                return s[0] * n + c * n + t[0] * n\n    return 'NO'\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    s = input().strip()\n    t = input().strip()\n    print(solve(n, s, t))"
    },
    {
      "finish_reason": "length",
      "index": 2,
      "logprobs": null,
      "text": "\n\ndef solve(n, s, t):\n    if n == 1:\n        if s[0] == t[0] and s[1] != t[1]:\n            return \"YES\\n{}{}{}\".format(s[0], t[1], t[1])\n        elif s[0] != t[0] and s[1] == t[1]:\n            return \"YES\\n{}{}{}\".format(t[0], s[0], s[0])\n        elif s[0] == t[1] and s[1] != t[0]:\n            return \"YES\\n{}{}{}\".format(s[1], t[0], t[0])\n        elif s[0] != t[1] and s[1] == t[0]:\n            return \"YES\\n{}{}{}\".format(t[1], s[1], s[1])\n        else:\n            return \"NO\"\n\n    if n == 2:\n        if s[0] == t[0] and s[1] != t[1]:\n            return \"YES\\n{}{}{}{}{}\".format(s[0], t[1], t[1], s[0], t[1])\n        elif s[0] != t[0] and s[1] == t[1]:\n            return \"YES\\n{}{}{}{}{}\".format(t[0], s[0], s[0], t[0], s[0])\n        elif s[0] == t[1] and s[1] != t[0]:\n            return \"YES\\n{}{}{}{}{}\".format(s[1], t[0], t[0], s[1], t[0])\n        elif s[0] != t[1] and s[1] == t[0]:\n            return \"YES\\n{}{}{}{}{}\".format(t[1], s[1], s[1], t[1], s[1])\n        else:\n            return \"NO\"\n\n    if n == 3:\n        if s[0] == t[0] and s[1] != t[1]:\n            return \"YES\\n{}{}{}{}{}{}{}{}{}\".format(s[0], t[1], t[1], s[0], t[1], s[0], t[1], t[1], s[0])\n        elif s[0] != t[0] and s[1] == t[1]:\n            return \"YES\\n{}{}{}{}{}{}{}{}{}\".format(t[0], s[0], s[0], t[0], s[0], t[0], s[0], s[0], t[0])\n        elif s[0] == t[1] and s[1] != t[0]:\n            return \"YES\\n{}{}{}{}{}{}{}{}{}\".format(s[1], t[0], t[0], s[1], t[0], s[1], t[0], t[0], s[1])\n        elif s[0] != t[1] and s[1] == t[0]:\n            return \"YES\\n{}{}{}{}{}{}{}{}{}\".format(t[1], s[1], s[1], t[1], s[1], t[1], s[1], s[1], t[1])\n        else:\n            return \"NO\"\n\n    if n == 4:\n        if s[0] == t[0] and s[1] != t[1]:\n            return \"YES\\n{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}\".format(s[0], t[1], t[1], s[0], t[1], s[0], t[1], t[1], s[0], s[0], t[1], t[1], s[0], t[1], s[0], t[1], t[1], s[0], s[0], t[1])\n        elif s[0] != t[0] and s[1] == t[1]:\n            return \"YES\\n{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}\".format(t[0], s[0], s[0], t[0], s[0], t[0], s[0], s[0], t[0], t[0], s[0], s[0], t[0], s[0], t[0], s[0], s[0], t[0], t[0], s[0])\n        elif s[0] == t[1] and s[1] != t[0]:\n            return \"YES\\n{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}\".format(s[1], t[0], t[0], s[1], t[0], s[1], t[0], t[0], s[1], s[1], t[0], t[0], s[1], t[0], s[1], t[0], t[0], s[1], s[1], t[0])\n        elif s[0] != t[1] and s[1] == t[0]:\n            return \"YES\\n{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}\".format(t[1], s[1], s[1], t[1], s[1], t[1], s[1], s[1], t[1], t[1], s[1], s[1], t[1], s[1], t[1], s[1], s[1], t[1], t[1], s[1])\n        else:\n            return \"NO\"\n\n    if n == 5:\n        if s[0] == t[0] and s[1] != t[1]:\n            return \"YES\\n{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{"
    }
  ],
  "created": 1648692844,
  "id": "cmpl-4rec0VCYfPh8TlbP7pZ0ZA234oy0g",
  "model": "code-davinci:002",
  "object": "text_completion"
}
0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\n# def find_res(n, s, t):\n#     if n == 1:\n#         if s == 'ac' and t == 'ac':\n#             return 'abc'\n#         elif s == 'cb' and t == 'cb':\n#             return 'abc'\n#         elif s == 'ab' and t == 'ab':\n#             return 'abc'\n#         elif s == 'bc' and t == 'bc':\n#             return 'abc'\n#         elif s == 'ac' and t == 'cb':\n#             return 'bac'\n#         elif s == 'ac' and t == 'ab':\n#             return 'cab'\n#         elif s == 'ac' and t == 'bc':\n#             return 'abc'\n#         elif s == 'cb' and t == 'ac':\n#             return 'abc'\n#         elif s == 'cb' and t == 'ab':\n#             return 'bac'\n#         elif s == 'cb' and t == 'bc':\n#             return 'cab'\n#         elif s == 'ab' and t == 'ac':\n#             return 'abc'\n#         elif s == 'ab' and t == 'cb':\n#             return 'abc'\n#         elif s == 'ab' and t == 'bc':\n#             return 'bac'\n#         elif s == 'bc' and t == 'ac':\n#             return 'cab'\n#         elif s == 'bc' and t == 'cb':\n#             return 'abc'\n#         elif s == 'bc' and t == 'ab':\n#             return 'abc'\n#         else:\n#             return 'NO'\n#     else:\n#         if s == 'ac' and t == 'ac':\n#             return 'abc' * n\n#         elif s == 'cb' and t == 'cb':\n#             return 'abc' * n\n#         elif s == 'ab' and t == 'ab':\n#             return 'abc' * n\n#         elif s == 'bc' and t == 'bc':\n#             return 'abc' * n\n#         elif s == 'ac' and t == 'cb':\n#             return 'bac' * n\n#         elif s == 'ac' and t == 'ab':\n#             return 'cab' * n\n#         elif s == 'ac' and t == 'bc':\n#             return 'abc' * n\n#         elif s == 'cb' and t == 'ac':\n#             return 'abc' * n\n#         elif s == 'cb' and t == 'ab':\n#             return 'bac' * n\n#         elif s == 'cb' and t == 'bc':\n#             return 'cab' * n\n#         elif s == 'ab' and t == 'ac':\n#             return 'abc' * n\n#         elif s == 'ab' and t == 'cb':\n#             return 'abc' * n\n#         elif s == 'ab' and t == 'bc':\n#             return 'bac' * n\n#         elif s == 'bc' and t == 'ac':\n#             return 'cab' * n\n#         elif s == 'bc' and t == 'cb':\n#             return 'abc' * n\n#         elif s == 'bc' and t == 'ab':\n#             return 'abc' * n\n#         else:\n#             return 'NO'\n\ndef find_res(n, s, t):\n    if s == 'ac' and t == 'ac':\n        return 'abc' * n\n    elif s == 'cb' and t == 'cb':\n        return 'abc' * n\n    elif s == 'ab' and t == 'ab':\n        return 'abc' * n\n    elif s == 'bc' and t == 'bc':\n        return 'abc' * n\n    elif s == 'ac' and t == 'cb':\n        return 'bac' * n\n    elif s == 'ac' and t == 'ab':\n        return 'cab' * n\n    elif s == 'ac' and t == 'bc':\n        return 'abc' * n\n    elif s == 'cb' and t == 'ac':\n        return 'abc' * n\n    elif s == 'cb' and t == 'ab':\n        return 'bac' * n\n    elif s == 'cb' and t == 'bc':\n        return 'cab' * n\n    elif s == 'ab' and t == 'ac':\n        return 'abc' * n\n    elif s == 'ab' and t == 'cb':\n        return 'abc' * n\n    elif s == 'ab' and t == 'bc':\n        return 'bac' * n\n    elif s == 'bc' and t == 'ac':\n        return 'cab' * n\n    elif s == 'bc' and t == 'cb':\n        return 'abc' * n\n    elif s == 'bc' and t == 'ab':\n        return 'abc' * n\n    else:\n        return 'NO'\n\nif __name__ == \"__main__\":\n    n = int(input())\n    s = input()\n    t = input()\n    res = find_res(n, s, t)\n    print(res)"
}
REASON stop
1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\ndef solve(n, s, t):\n    if s[0] == s[1] and t[0] == t[1]:\n        return 'NO'\n    if s[0] == s[1]:\n        for c in ['a', 'b', 'c']:\n            if c not in [s[0], t[0], t[1]]:\n                return s[0] * n + c * n + t[0] * n\n    elif t[0] == t[1]:\n        for c in ['a', 'b', 'c']:\n            if c not in [t[0], s[0], s[1]]:\n                return s[0] * n + c * n + t[0] * n\n    else:\n        for c in ['a', 'b', 'c']:\n            if c not in [s[0], s[1], t[0], t[1]]:\n                return s[0] * n + c * n + t[0] * n\n    return 'NO'\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    s = input().strip()\n    t = input().strip()\n    print(solve(n, s, t))"
}
REASON stop
2 {
  "finish_reason": "length",
  "index": 2,
  "logprobs": null,
  "text": "\n\ndef solve(n, s, t):\n    if n == 1:\n        if s[0] == t[0] and s[1] != t[1]:\n            return \"YES\\n{}{}{}\".format(s[0], t[1], t[1])\n        elif s[0] != t[0] and s[1] == t[1]:\n            return \"YES\\n{}{}{}\".format(t[0], s[0], s[0])\n        elif s[0] == t[1] and s[1] != t[0]:\n            return \"YES\\n{}{}{}\".format(s[1], t[0], t[0])\n        elif s[0] != t[1] and s[1] == t[0]:\n            return \"YES\\n{}{}{}\".format(t[1], s[1], s[1])\n        else:\n            return \"NO\"\n\n    if n == 2:\n        if s[0] == t[0] and s[1] != t[1]:\n            return \"YES\\n{}{}{}{}{}\".format(s[0], t[1], t[1], s[0], t[1])\n        elif s[0] != t[0] and s[1] == t[1]:\n            return \"YES\\n{}{}{}{}{}\".format(t[0], s[0], s[0], t[0], s[0])\n        elif s[0] == t[1] and s[1] != t[0]:\n            return \"YES\\n{}{}{}{}{}\".format(s[1], t[0], t[0], s[1], t[0])\n        elif s[0] != t[1] and s[1] == t[0]:\n            return \"YES\\n{}{}{}{}{}\".format(t[1], s[1], s[1], t[1], s[1])\n        else:\n            return \"NO\"\n\n    if n == 3:\n        if s[0] == t[0] and s[1] != t[1]:\n            return \"YES\\n{}{}{}{}{}{}{}{}{}\".format(s[0], t[1], t[1], s[0], t[1], s[0], t[1], t[1], s[0])\n        elif s[0] != t[0] and s[1] == t[1]:\n            return \"YES\\n{}{}{}{}{}{}{}{}{}\".format(t[0], s[0], s[0], t[0], s[0], t[0], s[0], s[0], t[0])\n        elif s[0] == t[1] and s[1] != t[0]:\n            return \"YES\\n{}{}{}{}{}{}{}{}{}\".format(s[1], t[0], t[0], s[1], t[0], s[1], t[0], t[0], s[1])\n        elif s[0] != t[1] and s[1] == t[0]:\n            return \"YES\\n{}{}{}{}{}{}{}{}{}\".format(t[1], s[1], s[1], t[1], s[1], t[1], s[1], s[1], t[1])\n        else:\n            return \"NO\"\n\n    if n == 4:\n        if s[0] == t[0] and s[1] != t[1]:\n            return \"YES\\n{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}\".format(s[0], t[1], t[1], s[0], t[1], s[0], t[1], t[1], s[0], s[0], t[1], t[1], s[0], t[1], s[0], t[1], t[1], s[0], s[0], t[1])\n        elif s[0] != t[0] and s[1] == t[1]:\n            return \"YES\\n{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}\".format(t[0], s[0], s[0], t[0], s[0], t[0], s[0], s[0], t[0], t[0], s[0], s[0], t[0], s[0], t[0], s[0], s[0], t[0], t[0], s[0])\n        elif s[0] == t[1] and s[1] != t[0]:\n            return \"YES\\n{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}\".format(s[1], t[0], t[0], s[1], t[0], s[1], t[0], t[0], s[1], s[1], t[0], t[0], s[1], t[0], s[1], t[0], t[0], s[1], s[1], t[0])\n        elif s[0] != t[1] and s[1] == t[0]:\n            return \"YES\\n{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}\".format(t[1], s[1], s[1], t[1], s[1], t[1], s[1], s[1], t[1], t[1], s[1], s[1], t[1], s[1], t[1], s[1], s[1], t[1], t[1], s[1])\n        else:\n            return \"NO\"\n\n    if n == 5:\n        if s[0] == t[0] and s[1] != t[1]:\n            return \"YES\\n{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{"
}
REASON length
