"""
You are given a matrix $a$ of size $n \times m$ consisting of integers.

You can choose no more than $\left\lfloor\frac{m}{2}\right\rfloor$ elements in each row. Your task is to choose these elements in such a way that their sum is divisible by $k$ and this sum is the maximum.

In other words, you can choose no more than a half (rounded down) of elements in each row, you have to find the maximum sum of these elements divisible by $k$.

Note that you can choose zero elements (and the sum of such set is $0$).


-----Input-----

The first line of the input contains three integers $n$, $m$ and $k$ ($1 \le n, m, k \le 70$) — the number of rows in the matrix, the number of columns in the matrix and the value of $k$. The next $n$ lines contain $m$ elements each, where the $j$-th element of the $i$-th row is $a_{i, j}$ ($1 \le a_{i, j} \le 70$).


-----Output-----

Print one integer — the maximum sum divisible by $k$ you can obtain.


-----Examples-----
Input
3 4 3
1 2 3 4
5 2 2 2
7 1 1 4

Output
24

Input
5 5 4
1 2 4 2 1
3 5 1 2 4
1 5 7 1 2
3 8 7 1 2
8 4 7 1 6

Output
56



-----Note-----

In the first example, the optimal answer is $2$ and $4$ in the first row, $5$ and $2$ in the second row and $7$ and $4$ in the third row. The total sum is $2 + 4 + 5 + 2 + 7 + 4 = 24$.
"""
--------------------------
{
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nn, m, k = map(int, input().split())\nmatrix = [list(map(int, input().split())) for _ in range(n)]\n\n# dp[i][j] = max sum of the first j elements of the ith row, divisible by k\ndp = [[0] * m for _ in range(n)]\nfor i in range(n):\n    for j in range(m):\n        if j == 0:\n            dp[i][j] = matrix[i][j]\n        else:\n            dp[i][j] = max(dp[i][j], dp[i][j-1] + matrix[i][j])\n\n# dp2[i][j] = max sum of the first i rows, ending with the jth element of the ith row, divisible by k\ndp2 = [[0] * m for _ in range(n)]\nfor i in range(n):\n    for j in range(m):\n        if i == 0:\n            dp2[i][j] = dp[i][j]\n        else:\n            for k in range(j+1):\n                dp2[i][j] = max(dp2[i][j], dp2[i-1][k] + dp[i][j])\n\nprint(max(dp2[-1]))"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\n\ndef main():\n\tpass\n\n\nif __name__ == '__main__':\n\tmain()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\n\ndef solve(n, m, k, matrix):\n    dp = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n    dp[0] = [0 for _ in range(m + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if j <= (m // 2):\n                dp[i][j] = max(dp[i][j - 1], dp[i - 1][j], dp[i - 1][j - 1] + matrix[i - 1][j - 1])\n            else:\n                dp[i][j] = dp[i][j - 1]\n    return dp[-1][-1]\n\n\nif __name__ == \"__main__\":\n    n, m, k = map(int, input().split())\n    matrix = [list(map(int, input().split())) for _ in range(n)]\n    print(solve(n, m, k, matrix))"
    }
  ],
  "created": 1648691915,
  "id": "cmpl-4reN1gb3z1GI9QwFUG1xTJvJD5h6k",
  "model": "code-davinci:002",
  "object": "text_completion"
}
0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nn, m, k = map(int, input().split())\nmatrix = [list(map(int, input().split())) for _ in range(n)]\n\n# dp[i][j] = max sum of the first j elements of the ith row, divisible by k\ndp = [[0] * m for _ in range(n)]\nfor i in range(n):\n    for j in range(m):\n        if j == 0:\n            dp[i][j] = matrix[i][j]\n        else:\n            dp[i][j] = max(dp[i][j], dp[i][j-1] + matrix[i][j])\n\n# dp2[i][j] = max sum of the first i rows, ending with the jth element of the ith row, divisible by k\ndp2 = [[0] * m for _ in range(n)]\nfor i in range(n):\n    for j in range(m):\n        if i == 0:\n            dp2[i][j] = dp[i][j]\n        else:\n            for k in range(j+1):\n                dp2[i][j] = max(dp2[i][j], dp2[i-1][k] + dp[i][j])\n\nprint(max(dp2[-1]))"
}
REASON stop
1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\n\ndef main():\n\tpass\n\n\nif __name__ == '__main__':\n\tmain()"
}
REASON stop
2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\n\ndef solve(n, m, k, matrix):\n    dp = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n    dp[0] = [0 for _ in range(m + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if j <= (m // 2):\n                dp[i][j] = max(dp[i][j - 1], dp[i - 1][j], dp[i - 1][j - 1] + matrix[i - 1][j - 1])\n            else:\n                dp[i][j] = dp[i][j - 1]\n    return dp[-1][-1]\n\n\nif __name__ == \"__main__\":\n    n, m, k = map(int, input().split())\n    matrix = [list(map(int, input().split())) for _ in range(n)]\n    print(solve(n, m, k, matrix))"
}
REASON stop
