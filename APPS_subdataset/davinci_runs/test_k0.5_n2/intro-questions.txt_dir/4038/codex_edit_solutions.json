["def file():\n    print(\"this is a file\")\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport os\nimport time\nimport logging\nimport argparse\n\nfrom watchdog.observers import Observer\nfrom watchdog.events import FileSystemEventHandler\n\n\nclass MyHandler(FileSystemEventHandler):\n    def __init__(self, path):\n        self.path = path\n        self.logger = logging.getLogger(__name__)\n\n    def on_created(self, event):\n        self.logger.info('created: %s' % event.src_path.replace(self.path, ''))\n\n    def on_deleted(self, event):\n        self.logger.info('deleted: %s' % event.src_path.replace(self.path, ''))\n\n    def on_modified(self, event):\n        self.logger.info('modified: %s' % event.src_path)\n        self.logger.info('modified: %s' % event.dest_path)\n\n    def on_moved(self, event):\n        self.logger.info('moved: %s' % event.src_path.replace(self.path, ''))\n        self.logger.info('moved: %s' % event.dest_path.replace(self.path, ''))\n\n\ndef main():\n    parser = argparse.ArgumentParser(description='Watchdog')\n    parser.add_argument('--path', type=str, default=os.getcwd(),\n                        help='path to watch')\n    parser.add_argument('--log', type=str, default='log.txt',\n                        help='log file')\n    args = parser.parse_args()\n\n    logging.basicConfig(level=logging.INFO,\n                        format='%(asctime)s - %(message)s',\n                        datefmt='%Y-%m-%d %H:%M:%S',\n                        filename=args.log,\n                        filemode='w')\n\n    event_handler = MyHandler(args.path)\n    observer = Observer()\n    observer.schedule(event_handler, args.path, recursive=True)\n    observer.start()\n    try:\n        while True:\n            time.sleep(1)\n    except KeyboardInterrupt:\n        observer.stop()\n    observer.join()\n\n\nif __name__ == '__main__':\n    main()\n", "\nn = int(input())\na = list(map(int, input().split()))\n\ndef palindrome(n, a):\n    if n == 1:\n        return True\n    if n % 2 == 0:\n        if a[0] == a[n*n-1] and a[n-1] == a[n*n-n]:\n            return palindrome(n-2, a[n:-n])\n        return False\n    else:\n        if a[0] == a[n*n-1] == a[n*n//2]:\n            return palindrome(n-2, a[n:-n])\n        return False\n\nif palindrome(n, a):\n    print(\"YES\")\n    for i in range(n):\n        print(*a[i*n:i*n+n])\nelse:\n    print(\"NO\")\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport os\nimport sys\nimport time\nimport json\nimport logging\nimport argparse\n\nfrom watchdog.observers import Observer\nfrom watchdog.events import LoggingEventHandler\nfrom watchdog.events import FileSystemEventHandler\n\n\nclass MyHandler(FileSystemEventHandler):\n    def __init__(self, path):\n        self.path = path\n        self.logger = logging.getLogger(__name__)\n\n    def on_created(self, event):\n        self.logger.info('created: %s' % event.src_path if event.is_directory else event.dest_path)\n\n    def on_deleted(self, event):\n        self.logger.info('deleted: %s' % event.src_path if event.is_directory else event.dest_path)\n\n    def on_modified(self, event):\n        self.logger.info('modified: %s' % event.src_path)\n        self.logger.info('modified: %s' % event.dest_path)\n\n    def on_moved(self, event):\n        self.logger.info('moved: %s' % event.src_path if event.is_directory else event.dest_path)\n\n\ndef main():\n    parser = argparse.ArgumentParser(description='Watchdog')\n    parser.add_argument('--path', type=str, default=os.getcwd(),\n                        help='path to watch')\n    parser.add_argument('--log', type=str, default='log.txt',\n                        help='log file')\n    args = parser.parse_args()\n\n    logging.basicConfig(level=logging.INFO,\n                        format='%(asctime)s - %(message)s',\n                        datefmt='%Y-%m-%d %H:%M:%S',\n                        filename=args.log,\n                        filemode='w')\n\n    event_handler = MyHandler(args.path)\n    observer = Observer()\n    observer.schedule(event_handler, args.path, recursive=True)\n    observer.start()\n    try:\n        while True:\n            time.sleep(1)\n    except KeyboardInterrupt:\n        observer.stop()\n    observer.join()\n\n\nif __name__ == '__main__':\n    main()\n", "\nn = int(input())\na = list(map(int, input().split()))\n\ndef palindrome(n, a):\n    if n == 1:\n        return True\n    if n % 2 == 0:\n        if a[0] == a[n*n-1] == a[n*n//2]:\n            return palindrome(n-2, a[n+1:-n-1])\n        return False\n    else:\n        if a[0] == a[n*n-1]:\n            return palindrome(n-2, a[n+1:-n-1])\n        return False\n\nif palindrome(n, a):\n    print(\"YES\")\n    for i in range(n):\n        print(*a[i*n:i*n+n])\nelse:\n    print(\"NO\")\n", "def file():\n    print(\"this is file\") \n", "\n\nn = int(input())\na = list(map(int, input().split()))\n\ndef palindrome(n, a):\n    if n == 1:\n        return True\n    if n % 2 == 0:\n        if a[0] == a[n*n-1]:\n            return palindrome(n-2, a[n+1:-n-1])\n        return False\n    else:\n        if a[0] == a[n*n-1] == a[n*n//2]:\n            return palindrome(n-2, a[n+1:-n-1])\n        return False\n\nif palindrome(n, a):\n    print(\"YES\")\n    for i in range(n):\n        print(*a[i*n:i*n+n])\nelse:\n    print(\"NO\")\n"]