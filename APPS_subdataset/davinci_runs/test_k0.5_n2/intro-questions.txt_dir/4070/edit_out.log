2022-03-30 21:26:28.892739 num operations 2
2022-03-30 21:26:28.892775 size on input set 1
2022-03-30 21:26:31.592401 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Functions\ndef solution(n):\n    answer = 0\n    while n != 0:\n        if n % 2 == 0:\n            n = n - 1\n            answer += 1\n        n = n // 2\n    return answer\n\n# Main\nn = int(input())\nprint(solution(n))\n"
    },
    {
      "index": 1,
      "text": "\n\n# Functions\ndef solution(n):\n    answer = 0\n    while n != 0:\n        if n % 2 == 0:\n            n = n - 1\n            answer += 1\n        n = n // 2\n    return answer\n\n# Main\nn = int(input())\nprint(solution(n))\n"
    }
  ],
  "created": 1648689989,
  "object": "edit"
}
2022-03-30 21:26:31.592708 fix spelling mistakes 2 ['\n\n# Functions\ndef solution(n):\n    answer = 0\n    while n != 0:\n        if n % 2 == 0:\n            n = n - 1\n            answer += 1\n        n = n // 2\n    return answer\n\n# Main\nn = int(input())\nprint(solution(n))\n', '\n\n# Functions\ndef solution(n):\n    answer = 0\n    while n != 0:\n        if n % 2 == 0:\n            n = n - 1\n            answer += 1\n        n = n // 2\n    return answer\n\n# Main\nn = int(input())\nprint(solution(n))\n']
2022-03-30 21:26:31.592735 size on output set 1
2022-03-30 21:26:31.592741 size on input set 1
2022-03-30 21:26:34.522965 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# Functions\ndef solution(n):\n    answer = 0\n    while n != 0:\n        if n % 2 == 0:\n            n = n - 1\n            answer += 1\n        n = n // 2\n    return answer\n\n# Main\nn = int(input())\nprint(solution(n))\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/env python3\n\n# Functions\ndef solution(n):\n    answer = 0\n    while n > 0:\n        if n % 2 == 0:\n            n = n - 1\n            answer += 1\n        n = n // 2\n    return answer\n\n# Main\nn = int(input())\nprint(solution(n))\n"
    }
  ],
  "created": 1648689991,
  "object": "edit"
}
2022-03-30 21:26:34.523251 fix syntax errors 2 ['\n# Functions\ndef solution(n):\n    answer = 0\n    while n != 0:\n        if n % 2 == 0:\n            n = n - 1\n            answer += 1\n        n = n // 2\n    return answer\n\n# Main\nn = int(input())\nprint(solution(n))\n', '#!/usr/bin/env python3\n\n# Functions\ndef solution(n):\n    answer = 0\n    while n > 0:\n        if n % 2 == 0:\n            n = n - 1\n            answer += 1\n        n = n // 2\n    return answer\n\n# Main\nn = int(input())\nprint(solution(n))\n']
2022-03-30 21:26:34.523278 size on output set 2
2022-03-30 21:26:34.523290 num operations 2
2022-03-30 21:26:34.523295 size on input set 1
2022-03-30 21:26:39.943652 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n\ndef get_odd_divisors_of_n(n):\n    \"\"\"\n    :param n: int\n    :return: set\n    \"\"\"\n    assert 0 <= n <= 2000000000\n    if n == 0:\n        return set()\n    if n == 1:\n        return {1}\n    if n % 2 == 0:\n        return get_odd_divisors_of_n(n // 2)\n    else:\n        return get_odd_divisors_of_n((n - 1) // 2) | {n}\n\n\ndef count_divisors(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    assert 0 <= n <= 2000000000\n    return len(get_odd_divisors_of_n(n))\n\n\ndef main():\n    n = int(input())\n    print(count_divisors(n))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef get_odd_divisors(n):\n    \"\"\"\n    :param n: int\n    :return: set\n    \"\"\"\n    assert 0 <= n <= 2000000000\n    if n == 0:\n        return set()\n    if n == 1:\n        return {1}\n    if n % 2 == 0:\n        return get_odd_divisors(n // 2)\n    else:\n        return get_odd_divisors((n - 1) // 2) | {n}\n\n\ndef count_divisors(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    assert 0 <= n <= 2000000000\n    return len(get_odd_divisors(n))\n\n\ndef main():\n    n = int(input())\n    print(count_divisors(n))\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1648689994,
  "object": "edit"
}
2022-03-30 21:26:39.943764 fix spelling mistakes 2 ['\n\n\ndef get_odd_divisors_of_n(n):\n    """\n    :param n: int\n    :return: set\n    """\n    assert 0 <= n <= 2000000000\n    if n == 0:\n        return set()\n    if n == 1:\n        return {1}\n    if n % 2 == 0:\n        return get_odd_divisors_of_n(n // 2)\n    else:\n        return get_odd_divisors_of_n((n - 1) // 2) | {n}\n\n\ndef count_divisors(n):\n    """\n    :param n: int\n    :return: int\n    """\n    assert 0 <= n <= 2000000000\n    return len(get_odd_divisors_of_n(n))\n\n\ndef main():\n    n = int(input())\n    print(count_divisors(n))\n\n\nif __name__ == \'__main__\':\n    main()\n', '\ndef get_odd_divisors(n):\n    """\n    :param n: int\n    :return: set\n    """\n    assert 0 <= n <= 2000000000\n    if n == 0:\n        return set()\n    if n == 1:\n        return {1}\n    if n % 2 == 0:\n        return get_odd_divisors(n // 2)\n    else:\n        return get_odd_divisors((n - 1) // 2) | {n}\n\n\ndef count_divisors(n):\n    """\n    :param n: int\n    :return: int\n    """\n    assert 0 <= n <= 2000000000\n    return len(get_odd_divisors(n))\n\n\ndef main():\n    n = int(input())\n    print(count_divisors(n))\n\n\nif __name__ == \'__main__\':\n    main()\n']
2022-03-30 21:26:39.943780 size on output set 2
2022-03-30 21:26:39.943784 size on input set 2
2022-03-30 21:26:43.468584 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef get_odd_divisors(n):\n    \"\"\"\n    :param n: int\n    :return: set\n    \"\"\"\n    assert 0 <= n <= 2000000000, 'n is out of range'\n    if n == 0:\n        return set()\n    if n == 1:\n        return {1}\n    if n % 2 == 0:\n        return get_odd_divisors(n // 2)\n    else:\n        return get_odd_divisors((n - 1) // 2) | {n}\n\n\ndef count_divisors(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    assert 0 <= n <= 2000000000, 'n is out of range'\n    return len(get_odd_divisors(n))\n\n\ndef main():\n    n = int(input())\n    print(count_divisors(n))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef get_odd_divisors(n):\n    \"\"\"\n    :param n: int\n    :return: set\n    \"\"\"\n    assert 0 <= n <= 2000000000\n    if n <= 1:\n        return {n}\n    if n % 2 == 0:\n        return get_odd_divisors(n // 2)\n    else:\n        return get_odd_divisors((n - 1) // 2) | {n}\n\n\ndef count_divisors(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    assert 0 <= n <= 2000000000\n    return len(get_odd_divisors(n))\n\n\ndef main():\n    n = int(input())\n    print(count_divisors(n))\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1648690000,
  "object": "edit"
}
2022-03-30 21:26:43.468727 fix syntax errors 2 ['\ndef get_odd_divisors(n):\n    """\n    :param n: int\n    :return: set\n    """\n    assert 0 <= n <= 2000000000, \'n is out of range\'\n    if n == 0:\n        return set()\n    if n == 1:\n        return {1}\n    if n % 2 == 0:\n        return get_odd_divisors(n // 2)\n    else:\n        return get_odd_divisors((n - 1) // 2) | {n}\n\n\ndef count_divisors(n):\n    """\n    :param n: int\n    :return: int\n    """\n    assert 0 <= n <= 2000000000, \'n is out of range\'\n    return len(get_odd_divisors(n))\n\n\ndef main():\n    n = int(input())\n    print(count_divisors(n))\n\n\nif __name__ == \'__main__\':\n    main()\n', '\ndef get_odd_divisors(n):\n    """\n    :param n: int\n    :return: set\n    """\n    assert 0 <= n <= 2000000000\n    if n <= 1:\n        return {n}\n    if n % 2 == 0:\n        return get_odd_divisors(n // 2)\n    else:\n        return get_odd_divisors((n - 1) // 2) | {n}\n\n\ndef count_divisors(n):\n    """\n    :param n: int\n    :return: int\n    """\n    assert 0 <= n <= 2000000000\n    return len(get_odd_divisors(n))\n\n\ndef main():\n    n = int(input())\n    print(count_divisors(n))\n\n\nif __name__ == \'__main__\':\n    main()\n']
2022-03-30 21:26:45.905644 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef get_odd_divisors_of_n(n):\n    \"\"\"\n    :param n: int\n    :return: set\n    \"\"\"\n    assert 0 <= n <= 2000000000\n    if n == 0:\n        return set()\n    if n == 1:\n        return {1}\n    if n % 2 == 0:\n        return get_odd_divisors_of_n(n // 2)\n    else:\n        return get_odd_divisors_of_n((n - 1) // 2) | {n}\n\n\ndef count_divisors(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    assert 0 <= n <= 2000000000\n    return len(get_odd_divisors_of_n(n))\n\n\ndef main():\n    n = int(input())\n    print(count_divisors(n))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef get_odd_divisors_of_n(n):\n    \"\"\"\n    :param n: int\n    :return: set\n    \"\"\"\n    assert 0 <= n <= 2000000000\n    if n == 0:\n        return set()\n    if n == 1:\n        return {1}\n    if n % 2 == 0:\n        return get_odd_divisors_of_n(n // 2)\n    else:\n        return get_odd_divisors_of_n((n - 1) // 2) | {n}\n\n\ndef count_divisors(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    assert 0 <= n <= 2000000000\n    return len(get_odd_divisors_of_n(n))\n\n\ndef main():\n    n = int(input())\n    print(count_divisors(n))\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1648690003,
  "object": "edit"
}
2022-03-30 21:26:45.906258 fix syntax errors 2 ['\ndef get_odd_divisors_of_n(n):\n    """\n    :param n: int\n    :return: set\n    """\n    assert 0 <= n <= 2000000000\n    if n == 0:\n        return set()\n    if n == 1:\n        return {1}\n    if n % 2 == 0:\n        return get_odd_divisors_of_n(n // 2)\n    else:\n        return get_odd_divisors_of_n((n - 1) // 2) | {n}\n\n\ndef count_divisors(n):\n    """\n    :param n: int\n    :return: int\n    """\n    assert 0 <= n <= 2000000000\n    return len(get_odd_divisors_of_n(n))\n\n\ndef main():\n    n = int(input())\n    print(count_divisors(n))\n\n\nif __name__ == \'__main__\':\n    main()\n', '\ndef get_odd_divisors_of_n(n):\n    """\n    :param n: int\n    :return: set\n    """\n    assert 0 <= n <= 2000000000\n    if n == 0:\n        return set()\n    if n == 1:\n        return {1}\n    if n % 2 == 0:\n        return get_odd_divisors_of_n(n // 2)\n    else:\n        return get_odd_divisors_of_n((n - 1) // 2) | {n}\n\n\ndef count_divisors(n):\n    """\n    :param n: int\n    :return: int\n    """\n    assert 0 <= n <= 2000000000\n    return len(get_odd_divisors_of_n(n))\n\n\ndef main():\n    n = int(input())\n    print(count_divisors(n))\n\n\nif __name__ == \'__main__\':\n    main()\n']
2022-03-30 21:26:45.906296 size on output set 3
