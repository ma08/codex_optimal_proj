["n = int(input())\na = []\nfor i in range(n):\n    inp = input().split()\n    a.append((int(inp[0]),int(inp[1])))\n#End of Input Part\n\nfirst = []\nsecond = []\nfor i in range(n):\n    first.append(a[i][0])\n    second.append(a[i][1])\n\n# Sort Them\nfirst.sort(reverse = True)\nsecond.sort()\n\nbestAnswer = 0\nfor i in range(n):\n    l = first[0]\n    r = second[0]\n    if(l==a[i][0]):\n        l = first[1]\n    if(r==a[i][1]):\n        r = second[1]\n    curLength = r-l\n    bestAnswer = max(bestAnswer,curLength)\n\n#Print Answer\nprint(bestAnswer)", "from collections import defaultdict,deque\nimport sys,heapq,bisect,math,itertools,string,queue,datetime\nsys.setrecursionlimit(10**8)\nINF = float('inf')\nmod = 10**9+7\neps = 10**-7\ndef inpl(): return list(map(int, input().split()))\ndef inpl_s(): return list(input().split())\n\nN = int(input())\nLRs = []\nL1 = L2 = 0\nR1 = R2 = INF\n\nfor i in range(N):\n\tL,R = inpl()\n\tif L2 <= L:\n\t\tL1 = L2\n\t\tL2 = L\n\telif L1 < L < L2:\n\t\tL1 = L\n\n\tif R <= R2 :\n\t\tR1 = R2\n\t\tR2 = R\n\telif R2 < R < R1:\n\t\tR1 = R\n\n\tLRs.append([L,R])\n\nans = 0\nfor L,R in LRs:\n\tif L == L2:\n\t\ttmpL = L1\n\telse:\n\t\ttmpL = L2\n\n\tif R == R2:\n\t\ttmpR = R1\n\telse:\n\t\ttmpR = R2\n\n\tans = max(ans,tmpR-tmpL)\n\nprint(ans)\n", "n = int(input())\nl1 = 0\nl2 = -1\nr1 = 0\nr2 = -1\nls = []\nrs = []\nfor i in range(n):\n    l, r = map(int, input().split())\n    ls.append(l)\n    rs.append(r)\n    if i == 0:\n        continue\n    if l > ls[l1] or l == ls[l1] and r <= rs[l1]:\n        l2 = l1\n        l1 = i\n    elif l2 == -1 or l > ls[l2] or l == ls[l2] and r <= ls[l2]:\n        l2 = i\n    if r < rs[r1] or r == rs[r1] and l > ls[r1]:\n        r2 = r1\n        r1 = i\n    elif r2 == -1 or r < rs[r2] or r == rs[r2] and l > ls[r2]:\n        r2 = i\nif l1 == r1:\n    ans = rs[r2] - ls[l2]\nelif ls[l1] - ls[l2] > rs[r2] - rs[r1]:\n    ans = rs[r1] - ls[l2]\nelse:\n    ans = rs[r2] - ls[l1]\nprint(max( ans, 0 ))", "from collections import deque\nfrom sys import stdin\nlines = deque(line.strip() for line in stdin.readlines())\n\ndef nextline():\n    return lines.popleft()\n\ndef types(cast, sep=None):\n    return tuple(cast(x) for x in strs(sep=sep))\n\ndef ints(sep=None):\n    return types(int, sep=sep)\n\ndef strs(sep=None):\n    return tuple(nextline()) if sep == '' else tuple(nextline().split(sep=sep))\n\ndef intersect(s1, s2):\n    if s1[0] >= s2[0] and s1[0] <= s2[1]:\n        return s1[0], min(s1[1], s2[1])\n    if s2[0] >= s1[0] and s2[0] <= s1[1]:\n        return s2[0], min(s1[1], s2[1])\n    return 0, 0\n\ndef get_len(segment):\n    return segment[1] - segment[0]\n\ndef main():\n    # lines will now contain all of the input's lines in a list\n    N = int(nextline())\n    segments = list(ints() for _ in range(N))\n    forwards = [segments[0]]\n    backwards = [segments[-1]]\n    for i in range(1, N):\n        forwards.append(intersect(forwards[-1], segments[i]))\n        backwards.append(intersect(backwards[-1], segments[~i]))\n    backwards = backwards[::-1]\n    maxlen = max(get_len(forwards[-2]), get_len(backwards[1]))\n    for i in range(1, N-1):\n        maxlen = max(maxlen, get_len(intersect(forwards[i - 1], backwards[i + 1])))\n    print(maxlen)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "N=int(input())\n\nA=[None]*N\nfor i in range(N):\n    A[i]=list(map(int,input().split()))\n\nA.sort(key=lambda x:x[1])\nleft=sorted(A)\nright=sorted(A[::-1],key=lambda x:x[1])\n\nX=left[:N-1]\nY=right[1:]\n\naa=min(X,key=lambda x:x[1])[1]-max(X)[0]\nbb=min(Y,key=lambda x:x[1])[1]-max(Y)[0]\n\nprint(max(aa,bb,0))\n\n", "n = int(input())\nl = [0] * n\nr = [0] * n\nfor i in range(n):\n    l[i], r[i] = map(int, input().split())\ngr = [[l[i], r[i]] for i in range(n)]\nm1, m2 = max(l[0], l[1]), min(l[0], l[1])\nfor i in range(2, n):\n    if l[i] > m1:\n        m1, m2, = l[i], m1\n    elif l[i] > m2:\n        m2 = l[i]\nfor i in range(n):\n    if gr[i][0] == m1:\n        gr[i][0] = m2\n    else:\n        gr[i][0] = m1\nm1, m2 = min(r[0], r[1]), max(r[0], r[1])\nfor i in range(2, n):\n    if r[i] < m1:\n        m1, m2, = r[i], m1\n    elif r[i] < m2:\n        m2 = r[i]\nfor i in range(n):\n    if gr[i][1] == m1:\n        gr[i][1] = m2\n    else:\n        gr[i][1] = m1\nmx = 0\nfor i in range(n):\n    mx = max(mx, gr[i][1] - gr[i][0])\nprint(mx)", "\nn = int(input())\n\nsingle_idx = -1\nsegments = []\nfor i in range(n):\n    s, e = list(map(int, input().split()))\n    segments.append((s, e))\n\nsegments.sort(key=lambda x: x[0])\n\nleft = [(0, 1000000000) for _ in range(n)]\nright = [(0, 1000000000) for _ in range(n)]\n\ntop = 1000000000\nbottom = 0\nfor i in range(n):\n    s, e = segments[i]\n    bottom = max(bottom, s)\n    top = min(top, e)\n    left[i] = (bottom, top)\n\ntop = 1000000000\nbottom = 0\nfor i in range(n-1, -1, -1):\n    s, e = segments[i]\n    bottom = max(bottom, s)\n    top = min(top, e)\n    right[i] = (bottom, top)\n\nbest = max(left[-2][1] - left[-2][0], right[1][1] - right[1][0])\nfor i in range(1, n-1):\n    s1, e1 = left[i-1]\n    s2, e2 = right[i+1]\n    s = max(s1, s2)\n    e = min(e1, e2)\n    best = max(best, e - s)\n\nprint(max(0, best))\n\n\n\n", "n=int(input())\ns=[]\ns1=[]\nfor i in range(n):\n    a,b=list(map(int,input().split()))\n    s.append([a,b])\n    s1.append([b,a])\ns.sort()\ns1.sort()\ns2=s.copy()\ns3=s1.copy()\nx=s.pop()\ns1.remove(x[::-1])\ny=s3[0]\ns3.remove(y)\ns2.remove(y[::-1])\nans=s1[0][0]-s[-1][0]\nans1=s3[0][0]-s2[-1][0]\nif ans>0 or ans1>0:\n    print(max(ans,ans1))\nelse:\n    print(0)\n", "n=int(input())\no=[]\nc=[]\nl3=[]\nfor i in range(n):\n    r,s=map(int,input().strip().split())\n    l3.append([r,s])\n    o.append(r)\n    c.append(s)\no.sort()\nc.sort()\ne1=o[-1]\ne2=c[0]\nif (e1<=e2):\n    ans=e2-e1\nelse:\n    ans=0\nfor i in l3:\n    a1=i[0]\n    a2=i[1]\n    if a1==e1:\n        w1=o[-2]\n    else:\n        w1=e1\n    if a2==e2:\n        w2=c[1]\n    else:\n        w2=e2\n    ans=max(w2-w1,ans)\nprint (ans)", "n = int(input())\nline = []\ndp_left = []\ndp_right = []\nfor i in range(n):\n    x, y = map(int, input().split())\n    line.append([x, y])\n    if i == 0:\n        dp_left.append([x, y])\n    else:\n        dp_left.append([max(dp_left[i - 1][0], x), min(dp_left[i - 1][1], y)])\nfor i in range(n - 1, -1, -1):\n    if i == n - 1:\n        dp_right.append(line[i])\n    else:\n        dp_right.append([max(dp_right[n - i - 2][0], line[i][0]), min(dp_right[n - i - 2][1], line[i][1])])\n        \nmax_ans = max(max(0, dp_left[-2][1] - dp_left[-2][0]), max(0, dp_right[-2][1] - dp_right[-2][0]))\nfor i in range(1, n - 1):\n    l = max(dp_left[i - 1][0], dp_right[n - i - 2][0])\n    r = min(dp_left[i - 1][1], dp_right[n - i - 2][1])\n    #print(l, r)\n    #break\n    max_ans = max(max_ans, r - l)\nprint(max_ans)", "n = int(input())\n\nf = []\nb = []\n\nfor x in range(n):\n    ni,nj = list(map(int, input().split()))\n    f.append([ni,nj])\n    b.append([nj,ni])\n\nf.sort()\nb.sort()\n\n\nm1 = f[n-2][0]\n\nm2 = 1000000000\nfor i in range(n-1):\n    m2 = min(m2, f[i][1])\n\nans = m2-m1\n\n\nsecmin = b[1][0]\n\nmaxi = 0\nfor i in range(1,n):\n    maxi = max(maxi, b[i][1])\n\nans2 = secmin - maxi\n\n\np = max(ans, ans2)\n\n\nif p < 0:\n    p = 0\n\nprint(p)\n\n", "n = int(input())\nmax_l1 = 0\nmax_l2 = 0\nmin_r1 = 10000000000\nmin_r2 = 10000000000\nind1 = 0\nind2 = 0\nfor i in range(n):\n    l, r = map(int,input().split())\n    if l >= max_l1:\n        max_l2 = max_l1\n        max_l1 = l\n        ind1 = i\n    elif l >= max_l2:\n        max_l2 = l\n    if r <= min_r1:\n        min_r2 = min_r1\n        min_r1 = r\n        ind2 = i\n    elif r <= min_r2:\n        min_r2 = r\nif ind1 == ind2:\n    print(min_r2-max_l2)\nelse:\n    print(max(min_r2 - max_l1, min_r1 - max_l2, 0))", "from sys import stdin\nn = int(stdin.readline())\na = []\nmax_l = 0\nmin_r = 10000000000\nfor i in range(n):\n    l,r = map(int,stdin.readline().split())\n    a.append((l,r))\n    max_l = max(l,max_l)\n    min_r = min(r, min_r)\nl_ans = 10000000000\nli = 0\nr_ans = 10000000000\nri = 0\nfor i in range(n):\n    if a[i][0] == max_l:\n        if a[i][1]-max_l < l_ans:\n            l_ans = a[i][1]-max_l\n            li = i\n    if a[i][1] == min_r:\n        if min_r-a[i][0] < r_ans:\n            r_ans = min_r-a[i][0]\n            ri = i\nmax_l = 0\nmin_r = 10000000000\nfor i in range(len(a)):\n    if i == li: continue\n    max_l = max(a[i][0],max_l)\n    min_r = min(a[i][1], min_r)\nans=min_r-max_l\nmax_l = 0\nmin_r = 10000000000\nfor i in range(len(a)):\n    if i == ri: continue\n    max_l = max(a[i][0],max_l)\n    min_r = min(a[i][1], min_r)\nans=max(ans,min_r-max_l)\n\nif ans>0:\n    print(ans)\nelse:\n    print('0')", "n = int(input())\nl, r = [], []\na, b = 0, 0\nfor i in range(n):\n    a, b = list(map(int, input().split()))\n    l.append(a)\n    r.append(b)\nminr = 10**10\nmaxl = -1\nl1 = -1\nr1 = -1\nfor i in range(n):\n    if l[i] > maxl:\n        maxl = l[i]\n        l1 = i\n    if r[i] < minr:\n        minr = r[i]\n        r1 = i\nl_1 = l.copy()\nl_2 = l.copy()\nr_1 = r.copy()\nr_2 = r.copy()\nl_1.pop(l1)\nr_1.pop(l1)\nl_2.pop(r1)\nr_2.pop(r1)\nprint(max(0, min(r_1)-max(l_1), min(r_2)-max(l_2)))\n", "n = int(input())\nmin1, min2 = [10 ** 10, 0], [10 ** 10, 0]\nmax1, max2 = [-1, 0], [-1, 0]\na = [0] * n\nfor i in range(n):\n  x = list(map(int, input().split()))\n  a[i] = x\n  if min1[0] >= x[1]:\n    min2 = min1\n    min1 = [x[1], i]\n  elif min2[0] >= x[1]:\n    min2 = [x[1], i]\n  if max1[0] <= x[0]:\n    max2 = max1\n    max1 = [x[0], i]\n  elif max2[0] <= x[0]:\n    max2 = [x[0], i]\n\n\nans = 0\nif min1[1] == max1[1]:\n  ans = max(ans, min2[0] - max2[0])\nelse:\n  ans = max(ans, min2[0] - max1[0], min1[0] - max2[0])\n\nprint(ans)", "# -*- coding: utf-8 -*-\n\n\nfrom sys import stdin, stdout\n\ndef second_largest(numbers):\n    count = 0\n    m1 = m2 = float('-inf')\n    for x in numbers:\n        count += 1\n        if x > m2:\n            if x >= m1:\n                m1, m2 = x, m1\n                x_ind = count\n            else:\n                m2 = x\n    return m2, x_ind if count >= 2 else None\n\ndef second_smallest(numbers):\n    count = 0\n    m1 = m2 = float('inf')\n    for x in numbers:\n        count += 1\n        if x < m2:\n            if x <= m1:\n                m1, m2 = x, m1\n                y_ind = count\n            else:\n                m2 = x\n    return m2, y_ind if count >= 2 else None\n\nn = int(stdin.readline())\n\nx = []\ny = []\n\nfor i in range(n):\n    line = stdin.readline()\n    a = list(map(int,line.split()))\n    x.append(a[0])\n    y.append(a[1])\n    \n\nx_max = max(x)\n\ny_min = min(y)\n\nx_max2, x_ind = second_largest(x)\n\ny_min2, y_ind = second_smallest(y)\n\nif x_ind == y_ind:\n    print(max(y_min2 - x_max2, 0))\nelse:   \n    print(max((y_min2 - x_max),(y_min - x_max2),0))", "n = int(input())\nmax1 = -1\nmax2 = -1\nmin1 = 10**9 + 1\nmin2 = 10**9 + 1\nfor i in range(n):\n    l, r = list(map(int, input().split()))\n    if l > max1:\n        max2 = max1\n        max1 = l\n        i_max1 = i\n    else:\n        if l > max2:\n            max2 = l\n            i_max2 = i\n    if r < min1:\n        min2 = min1\n        min1 = r\n        i_min1 = i\n    else:\n        if r < min2:\n            min2 = r\n            i_min2 = i\nif i_max1 == i_min1:\n    print(min2 - max2)\nelse:\n    print(max(min2 - max1, min1 - max2, 0))\n", "n = int(input())\nsegs = []\n\nfor i in range(n):\n    segs.append(tuple(map(int, input().split())))\n\ntop3 = [ (0, 10**10), (0, 10**10), (0, 10**10) ]\nevery = (0, 10**10)\n\n\ndef inter(one, two):\n    l1, r1 = one\n    l2, r2 = two\n    return max(l1,l2), min(r1,r2)\n\nfor i in segs:\n    tp1 = inter(i, top3[0])\n    tp2 = inter(i, top3[1])\n    tp3 = inter(i, top3[2])\n    tp4 = every\n    every = inter(i, every)\n    ntop3 = sorted([tp1, tp2, tp3, tp4], reverse=True, key=lambda x:x[1]-x[0])\n    top3 = ntop3[:3]\n\nres = sorted(top3, key=lambda x:x[1]-x[0])[-1]\nprint(max(res[1]-res[0], 0))\n\n", "n = int(input())\na = []\nb = []\n\nfor q in range(n):\n    x, y = map(int, input().split())\n    a.append(x)\n    b.append(y)\n\nc = a[:]\nd = b[:]\ncc=a[:]\ndd=b[:]\nc.sort()\nd.sort()\ne=[]\nf=[]\nfor k in range(1,n):\n    e.append(d[k])\n\nind=b.index(d[0])\ndel cc[ind]\n\nfor k in range(n-1):\n    f.append(cc[k])\nf.sort()\n\ni1=e[0]-f[-1]\n\ng=[]\nh=[]\n\nfor k in range(n-1):\n    g.append(c[k])\n\n\nind2=a.index(c[-1])\ndel dd[ind2]\n\nfor k in range(n-1):\n    h.append(dd[k])\nh.sort()\n\ni2=h[0]-g[-1]\n\nww=max(i1,i2)\nif ww<0:\n    print(0)\nelse:\n    print(ww)", "import sys\nn=int(input())\nl1=-1\nl2=-1\nr1=10000000000\nr2=10000000000\nl1i=set()\nl2i=set()\nr1i=set()\nr2i=set()\notv=0\nfor i in range(n):\n    x,y=map(int,sys.stdin.readline().split())\n    if x==l1:\n        l1i.add(i)\n    elif x>l1 and x<l2:\n        l1=x\n        l1i={i}\n    elif x==l2:\n        l2i.add(i)\n    elif x>l2:\n        l1=l2\n        l2=x\n        l1i=l2i\n        l2i={i}\n    if y==r2:\n        r2i.add(i)\n    elif y>r1 and y<r2:\n        r2=y\n        r2i={i}\n    elif y==r1:\n        r1i.add(i)\n    elif y<r1:\n        r2=r1\n        r1=y\n        r2i=r1i\n        r1i={i}\na=[l2]*len(l2i)\nb=[l1]*len(l1i)\na.extend(b)\nb=[r1]*len(r1i)\nc=[r2]*len(r2i)\nb.extend(c)\nif len(l2i & r1i)>0:\n    if b[1]-a[1]>0:\n        print(b[1]-a[1])\n    else:\n        print(0)\nelse:\n    if max(b[0]-a[1],b[1]-a[0])>0:\n        print(max(b[0]-a[1],b[1]-a[0]))\n    else:\n        print(0)        ", "n = int(input())\nl = [0] * n\nr = [0] * n\nfor i in range(n):\n    l[i], r[i] = map(int, input().split())\none = l.index(max(l))\ntwo = r.index(min(r))\nif one == 0:\n    f = min(r[1:]) - max(l[1:])\nelif one == n - 1:\n    f = min(r[:n - 1]) - max(l[:n - 1])\nelse:\n    f = min(min(r[:one]), min(r[one + 1:])) - max(max(l[:one]), max(l[one + 1:]))\nif two == 0:\n    s = min(r[1:]) - max(l[1:])\nelif two == n - 1:\n    s = min(r[:n - 1]) - max(l[:n - 1])\nelse:\n    s = min(min(r[:two]), min(r[two + 1:])) - max(max(l[:two]), max(l[two + 1:]))\nprint(max(max(f, s), 0))", "n = int(input())\na = [list(map(int, input().split())) + [i] for i in range(n)]\nb = a.copy()\nmax_L_1, max_L_2, min_R_1, min_R_2 = 0, 0, 0, 0\n\nb.sort(reverse=True)\nmax_L_1, max_L_2 = b[0][2], b[1][2]\nb.sort(key=lambda x: x[1])\nmin_R_1, min_R_2 = b[0][2], b[1][2]\n\nmax_l = 0\nfor i in range(n):\n    left = a[max_L_1][0] if i != max_L_1 else a[max_L_2][0]\n    right = a[min_R_1][1] if i != min_R_1 else a[min_R_2][1]\n    max_l = max(right - left, max_l)\n\nprint(max_l)\n", "from collections import Counter\n\nz=int(input())\nx1_pos=[]\nx2_pos=[]\nch=0\nwhile ch<z:\n    x,xx=list(map(int,input().split()))\n    x1_pos.append(x)\n    x2_pos.append(xx)\n    ch+=1\nn1=max(x1_pos)\nn2=min(x2_pos)\nif n1<=n2:\n    first=n2-n1\n    c1=Counter(x1_pos)\n    c2=Counter(x2_pos)\n    if c1[n1] ==1:\n        index_max=x1_pos.index(n1)\n        savex1=x1_pos[index_max]\n        savex2=x2_pos[index_max]\n        x1_pos[index_max]=min(x1_pos)\n        x2_pos[index_max]=max(x2_pos)\n        different=min(x2_pos)-max(x1_pos)\n        x1_pos[index_max]=savex1\n        x2_pos[index_max]=savex2\n        if different>first:\n            first=different\n    if c2[n2] == 1:\n        index_min=x2_pos.index(n2)\n        savex2=x2_pos[index_min]\n        savex1=x1_pos[index_min]\n        x2_pos[index_min]=max(x2_pos)\n        x1_pos[index_min]=min(x1_pos)\n        different=min(x2_pos)-max(x1_pos)\n        x2_pos[index_min]=savex2\n        x1_pos[index_min]=savex1\n        if different>first:\n            first=different\n    print(first)\nelse:\n    first=0\n    c1 = Counter(x1_pos)\n    c2 = Counter(x2_pos)\n    if c1[n1] == 1:\n        index_max = x1_pos.index(n1)\n        savex1 = x1_pos[index_max]\n        savex2 = x2_pos[index_max]\n        x1_pos[index_max] = min(x1_pos)\n        x2_pos[index_max] = max(x2_pos)\n        different = min(x2_pos) - max(x1_pos)\n        x1_pos[index_max] = savex1\n        x2_pos[index_max] = savex2\n        if different > first:\n            first = different\n    if c2[n2] == 1:\n        index_min = x2_pos.index(n2)\n        savex2 = x2_pos[index_min]\n        savex1 = x1_pos[index_min]\n        x2_pos[index_min] = max(x2_pos)\n        x1_pos[index_min] = min(x1_pos)\n        different = min(x2_pos) - max(x1_pos)\n        x2_pos[index_min] = savex2\n        x1_pos[index_min] = savex1\n        if different > first:\n            first = different\n    print(first)\n", "n = int(input())\ns = [list(map(int, input().split())) for i in range(n)]\n#print(s)\na, b = 0, 100000000000000\nfor i in s:\n    a = max(a, i[0])\n    b = min(b, i[1])\nans = 1000000000000\ni2, i3 = -1, -1\nlen1 = 1000000000000000\nlen2 = 1000000000000000\n#print(s)\nfor i in range(n):\n    if s[i][0] == a:\n        if len1 > s[i][1] - s[i][0]:\n            len1 = s[i][1] - s[i][0]\n            i2 = i\n    if s[i][1] == b:\n        if len2 > s[i][1] - s[i][0]:\n            len2 = s[i][1] - s[i][0]\n            i3 = i\nans1, ans2 = -1, -1\n#print(s)\na, b = -1, 1000000000000000\nfor k in range(n):\n    if k == i2:\n        continue\n    i = s[k]\n    a = max(a, i[0])\n    b = min(b, i[1])\nans1 = b - a\na, b = -1, 12000000000000\n#print(s)\nfor k in range(n):\n    if k == i3:\n        continue\n    i = s[k]\n    a = max(a, i[0])\n    b = min(b, i[1])\nans2 = b - a\n#print(ans1, i2)\n#print(ans2, i3)\nprint(max(0, ans1, ans2))\n"]