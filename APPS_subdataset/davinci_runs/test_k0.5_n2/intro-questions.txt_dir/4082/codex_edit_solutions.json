["n = int(input())\na = list(map(int, input().split()))\n\ndef solve(n, a):\n    l = 0\n    r = 0\n    max_len = 0\n    while r < n-1:\n        if a[r+1] > a[r]:\n            r += 1\n        else:\n            max_len = max(max_len, r-l+1)\n            l = r\n            r += 1\n    max_len = max(max_len, r-l+1)\n    return max_len\n\nprint(solve(n, a))\n", "\n\n# SOLUTION\n\nn = int(input())\na = list(map(int, input().split()))\n\n# the maximum length of the decreasing subarray\nmax_length = 1\n# the length of the decreasing subarray\nlength = 1\n\n# iterate through the array\nfor i in range(1, n):\n    # if the current element is greater than\n    # the previous element, then increase\n    # the length of the decreasing subarray\n    if a[i] > a[i - 1]:\n        length += 1\n    else:\n        # if the current element is not greater than\n        # the previous element, then update the maximum length\n        # of the decreasing subarray\n        max_length = max(max_length, length)\n        # reset the length of the decreasing subarray\n        length = 1\n\n# update the maximum length of the decreasing subarray\nmax_length = max(max_length, length)\n\n# print the maximum length of the decreasing subarray\nprint(max_length)\n", "\n\n# SOLUTION\n\nn = int(input())\na = list(map(int, input().split()))\n\n# the maximum length of the decreasing subarray\nmax_length = 1\n# the length of the decreasing subarray\nlength = 1\n\n# iterate through the array\nfor i in range(1, n):\n    # if the current element is greater than\n    # the previous element, then increase\n    # the length of the decreasing subarray\n    if a[i] > a[i - 1]:\n        length += 1\n    else:\n        # if the current element is not greater than\n        # the previous element, then update the maximum\n        # length of the decreasing subarray\n        max_length = max(max_length, length)\n        # reset the length of the decreasing subarray\n        length = 1\n\n# update the maximum length of the decreasing subarray\nmax_length = max(max_length, length)\n\n# print the maximum length of the decreasing subarray\nprint(max_length)\n", "\nn = int(input())\na = list(map(int, input().split()))\n\ndef solve(n, a):\n    left = 0\n    right = 0\n    max_len = 0\n    while right < n-1:\n        if a[right+1] > a[right]:\n            right += 1\n        else:\n            max_len = max(max_len, right-left+1)\n            left = right\n            right += 1\n    max_len = max(max_len, right-left+1)\n    return max_len\n\nprint(solve(n, a))\n", "n = int(input())\na = list(map(int, input().split()))\n\n\ndef solve(n, a, max_len):\n    l = 0\n    r = 0\n    while r < n - 1:\n        if a[r + 1] > a[r]:\n            r += 1\n        else:\n            max_len = max(max_len, r - l + 1)\n            l = r\n            r += 1\n    max_len = max(max_len, r - l + 1)\n    return max_len\n\n\nprint(solve(n, a, 0))\n"]