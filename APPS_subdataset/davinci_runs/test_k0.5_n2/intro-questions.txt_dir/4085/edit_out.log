2022-03-30 21:32:35.344873 num operations 2
2022-03-30 21:32:35.344911 size on input set 1
2022-03-30 21:32:39.924349 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nimport math\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    divisors = list(map(int, input().split()))\n\n    divisors.sort()\n\n    num_divisors = len(divisors)\n    root = math.floor(math.sqrt(divisors[-1]))\n\n    if root * root == divisors[-1]:\n        root -= 1\n\n    if num_divisors == 1:\n        if divisors[0] == 2:\n            print(4)\n        else:\n            print(divisors[0] * 2)\n    elif num_divisors == 2:\n        if divisors[0] == 2:\n            print(divisors[1] * 2)\n        else:\n            print(divisors[0] * divisors[1])\n    else:\n        if divisors[0] == 2:\n            if divisors[1] == 4:\n                print(divisors[-1] * divisors[-2])\n            else:\n                print(divisors[-1] * 2)\n        else:\n            print(divisors[-1] * divisors[-2])\n"
    },
    {
      "index": 1,
      "text": "\nimport math\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    divisors = list(map(int, input().split()))\n\n    divisors.sort()\n\n    # print(divisors)\n\n    num_divisors = len(divisors)\n    root = math.floor(math.sqrt(divisors[-1]))\n\n    # print(root)\n\n    if root * root == divisors[-1]:\n        root -= 1\n\n    # print(root)\n\n    if num_divisors == 1:\n        if divisors[0] == 2:\n            print(4)\n        else:\n            print(divisors[0] * 2)\n    elif num_divisors == 2:\n        if divisors[0] == 2:\n            print(divisors[1] * 2)\n        else:\n            print(divisors[0] * divisors[1])\n    else:\n        if divisors[0] == 2:\n            if divisors[1] == 4:\n                print(divisors[-1] * divisors[-2])\n            else:\n                print(divisors[-1] * 2)\n        else:\n            print(divisors[-1] * divisors[-2])\n"
    }
  ],
  "created": 1648690355,
  "object": "edit"
}
2022-03-30 21:32:39.924529 fix spelling mistakes 2 ['\nimport math\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    divisors = list(map(int, input().split()))\n\n    divisors.sort()\n\n    num_divisors = len(divisors)\n    root = math.floor(math.sqrt(divisors[-1]))\n\n    if root * root == divisors[-1]:\n        root -= 1\n\n    if num_divisors == 1:\n        if divisors[0] == 2:\n            print(4)\n        else:\n            print(divisors[0] * 2)\n    elif num_divisors == 2:\n        if divisors[0] == 2:\n            print(divisors[1] * 2)\n        else:\n            print(divisors[0] * divisors[1])\n    else:\n        if divisors[0] == 2:\n            if divisors[1] == 4:\n                print(divisors[-1] * divisors[-2])\n            else:\n                print(divisors[-1] * 2)\n        else:\n            print(divisors[-1] * divisors[-2])\n', '\nimport math\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    divisors = list(map(int, input().split()))\n\n    divisors.sort()\n\n    # print(divisors)\n\n    num_divisors = len(divisors)\n    root = math.floor(math.sqrt(divisors[-1]))\n\n    # print(root)\n\n    if root * root == divisors[-1]:\n        root -= 1\n\n    # print(root)\n\n    if num_divisors == 1:\n        if divisors[0] == 2:\n            print(4)\n        else:\n            print(divisors[0] * 2)\n    elif num_divisors == 2:\n        if divisors[0] == 2:\n            print(divisors[1] * 2)\n        else:\n            print(divisors[0] * divisors[1])\n    else:\n        if divisors[0] == 2:\n            if divisors[1] == 4:\n                print(divisors[-1] * divisors[-2])\n            else:\n                print(divisors[-1] * 2)\n        else:\n            print(divisors[-1] * divisors[-2])\n']
2022-03-30 21:32:39.924553 size on output set 2
2022-03-30 21:32:39.924558 size on input set 2
2022-03-30 21:32:43.575757 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import math\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    divisors = list(map(int, input().split()))\n\n    divisors.sort()\n\n    num_divisors = len(divisors)\n    root = math.floor(math.sqrt(divisors[-1]))\n\n    if root * root == divisors[-1]:\n        root -= 1\n\n    if num_divisors == 1:\n        if divisors[0] == 2:\n            print(4)\n        else:\n            print(divisors[0] * 2)\n    elif num_divisors == 2:\n        if divisors[0] == 2:\n            print(divisors[1] * 2)\n        else:\n            print(divisors[0] * divisors[1])\n    else:\n        if divisors[0] == 2:\n            if divisors[1] == 4:\n                print(divisors[-1] * divisors[-2])\n            else:\n                print(divisors[-1] * 2)\n        else:\n            print(divisors[-1] * divisors[-2])\n"
    },
    {
      "index": 1,
      "text": "import math\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    divisors = list(map(int, input().split()))\n\n    divisors.sort()\n\n    num_divisors = len(divisors)\n    root = math.floor(math.sqrt(divisors[-1]))\n\n    if root * root == divisors[-1]:\n        root -= 1\n\n    if num_divisors == 1:\n        if divisors[0] == 2:\n            print(4)\n        else:\n            print(divisors[0] * 2)\n    elif num_divisors == 2:\n        if divisors[0] == 2:\n            print(divisors[1] * 2)\n        else:\n            print(divisors[0] * divisors[1])\n    else:\n        if divisors[0] == 2:\n            if divisors[1] == 4:\n                print(divisors[-1] * divisors[-2])\n            else:\n                print(divisors[-1] * 2)\n        else:\n            print(divisors[-1] * divisors[-2])\n"
    }
  ],
  "created": 1648690360,
  "object": "edit"
}
2022-03-30 21:32:43.575858 fix syntax errors 2 ['import math\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    divisors = list(map(int, input().split()))\n\n    divisors.sort()\n\n    num_divisors = len(divisors)\n    root = math.floor(math.sqrt(divisors[-1]))\n\n    if root * root == divisors[-1]:\n        root -= 1\n\n    if num_divisors == 1:\n        if divisors[0] == 2:\n            print(4)\n        else:\n            print(divisors[0] * 2)\n    elif num_divisors == 2:\n        if divisors[0] == 2:\n            print(divisors[1] * 2)\n        else:\n            print(divisors[0] * divisors[1])\n    else:\n        if divisors[0] == 2:\n            if divisors[1] == 4:\n                print(divisors[-1] * divisors[-2])\n            else:\n                print(divisors[-1] * 2)\n        else:\n            print(divisors[-1] * divisors[-2])\n', 'import math\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    divisors = list(map(int, input().split()))\n\n    divisors.sort()\n\n    num_divisors = len(divisors)\n    root = math.floor(math.sqrt(divisors[-1]))\n\n    if root * root == divisors[-1]:\n        root -= 1\n\n    if num_divisors == 1:\n        if divisors[0] == 2:\n            print(4)\n        else:\n            print(divisors[0] * 2)\n    elif num_divisors == 2:\n        if divisors[0] == 2:\n            print(divisors[1] * 2)\n        else:\n            print(divisors[0] * divisors[1])\n    else:\n        if divisors[0] == 2:\n            if divisors[1] == 4:\n                print(divisors[-1] * divisors[-2])\n            else:\n                print(divisors[-1] * 2)\n        else:\n            print(divisors[-1] * divisors[-2])\n']
2022-03-30 21:32:46.157561 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import math\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    divisors = list(map(int, input().split()))\n\n    divisors.sort()\n\n    num_divisors = len(divisors)\n    root = math.floor(math.sqrt(divisors[-1]))\n\n    if root * root == divisors[-1]:\n        root -= 1\n\n    if num_divisors == 1:\n        if divisors[0] == 2:\n            print(4)\n        else:\n            print(divisors[0] * 2)\n    elif num_divisors == 2:\n        if divisors[0] == 2:\n            print(divisors[1] * 2)\n        else:\n            print(divisors[0] * divisors[1])\n    else:\n        if divisors[0] == 2:\n            if divisors[1] == 4:\n                print(divisors[-1] * divisors[-2])\n            else:\n                print(divisors[-1] * 2)\n        else:\n            print(divisors[-1] * divisors[-2])\n"
    },
    {
      "index": 1,
      "text": "import math\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    divisors = list(map(int, input().split()))\n\n    divisors.sort()\n\n    num_divisors = len(divisors)\n    root = math.floor(math.sqrt(divisors[-1]))\n\n    if root * root == divisors[-1]:\n        root -= 1\n\n    if num_divisors == 1:\n        if divisors[0] == 2:\n            print(4)\n        else:\n            print(divisors[0] * 2)\n    elif num_divisors == 2:\n        if divisors[0] == 2:\n            print(divisors[1] * 2)\n        else:\n            print(divisors[0] * divisors[1])\n    else:\n        if divisors[0] == 2:\n            if divisors[1] == 4:\n                print(divisors[-1] * divisors[-2])\n            else:\n                print(divisors[-1] * 2)\n        else:\n            print(divisors[-1] * divisors[-2])\n"
    }
  ],
  "created": 1648690363,
  "object": "edit"
}
2022-03-30 21:32:46.157909 fix syntax errors 2 ['import math\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    divisors = list(map(int, input().split()))\n\n    divisors.sort()\n\n    num_divisors = len(divisors)\n    root = math.floor(math.sqrt(divisors[-1]))\n\n    if root * root == divisors[-1]:\n        root -= 1\n\n    if num_divisors == 1:\n        if divisors[0] == 2:\n            print(4)\n        else:\n            print(divisors[0] * 2)\n    elif num_divisors == 2:\n        if divisors[0] == 2:\n            print(divisors[1] * 2)\n        else:\n            print(divisors[0] * divisors[1])\n    else:\n        if divisors[0] == 2:\n            if divisors[1] == 4:\n                print(divisors[-1] * divisors[-2])\n            else:\n                print(divisors[-1] * 2)\n        else:\n            print(divisors[-1] * divisors[-2])\n', 'import math\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    divisors = list(map(int, input().split()))\n\n    divisors.sort()\n\n    num_divisors = len(divisors)\n    root = math.floor(math.sqrt(divisors[-1]))\n\n    if root * root == divisors[-1]:\n        root -= 1\n\n    if num_divisors == 1:\n        if divisors[0] == 2:\n            print(4)\n        else:\n            print(divisors[0] * 2)\n    elif num_divisors == 2:\n        if divisors[0] == 2:\n            print(divisors[1] * 2)\n        else:\n            print(divisors[0] * divisors[1])\n    else:\n        if divisors[0] == 2:\n            if divisors[1] == 4:\n                print(divisors[-1] * divisors[-2])\n            else:\n                print(divisors[-1] * 2)\n        else:\n            print(divisors[-1] * divisors[-2])\n']
2022-03-30 21:32:46.157960 size on output set 1
2022-03-30 21:32:46.157973 num operations 2
2022-03-30 21:32:46.157979 size on input set 1
2022-03-30 21:32:51.469038 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef get_primes(n):\n    \"\"\"\n    Gets all primes less than n\n    \"\"\"\n    primes = [2]\n    for i in range(3, n+1, 2):\n        is_prime = True\n        for j in range(3, i, 2):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\ndef get_factors(n, primes):\n    \"\"\"\n    Gets all factors of n\n    \"\"\"\n    factors = []\n    for p in primes:\n        if p * p > n:\n            break\n        while n % p == 0:\n            factors.append(p)\n            n //= p\n    if n > 1:\n        factors.append(n)\n    return factors\n\ndef get_divisors(n, primes):\n    \"\"\"\n    Gets all divisors of n\n    \"\"\"\n    factors = get_factors(n, primes)\n    n_factors = len(factors)\n    divisors = set([1, n])\n    for i in range(1 << n_factors):\n        divisor = 1\n        for j in range(n_factors):\n            if i & 1 << j:\n                divisor *= factors[j]\n        divisors.add(divisor)\n    return divisors\n\ndef get_missing_divisors(divisors, n):\n    \"\"\"\n    Gets all divisors of n that are not in divisors, excluding 1\n    \"\"\"\n    missing = set(divisors) - set(n)\n    missing.remove(1)\n    return missing\n\ndef get_number_from_divisors(divisors):\n    \"\"\"\n    Gets the smallest number that has divisors as its divisors, or -1 if no such number exists\n    \"\"\"\n    primes = get_primes(max(divisors))\n    for d in divisors:\n        missing = get_missing_divisors(get_divisors(d, primes), divisors)\n        if len(missing) == 1:\n            return d * missing.pop()\n    return -1\n    \nt = int(sys.stdin.readline())\nfor _ in range(t):\n    n = int(sys.stdin.readline())\n    divisors = [int(x) for x in sys.stdin.readline().split()]\n    print(get_number_from_divisors(divisors))\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef get_primes(n):\n    \"\"\"\n    Get all primes less than n\n    \"\"\"\n    primes = [2]\n    for i in range(3, n+1, 2):\n        is_prime = True\n        for j in range(3, i, 2):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\ndef get_factors(n, primes):\n    \"\"\"\n    Get all factors of n\n    \"\"\"\n    factors = []\n    for p in primes:\n        if p * p > n:\n            break\n        while n % p == 0:\n            factors.append(p)\n            n //= p\n    if n > 1:\n        factors.append(n)\n    return factors\n\ndef get_divisors(n, primes):\n    \"\"\"\n    Get all divisors of n\n    \"\"\"\n    factors = get_factors(n, primes)\n    n_factors = len(factors)\n    divisors = set([1, n])\n    for i in range(1 << n_factors):\n        divisor = 1\n        for j in range(n_factors):\n            if i & 1 << j:\n                divisor *= factors[j]\n        divisors.add(divisor)\n    return divisors\n\ndef get_missing_divisors(divisors, n):\n    \"\"\"\n    Get all divisors of n that are not in divisors\n    \"\"\"\n    missing = set(divisors) - set(n)\n    missing.remove(1)\n    return missing\n\ndef get_number_from_divisors(divisors):\n    \"\"\"\n    Get the smallest number that has divisors as its divisors\n    \"\"\"\n    primes = get_primes(max(divisors))\n    for d in divisors:\n        missing = get_missing_divisors(get_divisors(d, primes), divisors)\n        if len(missing) == 1:\n            return d * missing.pop()\n    return -1\n    \nt = int(sys.stdin.readline())\nfor _ in range(t):\n    n = int(sys.stdin.readline())\n    divisors = [int(x) for x in sys.stdin.readline().split()]\n    print(get_number_from_divisors(divisors))\n"
    }
  ],
  "created": 1648690366,
  "object": "edit"
}
2022-03-30 21:32:51.469332 fix spelling mistakes 2 ['\n\nimport sys\n\ndef get_primes(n):\n    """\n    Gets all primes less than n\n    """\n    primes = [2]\n    for i in range(3, n+1, 2):\n        is_prime = True\n        for j in range(3, i, 2):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\ndef get_factors(n, primes):\n    """\n    Gets all factors of n\n    """\n    factors = []\n    for p in primes:\n        if p * p > n:\n            break\n        while n % p == 0:\n            factors.append(p)\n            n //= p\n    if n > 1:\n        factors.append(n)\n    return factors\n\ndef get_divisors(n, primes):\n    """\n    Gets all divisors of n\n    """\n    factors = get_factors(n, primes)\n    n_factors = len(factors)\n    divisors = set([1, n])\n    for i in range(1 << n_factors):\n        divisor = 1\n        for j in range(n_factors):\n            if i & 1 << j:\n                divisor *= factors[j]\n        divisors.add(divisor)\n    return divisors\n\ndef get_missing_divisors(divisors, n):\n    """\n    Gets all divisors of n that are not in divisors, excluding 1\n    """\n    missing = set(divisors) - set(n)\n    missing.remove(1)\n    return missing\n\ndef get_number_from_divisors(divisors):\n    """\n    Gets the smallest number that has divisors as its divisors, or -1 if no such number exists\n    """\n    primes = get_primes(max(divisors))\n    for d in divisors:\n        missing = get_missing_divisors(get_divisors(d, primes), divisors)\n        if len(missing) == 1:\n            return d * missing.pop()\n    return -1\n    \nt = int(sys.stdin.readline())\nfor _ in range(t):\n    n = int(sys.stdin.readline())\n    divisors = [int(x) for x in sys.stdin.readline().split()]\n    print(get_number_from_divisors(divisors))\n', '\n\nimport sys\n\ndef get_primes(n):\n    """\n    Get all primes less than n\n    """\n    primes = [2]\n    for i in range(3, n+1, 2):\n        is_prime = True\n        for j in range(3, i, 2):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\ndef get_factors(n, primes):\n    """\n    Get all factors of n\n    """\n    factors = []\n    for p in primes:\n        if p * p > n:\n            break\n        while n % p == 0:\n            factors.append(p)\n            n //= p\n    if n > 1:\n        factors.append(n)\n    return factors\n\ndef get_divisors(n, primes):\n    """\n    Get all divisors of n\n    """\n    factors = get_factors(n, primes)\n    n_factors = len(factors)\n    divisors = set([1, n])\n    for i in range(1 << n_factors):\n        divisor = 1\n        for j in range(n_factors):\n            if i & 1 << j:\n                divisor *= factors[j]\n        divisors.add(divisor)\n    return divisors\n\ndef get_missing_divisors(divisors, n):\n    """\n    Get all divisors of n that are not in divisors\n    """\n    missing = set(divisors) - set(n)\n    missing.remove(1)\n    return missing\n\ndef get_number_from_divisors(divisors):\n    """\n    Get the smallest number that has divisors as its divisors\n    """\n    primes = get_primes(max(divisors))\n    for d in divisors:\n        missing = get_missing_divisors(get_divisors(d, primes), divisors)\n        if len(missing) == 1:\n            return d * missing.pop()\n    return -1\n    \nt = int(sys.stdin.readline())\nfor _ in range(t):\n    n = int(sys.stdin.readline())\n    divisors = [int(x) for x in sys.stdin.readline().split()]\n    print(get_number_from_divisors(divisors))\n']
2022-03-30 21:32:51.469477 size on output set 2
2022-03-30 21:32:51.469491 size on input set 2
2022-03-30 21:32:54.165606 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef get_primes(n):\n    \"\"\"\n    Get all primes less than n\n    \"\"\"\n    primes = [2]\n    for i in range(3, n+1, 2):\n        is_prime = True\n        for j in range(3, i, 2):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\ndef get_factors(n, primes):\n    \"\"\"\n    Get all factors of n\n    \"\"\"\n    factors = []\n    for p in primes:\n        if p * p > n:\n            break\n        while n % p == 0:\n            factors.append(p)\n            n //= p\n    if n > 1:\n        factors.append(n)\n    return factors\n\ndef get_divisors(n, primes):\n    \"\"\"\n    Get all divisors of n\n    \"\"\"\n    factors = get_factors(n, primes)\n    n_factors = len(factors)\n    divisors = set([1, n])\n    for i in range(1 << n_factors):\n        divisor = 1\n        for j in range(n_factors):\n            if i & 1 << j:\n                divisor *= factors[j]\n        divisors.add(divisor)\n    return divisors\n\ndef get_missing_divisors(divisors, n):\n    \"\"\"\n    Get all divisors of n that are not in divisors\n    \"\"\"\n    missing = set(divisors) - set(n)\n    missing.remove(1)\n    return missing\n\ndef get_number_from_divisors(divisors):\n    \"\"\"\n    Get the smallest number that has divisors as its divisors\n    \"\"\"\n    primes = get_primes(max(divisors))\n    for d in divisors:\n        missing = get_missing_divisors(get_divisors(d, primes), divisors)\n        if len(missing) == 1:\n            return d * missing.pop()\n    return -1\n\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    n = int(sys.stdin.readline())\n    divisors = [int(x) for x in sys.stdin.readline().split()]\n    print(get_number_from_divisors(divisors))\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef get_primes(n):\n    \"\"\"\n    Get all primes less than n\n    \"\"\"\n    primes = [2]\n    for i in range(3, n+1, 2):\n        is_prime = True\n        for j in range(3, i, 2):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\ndef get_factors(n, primes):\n    \"\"\"\n    Get all factors of n\n    \"\"\"\n    factors = []\n    for p in primes:\n        if p * p > n:\n            break\n        while n % p == 0:\n            factors.append(p)\n            n //= p\n    if n > 1:\n        factors.append(n)\n    return factors\n\ndef get_divisors(n, primes):\n    \"\"\"\n    Get all divisors of n\n    \"\"\"\n    factors = get_factors(n, primes)\n    n_factors = len(factors)\n    divisors = set([1, n])\n    for i in range(1 << n_factors):\n        divisor = 1\n        for j in range(n_factors):\n            if i & 1 << j:\n                divisor *= factors[j]\n        divisors.add(divisor)\n    return divisors\n\ndef get_missing_divisors(divisors, n):\n    \"\"\"\n    Get all divisors of n that are not in divisors\n    \"\"\"\n    missing = set(divisors) - set(n)\n    missing.remove(1)\n    return missing\n\ndef get_number_from_divisors(divisors):\n    \"\"\"\n    Get the smallest number that has divisors as its divisors\n    \"\"\"\n    primes = get_primes(max(divisors))\n    for d in divisors:\n        missing = get_missing_divisors(get_divisors(d, primes), divisors)\n        if len(missing) == 1:\n            return d * missing.pop()\n    return -1\n\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    n = int(sys.stdin.readline())\n    divisors = [int(x) for x in sys.stdin.readline().split()]\n    print(get_number_from_divisors(divisors))\n"
    }
  ],
  "created": 1648690371,
  "object": "edit"
}
2022-03-30 21:32:54.165987 fix syntax errors 2 ['\nimport sys\n\ndef get_primes(n):\n    """\n    Get all primes less than n\n    """\n    primes = [2]\n    for i in range(3, n+1, 2):\n        is_prime = True\n        for j in range(3, i, 2):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\ndef get_factors(n, primes):\n    """\n    Get all factors of n\n    """\n    factors = []\n    for p in primes:\n        if p * p > n:\n            break\n        while n % p == 0:\n            factors.append(p)\n            n //= p\n    if n > 1:\n        factors.append(n)\n    return factors\n\ndef get_divisors(n, primes):\n    """\n    Get all divisors of n\n    """\n    factors = get_factors(n, primes)\n    n_factors = len(factors)\n    divisors = set([1, n])\n    for i in range(1 << n_factors):\n        divisor = 1\n        for j in range(n_factors):\n            if i & 1 << j:\n                divisor *= factors[j]\n        divisors.add(divisor)\n    return divisors\n\ndef get_missing_divisors(divisors, n):\n    """\n    Get all divisors of n that are not in divisors\n    """\n    missing = set(divisors) - set(n)\n    missing.remove(1)\n    return missing\n\ndef get_number_from_divisors(divisors):\n    """\n    Get the smallest number that has divisors as its divisors\n    """\n    primes = get_primes(max(divisors))\n    for d in divisors:\n        missing = get_missing_divisors(get_divisors(d, primes), divisors)\n        if len(missing) == 1:\n            return d * missing.pop()\n    return -1\n\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    n = int(sys.stdin.readline())\n    divisors = [int(x) for x in sys.stdin.readline().split()]\n    print(get_number_from_divisors(divisors))\n', '\nimport sys\n\ndef get_primes(n):\n    """\n    Get all primes less than n\n    """\n    primes = [2]\n    for i in range(3, n+1, 2):\n        is_prime = True\n        for j in range(3, i, 2):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\ndef get_factors(n, primes):\n    """\n    Get all factors of n\n    """\n    factors = []\n    for p in primes:\n        if p * p > n:\n            break\n        while n % p == 0:\n            factors.append(p)\n            n //= p\n    if n > 1:\n        factors.append(n)\n    return factors\n\ndef get_divisors(n, primes):\n    """\n    Get all divisors of n\n    """\n    factors = get_factors(n, primes)\n    n_factors = len(factors)\n    divisors = set([1, n])\n    for i in range(1 << n_factors):\n        divisor = 1\n        for j in range(n_factors):\n            if i & 1 << j:\n                divisor *= factors[j]\n        divisors.add(divisor)\n    return divisors\n\ndef get_missing_divisors(divisors, n):\n    """\n    Get all divisors of n that are not in divisors\n    """\n    missing = set(divisors) - set(n)\n    missing.remove(1)\n    return missing\n\ndef get_number_from_divisors(divisors):\n    """\n    Get the smallest number that has divisors as its divisors\n    """\n    primes = get_primes(max(divisors))\n    for d in divisors:\n        missing = get_missing_divisors(get_divisors(d, primes), divisors)\n        if len(missing) == 1:\n            return d * missing.pop()\n    return -1\n\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    n = int(sys.stdin.readline())\n    divisors = [int(x) for x in sys.stdin.readline().split()]\n    print(get_number_from_divisors(divisors))\n']
2022-03-30 21:32:57.762781 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef get_primes(n):\n    \"\"\"\n    Gets all primes less than n\n    \"\"\"\n    primes = [2]\n    for i in range(3, n+1, 2):\n        is_prime = True\n        for j in range(3, i, 2):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\ndef get_factors(n, primes):\n    \"\"\"\n    Gets all factors of n\n    \"\"\"\n    factors = []\n    for p in primes:\n        if p * p > n:\n            break\n        while n % p == 0:\n            factors.append(p)\n            n //= p\n    if n > 1:\n        factors.append(n)\n    return factors\n\ndef get_divisors(n, primes):\n    \"\"\"\n    Gets all divisors of n\n    \"\"\"\n    factors = get_factors(n, primes)\n    n_factors = len(factors)\n    divisors = set([1, n])\n    for i in range(1 << n_factors):\n        divisor = 1\n        for j in range(n_factors):\n            if i & 1 << j:\n                divisor *= factors[j]\n        divisors.add(divisor)\n    return divisors\n\ndef get_missing_divisors(divisors, n):\n    \"\"\"\n    Gets all divisors of n that are not in divisors, excluding 1\n    \"\"\"\n    missing = set(divisors) - set(n) # n is a number, not a list\n    missing.remove(1)\n    return missing\n\ndef get_number_from_divisors(divisors):\n    \"\"\"\n    Gets the smallest number that has divisors as its divisors, or -1 if no such number exists\n    \"\"\"\n    primes = get_primes(max(divisors))\n    for d in divisors:\n        missing = get_missing_divisors(get_divisors(d, primes), divisors)\n        if len(missing) == 1:\n            return d * missing.pop()\n    return -1\n\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    n = int(sys.stdin.readline())\n    divisors = [int(x) for x in sys.stdin.readline().split()]\n    print(get_number_from_divisors(divisors))\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef get_primes(n):\n    \"\"\"\n    Gets all primes less than n\n    \"\"\"\n    primes = [2]\n    for i in range(3, n+1, 2):\n        is_prime = True\n        for j in range(3, i, 2):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\ndef get_factors(n, primes):\n    \"\"\"\n    Gets all factors of n\n    \"\"\"\n    factors = []\n    for p in primes:\n        if p * p > n:\n            break\n        while n % p == 0:\n            factors.append(p)\n            n //= p\n    if n > 1:\n        factors.append(n)\n    return factors\n\ndef get_divisors(n, primes):\n    \"\"\"\n    Gets all divisors of n\n    \"\"\"\n    factors = get_factors(n, primes)\n    n_factors = len(factors)\n    divisors = set([1, n])\n    for i in range(1 << n_factors):\n        divisor = 1\n        for j in range(n_factors):\n            if i & 1 << j:\n                divisor *= factors[j]\n        divisors.add(divisor)\n    return divisors\n\ndef get_missing_divisors(divisors, n):\n    \"\"\"\n    Gets all divisors of n that are not in divisors, excluding 1\n    \"\"\"\n    missing = set(divisors) - set(n for n in range(1, n+1))\n    missing.remove(1)\n    return missing\n\ndef get_number_from_divisors(divisors):\n    \"\"\"\n    Gets the smallest number that has divisors as its divisors, or -1 if no such number exists\n    \"\"\"\n    primes = get_primes(max(divisors))\n    for d in divisors:\n        missing = get_missing_divisors(get_divisors(d, primes), divisors)\n        if len(missing) == 1:\n            return d * missing.pop()\n    return -1\n    \nt = int(sys.stdin.readline())\nfor _ in range(t):\n    n = int(sys.stdin.readline())\n    divisors = [int(x) for x in sys.stdin.readline().split()]\n    print(get_number_from_divisors(divisors))\n"
    }
  ],
  "created": 1648690374,
  "object": "edit"
}
2022-03-30 21:32:57.763055 fix syntax errors 2 ['\nimport sys\n\ndef get_primes(n):\n    """\n    Gets all primes less than n\n    """\n    primes = [2]\n    for i in range(3, n+1, 2):\n        is_prime = True\n        for j in range(3, i, 2):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\ndef get_factors(n, primes):\n    """\n    Gets all factors of n\n    """\n    factors = []\n    for p in primes:\n        if p * p > n:\n            break\n        while n % p == 0:\n            factors.append(p)\n            n //= p\n    if n > 1:\n        factors.append(n)\n    return factors\n\ndef get_divisors(n, primes):\n    """\n    Gets all divisors of n\n    """\n    factors = get_factors(n, primes)\n    n_factors = len(factors)\n    divisors = set([1, n])\n    for i in range(1 << n_factors):\n        divisor = 1\n        for j in range(n_factors):\n            if i & 1 << j:\n                divisor *= factors[j]\n        divisors.add(divisor)\n    return divisors\n\ndef get_missing_divisors(divisors, n):\n    """\n    Gets all divisors of n that are not in divisors, excluding 1\n    """\n    missing = set(divisors) - set(n) # n is a number, not a list\n    missing.remove(1)\n    return missing\n\ndef get_number_from_divisors(divisors):\n    """\n    Gets the smallest number that has divisors as its divisors, or -1 if no such number exists\n    """\n    primes = get_primes(max(divisors))\n    for d in divisors:\n        missing = get_missing_divisors(get_divisors(d, primes), divisors)\n        if len(missing) == 1:\n            return d * missing.pop()\n    return -1\n\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    n = int(sys.stdin.readline())\n    divisors = [int(x) for x in sys.stdin.readline().split()]\n    print(get_number_from_divisors(divisors))\n', '\nimport sys\n\ndef get_primes(n):\n    """\n    Gets all primes less than n\n    """\n    primes = [2]\n    for i in range(3, n+1, 2):\n        is_prime = True\n        for j in range(3, i, 2):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\ndef get_factors(n, primes):\n    """\n    Gets all factors of n\n    """\n    factors = []\n    for p in primes:\n        if p * p > n:\n            break\n        while n % p == 0:\n            factors.append(p)\n            n //= p\n    if n > 1:\n        factors.append(n)\n    return factors\n\ndef get_divisors(n, primes):\n    """\n    Gets all divisors of n\n    """\n    factors = get_factors(n, primes)\n    n_factors = len(factors)\n    divisors = set([1, n])\n    for i in range(1 << n_factors):\n        divisor = 1\n        for j in range(n_factors):\n            if i & 1 << j:\n                divisor *= factors[j]\n        divisors.add(divisor)\n    return divisors\n\ndef get_missing_divisors(divisors, n):\n    """\n    Gets all divisors of n that are not in divisors, excluding 1\n    """\n    missing = set(divisors) - set(n for n in range(1, n+1))\n    missing.remove(1)\n    return missing\n\ndef get_number_from_divisors(divisors):\n    """\n    Gets the smallest number that has divisors as its divisors, or -1 if no such number exists\n    """\n    primes = get_primes(max(divisors))\n    for d in divisors:\n        missing = get_missing_divisors(get_divisors(d, primes), divisors)\n        if len(missing) == 1:\n            return d * missing.pop()\n    return -1\n    \nt = int(sys.stdin.readline())\nfor _ in range(t):\n    n = int(sys.stdin.readline())\n    divisors = [int(x) for x in sys.stdin.readline().split()]\n    print(get_number_from_divisors(divisors))\n']
2022-03-30 21:32:57.763177 size on output set 3
