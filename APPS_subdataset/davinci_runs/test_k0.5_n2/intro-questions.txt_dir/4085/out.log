"""
We guessed some integer number $x$. You are given a list of almost all its divisors. Almost all means that there are all divisors except $1$ and $x$ in the list.

Your task is to find the minimum possible integer $x$ that can be the guessed number, or say that the input data is contradictory and it is impossible to find such number.

You have to answer $t$ independent queries.


-----Input-----

The first line of the input contains one integer $t$ ($1 \le t \le 25$) — the number of queries. Then $t$ queries follow.

The first line of the query contains one integer $n$ ($1 \le n \le 300$) — the number of divisors in the list.

The second line of the query contains $n$ integers $d_1, d_2, \dots, d_n$ ($2 \le d_i \le 10^6$), where $d_i$ is the $i$-th divisor of the guessed number. It is guaranteed that all values $d_i$ are distinct.


-----Output-----

For each query print the answer to it.

If the input data in the query is contradictory and it is impossible to find such number $x$ that the given list of divisors is the list of almost all its divisors, print -1. Otherwise print the minimum possible $x$.


-----Example-----
Input
2
8
8 2 12 6 4 24 16 3
1
2

Output
48
4
"""
--------------------------
{
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef get_primes(n):\n    \"\"\"\n    Gets all primes less than n\n    \"\"\"\n    primes = [2]\n    for i in range(3, n+1, 2):\n        is_prime = True\n        for j in range(3, i, 2):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\ndef get_factors(n, primes):\n    \"\"\"\n    Gets all factors of n\n    \"\"\"\n    factors = []\n    for p in primes:\n        if p * p > n:\n            break\n        while n % p == 0:\n            factors.append(p)\n            n //= p\n    if n > 1:\n        factors.append(n)\n    return factors\n\ndef get_divisors(n, primes):\n    \"\"\"\n    Gets all divisors of n\n    \"\"\"\n    factors = get_factors(n, primes)\n    n_factors = len(factors)\n    divisors = set([1, n])\n    for i in range(1 << n_factors):\n        divisor = 1\n        for j in range(n_factors):\n            if i & 1 << j:\n                divisor *= factors[j]\n        divisors.add(divisor)\n    return divisors\n\ndef get_missing_divisors(divisors, n):\n    \"\"\"\n    Gets all divisors of n that are not in divisors\n    \"\"\"\n    missing = set(divisors) - set(n)\n    missing.remove(1)\n    return missing\n\ndef get_number_from_divisors(divisors):\n    \"\"\"\n    Gets the smallest number that has divisors as its divisors\n    \"\"\"\n    primes = get_primes(max(divisors))\n    for d in divisors:\n        missing = get_missing_divisors(get_divisors(d, primes), divisors)\n        if len(missing) == 1:\n            return d * missing.pop()\n    return -1\n    \nt = int(sys.stdin.readline())\nfor _ in range(t):\n    n = int(sys.stdin.readline())\n    divisors = [int(x) for x in sys.stdin.readline().split()]\n    print(get_number_from_divisors(divisors))"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nimport math\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    divisors = list(map(int, input().split()))\n\n    divisors.sort()\n\n    # print(divisors)\n\n    num_divisors = len(divisors)\n    root = math.floor(math.sqrt(divisors[-1]))\n\n    # print(root)\n\n    if root * root == divisors[-1]:\n        root -= 1\n\n    # print(root)\n\n    if num_divisors == 1:\n        if divisors[0] == 2:\n            print(4)\n        else:\n            print(divisors[0] * 2)\n    elif num_divisors == 2:\n        if divisors[0] == 2:\n            print(divisors[1] * 2)\n        else:\n            print(divisors[0] * divisors[1])\n    else:\n        if divisors[0] == 2:\n            if divisors[1] == 4:\n                print(divisors[-1] * divisors[-2])\n            else:\n                print(divisors[-1] * 2)\n        else:\n            print(divisors[-1] * divisors[-2])"
    }
  ],
  "created": 1648684221,
  "id": "cmpl-4rcMvCmLJKt0ktASW3poCjSq0imsV",
  "model": "code-davinci:002",
  "object": "text_completion"
}
0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef get_primes(n):\n    \"\"\"\n    Gets all primes less than n\n    \"\"\"\n    primes = [2]\n    for i in range(3, n+1, 2):\n        is_prime = True\n        for j in range(3, i, 2):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\ndef get_factors(n, primes):\n    \"\"\"\n    Gets all factors of n\n    \"\"\"\n    factors = []\n    for p in primes:\n        if p * p > n:\n            break\n        while n % p == 0:\n            factors.append(p)\n            n //= p\n    if n > 1:\n        factors.append(n)\n    return factors\n\ndef get_divisors(n, primes):\n    \"\"\"\n    Gets all divisors of n\n    \"\"\"\n    factors = get_factors(n, primes)\n    n_factors = len(factors)\n    divisors = set([1, n])\n    for i in range(1 << n_factors):\n        divisor = 1\n        for j in range(n_factors):\n            if i & 1 << j:\n                divisor *= factors[j]\n        divisors.add(divisor)\n    return divisors\n\ndef get_missing_divisors(divisors, n):\n    \"\"\"\n    Gets all divisors of n that are not in divisors\n    \"\"\"\n    missing = set(divisors) - set(n)\n    missing.remove(1)\n    return missing\n\ndef get_number_from_divisors(divisors):\n    \"\"\"\n    Gets the smallest number that has divisors as its divisors\n    \"\"\"\n    primes = get_primes(max(divisors))\n    for d in divisors:\n        missing = get_missing_divisors(get_divisors(d, primes), divisors)\n        if len(missing) == 1:\n            return d * missing.pop()\n    return -1\n    \nt = int(sys.stdin.readline())\nfor _ in range(t):\n    n = int(sys.stdin.readline())\n    divisors = [int(x) for x in sys.stdin.readline().split()]\n    print(get_number_from_divisors(divisors))"
}
REASON stop
1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nimport math\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    divisors = list(map(int, input().split()))\n\n    divisors.sort()\n\n    # print(divisors)\n\n    num_divisors = len(divisors)\n    root = math.floor(math.sqrt(divisors[-1]))\n\n    # print(root)\n\n    if root * root == divisors[-1]:\n        root -= 1\n\n    # print(root)\n\n    if num_divisors == 1:\n        if divisors[0] == 2:\n            print(4)\n        else:\n            print(divisors[0] * 2)\n    elif num_divisors == 2:\n        if divisors[0] == 2:\n            print(divisors[1] * 2)\n        else:\n            print(divisors[0] * divisors[1])\n    else:\n        if divisors[0] == 2:\n            if divisors[1] == 4:\n                print(divisors[-1] * divisors[-2])\n            else:\n                print(divisors[-1] * 2)\n        else:\n            print(divisors[-1] * divisors[-2])"
}
REASON stop
