{
  "finish_reason": "length",
  "index": 0,
  "logprobs": null,
  "text": "\n    l,r = 0,len(arr)-1\n    for i in range(len(arr)):\n        if arr[i]<0:\n            swap(arr,l,i)\n            l+=1 # Time complexity is linear, since 'l' is being increased by just one.\n    swap(arr,l,r)\n    if l+1 != len(arr): # 'l+1' because if two possibilities are there then we need to exclude 'l', so -1.\n        sortPositives(arr) \n    else:\n        sortPositives(arr[:l])\n        sortPositives(arr[l+1:]) \n\nassert sortposneg([-1,-2,3,4,5]) == [-1,-2,3,4,5]\nassert sortposneg([1,-2,3,-1,-4]) == [-1,-2,-3,-4,1]\nassert sortposneg([-1,-2,3,4,-5,6,1]) == [-1,-2,-4,-5,1,3,6]\n\n# Q.5 Given a sorted array of positive integers. Your task is to rearrange the array elements alternatively i.e first element should be max value, second should be min value, third should be second max, fourth should be second min"
} 
{
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n    for i in range(0,n):\n        for j in range(i+1, n):\n            if arr[i]>arr[j]:\n                temp = arr[i]\n                arr[i]= arr[j]\n                arr[j] = temp\n\n    print(\"Sorted array :\",arr)\n\n\nif __name__ == '__main__':\n    n = int(input())\n    arr= list(int(i) for i in input().strip().split(\" \"))\n    sortArray(arr, len(arr))"
} 
{
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\narr = [ -1, -2, -3, 1, 2, 5, 6, -9, 10, 20, 30, -100]\narr1 = [1, 2, 3, -7, -2, 8, -4]\n\ndef segregate_element(arr):\n  pointer_neg = 0\n\n  for i in range(len(arr)):\n    if arr[i] < 0:\n      arr[i], arr[pointer_neg] = arr[pointer_neg], arr[i] \n      pointer_neg = pointer_neg + 1 \n  print(arr)\n\n\nsegregate_element(arr1)"
} 
