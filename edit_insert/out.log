num operations 2
size on input set 1


class Solution:
    def search(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        if not nums:
            return -1
        left, right = 0, len(nums) - 1
        while left <= right:
            mid = (left + right) // 2
            if nums[mid] == target:
                return mid
            if nums[mid] >= nums[left]:
                if nums[left] <= target < nums[mid]:
                    right = mid - 1
                else:
                    left = mid + 1
            else:
                if nums[mid] < target <= nums[right]:
                    left = mid + 1
                else:
                    right = mid - 1
        return -1 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nclass Solution:\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return -1\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            if nums[mid] >= nums[left]:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return -1\n"
    },
    {
      "index": 1,
      "text": "\n\nclass Solution:\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        if not nums:  # check if nums is empty\n            return -1\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            if nums[mid] >= nums[left]:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return -1\n"
    }
  ],
  "created": 1648658802,
  "object": "edit"
}
fix spelling mistakes 2 ['\nclass Solution:\n    def search(self, nums, target):\n        """\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        """\n        if not nums:\n            return -1\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            if nums[mid] >= nums[left]:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return -1\n', '\n\nclass Solution:\n    def search(self, nums, target):\n        """\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        """\n        if not nums:  # check if nums is empty\n            return -1\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            if nums[mid] >= nums[left]:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return -1\n']
size on output set 2
size on input set 2


class Solution:
    def search(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        if not nums:  # check if nums is empty
            return -1
        left, right = 0, len(nums) - 1
        while left <= right:
            mid = (left + right) // 2
            if nums[mid] == target:
                return mid
            if nums[mid] >= nums[left]:
                if nums[left] <= target < nums[mid]:
                    right = mid - 1
                else:
                    left = mid + 1
            else:
                if nums[mid] < target <= nums[right]:
                    left = mid + 1
                else:
                    right = mid - 1
        return -1
 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "class Solution:\n    def searchInsert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return left\n\n\n\nif __name__ == '__main__':\n    s = Solution()\n    nums = [1, 3, 5, 6]\n    target = 7\n    print(s.searchInsert(nums, target))\n"
    },
    {
      "index": 1,
      "text": "\nclass Solution:\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        if not nums:  # check if nums is empty\n            return -1\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            if nums[mid] >= nums[left]:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return -1\n"
    }
  ],
  "created": 1648658803,
  "object": "edit"
}
fix syntax errors 2 ['class Solution:\n    def searchInsert(self, nums, target):\n        """\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        """\n        if not nums:\n            return 0\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return left\n\n\n\nif __name__ == \'__main__\':\n    s = Solution()\n    nums = [1, 3, 5, 6]\n    target = 7\n    print(s.searchInsert(nums, target))\n', '\nclass Solution:\n    def search(self, nums, target):\n        """\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        """\n        if not nums:  # check if nums is empty\n            return -1\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            if nums[mid] >= nums[left]:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return -1\n']

class Solution:
    def search(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        if not nums:
            return -1
        left, right = 0, len(nums) - 1
        while left <= right:
            mid = (left + right) // 2
            if nums[mid] == target:
                return mid
            if nums[mid] >= nums[left]:
                if nums[left] <= target < nums[mid]:
                    right = mid - 1
                else:
                    left = mid + 1
            else:
                if nums[mid] < target <= nums[right]:
                    left = mid + 1
                else:
                    right = mid - 1
        return -1
 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Tue Apr 24 21:13:18 2018\n@author: jiangsiyang\n\"\"\"\nclass Solution:\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return -1\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            if nums[mid] >= nums[left]:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return -1\n"
    },
    {
      "index": 1,
      "text": "class Solution:\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        left, right = 0, len(nums)-1\n        while left <= right:\n            mid = left + (right-left)//2\n            if nums[mid] == target: return mid\n            if nums[mid] < nums[right]:\n                if target > nums[mid] and target <= nums[right]:\n                    left = mid+1\n                else: right = mid-1\n            else:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return -1\n"
    }
  ],
  "created": 1648658811,
  "object": "edit"
}
fix syntax errors 2 ['#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n"""\nCreated on Tue Apr 24 21:13:18 2018\n@author: jiangsiyang\n"""\nclass Solution:\n    def search(self, nums, target):\n        """\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        """\n        if not nums:\n            return -1\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            if nums[mid] >= nums[left]:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return -1\n', 'class Solution:\n    def search(self, nums, target):\n        """\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        """\n        left, right = 0, len(nums)-1\n        while left <= right:\n            mid = left + (right-left)//2\n            if nums[mid] == target: return mid\n            if nums[mid] < nums[right]:\n                if target > nums[mid] and target <= nums[right]:\n                    left = mid+1\n                else: right = mid-1\n            else:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return -1\n']
size on output set 4
num operations 2
size on input set 1


class Solution:
    def search(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        if not nums:
            return -1
        
        left = 0
        right = len(nums) - 1
        
        while left <= right:
            mid = left + (right - left) // 2
            if nums[mid] == target:
                return mid
            
            if nums[mid] >= nums[left]:
                if target >= nums[left] and target < nums[mid]:
                    right = mid - 1
                else:
                    left = mid + 1
            else:
                if target > nums[mid] and target <= nums[right]:
                    left = mid + 1
                else:
                    right = mid - 1
        
        return -1 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nclass Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return -1\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left <= right:\n            mid = left + (right - left) // 2\n            if nums[mid] == target:\n                return mid\n            \n            if nums[mid] >= nums[left]:\n                if target >= nums[left] and target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if target > nums[mid] and target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        \n        return -1\n"
    },
    {
      "index": 1,
      "text": "\nclass Solution:\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return -1\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left <= right:\n            mid = left + (right - left) // 2\n            if nums[mid] == target:\n                return mid\n            \n            if nums[mid] >= nums[left]:\n                if target >= nums[left] and target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if target > nums[mid] and target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        \n        return -1\n"
    }
  ],
  "created": 1648658822,
  "object": "edit"
}
fix spelling mistakes 2 ['\n\nclass Solution(object):\n    def search(self, nums, target):\n        """\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        """\n        if not nums:\n            return -1\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left <= right:\n            mid = left + (right - left) // 2\n            if nums[mid] == target:\n                return mid\n            \n            if nums[mid] >= nums[left]:\n                if target >= nums[left] and target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if target > nums[mid] and target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        \n        return -1\n', '\nclass Solution:\n    def search(self, nums, target):\n        """\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        """\n        if not nums:\n            return -1\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left <= right:\n            mid = left + (right - left) // 2\n            if nums[mid] == target:\n                return mid\n            \n            if nums[mid] >= nums[left]:\n                if target >= nums[left] and target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if target > nums[mid] and target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        \n        return -1\n']
size on output set 2
size on input set 2

class Solution:
    def search(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        if not nums:
            return -1
        
        left = 0
        right = len(nums) - 1
        
        while left <= right:
            mid = left + (right - left) // 2
            if nums[mid] == target:
                return mid
            
            if nums[mid] >= nums[left]:
                if target >= nums[left] and target < nums[mid]:
                    right = mid - 1
                else:
                    left = mid + 1
            else:
                if target > nums[mid] and target <= nums[right]:
                    left = mid + 1
                else:
                    right = mid - 1
        
        return -1
 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "class Solution:\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return -1\n\n        left = 0\n        right = len(nums) - 1\n\n        while left <= right:\n            mid = left + (right - left) // 2\n            if nums[mid] == target:\n                return mid\n            \n            if nums[mid] >= nums[left]:\n                if target >= nums[left] and target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if target > nums[mid] and target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        \n        return -1\n"
    },
    {
      "index": 1,
      "text": "class Solution:\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return -1\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left <= right:\n            mid = left + (right - left) // 2\n            if nums[mid] == target:\n                return mid\n            \n            if nums[mid] >= nums[left]:\n                if target >= nums[left] and target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if target > nums[mid] and target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        \n        return -1\n"
    }
  ],
  "created": 1648658823,
  "object": "edit"
}
fix syntax errors 2 ['class Solution:\n    def search(self, nums, target):\n        """\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        """\n        if not nums:\n            return -1\n\n        left = 0\n        right = len(nums) - 1\n\n        while left <= right:\n            mid = left + (right - left) // 2\n            if nums[mid] == target:\n                return mid\n            \n            if nums[mid] >= nums[left]:\n                if target >= nums[left] and target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if target > nums[mid] and target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        \n        return -1\n', 'class Solution:\n    def search(self, nums, target):\n        """\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        """\n        if not nums:\n            return -1\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left <= right:\n            mid = left + (right - left) // 2\n            if nums[mid] == target:\n                return mid\n            \n            if nums[mid] >= nums[left]:\n                if target >= nums[left] and target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if target > nums[mid] and target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        \n        return -1\n']


class Solution(object):
    def search(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        if not nums:
            return -1
        
        left = 0
        right = len(nums) - 1
        
        while left <= right:
            mid = left + (right - left) // 2
            if nums[mid] == target:
                return mid
            
            if nums[mid] >= nums[left]:
                if target >= nums[left] and target < nums[mid]:
                    right = mid - 1
                else:
                    left = mid + 1
            else:
                if target > nums[mid] and target <= nums[right]:
                    left = mid + 1
                else:
                    right = mid - 1
        
        return -1
 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nclass Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return -1\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left <= right:\n            mid = left + (right - left) // 2\n            if nums[mid] == target:\n                return mid\n            \n            if nums[mid] >= nums[left]:\n                if target >= nums[left] and target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if target > nums[mid] and target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        \n        return -1\n"
    },
    {
      "index": 1,
      "text": "\n\nclass Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        # if not nums:\n        #     return -1\n            \n        # left = 0\n        # right = len(nums) - 1\n            \n        # while left <= right:\n        #     mid = left + (right - left) // 2\n        #     if nums[mid] == target:\n        #         return mid\n                \n        #     if nums[mid] >= nums[left]:\n        #         if target >= nums[left] and target < nums[mid]:\n        #             right = mid - 1\n        #         else:\n        #             left = mid + 1\n        #     else:\n        #         if target > nums[mid] and target <= nums[right]:\n        #             left = mid + 1\n        #         else:\n        #             right = mid - 1\n                \n        # return -1\n        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            if nums[0] == target:\n                return 1\n            else:\n                return 0\n        if len(nums) == 2:\n            if nums[0] == target:\n                return 1\n            elif nums[1] == target:\n                return 1\n                else:\n                return 0\n        mid = len(nums) // 2\n        if nums[mid] == target:\n            return 1\n        elif nums[mid] > target:\n            return self.search(nums[:mid], target)\n        elif nums[mid] < target:\n            return self.search(nums[mid+1:], target)\n"
    }
  ],
  "created": 1648658825,
  "object": "edit"
}
fix syntax errors 2 ['\nclass Solution(object):\n    def search(self, nums, target):\n        """\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        """\n        if not nums:\n            return -1\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left <= right:\n            mid = left + (right - left) // 2\n            if nums[mid] == target:\n                return mid\n            \n            if nums[mid] >= nums[left]:\n                if target >= nums[left] and target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if target > nums[mid] and target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        \n        return -1\n', '\n\nclass Solution(object):\n    def search(self, nums, target):\n        """\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        """\n        # if not nums:\n        #     return -1\n            \n        # left = 0\n        # right = len(nums) - 1\n            \n        # while left <= right:\n        #     mid = left + (right - left) // 2\n        #     if nums[mid] == target:\n        #         return mid\n                \n        #     if nums[mid] >= nums[left]:\n        #         if target >= nums[left] and target < nums[mid]:\n        #             right = mid - 1\n        #         else:\n        #             left = mid + 1\n        #     else:\n        #         if target > nums[mid] and target <= nums[right]:\n        #             left = mid + 1\n        #         else:\n        #             right = mid - 1\n                \n        # return -1\n        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            if nums[0] == target:\n                return 1\n            else:\n                return 0\n        if len(nums) == 2:\n            if nums[0] == target:\n                return 1\n            elif nums[1] == target:\n                return 1\n                else:\n                return 0\n        mid = len(nums) // 2\n        if nums[mid] == target:\n            return 1\n        elif nums[mid] > target:\n            return self.search(nums[:mid], target)\n        elif nums[mid] < target:\n            return self.search(nums[mid+1:], target)\n']
size on output set 4
num operations 2
size on input set 1



class Solution:
    def search(self, nums, target):
        if not nms:
            return -1
        left, right = 0, len(nums) - 1
        while left <= right:
            mid = (left + right) // 2
            if nums[mid == target:
                return mid
            elif nums[mid] >= nums[left]:
                if nums[left] <= target < nums[mid]:
                    right = mid - 1
                else:
                    left = mid + 1
            else:
                if nums[mid] < target <= nums[right]:
                    left = mid + 1
                else:
                    right = mid - 1
        return -1 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n\nclass Solution:\n    def search(self, nums, target):\n        if not nums:\n            return -1\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] >= nums[left]:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return -1\n"
    },
    {
      "index": 1,
      "text": "\n\n\nclass Solution:\n    def search(self, nums, target):\n        if not nums:\n            return -1\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] >= nums[left]:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return -1\n"
    }
  ],
  "created": 1648658835,
  "object": "edit"
}
fix spelling mistakes 2 ['\n\n\nclass Solution:\n    def search(self, nums, target):\n        if not nums:\n            return -1\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] >= nums[left]:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return -1\n', '\n\n\nclass Solution:\n    def search(self, nums, target):\n        if not nums:\n            return -1\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] >= nums[left]:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return -1\n']
size on output set 1
size on input set 1



class Solution:
    def search(self, nums, target):
        if not nums:
            return -1
        left, right = 0, len(nums) - 1
        while left <= right:
            mid = (left + right) // 2
            if nums[mid] == target:
                return mid
            elif nums[mid] >= nums[left]:
                if nums[left] <= target < nums[mid]:
                    right = mid - 1
                else:
                    left = mid + 1
            else:
                if nums[mid] < target <= nums[right]:
                    left = mid + 1
                else:
                    right = mid - 1
        return -1
 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "class Solution:\n    def search(self, nums, target):\n        if not nums:\n            return -1\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] >= nums[left]:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return -1\n"
    },
    {
      "index": 1,
      "text": "\nclass Solution:\n    def search(self, nums, target):\n        if not nums:\n            return -1\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] >= nums[left]:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return -1\n"
    }
  ],
  "created": 1648658836,
  "object": "edit"
}
fix syntax errors 2 ['class Solution:\n    def search(self, nums, target):\n        if not nums:\n            return -1\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] >= nums[left]:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return -1\n', '\nclass Solution:\n    def search(self, nums, target):\n        if not nums:\n            return -1\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] >= nums[left]:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return -1\n']
size on output set 2
num operations 2
size on input set 1



class Solution:
    def search(self, nums, target):
        left, right = 0, len(nums) - 1
        while left <= right:
            mid = (left + right) // 2
            if nums[mid] == target:
                return mid
            # left part is ascending
            if nums[mid] >= nums[left]:
                if target >= nums[left] and target < nums[mid]:
                    right = mid - 1
                else:
                    left = mid + 1
            # right part is ascending
            else:
                if target > nums[mid] and target <= nums[right]:
                    left = mid + 1
                else:
                    right = mid - 1
        return -1


if __name__ == '__main__':
    nums = [4,5,6,7,0,1,2]
    target = 0
    print(Solution().search(nums, target)) fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nclass Solution:\n    def search(self, nums, target):\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            # left part is ascending\n            if nums[mid] >= nums[left]:\n                if target >= nums[left] and target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            # right part is ascending\n            else:\n                if target > nums[mid] and target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return -1\n\n\nif __name__ == '__main__':\n    nums = [4,5,6,7,0,1,2]\n    target = 0\n    print(Solution().search(nums, target))\n"
    },
    {
      "index": 1,
      "text": "\nclass Solution:\n    def search(self, nums, target):\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            # left part is ascending\n            if nums[mid] >= nums[left]:\n                if target >= nums[left] and target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            # right part is ascending\n            else:\n                if target > nums[mid] and target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return -1\n\n\nif __name__ == '__main__':\n    nums = [4,5,6,7,0,1,2]\n    target = 0\n    print(Solution().search(nums, target))\n"
    }
  ],
  "created": 1648658837,
  "object": "edit"
}
fix spelling mistakes 2 ["\nclass Solution:\n    def search(self, nums, target):\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            # left part is ascending\n            if nums[mid] >= nums[left]:\n                if target >= nums[left] and target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            # right part is ascending\n            else:\n                if target > nums[mid] and target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return -1\n\n\nif __name__ == '__main__':\n    nums = [4,5,6,7,0,1,2]\n    target = 0\n    print(Solution().search(nums, target))\n", "\nclass Solution:\n    def search(self, nums, target):\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            # left part is ascending\n            if nums[mid] >= nums[left]:\n                if target >= nums[left] and target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            # right part is ascending\n            else:\n                if target > nums[mid] and target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return -1\n\n\nif __name__ == '__main__':\n    nums = [4,5,6,7,0,1,2]\n    target = 0\n    print(Solution().search(nums, target))\n"]
size on output set 1
size on input set 1

class Solution:
    def search(self, nums, target):
        left, right = 0, len(nums) - 1
        while left <= right:
            mid = (left + right) // 2
            if nums[mid] == target:
                return mid
            # left part is ascending
            if nums[mid] >= nums[left]:
                if target >= nums[left] and target < nums[mid]:
                    right = mid - 1
                else:
                    left = mid + 1
            # right part is ascending
            else:
                if target > nums[mid] and target <= nums[right]:
                    left = mid + 1
                else:
                    right = mid - 1
        return -1


if __name__ == '__main__':
    nums = [4,5,6,7,0,1,2]
    target = 0
    print(Solution().search(nums, target))
 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "class Solution:\n    def search(self, nums, target):\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            # left part is ascending\n            if nums[mid] >= nums[left]:\n                if target >= nums[left] and target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            # right part is ascending\n            else:\n                if target > nums[mid] and target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return -1\n\n\nif __name__ == '__main__':\n    nums = [4,5,6,7,0,1,2]\n    target = 0\n    print(Solution().search(nums, target))\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/env python3\n# -*- coding:utf-8 -*-\n# author: bigfoolliu\nclass Solution:\n    def search(self, nums, target):\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            # left part is ascending\n            if nums[mid] >= nums[left]:\n                if target >= nums[left] and target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            # right part is ascending\n            else:\n                if target > nums[mid] and target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return -1\n\n\nif __name__ == '__main__':\n    nums = [4,5,6,7,0,1,2]\n    target = 0\n    print(Solution().search(nums, target))\n"
    }
  ],
  "created": 1648658837,
  "object": "edit"
}
fix syntax errors 2 ["class Solution:\n    def search(self, nums, target):\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            # left part is ascending\n            if nums[mid] >= nums[left]:\n                if target >= nums[left] and target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            # right part is ascending\n            else:\n                if target > nums[mid] and target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return -1\n\n\nif __name__ == '__main__':\n    nums = [4,5,6,7,0,1,2]\n    target = 0\n    print(Solution().search(nums, target))\n", "#!/usr/bin/env python3\n# -*- coding:utf-8 -*-\n# author: bigfoolliu\nclass Solution:\n    def search(self, nums, target):\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            # left part is ascending\n            if nums[mid] >= nums[left]:\n                if target >= nums[left] and target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            # right part is ascending\n            else:\n                if target > nums[mid] and target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return -1\n\n\nif __name__ == '__main__':\n    nums = [4,5,6,7,0,1,2]\n    target = 0\n    print(Solution().search(nums, target))\n"]
size on output set 2
num operations 2
size on input set 1



class Solution:
    def search(self, nums: List[int], target: int) -> int:
        if not nums:
            return -1

        left, right = 0, len(nums) - 1
        while left <= right:
            mid = (left + right) // 2
            if nums[mid] == target:
                return mid

            if nums[left] <= nums[mid]:
                if nums[left] <= target <= nums[mid]:
                    right = mid - 1
                else:
                    left = mid + 1
            else:
                if nums[mid] <= target <= nums[right]:
                    left = mid + 1
                else:
                    right = mid - 1

        return -1 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nclass Solution:\n    def search(self, nums: List[int], target: int) -> int:\n        if not nums:\n            return -1\n\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n\n            if nums[left] <= nums[mid]:\n                if nums[left] <= target <= nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] <= target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n\n        return -1\n"
    },
    {
      "index": 1,
      "text": "\n# leetcode 33\n\nclass Solution:\n    def search(self, nums: List[int], target: int) -> int:\n        if not nums:\n            return -1\n\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n\n            if nums[left] <= nums[mid]:\n                if nums[left] <= target <= nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] <= target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n\n        return -1\n"
    }
  ],
  "created": 1648658838,
  "object": "edit"
}
fix spelling mistakes 2 ['\nclass Solution:\n    def search(self, nums: List[int], target: int) -> int:\n        if not nums:\n            return -1\n\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n\n            if nums[left] <= nums[mid]:\n                if nums[left] <= target <= nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] <= target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n\n        return -1\n', '\n# leetcode 33\n\nclass Solution:\n    def search(self, nums: List[int], target: int) -> int:\n        if not nums:\n            return -1\n\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n\n            if nums[left] <= nums[mid]:\n                if nums[left] <= target <= nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] <= target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n\n        return -1\n']
size on output set 2
size on input set 2

# leetcode 33

class Solution:
    def search(self, nums: List[int], target: int) -> int:
        if not nums:
            return -1

        left, right = 0, len(nums) - 1
        while left <= right:
            mid = (left + right) // 2
            if nums[mid] == target:
                return mid

            if nums[left] <= nums[mid]:
                if nums[left] <= target <= nums[mid]:
                    right = mid - 1
                else:
                    left = mid + 1
            else:
                if nums[mid] <= target <= nums[right]:
                    left = mid + 1
                else:
                    right = mid - 1

        return -1
 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# leetcode 33 \n\nclass Solution:\n    def search(self, nums: List[int], target: int) -> int:\n        if not nums:\n            return -1\n\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n\n            if nums[left] <= nums[mid]:\n                if nums[left] <= target <= nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] <= target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n\n        return -1\n"
    },
    {
      "index": 1,
      "text": "\n# leetcode 33\n\nclass Solution:\n    def search(self, nums, target):\n        if not nums:\n            return -1\n\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n\n            if nums[left] <= nums[mid]:\n                if nums[left] <= target <= nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] <= target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n\n        return -1\n"
    }
  ],
  "created": 1648658839,
  "object": "edit"
}
fix syntax errors 2 ['\n# leetcode 33 \n\nclass Solution:\n    def search(self, nums: List[int], target: int) -> int:\n        if not nums:\n            return -1\n\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n\n            if nums[left] <= nums[mid]:\n                if nums[left] <= target <= nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] <= target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n\n        return -1\n', '\n# leetcode 33\n\nclass Solution:\n    def search(self, nums, target):\n        if not nums:\n            return -1\n\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n\n            if nums[left] <= nums[mid]:\n                if nums[left] <= target <= nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] <= target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n\n        return -1\n']

class Solution:
    def search(self, nums: List[int], target: int) -> int:
        if not nums:
            return -1

        left, right = 0, len(nums) - 1
        while left <= right:
            mid = (left + right) // 2
            if nums[mid] == target:
                return mid

            if nums[left] <= nums[mid]:
                if nums[left] <= target <= nums[mid]:
                    right = mid - 1
                else:
                    left = mid + 1
            else:
                if nums[mid] <= target <= nums[right]:
                    left = mid + 1
                else:
                    right = mid - 1

        return -1
 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "class Solution:\n    def search(self, nums, target):\n        if not nums:\n            return -1\n\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n\n            if nums[left] <= nums[mid]: # left half is sorted\n                if nums[left] <= target <= nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else: # right half is sorted\n                if nums[mid] <= target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n\n        return -1\n"
    },
    {
      "index": 1,
      "text": "from typing import List\n\nclass Solution:\n    def search(self, nums: List[int], target: int) -> int:\n        if not nums:\n            return -1\n\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n\n            if nums[left] <= nums[mid]:\n                if nums[left] <= target <= nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] <= target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n\n        return -1\n"
    }
  ],
  "created": 1648658840,
  "object": "edit"
}
fix syntax errors 2 ['class Solution:\n    def search(self, nums, target):\n        if not nums:\n            return -1\n\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n\n            if nums[left] <= nums[mid]: # left half is sorted\n                if nums[left] <= target <= nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else: # right half is sorted\n                if nums[mid] <= target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n\n        return -1\n', 'from typing import List\n\nclass Solution:\n    def search(self, nums: List[int], target: int) -> int:\n        if not nums:\n            return -1\n\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n\n            if nums[left] <= nums[mid]:\n                if nums[left] <= target <= nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] <= target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n\n        return -1\n']
size on output set 4
