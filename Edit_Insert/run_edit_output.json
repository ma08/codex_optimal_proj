{"prompt": "\"\"\"\nSuppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.\n\n(i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).\n\nYou are given a target value to search. If found in the array return its index, otherwise return -1.\n\nYou may assume no duplicate exists in the array.\n\nYour algorithm's runtime complexity must be in the order of\u00a0O(log\u00a0n).\n\nExample 1:\n\n\nInput: nums = [4,5,6,7,0,1,2], target = 0\nOutput: 4\n\n\nExample 2:\n\n\nInput: nums = [4,5,6,7,0,1,2], target = 3\nOutput: -1\n\"\"\"", "solutions": ["class Solution:\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        left, right = 0, len(nums)-1\n        while left <= right:\n            mid = left + (right-left)//2\n            if nums[mid] == target: return mid\n            if nums[mid] < nums[right]:\n                if target > nums[mid] and target <= nums[right]:\n                    left = mid+1\n                else: right = mid-1\n            else:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return -1\n", "\n# leetcode 33 \n\nclass Solution:\n    def search(self, nums: List[int], target: int) -> int:\n        if not nums:\n            return -1\n\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n\n            if nums[left] <= nums[mid]:\n                if nums[left] <= target <= nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] <= target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n\n        return -1\n", "class Solution:\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return -1\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left <= right:\n            mid = left + (right - left) // 2\n            if nums[mid] == target:\n                return mid\n            \n            if nums[mid] >= nums[left]:\n                if target >= nums[left] and target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if target > nums[mid] and target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        \n        return -1\n", "class Solution:\n    def search(self, nums, target):\n        if not nums:\n            return -1\n\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n\n            if nums[left] <= nums[mid]: # left half is sorted\n                if nums[left] <= target <= nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else: # right half is sorted\n                if nums[mid] <= target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n\n        return -1\n", "\nclass Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return -1\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left <= right:\n            mid = left + (right - left) // 2\n            if nums[mid] == target:\n                return mid\n            \n            if nums[mid] >= nums[left]:\n                if target >= nums[left] and target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if target > nums[mid] and target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        \n        return -1\n", "#!/usr/bin/env python3\n# -*- coding:utf-8 -*-\n# author: bigfoolliu\nclass Solution:\n    def search(self, nums, target):\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            # left part is ascending\n            if nums[mid] >= nums[left]:\n                if target >= nums[left] and target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            # right part is ascending\n            else:\n                if target > nums[mid] and target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return -1\n\n\nif __name__ == '__main__':\n    nums = [4,5,6,7,0,1,2]\n    target = 0\n    print(Solution().search(nums, target))\n", "\nclass Solution:\n    def search(self, nums, target):\n        if not nums:\n            return -1\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] >= nums[left]:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return -1\n", "from typing import List\n\nclass Solution:\n    def search(self, nums: List[int], target: int) -> int:\n        if not nums:\n            return -1\n\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n\n            if nums[left] <= nums[mid]:\n                if nums[left] <= target <= nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] <= target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n\n        return -1\n", "\n# leetcode 33\n\nclass Solution:\n    def search(self, nums, target):\n        if not nums:\n            return -1\n\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n\n            if nums[left] <= nums[mid]:\n                if nums[left] <= target <= nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] <= target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n\n        return -1\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Tue Apr 24 21:13:18 2018\n@author: jiangsiyang\n\"\"\"\nclass Solution:\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return -1\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            if nums[mid] >= nums[left]:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return -1\n", "\nclass Solution:\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        if not nums:  # check if nums is empty\n            return -1\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            if nums[mid] >= nums[left]:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return -1\n", "class Solution:\n    def searchInsert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return left\n\n\n\nif __name__ == '__main__':\n    s = Solution()\n    nums = [1, 3, 5, 6]\n    target = 7\n    print(s.searchInsert(nums, target))\n", "class Solution:\n    def search(self, nums, target):\n        if not nums:\n            return -1\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] >= nums[left]:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return -1\n", "class Solution:\n    def search(self, nums, target):\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            # left part is ascending\n            if nums[mid] >= nums[left]:\n                if target >= nums[left] and target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            # right part is ascending\n            else:\n                if target > nums[mid] and target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return -1\n\n\nif __name__ == '__main__':\n    nums = [4,5,6,7,0,1,2]\n    target = 0\n    print(Solution().search(nums, target))\n", "class Solution:\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return -1\n\n        left = 0\n        right = len(nums) - 1\n\n        while left <= right:\n            mid = left + (right - left) // 2\n            if nums[mid] == target:\n                return mid\n            \n            if nums[mid] >= nums[left]:\n                if target >= nums[left] and target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if target > nums[mid] and target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        \n        return -1\n", "\n\nclass Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        # if not nums:\n        #     return -1\n            \n        # left = 0\n        # right = len(nums) - 1\n            \n        # while left <= right:\n        #     mid = left + (right - left) // 2\n        #     if nums[mid] == target:\n        #         return mid\n                \n        #     if nums[mid] >= nums[left]:\n        #         if target >= nums[left] and target < nums[mid]:\n        #             right = mid - 1\n        #         else:\n        #             left = mid + 1\n        #     else:\n        #         if target > nums[mid] and target <= nums[right]:\n        #             left = mid + 1\n        #         else:\n        #             right = mid - 1\n                \n        # return -1\n        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            if nums[0] == target:\n                return 1\n            else:\n                return 0\n        if len(nums) == 2:\n            if nums[0] == target:\n                return 1\n            elif nums[1] == target:\n                return 1\n                else:\n                return 0\n        mid = len(nums) // 2\n        if nums[mid] == target:\n            return 1\n        elif nums[mid] > target:\n            return self.search(nums[:mid], target)\n        elif nums[mid] < target:\n            return self.search(nums[mid+1:], target)\n"]}