my first file
choice 0{
  "finish_reason": "length",
  "index": 0,
  "logprobs": null,
  "text": "\n    ''' Example : 1, -4, 5, 2, -2, 4, -8, -1, 3, -7, -6 '''\n    \n    \n    \n    \n    \n    arr = [ele for ele in input().split(' ')]\n    i = 0\n    j = len(arr) - 1\n    \n    while i < j:\n\n        if int(arr[i]) > -1 and int(arr[j]) < 0: #then we can switch\n            arr = switch( i, j, arr)\n            i += 1\n            j -= 1\n        else:\n            if int(arr[i]) < 0:\n                i += 1\n            elif int(arr[j]) > -1:\n                j -=1\n    \n    \n    \n    \n    \n    \n    \n    \n    negative = 0\n    positive = 0\n    neg_key = []\n    pos_key = []\n    for ele in arr:\n        if ele < 0:\n            neg_key += [ele]\n        elif ele > 0:\n            pos_key += [ele]\n    neg_key = ' '.join(neg_key)\n    pos_key = ' '.join(pos_key)\n\n    \n    \n    \n    \n    \n    \n    \n    \n    "
} 
 
choice 1{
  "finish_reason": "length",
  "index": 1,
  "logprobs": null,
  "text": "\ndef segregate_positive_negative(nums):\n    next_negative_idx = 0\n    for i,n in enumerate(nums):\n        if n >= 0:\n            nums[i], nums[next_negative_idx] = nums[next_negative_idx], nums[i]\n            next_negative_idx += 1\n    print(nums)\nsegregate_positive_negative([2, 3, -4, 1, -5])\n\n# __Given an array, write function to move all zeros to end of the array while maintaining order of other elements.__\ndef move_to_end_maintaining_order(nums):\n    idx_of_zero = 0\n    for i in range(len(nums)):\n        if nums[i] != 0:\n            nums[idx_of_zero], nums[i] = nums[i], nums[idx_of_zero]\n            idx_of_zero += 1\n    return nums\nnums = [0,1, 2, 10, 4, -3, 0, 0, 0]\nprint(move_to_end_maintaining_order(nums))\n\n# __How to find the missing Number in an array Arr = ("
} 
 
choice 2{
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n    if len(arr) == 1:\n        return arr\n    part_pos = 0\n    part_neg = len(arr)-1\n    while True:\n        while arr[part_pos] > 0:\n            if part_pos == part_neg:\n                break\n            part_pos += 1\n        print 'part_pos = ',part_pos \n        while arr[part_neg] < 0:            \n            if part_pos == part_neg:\n                break\n            part_neg -= 1\n        print 'part_neg = ',part_neg\n        if part_pos >= part_neg:\n            break\n        (arr[part_pos],arr[part_neg]) = (arr[part_neg], arr[part_pos]) \n    return arr\n\nfrom test_framework import test_utils_generic_main, test_utils\n\nif __name__ == '__main__':\n    test_utils_generic_main.generic_test_main(\"segregate_sorted_array.tsv\",\n                                              sort_approximately_sorted_array)"
} 
 
